<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/error.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defs.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>fatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: f - %s\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>no_space</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: f - out of space\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>open_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: f - cannot open \"%s\"\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>missing_brace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", missing '}'\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unexpected_EOF</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", unexpected end-of-file\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>st_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>st_cptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st_line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>st_line</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>st_line</name></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>st_cptr</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>syntax_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>st_lineno</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>st_line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>st_cptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", syntax error\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>st_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name>st_line</name></expr></argument>, <argument><expr><name>st_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unterminated_comment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ainfo</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", unmatched /*\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_lineno</name></name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_line</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_cptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unterminated_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ainfo</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", unterminated string\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_lineno</name></name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_line</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_cptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unterminated_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ainfo</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", unmatched %%{\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_lineno</name></name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_line</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_cptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unterminated_union</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ainfo</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", unterminated %%union \
declaration\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_lineno</name></name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_line</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_cptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>over_unionized</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>u_cptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", too many %%union \
declarations\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>u_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>illegal_tag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t_lineno</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>t_line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>t_cptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", illegal tag\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>t_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name>t_line</name></expr></argument>, <argument><expr><name>t_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>illegal_character</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c_cptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", illegal character\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>c_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>used_reserved</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: e - line %d of \"%s\", illegal use of reserved symbol \
%s\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tokenized_start</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: e - line %d of \"%s\", the start symbol %s cannot be \
declared to be a token\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>retyped_warning</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", the type of %s has been \
redeclared\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>reprec_warning</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: w - line %d of \"%s\", the precedence of %s has been \
redeclared\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>revalued_warning</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", the value of %s has been \
redeclared\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>terminal_start</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", the start symbol %s is a \
token\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>restarted_warning</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", the start symbol has been \
redeclared\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>no_grammar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", no grammar has been \
specified\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>terminal_lhs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s_lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", a token appears on the lhs \
of a production\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>s_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>prec_redeclared</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", conflicting %%prec \
specifiers\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unterminated_action</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ainfo</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", unterminated action\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_lineno</name></name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_line</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_cptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dollar_warning</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a_lineno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", $%d references beyond the \
end of the current rule\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>a_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dollar_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a_lineno</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a_line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a_cptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", illegal $-name\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>a_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name>a_line</name></expr></argument>, <argument><expr><name>a_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>untyped_lhs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", $$ is untyped\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>untyped_rhs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", $%d (%s) is untyped\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unknown_rhs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", $%d is untyped\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>default_action_warning</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: w - line %d of \"%s\", the default action for %s assigns an \
undefined value to $$\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>undefined_goal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - the start symbol %s is undefined\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>undefined_symbol_warning</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - the symbol %s is undefined\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>unsupported_flag_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>details</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - %s flag unsupported, %s\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>details</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>at_warning</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a_lineno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", @%d references beyond the \
end of the current rule\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>a_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>at_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a_lineno</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a_line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a_cptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: e - line %d of \"%s\", illegal @$ or @N reference\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>a_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name>a_line</name></expr></argument>, <argument><expr><name>a_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unterminated_arglist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ainfo</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: e - line %d of \"%s\", unterminated argument list\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_lineno</name></name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_line</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_cptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>arg_number_disagree_warning</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a_lineno</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", number of arguments of %s "</literal>
<literal type="string">"doesn't agree with previous declaration\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>a_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>a_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bad_formals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: e - line %d of \"%s\", bad formal argument list\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>arg_type_disagree_warning</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a_lineno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", type of argument %d "</literal>
<literal type="string">"to %s doesn't agree with previous declaration\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>a_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>a_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unknown_arg_warning</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>d_lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dlr_opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>d_arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name>
<modifier>*</modifier></type><name>d_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>d_cptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", unknown argument %s%s\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>d_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>dlr_opt</name></expr></argument>, <argument><expr><name>d_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name>d_line</name></expr></argument>, <argument><expr><name>d_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>untyped_arg_warning</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a_lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dlr_opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", untyped argument %s%s\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>a_lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>dlr_opt</name></expr></argument>, <argument><expr><name>a_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wrong_number_args_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>which</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: w - line %d of \"%s\", wrong number of %sarguments for %s\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>which</name></expr></argument>, <argument><expr><name>a_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wrong_type_for_arg_warning</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: w - line %d of \"%s\", wrong type for default argument %d to %s\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>a_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>start_requires_args</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: w - line %d of \"%s\", start symbol %s requires arguments\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>a_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>destructor_redeclared_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ainfo</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: w - line %d of \"%s\", destructor redeclared\n"</literal></expr></argument>,
<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_lineno</name></name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pos</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_line</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>a_cptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
