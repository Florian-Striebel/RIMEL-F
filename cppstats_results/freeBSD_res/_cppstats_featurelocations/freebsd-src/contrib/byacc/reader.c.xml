<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/reader.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defs.h"</cpp:file></cpp:include>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINESIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_CURL</name></cpp:macro> <cpp:value>'{'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CURL</name></cpp:macro> <cpp:value>'}'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_PAREN</name></cpp:macro> <cpp:value>'('</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_PAREN</name></cpp:macro> <cpp:value>')'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_BRAC</name></cpp:macro> <cpp:value>'['</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BRAC</name></cpp:macro> <cpp:value>']'</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXARGS</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>start_rule</name><parameter_list>(<parameter><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s_lineno</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_initial_action</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_destructor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>process_destructor_XX</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cinc</name></decl>, <decl><type ref="prev"/><name>cache_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ntags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tagmax</name></decl>, <decl><type ref="prev"/><name>havetags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tag_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>saw_eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>unionized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bucket</name> <modifier>*</modifier></type><name>goal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Value_t</name></type> <name>prec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gensym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>last_was_action</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>trialaction</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maxitems</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bucket</name> <modifier>*</modifier><modifier>*</modifier></type><name>pitem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maxrules</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bucket</name> <modifier>*</modifier><modifier>*</modifier></type><name>plhs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>name_pool_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>name_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>line_format</name><index>[]</index></name> <init>= <expr><literal type="string">"#line %d \"%s\"\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>param</name> <modifier>*</modifier></type><name>lex_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>param</name> <modifier>*</modifier></type><name>parse_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>code_keys</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"requires"</literal></expr>, <expr><literal type="string">"provides"</literal></expr>, <expr><literal type="string">"top"</literal></expr>, <expr><literal type="string">"imports"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>code_lines</name></name></type> <name><name>code_lines</name><index>[<expr><name>CODE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>destructor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bucket</name> <modifier>*</modifier></type><name><name>default_destructor</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNTYPED_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPED_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SPECIFIED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bucket</name> <modifier>*</modifier></type>
<name>lookup_type_destructor</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>fmt</name><index>[]</index></name> <init>= <expr><literal type="string">"%.*s destructor"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>bpp</name> <init>= <expr><operator>&amp;</operator><name><name>default_destructor</name><index>[<expr><name>TYPE_SPECIFIED</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>bp</name> <operator>=</operator> <operator>*</operator><name>bpp</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>bp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bpp</name> <operator>=</operator> <operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bpp</name> <operator>=</operator> <name>bp</name> <operator>=</operator> <call><name>make_bucket</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>bp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cachec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cinc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cinc</name> <operator>&gt;=</operator> <name>cache_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cache_size</name> <operator>+=</operator> <name>CACHE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>TREALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cache</name><index>[<expr><name>cinc</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>cinc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>ldSPC1</name></decl>,
<decl><name>ldSPC2</name></decl>,
<decl><name>ldNAME</name></decl>,
<decl><name>ldSPC3</name></decl>,
<decl><name>ldNUM</name></decl>,
<decl><name>ldSPC4</name></decl>,
<decl><name>ldFILE</name></decl>,
<decl><name>ldOK</name></decl>,
<decl><name>ldERR</name></decl>
}</block></enum></type>
<name>LINE_DIR</name>;</typedef>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>line_directive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLESS</name><parameter_list>(<parameter><type><name>what</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (what) { ld = ldERR; break; }</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_1st</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_1st</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LINE_DIR</name></type> <name>ld</name> <init>= <expr><name>ldSPC1</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>ld</name> <operator>&lt;=</operator> <name>ldOK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>line</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>ld</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>ldSPC1</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UNLESS</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ld</name> <operator>=</operator> <name>ldSPC2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ldSPC2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>ldNAME</name></expr>:</case>
<expr_stmt><expr><call><name>UNLESS</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><literal type="string">"line"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ld</name> <operator>=</operator> <name>ldOK</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UNLESS</name><argument_list>(<argument><expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ld</name> <operator>=</operator> <name>ldSPC3</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ldSPC3</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UNLESS</name><argument_list>(<argument><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>line_1st</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ld</name> <operator>=</operator> <name>ldNUM</name></expr>;</expr_stmt>

<case>case <expr><name>ldNUM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UNLESS</name><argument_list>(<argument><expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ld</name> <operator>=</operator> <name>ldSPC4</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ldSPC4</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UNLESS</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>UNLESS</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ld</name> <operator>=</operator> <name>ldFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name_1st</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ldFILE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ld</name> <operator>=</operator> <name>ldOK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name_end</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<case>case <expr><name>ldERR</name></expr>:</case>
<case>case <expr><name>ldOK</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ld</name> <operator>==</operator> <name>ldOK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>need</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>name_end</name> <operator>-</operator> <name>name_1st</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>need</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>input_file_name_len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>input_file_name_len</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>need</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>input_file_name</name> <operator>=</operator> <call><name>TREALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>input_file_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>need</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>input_file_name</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>name_1st</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>need</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input_file_name</name><index>[<expr><name>need</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>input_file_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ld</name> <operator>&gt;=</operator> <name>ldNUM</name> <operator>&amp;&amp;</operator> <name>ld</name> <operator>&lt;</operator> <name>ldERR</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line_1st</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lineno</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>line_1st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>lineno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ld</name> <operator>==</operator> <name>ldOK</name><operator>)</operator></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UNLESS</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>input_file</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>saw_eof</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>saw_eof</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>linesize</name> <operator>!=</operator> <operator>(</operator><name>LINESIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name>LINESIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>lineno</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;=</operator> <name>linesize</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>linesize</name> <operator>+=</operator> <name>LINESIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>TREALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>saw_eof</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>line_directive</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dup_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>t</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>skip_comment</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ainfo</name></name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>=</operator> <call><name>dup_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_cptr</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>cptr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unterminated_comment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>cptr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_inline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>cptr</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_comment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>cptr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>cptr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<default>default:</default>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nextc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>finish</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name> <operator>=</operator> <call><name>next_inline</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">'\v'</literal></expr>:</case>
<case>case <expr><literal type="char">','</literal></expr>:</case>
<case>case <expr><literal type="char">';'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>

<default>default:</default>
<expr_stmt><expr><name>finish</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>
while <condition>(<expr><operator>!</operator><name>finish</name></expr>)</condition>;</do>

<return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>keyword</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>token</name></decl>;</decl_stmt>
}</block>
<decl><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"binary"</literal></expr>, <expr><name>NONASSOC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"code"</literal></expr>, <expr><name>XCODE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"debug"</literal></expr>, <expr><name>XXXDEBUG</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"destructor"</literal></expr>, <expr><name>DESTRUCTOR</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"error-verbose"</literal></expr>,<expr><name>ERROR_VERBOSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"expect"</literal></expr>, <expr><name>EXPECT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"expect-rr"</literal></expr>, <expr><name>EXPECT_RR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ident"</literal></expr>, <expr><name>IDENT</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"initial-action"</literal></expr>, <expr><name>INITIAL_ACTION</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"left"</literal></expr>, <expr><name>LEFT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lex-param"</literal></expr>, <expr><name>LEX_PARAM</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"locations"</literal></expr>, <expr><name>LOCATIONS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"nonassoc"</literal></expr>, <expr><name>NONASSOC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"parse-param"</literal></expr>, <expr><name>PARSE_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pure-parser"</literal></expr>, <expr><name>PURE_PARSER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"right"</literal></expr>, <expr><name>RIGHT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"start"</literal></expr>, <expr><name>START</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"term"</literal></expr>, <expr><name>TOKEN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"token"</literal></expr>, <expr><name>TOKEN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"token-table"</literal></expr>, <expr><name>TOKEN_TABLE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"type"</literal></expr>, <expr><name>TYPE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"union"</literal></expr>, <expr><name>UNION</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yacc"</literal></expr>, <expr><name>POSIX_YACC</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_keys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>keyword</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>keyword</name> <operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>keyword</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>keyword</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>keyword</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t_cptr</name> <init>= <expr><name>cptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>keyword</name></name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cinc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>keywords</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keywords</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare_keys</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>key</name><operator>-&gt;</operator><name>token</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_CURL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>TEXT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>MARK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>LEFT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>RIGHT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>TOKEN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'2'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NONASSOC</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>t_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_ident</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>output_file</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>outline</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"#ident \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>copy_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>quote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mstring</name></name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>msnew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ainfo</name></name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>=</operator> <call><name>dup_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_cptr</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>quote</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>msdone</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unterminated_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unterminated_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>copy_comment</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mstring</name></name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>msnew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ainfo</name></name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>=</operator> <call><name>dup_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_cptr</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cptr</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>msdone</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unterminated_comment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>msdone</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>code_keys</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>cptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name><operator>++</operator> <operator>!=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>cptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>cptr</name> <operator>!=</operator> <name>L_CURL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cptr</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_code</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>CODE_HEADER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mstring</name></name> <modifier>*</modifier></type><name>code_mstr</name></decl>;</decl_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_CURL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>CODE_HEADER</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>CODE_REQUIRES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>CODE_PROVIDES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>CODE_TOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>CODE_IMPORTS</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>check_key</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>cptr</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>cptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>curl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>code_lines</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>code_keys</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cline</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>code_lines</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>num</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>code_mstr</name> <operator>=</operator> <call><name>msrenew</name><argument_list>(<argument><expr><name><name>code_lines</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>code_mstr</name> <operator>=</operator> <call><name>msnew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cline</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><name>line_format</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><name>cline</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>on_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L_CURL</name></expr>:</case>
<expr_stmt><expr><name>curl</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_CURL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>curl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>on_line</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cline</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>code_lines</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>lines</name> <operator>=</operator> <call><name>msdone</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code_lines</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>cline</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>on_line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_text</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>text_file</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_newline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ainfo</name></name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>=</operator> <call><name>dup_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_cptr</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unterminated_text</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>line_format</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>loop</name>:</label>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_newline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>unterminated_text</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>copy_string</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name>need_newline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>copy_comment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name>need_newline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cptr</name> <operator>==</operator> <name>R_CURL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>need_newline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<default>default:</default>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_newline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>puts_both</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>text_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>union_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>putc_both</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>text_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>union_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_union</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ainfo</name></name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>=</operator> <call><name>dup_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_cptr</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unionized</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>over_unionized</name><argument_list>(<argument><expr><name>cptr</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>unionized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><literal type="string">"#ifdef YYSTYPE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><literal type="string">"#undef YYSTYPE_IS_DECLARED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><literal type="string">"#define YYSTYPE_IS_DECLARED 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><literal type="string">"#ifndef YYSTYPE_IS_DECLARED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><literal type="string">"#define YYSTYPE_IS_DECLARED 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>text_file</name></expr></argument>, <argument><expr><name>line_format</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><literal type="string">"typedef union"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>loop</name>:</label>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc_both</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unterminated_union</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><name>L_CURL</name></expr>:</case>
<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><name>R_CURL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><literal type="string">" YYSTYPE;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><literal type="string">"#endif /* !YYSTYPE_IS_DECLARED */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>copy_string</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>copy_comment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>puts_both</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>loop</name>;</goto>

<default>default:</default>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>after_blanks</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>trim_blanks</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buffer</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>after_blanks</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>--</operator><name>d</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>--</operator><name>d</name> <operator>!=</operator> <name>buffer</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>d</name> <operator>=</operator> <name>buffer</name></expr>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>more_curly</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name>cptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>finish</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>next_inline</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><name>finish</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_CURL</name></expr>:</case>
<expr_stmt><expr><name>finish</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><operator>!</operator><name>finish</name></expr>)</condition>;</do>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>save_param</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>param</name> <modifier>*</modifier></type><name>head</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type2</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>type2</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>trim_blanks</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>name</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>trim_blanks</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>trim_blanks</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>LEX_PARAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>head</name> <operator>=</operator> <name>lex_param</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>head</name> <operator>=</operator> <name>parse_param</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>head</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>LEX_PARAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lex_param</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>parse_param</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_param</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>type2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curly</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>st_lineno</name> <init>= <expr><name>lineno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comma</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><name>curly</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>next_inline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EOF</name></expr>:</case>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L_CURL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>curly</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<goto>goto <name>oops</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curly</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>st_lineno</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R_CURL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>curly</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<goto>goto <name>oops</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curly</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>curly</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<goto>goto <name>oops</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curly</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>cptr</name> <operator>==</operator> <name>line</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lineno</name> <operator>=</operator> <name>st_lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>missing_brace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<goto>goto <name>oops</name>;</goto>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>curly</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<goto>goto <name>oops</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>TREALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curly</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>L_CURL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>L_CURL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>R_CURL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>curly</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>more_curly</name><argument_list>()</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curly</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lineno</name> <operator>=</operator> <name>st_lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>missing_brace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>oops</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>trim_blanks</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>parms</name> <init>= <expr><operator>(</operator><name>comma</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comma</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>comma</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>trim_blanks</name><argument_list>(<argument><expr><name>parms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>parms</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<goto>goto <name>oops</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>parms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>level</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>parms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type2</name> <operator>=</operator> <name>i</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>type2</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isalnum</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>parms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>UCH</name><argument_list>(<argument><expr><name><name>parms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>parms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>parms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>oops</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_param</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>parms</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>comma</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>oops</name>:</label>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hexval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bucket</name> <modifier>*</modifier></type>
<name>get_literal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>quote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ainfo</name></name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>=</operator> <call><name>dup_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_cptr</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>quote</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cinc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>quote</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unterminated_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c_cptr</name> <init>= <expr><name>cptr</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unterminated_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_OCTAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_OCTAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>MAXCHAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>illegal_character</name><argument_list>(<argument><expr><name>c_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>hexval</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>illegal_character</name><argument_list>(<argument><expr><name>c_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>hexval</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>MAXCHAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>illegal_character</name><argument_list>(<argument><expr><name>c_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>cinc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>cinc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>UCH</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name><name>cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\b'</literal></expr>:</case>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\v'</literal></expr>:</case>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>lookup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>TERM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>bp</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>UNDEFINED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>bp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_reserved</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"$accept"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"$end"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>name</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bucket</name> <modifier>*</modifier></type>
<name>get_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cinc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name></expr>;</init> <condition><expr><call><name>IS_IDENT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reserved</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>used_reserved</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>lookup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Value_t</name></type>
<name>get_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>cptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name></expr>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><literal type="number">10</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>MAXYYINT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cache_tag</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntags</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>tag_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>tag_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>tag_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ntags</name> <operator>&gt;=</operator> <name>tagmax</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tagmax</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tag_table</name> <operator>=</operator>
<operator>(</operator><ternary><condition><expr><name>tag_table</name></expr>
?</condition><then> <expr><call><name>TREALLOC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>tag_table</name></expr></argument>, <argument><expr><name>tagmax</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>tagmax</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>tag_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag_table</name><index>[<expr><name>ntags</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_tag</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t_lineno</name> <init>= <expr><name>lineno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t_line</name> <init>= <expr><call><name>dup_line</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t_cptr</name> <init>= <expr><name>t_line</name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NAME1</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>illegal_tag</name><argument_list>(<argument><expr><name>t_lineno</name></expr></argument>, <argument><expr><name>t_line</name></expr></argument>, <argument><expr><name>t_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cinc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>IS_IDENT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>cachec</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>illegal_tag</name><argument_list>(<argument><expr><name>t_lineno</name></expr></argument>, <argument><expr><name>t_line</name></expr></argument>, <argument><expr><name>t_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>t_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>havetags</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>cache_tag</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>cinc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>scan_id</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>cptr</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>IS_NAME2</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>cptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><call><name>cache_tag</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>declare_tokens</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>assoc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>assoc</name> <operator>!=</operator> <name>TOKEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>prec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>get_tag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_literal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <name>goal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tokenized_start</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>TERM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>tag</name></name> <operator>&amp;&amp;</operator> <name>tag</name> <operator>!=</operator> <name><name>bp</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>retyped_warning</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>assoc</name> <operator>!=</operator> <name>TOKEN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>prec</name></name> <operator>&amp;&amp;</operator> <name>prec</name> <operator>!=</operator> <name><name>bp</name><operator>-&gt;</operator><name>prec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reprec_warning</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>assoc</name></name> <operator>=</operator> <operator>(</operator><name>Assoc_t</name><operator>)</operator><name>assoc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <name>prec</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>UNDEFINED</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <name><name>bp</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>revalued_warning</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>declare_expect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>assoc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>assoc</name> <operator>!=</operator> <name>EXPECT</name> <operator>&amp;&amp;</operator> <name>assoc</name> <operator>!=</operator> <name>EXPECT_RR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>prec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>assoc</name> <operator>==</operator> <name>EXPECT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SRexpect</name> <operator>=</operator> <call><name>get_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>RRexpect</name> <operator>=</operator> <call><name>get_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if>





<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>declare_argtypes</name><parameter_list>(<parameter><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>tags</name><index>[<expr><name>MAXARGS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>args</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>args</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>retyped_warning</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tags</name><index>[<expr><name>args</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_tag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>R_PAREN</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>cptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>argnames</name></name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>argnames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>argtags</name></name> <operator>=</operator> <call><name>CALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>args</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>argtags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>args</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>argtags</name><index>[<expr><name>args</name></expr>]</index></name> <operator>=</operator> <name><name>tags</name><index>[<expr><name>args</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>argnames</name><index>[<expr><name>args</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>declare_types</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>get_tag</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>nextc</name><argument_list>()</argument_list></call> <operator>==</operator> <name>L_PAREN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>declare_argtypes</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_literal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>tag</name></name> <operator>&amp;&amp;</operator> <name>tag</name> <operator>!=</operator> <name><name>bp</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>retyped_warning</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>declare_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>TERM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_start</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>goal</name> <operator>&amp;&amp;</operator> <name>goal</name> <operator>!=</operator> <name>bp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>restarted_warning</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>goal</name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_declarations</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cache_size</name> <operator>=</operator> <name>CACHE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>k</name> <operator>=</operator> <call><name>keyword</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>MARK</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>IDENT</name></expr>:</case>
<expr_stmt><expr><call><name>copy_ident</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XCODE</name></expr>:</case>
<expr_stmt><expr><call><name>copy_code</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>copy_text</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>UNION</name></expr>:</case>
<expr_stmt><expr><call><name>copy_union</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOKEN</name></expr>:</case>
<case>case <expr><name>LEFT</name></expr>:</case>
<case>case <expr><name>RIGHT</name></expr>:</case>
<case>case <expr><name>NONASSOC</name></expr>:</case>
<expr_stmt><expr><call><name>declare_tokens</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EXPECT</name></expr>:</case>
<case>case <expr><name>EXPECT_RR</name></expr>:</case>
<expr_stmt><expr><call><name>declare_expect</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TYPE</name></expr>:</case>
<expr_stmt><expr><call><name>declare_types</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>START</name></expr>:</case>
<expr_stmt><expr><call><name>declare_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>PURE_PARSER</name></expr>:</case>
<expr_stmt><expr><name>pure_parser</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>PARSE_PARAM</name></expr>:</case>
<case>case <expr><name>LEX_PARAM</name></expr>:</case>
<expr_stmt><expr><call><name>copy_param</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TOKEN_TABLE</name></expr>:</case>
<expr_stmt><expr><name>token_table</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ERROR_VERBOSE</name></expr>:</case>
<expr_stmt><expr><name>error_verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LOCATIONS</name></expr>:</case>
<expr_stmt><expr><name>locations</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DESTRUCTOR</name></expr>:</case>
<expr_stmt><expr><name>destructor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_destructor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INITIAL_ACTION</name></expr>:</case>
<expr_stmt><expr><call><name>copy_initial_action</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>XXXDEBUG</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>POSIX_YACC</name></expr>:</case>


<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>initialize_grammar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>nitems</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxitems</name> <operator>=</operator> <literal type="number">300</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pitem</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>bucket</name> <operator>*</operator></expr></argument>, <argument><expr><name>maxitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pitem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pitem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pitem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pitem</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nrules</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxrules</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>plhs</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>bucket</name> <operator>*</operator></expr></argument>, <argument><expr><name>maxrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>plhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plhs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plhs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plhs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rprec</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>maxrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>rprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rprec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rprec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rprec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rassoc</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Assoc_t</name></expr></argument>, <argument><expr><name>maxrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>rassoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rassoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rassoc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rassoc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expand_items</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>maxitems</name> <operator>+=</operator> <literal type="number">300</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pitem</name> <operator>=</operator> <call><name>TREALLOC</name><argument_list>(<argument><expr><name>bucket</name> <operator>*</operator></expr></argument>, <argument><expr><name>pitem</name></expr></argument>, <argument><expr><name>maxitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expand_rules</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>maxrules</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>plhs</name> <operator>=</operator> <call><name>TREALLOC</name><argument_list>(<argument><expr><name>bucket</name> <operator>*</operator></expr></argument>, <argument><expr><name>plhs</name></expr></argument>, <argument><expr><name>maxrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>plhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rprec</name> <operator>=</operator> <call><name>TREALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>rprec</name></expr></argument>, <argument><expr><name>maxrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>rprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rassoc</name> <operator>=</operator> <call><name>TREALLOC</name><argument_list>(<argument><expr><name>Assoc_t</name></expr></argument>, <argument><expr><name>rassoc</name></expr></argument>, <argument><expr><name>maxrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>rassoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rescan_lineno</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>copy_args</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>alen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mstring</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>msnew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>quote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ainfo</name></name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>=</operator> <call><name>dup_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_cptr</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>R_PAREN</name> <operator>||</operator> <name>depth</name> <operator>||</operator> <name>quote</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>quote</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>depth</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unterminated_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unterminated_arglist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>quote</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>quote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cptr</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><name>cptr</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_PAREN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>R_PAREN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\"'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>alen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>alen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>msdone</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>parse_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>save</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rescan_lineno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>IS_NAME2</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>save</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>save</name> <operator>=</operator> <call><name>cache_tag</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>parse_int</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>save</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rescan_lineno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>save</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_arginfo</name><parameter_list>(<parameter><decl><type><name>bucket</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argslen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>args</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>redec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>args</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>args</name></name> <operator>!=</operator> <name>argslen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>arg_number_disagree_warning</name><argument_list>(<argument><expr><name>rescan_lineno</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>redec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>argslen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>argnames</name></name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>argslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>argnames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>argtags</name></name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>argslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>argtags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>args</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argslen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rescan_lineno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bad_formals</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rescan_lineno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>havetags</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>parse_id</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bad_formals</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rescan_lineno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bad_formals</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>redec</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>argtags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>arg_type_disagree_warning</name><argument_list>(<argument><expr><name>rescan_lineno</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>argtags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>redec</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>argtags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>parse_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>argnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bad_formals</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rescan_lineno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bad_formals</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>compile_arg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>theptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>yyvaltag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>theptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mstring</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>msnew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>maxoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier><modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>maxoffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>pitem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pitem</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>class</name> <operator>!=</operator> <name>ARGUMENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxoffset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>maxoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offsets</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>maxoffset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>pitem</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>class</name> <operator>!=</operator> <name>ARGUMENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>offsets</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>nitems</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rhs</name> <operator>=</operator> <name>pitem</name> <operator>+</operator> <name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yyvaltag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"yyval.%s = "</literal></expr></argument>, <argument><expr><name>yyvaltag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"yyval = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>parse_id</name><argument_list>(<argument><expr><operator>++</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>illegal_tag</name><argument_list>(<argument><expr><name>rescan_lineno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>parse_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dollar_error</name><argument_list>(<argument><expr><name>rescan_lineno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>val</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>maxoffset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dollar_warning</name><argument_list>(<argument><expr><name>rescan_lineno</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>val</name> <operator>-</operator> <name>maxoffset</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>maxoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>tag</name> <operator>=</operator> <name><name>rhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>havetags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>untyped_rhs</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>rhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">".%s"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>havetags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unknown_rhs</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>parse_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dollar_error</name><argument_list>(<argument><expr><name>rescan_lineno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>args</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name><name>argnames</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unknown_arg_warning</name><argument_list>(<argument><expr><name>rescan_lineno</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name><name>argtags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d]"</literal></expr></argument>,
<argument><expr><name>i</name> <operator>-</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>args</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">".%s"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>havetags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>untyped_arg_warning</name><argument_list>(<argument><expr><name>rescan_lineno</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dollar_error</name><argument_list>(<argument><expr><name>rescan_lineno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>at_error</name><argument_list>(<argument><expr><name>rescan_lineno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rescan_lineno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>theptr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>maxoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>msdone</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>can_elide_arg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>theptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>yyvaltag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>theptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>maxoffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier><modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>parse_id</name><argument_list>(<argument><expr><operator>++</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>pitem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pitem</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>class</name> <operator>!=</operator> <name>ARGUMENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxoffset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>maxoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offsets</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>maxoffset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>pitem</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>class</name> <operator>!=</operator> <name>ARGUMENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>offsets</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>nitems</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rhs</name> <operator>=</operator> <name>pitem</name> <operator>+</operator> <name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>parse_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>val</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>maxoffset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>rhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>parse_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>args</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name><name>argnames</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name><name>argtags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>args</name> <operator>+</operator> <name>n</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&amp;&amp;</operator> <name>yyvaltag</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>yyvaltag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>tag</name> <operator>||</operator> <name>yyvaltag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>maxoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>||</operator> <name>rv</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>theptr</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_CACHE_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<struct><specifier>static</specifier> struct <name>arg_cache</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>arg_cache</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rule</name></decl>;</decl_stmt>
}</block>
<decl><modifier>*</modifier><name><name>arg_cache</name><index>[<expr><name>ARG_CACHE_SIZE</name></expr>]</index></name></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lookup_arg_cache</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>arg_cache</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>arg_cache</name><index>[<expr><call><name>strnshash</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>ARG_CACHE_SIZE</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>entry</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strnscmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>rule</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>insert_arg_cache</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rule</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>arg_cache</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>NEW</name><argument_list>(<argument><expr>struct <name>arg_cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strnshash</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>ARG_CACHE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>rule</name></name> <operator>=</operator> <name>rule</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>arg_cache</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg_cache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clean_arg_cache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>arg_cache</name></name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ARG_CACHE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name><name>arg_cache</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><operator>(</operator><name>t</name> <operator>=</operator> <name>e</name><operator>)</operator></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><call><name>FREE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>arg_cache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>advance_to_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s_cptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s_lineno</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argslen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s_cptr</name> <operator>=</operator> <name>cptr</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>keyword</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>XCODE</name></expr>:</case>
<expr_stmt><expr><call><name>copy_code</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MARK</name></expr>:</case>
<expr_stmt><expr><call><name>no_grammar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>copy_text</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>START</name></expr>:</case>
<expr_stmt><expr><call><name>declare_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>s_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>goal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>TERM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_start</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>goal</name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s_lineno</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rescan_lineno</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_PAREN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>copy_args</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>start_rule</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>s_lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>parse_arginfo</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>argslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>start_rule</name><parameter_list>(<parameter><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s_lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>TERM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminal_lhs</name><argument_list>(<argument><expr><name>s_lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>NONTERM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bp</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>nrules</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nrules</name> <operator>&gt;=</operator> <name>maxrules</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_rules</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rprec</name><index>[<expr><name>nrules</name></expr>]</index></name> <operator>=</operator> <name>UNDEFINED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rassoc</name><index>[<expr><name>nrules</name></expr>]</index></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>end_rule</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last_was_action</name> <operator>&amp;&amp;</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pitem</name><index>[<expr><name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pitem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>pitem</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pitem</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>!=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>default_action_warning</name><argument_list>(<argument><expr><name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>default_action_warning</name><argument_list>(<argument><expr><name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_was_action</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nitems</name> <operator>&gt;=</operator> <name>maxitems</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_items</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pitem</name><index>[<expr><name>nitems</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>nitems</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>nrules</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>insert_empty_rule</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>bpp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cache_size</name> <operator>&gt;=</operator> <name>CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="string">"$$%d"</literal></expr></argument>, <argument><expr><operator>++</operator><name>gensym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>make_bucket</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_symbol</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_symbol</name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>ACTION</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>nitems</name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>nitems</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nitems</name> <operator>&gt;</operator> <name>maxitems</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_items</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bpp</name> <operator>=</operator> <name>pitem</name> <operator>+</operator> <name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bpp</name><operator>--</operator> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>bpp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bpp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>bpp</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>nrules</name> <operator>&gt;=</operator> <name>maxrules</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_rules</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plhs</name><index>[<expr><name>nrules</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rprec</name><index>[<expr><name>nrules</name></expr>]</index></name> <operator>=</operator> <name><name>rprec</name><index>[<expr><name>nrules</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rprec</name><index>[<expr><name>nrules</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rassoc</name><index>[<expr><name>nrules</name></expr>]</index></name> <operator>=</operator> <name><name>rassoc</name><index>[<expr><name>nrules</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rassoc</name><index>[<expr><name>nrules</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>insert_arg_rule</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>line_number</name> <init>= <expr><name>rescan_lineno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><call><name>compile_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rule</name> <init>= <expr><call><name>lookup_arg_cache</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>action_file</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rule</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>rule</name> <operator>=</operator> <name>nrules</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_arg_cache</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trialaction</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"case %d:\n"</literal></expr></argument>, <argument><expr><name>rule</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>line_format</name></expr></argument>, <argument><expr><name>line_number</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s;\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"break;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_empty_rule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plhs</name><index>[<expr><name>rule</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name> <operator>=</operator> <call><name>cache_tag</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plhs</name><index>[<expr><name>rule</name></expr>]</index></name><operator>-&gt;</operator><name>class</name> <operator>=</operator> <name>ARGUMENT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>nitems</name> <operator>&gt;</operator> <name>maxitems</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_items</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pitem</name><index>[<expr><name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>rule</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_symbol</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s_lineno</name> <init>= <expr><name>lineno</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argslen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_literal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rescan_lineno</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_PAREN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>copy_args</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>end_rule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_rule</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>s_lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>parse_arginfo</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>argslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_was_action</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_empty_rule</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_was_action</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>args</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>argslen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argslen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bp</name><operator>-&gt;</operator><name>args</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pitem</name><index>[<expr><name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>args</name> <operator>!=</operator> <name><name>bp</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wrong_number_args_warning</name><argument_list>(<argument><expr><literal type="string">"default "</literal></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>args</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name><name>argtags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>bp</name><operator>-&gt;</operator><name>argtags</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wrong_type_for_arg_warning</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>args</name></name> <operator>!=</operator> <name>argslen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wrong_number_args_warning</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>args</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ap</name> <init>= <expr><name>args</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elide_cnt</name> <init>= <expr><call><name>can_elide_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ap</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>argtags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>elide_cnt</name> <operator>&gt;</operator> <name>argslen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>elide_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>elide_cnt</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elide_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>can_elide_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ap</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>argtags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>elide_cnt</name> <operator>-</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>elide_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>elide_cnt</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>elide_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argslen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>insert_arg_rule</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>argtags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>nitems</name> <operator>&gt;</operator> <name>maxitems</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_items</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pitem</name><index>[<expr><name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_action</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>haveyyval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>action_file</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ainfo</name></name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>maxoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier><modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>=</operator> <call><name>dup_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>a_cptr</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>a_line</name></name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_was_action</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_empty_rule</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_was_action</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>trialaction</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cptr</name> <operator>==</operator> <name>L_BRAC</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"case %d:\n"</literal></expr></argument>, <argument><expr><name>nrules</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>backtrack</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trialaction</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" if (!yytrial)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>line_format</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cptr</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>after_blanks</name><argument_list>(<argument><expr><name>cptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>L_CURL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <call><name>after_blanks</name><argument_list>(<argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>maxoffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>pitem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pitem</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>class</name> <operator>!=</operator> <name>ARGUMENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxoffset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>maxoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offsets</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>maxoffset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pitem</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>class</name> <operator>!=</operator> <name>ARGUMENT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>offsets</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>nitems</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rhs</name> <operator>=</operator> <name>pitem</name> <operator>+</operator> <name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>loop</name>:</label>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d_lineno</name> <init>= <expr><name>lineno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d_line</name> <init>= <expr><call><name>dup_line</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d_cptr</name> <init>= <expr><name>d_line</name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>get_tag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yyval.%s"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>d_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d].%s"</literal></expr></argument>, <argument><expr><operator>-</operator><name>n</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>maxoffset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dollar_warning</name><argument_list>(<argument><expr><name>d_lineno</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d].%s"</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>maxoffset</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>offsets</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d].%s"</literal></expr></argument>, <argument><expr><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>d_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><call><name>get_number</name><argument_list>()</argument_list></call> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d].%s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>d_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>scan_id</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>args</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name><name>argnames</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unknown_arg_warning</name><argument_list>(<argument><expr><name>d_lineno</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>d_line</name></expr></argument>, <argument><expr><name>d_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d].%s"</literal></expr></argument>,
<argument><expr><name>i</name> <operator>-</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>args</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>d_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dollar_error</name><argument_list>(<argument><expr><name>d_lineno</name></expr></argument>, <argument><expr><name>d_line</name></expr></argument>, <argument><expr><name>d_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>havetags</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>untyped_lhs</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yyval.%s"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yyval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>haveyyval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>havetags</name> <operator>&amp;&amp;</operator> <name>offsets</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;</operator> <name>maxoffset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unknown_rhs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>rhs</name><index>[<expr><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>untyped_rhs</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>rhs</name><index>[<expr><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d].%s"</literal></expr></argument>, <argument><expr><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d]"</literal></expr></argument>, <argument><expr><operator>-</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>maxoffset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dollar_warning</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d]"</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>maxoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>offsets</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d]"</literal></expr></argument>, <argument><expr><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>havetags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unknown_rhs</name><argument_list>(<argument><expr><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d]"</literal></expr></argument>, <argument><expr><operator>-</operator><name>i</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>scan_id</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>args</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name><name>argnames</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unknown_arg_warning</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name><name>argtags</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.l_mark[%d]"</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name><name>plhs</name><index>[<expr><name>nrules</name></expr>]</index></name><operator>-&gt;</operator><name>args</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">".%s"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>havetags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>untyped_arg_warning</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locations</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l_lineno</name> <init>= <expr><name>lineno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>l_line</name> <init>= <expr><call><name>dup_line</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>l_cptr</name> <init>= <expr><name>l_line</name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>l_lineno</name></expr></argument>, <argument><expr><name>l_line</name></expr></argument>, <argument><expr><name>l_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yyloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.p_mark[%d]"</literal></expr></argument>, <argument><expr><operator>-</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>maxoffset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>at_warning</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.p_mark[%d]"</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>maxoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>offsets</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.p_mark[%d]"</literal></expr></argument>, <argument><expr><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"yystack.p_mark[%d]"</literal></expr></argument>, <argument><expr><operator>-</operator><name>i</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>IS_NAME1</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>IS_NAME2</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>backtrack</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>trialaction</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>L_BRAC</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>L_CURL</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>trialaction</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>R_BRAC</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>R_CURL</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_BRAC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>haveyyval</name></expr>)</condition>
<block>{<block_content>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_CURL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>haveyyval</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" if (!yytrial)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>line_format</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>trialaction</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\nbreak;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>maxoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>unterminated_action</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="char">';'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\nbreak;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>maxoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>L_BRAC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>backtrack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><name>R_BRAC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>backtrack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>depth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>loop</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>L_CURL</name></expr>:</case>
<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><name>R_CURL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>backtrack</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_BRAC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>haveyyval</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>trialaction</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_CURL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>haveyyval</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" if (!yytrial)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>line_format</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\nbreak;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>maxoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>copy_string</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>copy_comment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>loop</name>;</goto>

<default>default:</default>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ainfo</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mstring</name></name> <modifier>*</modifier></type><name>code_mstr</name> <init>= <expr><call><name>msnew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><name>line_format</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>input_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cptr</name> <operator>=</operator> <call><name>after_blanks</name><argument_list>(<argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cptr</name> <operator>==</operator> <name>L_CURL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>a_lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>a_line</name></name> <operator>=</operator> <call><name>dup_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>a_cptr</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>a_line</name></name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>loop</name>:</label>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d_lineno</name> <init>= <expr><name>lineno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d_line</name> <init>= <expr><call><name>dup_line</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d_cptr</name> <init>= <expr><name>d_line</name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>get_tag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><literal type="string">"(*val).%s"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>d_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dollar_error</name><argument_list>(<argument><expr><name>d_lineno</name></expr></argument>, <argument><expr><name>d_line</name></expr></argument>, <argument><expr><name>d_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><literal type="string">"$$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locations</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l_lineno</name> <init>= <expr><name>lineno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>l_line</name> <init>= <expr><call><name>dup_line</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>l_cptr</name> <init>= <expr><name>l_line</name> <operator>+</operator> <operator>(</operator><name>cptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>l_lineno</name></expr></argument>, <argument><expr><name>l_line</name></expr></argument>, <argument><expr><name>l_cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NAME1</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>IS_NAME2</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><call><name>get_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>unterminated_action</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>L_CURL</name></expr>:</case>
<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><name>R_CURL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>out</name>;</goto>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>copy_string</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>copy_comment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>loop</name>;</goto>

<default>default:</default>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></switch>
<label><name>out</name>:</label>
<return>return <expr><call><name>msdone</name><argument_list>(<argument><expr><name>code_mstr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_initial_action</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ainfo</name></name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>initial_action</name> <operator>=</operator> <call><name>get_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="string">"yyloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_destructor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>code_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ainfo</name></name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code_text</name> <operator>=</operator> <call><name>get_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="string">"(*loc)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unexpected_EOF</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bp</name> <operator>=</operator> <name><name>default_destructor</name><index>[<expr><name>UNTYPED_DEFAULT</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>untyped_default</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;&gt;"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>make_bucket</name><argument_list>(<argument><expr><literal type="string">"untyped default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>untyped_default</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_destructor</name><index>[<expr><name>UNTYPED_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>destructor_redeclared_warning</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name> <operator>=</operator> <call><name>process_destructor_XX</name><argument_list>(<argument><expr><name>code_text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>cptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bp</name> <operator>=</operator> <name><name>default_destructor</name><index>[<expr><name>TYPED_DEFAULT</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>typed_default</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;*&gt;"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>make_bucket</name><argument_list>(<argument><expr><literal type="string">"typed default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>typed_default</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_destructor</name><index>[<expr><name>TYPED_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>destructor_redeclared_warning</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>code_text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>, <argument><expr><name>code_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><call><name>get_tag</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>lookup_type_destructor</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>destructor_redeclared_warning</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name> <operator>=</operator> <call><name>process_destructor_XX</name><argument_list>(<argument><expr><name>code_text</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>destructor_redeclared_warning</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>code_text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>, <argument><expr><name>code_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>a_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>code_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>process_destructor_XX</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mstring</name></name> <modifier>*</modifier></type><name>new_code</name> <init>= <expr><call><name>msnew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>codeptr</name> <init>= <expr><name>code</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>loop</name>:</label>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>codeptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <name><name>codeptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>codeptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>new_code</name></expr></argument>, <argument><expr><literal type="string">"(*val)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msprintf</name><argument_list>(<argument><expr><name>new_code</name></expr></argument>, <argument><expr><literal type="string">"(*val).%s"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_NAME1</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>new_code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>codeptr</name></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>IS_NAME2</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>codeptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>new_code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>L_CURL</name></expr>:</case>
<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>

<case>case <expr><name>R_CURL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><call><name>msdone</name><argument_list>(<argument><expr><name>new_code</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>codeptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>new_code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>quote</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>codeptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>new_code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>codeptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>new_code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>codeptr</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>codeptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>new_code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>codeptr</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mputc</name><argument_list>(<argument><expr><name>new_code</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>codeptr</name></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<goto>goto <name>loop</name>;</goto>

<default>default:</default>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mark_symbol</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>cptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>cptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'R'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>cptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>cptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'C'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>cptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>,</operator> <operator>!</operator><call><name>IS_IDENT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_literal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rprec</name><index>[<expr><name>nrules</name></expr>]</index></name> <operator>!=</operator> <name>UNDEFINED</name> <operator>&amp;&amp;</operator> <name><name>bp</name><operator>-&gt;</operator><name>prec</name></name> <operator>!=</operator> <name><name>rprec</name><index>[<expr><name>nrules</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prec_redeclared</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rprec</name><index>[<expr><name>nrules</name></expr>]</index></name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rassoc</name><index>[<expr><name>nrules</name></expr>]</index></name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>assoc</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_grammar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>initialize_grammar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>advance_to_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nextc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>UCH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'$'</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\''</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_symbol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_CURL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <operator>(</operator><name>backtrack</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>L_BRAC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>L_CURL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>copy_action</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>end_rule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_rule</name><argument_list>(<argument><expr><name><name>plhs</name><index>[<expr><name>nrules</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>cptr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mark_symbol</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_error</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_rule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>goal</name><operator>-&gt;</operator><name>args</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>start_requires_args</name><argument_list>(<argument><expr><name><name>goal</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_tags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tag_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntags</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tag_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>tag_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>tag_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pack_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name_pool_size</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name>first_symbol</name></expr>;</init> <condition><expr><name>bp</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>name_pool_size</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>name_pool</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>name_pool_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>name_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name_pool</name></expr></argument>, <argument><expr><literal type="string">"$accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name_pool</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"$end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>name_pool</name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name>first_symbol</name></expr>;</init> <condition><expr><name>bp</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>t</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_symbols</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>goal</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undefined_goal</name><argument_list>(<argument><expr><name><name>goal</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name>first_symbol</name></expr>;</init> <condition><expr><name>bp</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>undefined_symbol_warning</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <name>TERM</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>protect_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>des</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>des</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="char">'\\'</literal> <operator>==</operator> <operator>*</operator><name>s</name> <operator>||</operator> <literal type="char">'"'</literal> <operator>==</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>des</name> <operator>=</operator> <name>d</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="char">'\\'</literal> <operator>==</operator> <operator>*</operator><name>s</name> <operator>||</operator> <literal type="char">'"'</literal> <operator>==</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pack_symbols</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier><modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>Value_t</name></type> <name>max_tok_pval</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>nsyms</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ntokens</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name>first_symbol</name></expr>;</init> <condition><expr><name>bp</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>nsyms</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>TERM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>ntokens</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>start_symbol</name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><name>ntokens</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nvars</name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>nsyms</name> <operator>-</operator> <name>ntokens</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol_name</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>symbol_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol_value</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>symbol_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol_prec</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>symbol_prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol_assoc</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>symbol_assoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>symbol_pval</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>symbol_pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>destructor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>symbol_destructor</name> <operator>=</operator> <call><name>CALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>symbol_destructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol_type_tag</name> <operator>=</operator> <call><name>CALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>symbol_type_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>bucket</name> <operator>*</operator></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>start_symbol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>start_symbol</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name>first_symbol</name></expr>;</init> <condition><expr><name>bp</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>TERM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>ntokens</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntokens</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>goal</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>(</operator><name>Index_t</name><operator>)</operator><operator>(</operator><name>start_symbol</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>start_symbol</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>goal</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><name><name>goal</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>start_symbol</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>goal</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntokens</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>k</name><operator>++</operator></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>symbol_value</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>symbol_value</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>symbol_value</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>symbol_value</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name> <operator>==</operator> <name>UNDEFINED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">257</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntokens</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value</name> <operator>==</operator> <name>UNDEFINED</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <name><name>symbol_value</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>++</operator><name>j</name> <operator>&lt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <name><name>symbol_value</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>symbol_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>name_pool</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_prec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_assoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>symbol_pval</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max_tok_pval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntokens</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>symbol_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_prec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>prec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_assoc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>assoc</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>symbol_pval</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>symbol_pval</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>max_tok_pval</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_tok_pval</name> <operator>=</operator> <name><name>symbol_pval</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>destructor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>destructor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_type_tag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name><name>symbol_name</name><index>[<expr><name>start_symbol</name></expr>]</index></name> <operator>=</operator> <name>name_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_value</name><index>[<expr><name>start_symbol</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_prec</name><index>[<expr><name>start_symbol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_assoc</name><index>[<expr><name>start_symbol</name></expr>]</index></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>symbol_pval</name><index>[<expr><name>start_symbol</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>max_tok_pval</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><operator>++</operator><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_name</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_value</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_prec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>prec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_assoc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>assoc</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>symbol_pval</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>max_tok_pval</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>destructor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>symbol_destructor</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>destructor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_type_tag</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>gflag</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>symbol_pname</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>symbol_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>protect_string</name><argument_list>(<argument><expr><name><name>symbol_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>symbol_pname</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pack_grammar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Assoc_t</name></type> <name>assoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name></type> <name>prec2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ritem</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>ritem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rlhs</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>nrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>rlhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rrhs</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>nrules</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>rrhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rprec</name> <operator>=</operator> <call><name>TREALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>rprec</name></expr></argument>, <argument><expr><name>nrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>rprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rassoc</name> <operator>=</operator> <call><name>TREALLOC</name><argument_list>(<argument><expr><name>Assoc_t</name></expr></argument>, <argument><expr><name>rassoc</name></expr></argument>, <argument><expr><name>nrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>rassoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ritem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ritem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>goal</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ritem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ritem</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rlhs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rlhs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rlhs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>start_symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrhs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrhs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrhs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrules</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>plhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>args</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>plhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>argnames</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>plhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>argnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>argnames</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>plhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>argtags</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>plhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>argtags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>argtags</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>rlhs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>plhs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrhs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>assoc</name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prec2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>pitem</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ritem</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pitem</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pitem</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>class</name> <operator>==</operator> <name>TERM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prec2</name> <operator>=</operator> <name><name>pitem</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>prec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>assoc</name> <operator>=</operator> <name><name>pitem</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>assoc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>ritem</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>-</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rprec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>UNDEFINED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rprec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>prec2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rassoc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>assoc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>rrhs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>plhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clean_arg_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_grammar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>spacing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>verbose_file</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vflag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrules</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rlhs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>rlhs</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%4d %s :"</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name><name>rlhs</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>spacing</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>symbol_name</name><index>[<expr><name><name>rlhs</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%4d "</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>spacing</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name><name>ritem</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name><name>ritem</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>finalize_destructors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>symbol_type_tag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bp</name> <operator>=</operator> <name><name>default_destructor</name><index>[<expr><name>UNTYPED_DEFAULT</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>lookup_type_destructor</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bp</name> <operator>=</operator> <name><name>default_destructor</name><index>[<expr><name>TYPED_DEFAULT</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>=</operator> <call><name>process_destructor_XX</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>=</operator> <call><name>process_destructor_XX</name><argument_list>(<argument><expr><name><name>symbol_destructor</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>symbol_type_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bp</name> <operator>=</operator> <name><name>default_destructor</name><index>[<expr><name>UNTYPED_DEFAULT</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bp</name> <operator>=</operator> <name><name>default_destructor</name><index>[<expr><name>TYPED_DEFAULT</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bp</name> <operator>=</operator> <name><name>default_destructor</name><index>[<expr><name>TYPE_SPECIFIED</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bucket</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>bp</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name>p</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>destructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>reader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>write_section</name><argument_list>(<argument><expr><name>code_file</name></expr></argument>, <argument><expr><name>banner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_symbol_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>read_declarations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>read_grammar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_symbol_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack_names</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_symbols</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack_symbols</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack_grammar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_symbols</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_grammar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>destructor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>finalize_destructors</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free_tags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>param</name> <modifier>*</modifier></type>
<name>free_declarations</name><parameter_list>(<parameter><decl><type><name>param</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>list</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>param</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>type2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>reader_leaks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>lex_param</name> <operator>=</operator> <call><name>free_declarations</name><argument_list>(<argument><expr><name>lex_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parse_param</name> <operator>=</operator> <call><name>free_declarations</name><argument_list>(<argument><expr><name>parse_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>rrhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>rlhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>rprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>ritem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>rassoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>name_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>symbol_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>symbol_prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>symbol_assoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>symbol_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>symbol_pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>symbol_destructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>symbol_type_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
