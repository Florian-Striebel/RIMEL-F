<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/btyaccpar.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defs.h"</cpp:file></cpp:include>









<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>banner</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"/* original parser id follows */"</literal></expr>,
<expr><literal type="string">"/* yysccsid[] = \"@(#)yaccpar 1.9 (Berkeley) 02/21/93\" */"</literal></expr>,
<expr><literal type="string">"/* (use YYMAJOR/YYMINOR for ifdefs dependent on parser version) */"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#define YYBYACC 1"</literal></expr>,
<expr><call><name>CONCAT1</name><argument_list>(<argument><expr><literal type="string">"#define YYMAJOR "</literal></expr></argument>, <argument><expr><name>YYMAJOR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONCAT1</name><argument_list>(<argument><expr><literal type="string">"#define YYMINOR "</literal></expr></argument>, <argument><expr><name>YYMINOR</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYPATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CONCAT1</name><argument_list>(<argument><expr><literal type="string">"#define YYPATCH "</literal></expr></argument>, <argument><expr><name>YYPATCH</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#define YYEMPTY (-1)"</literal></expr>,
<expr><literal type="string">"#define yyclearin (yychar = YYEMPTY)"</literal></expr>,
<expr><literal type="string">"#define yyerrok (yyerrflag = 0)"</literal></expr>,
<expr><literal type="string">"#define YYRECOVERING() (yyerrflag != 0)"</literal></expr>,
<expr><literal type="string">"#define YYENOMEM (-2)"</literal></expr>,
<expr><literal type="string">"#define YYEOF 0"</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>xdecls</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"extern int YYPARSE_DECL();"</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>tables</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"extern const YYINT yylhs[];"</literal></expr>,
<expr><literal type="string">"extern const YYINT yylen[];"</literal></expr>,
<expr><literal type="string">"extern const YYINT yydefred[];"</literal></expr>,
<expr><literal type="string">"extern const YYINT yystos[];"</literal></expr>,
<expr><literal type="string">"extern const YYINT yydgoto[];"</literal></expr>,
<expr><literal type="string">"extern const YYINT yysindex[];"</literal></expr>,
<expr><literal type="string">"extern const YYINT yyrindex[];"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">"extern const YYINT yycindex[];"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"extern const YYINT yygindex[];"</literal></expr>,
<expr><literal type="string">"extern const YYINT yytable[];"</literal></expr>,
<expr><literal type="string">"extern const YYINT yycheck[];"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">"extern const YYINT yyctable[];"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if YYDEBUG || defined(yytname)"</literal></expr>,
<expr><literal type="string">"extern const char *const yyname[];"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">"extern const char *const yyrule[];"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>global_vars</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">"int yydebug;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>impure_vars</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"int yyerrflag;"</literal></expr>,
<expr><literal type="string">"int yychar;"</literal></expr>,
<expr><literal type="string">"YYSTYPE yyval;"</literal></expr>,
<expr><literal type="string">"YYSTYPE yylval;"</literal></expr>,
<expr><literal type="string">"int yynerrs;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">"YYLTYPE yyloc; /* position returned by actions */"</literal></expr>,
<expr><literal type="string">"YYLTYPE yylloc; /* position from the lexer */"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>hdr_defs</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">"#ifndef YYLLOC_DEFAULT"</literal></expr>,
<expr><literal type="string">"#define YYLLOC_DEFAULT(loc, rhs, n) \\"</literal></expr>,
<expr><literal type="string">"do \\"</literal></expr>,
<expr><literal type="string">"{ \\"</literal></expr>,
<expr><literal type="string">" if (n == 0) \\"</literal></expr>,
<expr><literal type="string">" { \\"</literal></expr>,
<expr><literal type="string">" (loc).first_line = YYRHSLOC(rhs, 0).last_line; \\"</literal></expr>,
<expr><literal type="string">" (loc).first_column = YYRHSLOC(rhs, 0).last_column; \\"</literal></expr>,
<expr><literal type="string">" (loc).last_line = YYRHSLOC(rhs, 0).last_line; \\"</literal></expr>,
<expr><literal type="string">" (loc).last_column = YYRHSLOC(rhs, 0).last_column; \\"</literal></expr>,
<expr><literal type="string">" } \\"</literal></expr>,
<expr><literal type="string">" else \\"</literal></expr>,
<expr><literal type="string">" { \\"</literal></expr>,
<expr><literal type="string">" (loc).first_line = YYRHSLOC(rhs, 1).first_line; \\"</literal></expr>,
<expr><literal type="string">" (loc).first_column = YYRHSLOC(rhs, 1).first_column; \\"</literal></expr>,
<expr><literal type="string">" (loc).last_line = YYRHSLOC(rhs, n).last_line; \\"</literal></expr>,
<expr><literal type="string">" (loc).last_column = YYRHSLOC(rhs, n).last_column; \\"</literal></expr>,
<expr><literal type="string">" } \\"</literal></expr>,
<expr><literal type="string">"} while (0)"</literal></expr>,
<expr><literal type="string">"#endif /* YYLLOC_DEFAULT */"</literal></expr>,
<expr><literal type="string">"#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#ifndef YYLVQUEUEGROWTH"</literal></expr>,
<expr><literal type="string">"#define YYLVQUEUEGROWTH 32"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* define the initial stack-sizes */"</literal></expr>,
<expr><literal type="string">"#ifdef YYSTACKSIZE"</literal></expr>,
<expr><literal type="string">"#undef YYMAXDEPTH"</literal></expr>,
<expr><literal type="string">"#define YYMAXDEPTH YYSTACKSIZE"</literal></expr>,
<expr><literal type="string">"#else"</literal></expr>,
<expr><literal type="string">"#ifdef YYMAXDEPTH"</literal></expr>,
<expr><literal type="string">"#define YYSTACKSIZE YYMAXDEPTH"</literal></expr>,
<expr><literal type="string">"#else"</literal></expr>,
<expr><literal type="string">"#define YYSTACKSIZE 10000"</literal></expr>,
<expr><literal type="string">"#define YYMAXDEPTH 10000"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#ifndef YYINITSTACKSIZE"</literal></expr>,
<expr><literal type="string">"#define YYINITSTACKSIZE 200"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"typedef struct {"</literal></expr>,
<expr><literal type="string">" unsigned stacksize;"</literal></expr>,
<expr><literal type="string">" YYINT *s_base;"</literal></expr>,
<expr><literal type="string">" YYINT *s_mark;"</literal></expr>,
<expr><literal type="string">" YYINT *s_last;"</literal></expr>,
<expr><literal type="string">" YYSTYPE *l_base;"</literal></expr>,
<expr><literal type="string">" YYSTYPE *l_mark;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" YYLTYPE *p_base;"</literal></expr>,
<expr><literal type="string">" YYLTYPE *p_mark;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">"} YYSTACKDATA;"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"struct YYParseState_s"</literal></expr>,
<expr><literal type="string">"{"</literal></expr>,
<expr><literal type="string">" struct YYParseState_s *save; /* Previously saved parser state */"</literal></expr>,
<expr><literal type="string">" YYSTACKDATA yystack; /* saved parser stack */"</literal></expr>,
<expr><literal type="string">" int state; /* saved parser state */"</literal></expr>,
<expr><literal type="string">" int errflag; /* saved error recovery status */"</literal></expr>,
<expr><literal type="string">" int lexeme; /* saved index of the conflict lexeme in the lexical queue */"</literal></expr>,
<expr><literal type="string">" YYINT ctry; /* saved index in yyctable[] for this conflict */"</literal></expr>,
<expr><literal type="string">"};"</literal></expr>,
<expr><literal type="string">"typedef struct YYParseState_s YYParseState;"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>hdr_vars</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"/* variables for the parser stack */"</literal></expr>,
<expr><literal type="string">"static YYSTACKDATA yystack;"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* Current parser state */"</literal></expr>,
<expr><literal type="string">"static YYParseState *yyps = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* yypath != NULL: do the full parse, starting at *yypath parser state. */"</literal></expr>,
<expr><literal type="string">"static YYParseState *yypath = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* Base of the lexical value queue */"</literal></expr>,
<expr><literal type="string">"static YYSTYPE *yylvals = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* Current position at lexical value queue */"</literal></expr>,
<expr><literal type="string">"static YYSTYPE *yylvp = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* End position of lexical value queue */"</literal></expr>,
<expr><literal type="string">"static YYSTYPE *yylve = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* The last allocated position at the lexical value queue */"</literal></expr>,
<expr><literal type="string">"static YYSTYPE *yylvlim = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">"/* Base of the lexical position queue */"</literal></expr>,
<expr><literal type="string">"static YYLTYPE *yylpsns = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* Current position at lexical position queue */"</literal></expr>,
<expr><literal type="string">"static YYLTYPE *yylpp = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* End position of lexical position queue */"</literal></expr>,
<expr><literal type="string">"static YYLTYPE *yylpe = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* The last allocated position at the lexical position queue */"</literal></expr>,
<expr><literal type="string">"static YYLTYPE *yylplim = 0;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* Current position at lexical token queue */"</literal></expr>,
<expr><literal type="string">"static YYINT *yylexp = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"static YYINT *yylexemes = 0;"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>body_vars</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">" int yyerrflag;"</literal></expr>,
<expr><literal type="string">" int yychar;"</literal></expr>,
<expr><literal type="string">" YYSTYPE yyval;"</literal></expr>,
<expr><literal type="string">" YYSTYPE yylval;"</literal></expr>,
<expr><literal type="string">" int yynerrs;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" YYLTYPE yyloc; /* position returned by actions */"</literal></expr>,
<expr><literal type="string">" YYLTYPE yylloc; /* position from the lexer */"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* variables for the parser stack */"</literal></expr>,
<expr><literal type="string">" YYSTACKDATA yystack;"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* Current parser state */"</literal></expr>,
<expr><literal type="string">" static YYParseState *yyps = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* yypath != NULL: do the full parse, starting at *yypath parser state. */"</literal></expr>,
<expr><literal type="string">" static YYParseState *yypath = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* Base of the lexical value queue */"</literal></expr>,
<expr><literal type="string">" static YYSTYPE *yylvals = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* Current position at lexical value queue */"</literal></expr>,
<expr><literal type="string">" static YYSTYPE *yylvp = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* End position of lexical value queue */"</literal></expr>,
<expr><literal type="string">" static YYSTYPE *yylve = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* The last allocated position at the lexical value queue */"</literal></expr>,
<expr><literal type="string">" static YYSTYPE *yylvlim = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" /* Base of the lexical position queue */"</literal></expr>,
<expr><literal type="string">" static YYLTYPE *yylpsns = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* Current position at lexical position queue */"</literal></expr>,
<expr><literal type="string">" static YYLTYPE *yylpp = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* End position of lexical position queue */"</literal></expr>,
<expr><literal type="string">" static YYLTYPE *yylpe = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* The last allocated position at the lexical position queue */"</literal></expr>,
<expr><literal type="string">" static YYLTYPE *yylplim = 0;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* Current position at lexical token queue */"</literal></expr>,
<expr><literal type="string">" static YYINT *yylexp = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" static YYINT *yylexemes = 0;"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>body_1</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* For use in generated program */"</literal></expr>,
<expr><literal type="string">"#define yydepth (int)(yystack.s_mark - yystack.s_base)"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">"#define yytrial (yyps-&gt;save)"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">"#include &lt;stdio.h&gt; /* needed for printf */"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#include &lt;stdlib.h&gt; /* needed for malloc, etc */"</literal></expr>,
<expr><literal type="string">"#include &lt;string.h&gt; /* needed for memset */"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/* allocate initial stack or double stack size, up to YYMAXDEPTH */"</literal></expr>,
<expr><literal type="string">"static int yygrowstack(YYSTACKDATA *data)"</literal></expr>,
<expr><literal type="string">"{"</literal></expr>,
<expr><literal type="string">" int i;"</literal></expr>,
<expr><literal type="string">" unsigned newsize;"</literal></expr>,
<expr><literal type="string">" YYINT *newss;"</literal></expr>,
<expr><literal type="string">" YYSTYPE *newvs;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" YYLTYPE *newps;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" if ((newsize = data-&gt;stacksize) == 0)"</literal></expr>,
<expr><literal type="string">" newsize = YYINITSTACKSIZE;"</literal></expr>,
<expr><literal type="string">" else if (newsize &gt;= YYMAXDEPTH)"</literal></expr>,
<expr><literal type="string">" return YYENOMEM;"</literal></expr>,
<expr><literal type="string">" else if ((newsize *= 2) &gt; YYMAXDEPTH)"</literal></expr>,
<expr><literal type="string">" newsize = YYMAXDEPTH;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" i = (int) (data-&gt;s_mark - data-&gt;s_base);"</literal></expr>,
<expr><literal type="string">" newss = (YYINT *)realloc(data-&gt;s_base, newsize * sizeof(*newss));"</literal></expr>,
<expr><literal type="string">" if (newss == NULL)"</literal></expr>,
<expr><literal type="string">" return YYENOMEM;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" data-&gt;s_base = newss;"</literal></expr>,
<expr><literal type="string">" data-&gt;s_mark = newss + i;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" newvs = (YYSTYPE *)realloc(data-&gt;l_base, newsize * sizeof(*newvs));"</literal></expr>,
<expr><literal type="string">" if (newvs == NULL)"</literal></expr>,
<expr><literal type="string">" return YYENOMEM;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" data-&gt;l_base = newvs;"</literal></expr>,
<expr><literal type="string">" data-&gt;l_mark = newvs + i;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" newps = (YYLTYPE *)realloc(data-&gt;p_base, newsize * sizeof(*newps));"</literal></expr>,
<expr><literal type="string">" if (newps == NULL)"</literal></expr>,
<expr><literal type="string">" return YYENOMEM;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" data-&gt;p_base = newps;"</literal></expr>,
<expr><literal type="string">" data-&gt;p_mark = newps + i;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" data-&gt;stacksize = newsize;"</literal></expr>,
<expr><literal type="string">" data-&gt;s_last = data-&gt;s_base + newsize - 1;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%sdebug: stack size increased to %d\\n\", YYPREFIX, newsize);"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" return 0;"</literal></expr>,
<expr><literal type="string">"}"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if YYPURE || defined(YY_NO_LEAKS)"</literal></expr>,
<expr><literal type="string">"static void yyfreestack(YYSTACKDATA *data)"</literal></expr>,
<expr><literal type="string">"{"</literal></expr>,
<expr><literal type="string">" free(data-&gt;s_base);"</literal></expr>,
<expr><literal type="string">" free(data-&gt;l_base);"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" free(data-&gt;p_base);"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" memset(data, 0, sizeof(*data));"</literal></expr>,
<expr><literal type="string">"}"</literal></expr>,
<expr><literal type="string">"#else"</literal></expr>,
<expr><literal type="string">"#define yyfreestack(data) /* nothing */"</literal></expr>,
<expr><literal type="string">"#endif /* YYPURE || defined(YY_NO_LEAKS) */"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"static YYParseState *"</literal></expr>,
<expr><literal type="string">"yyNewState(unsigned size)"</literal></expr>,
<expr><literal type="string">"{"</literal></expr>,
<expr><literal type="string">" YYParseState *p = (YYParseState *) malloc(sizeof(YYParseState));"</literal></expr>,
<expr><literal type="string">" if (p == NULL) return NULL;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" p-&gt;yystack.stacksize = size;"</literal></expr>,
<expr><literal type="string">" if (size == 0)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" p-&gt;yystack.s_base = NULL;"</literal></expr>,
<expr><literal type="string">" p-&gt;yystack.l_base = NULL;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" p-&gt;yystack.p_base = NULL;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" return p;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" p-&gt;yystack.s_base = (YYINT *) malloc(size * sizeof(YYINT));"</literal></expr>,
<expr><literal type="string">" if (p-&gt;yystack.s_base == NULL) return NULL;"</literal></expr>,
<expr><literal type="string">" p-&gt;yystack.l_base = (YYSTYPE *) malloc(size * sizeof(YYSTYPE));"</literal></expr>,
<expr><literal type="string">" if (p-&gt;yystack.l_base == NULL) return NULL;"</literal></expr>,
<expr><literal type="string">" memset(p-&gt;yystack.l_base, 0, size * sizeof(YYSTYPE));"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" p-&gt;yystack.p_base = (YYLTYPE *) malloc(size * sizeof(YYLTYPE));"</literal></expr>,
<expr><literal type="string">" if (p-&gt;yystack.p_base == NULL) return NULL;"</literal></expr>,
<expr><literal type="string">" memset(p-&gt;yystack.p_base, 0, size * sizeof(YYLTYPE));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" return p;"</literal></expr>,
<expr><literal type="string">"}"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"static void"</literal></expr>,
<expr><literal type="string">"yyFreeState(YYParseState *p)"</literal></expr>,
<expr><literal type="string">"{"</literal></expr>,
<expr><literal type="string">" yyfreestack(&amp;p-&gt;yystack);"</literal></expr>,
<expr><literal type="string">" free(p);"</literal></expr>,
<expr><literal type="string">"}"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#define YYABORT goto yyabort"</literal></expr>,
<expr><literal type="string">"#define YYREJECT goto yyabort"</literal></expr>,
<expr><literal type="string">"#define YYACCEPT goto yyaccept"</literal></expr>,
<expr><literal type="string">"#define YYERROR goto yyerrlab"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">"#define YYVALID do { if (yyps-&gt;save) goto yyvalid; } while(0)"</literal></expr>,
<expr><literal type="string">"#define YYVALID_NESTED do { if (yyps-&gt;save &amp;&amp; \\"</literal></expr>,
<expr><literal type="string">" yyps-&gt;save-&gt;save == 0) goto yyvalid; } while(0)"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"int"</literal></expr>,
<expr><literal type="string">"YYPARSE_DECL()"</literal></expr>,
<expr><literal type="string">"{"</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>body_2</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">" int yym, yyn, yystate, yyresult;"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" int yynewerrflag;"</literal></expr>,
<expr><literal type="string">" YYParseState *yyerrctx = NULL;"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" YYLTYPE yyerror_loc_range[3]; /* position of error start/end (0 unused) */"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" const char *yys;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" if ((yys = getenv(\"YYDEBUG\")) != NULL)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" yyn = *yys;"</literal></expr>,
<expr><literal type="string">" if (yyn &gt;= '0' &amp;&amp; yyn &lt;= '9')"</literal></expr>,
<expr><literal type="string">" yydebug = yyn - '0';"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%sdebug[&lt;#of symbols on state stack&gt;]\\n\", YYPREFIX);"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" memset(yyerror_loc_range, 0, sizeof(yyerror_loc_range));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>init_vars</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">" yyerrflag = 0;"</literal></expr>,
<expr><literal type="string">" yychar = 0;"</literal></expr>,
<expr><literal type="string">" memset(&amp;yyval, 0, sizeof(yyval));"</literal></expr>,
<expr><literal type="string">" memset(&amp;yylval, 0, sizeof(yylval));"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" memset(&amp;yyloc, 0, sizeof(yyloc));"</literal></expr>,
<expr><literal type="string">" memset(&amp;yylloc, 0, sizeof(yylloc));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>body_3</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" yyps = yyNewState(0); if (yyps == 0) goto yyenomem;"</literal></expr>,
<expr><literal type="string">" yyps-&gt;save = 0;"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" yym = 0;"</literal></expr>,
<expr><literal type="string">" yyn = 0;"</literal></expr>,
<expr><literal type="string">" yynerrs = 0;"</literal></expr>,
<expr><literal type="string">" yyerrflag = 0;"</literal></expr>,
<expr><literal type="string">" yychar = YYEMPTY;"</literal></expr>,
<expr><literal type="string">" yystate = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if YYPURE"</literal></expr>,
<expr><literal type="string">" memset(&amp;yystack, 0, sizeof(yystack));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" if (yystack.s_base == NULL &amp;&amp; yygrowstack(&amp;yystack) == YYENOMEM) goto yyoverflow;"</literal></expr>,
<expr><literal type="string">" yystack.s_mark = yystack.s_base;"</literal></expr>,
<expr><literal type="string">" yystack.l_mark = yystack.l_base;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yystack.p_mark = yystack.p_base;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yystate = 0;"</literal></expr>,
<expr><literal type="string">" *yystack.s_mark = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"yyloop:"</literal></expr>,
<expr><literal type="string">" if ((yyn = yydefred[yystate]) != 0) goto yyreduce;"</literal></expr>,
<expr><literal type="string">" if (yychar &lt; 0)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" do {"</literal></expr>,
<expr><literal type="string">" if (yylvp &lt; yylve)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" /* we're currently re-reading tokens */"</literal></expr>,
<expr><literal type="string">" yylval = *yylvp++;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylloc = *yylpp++;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yychar = *yylexp++;"</literal></expr>,
<expr><literal type="string">" break;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (yyps-&gt;save)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" /* in trial mode; save scanner results for future parse attempts */"</literal></expr>,
<expr><literal type="string">" if (yylvp == yylvlim)"</literal></expr>,
<expr><literal type="string">" { /* Enlarge lexical value queue */"</literal></expr>,
<expr><literal type="string">" size_t p = (size_t) (yylvp - yylvals);"</literal></expr>,
<expr><literal type="string">" size_t s = (size_t) (yylvlim - yylvals);"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" s += YYLVQUEUEGROWTH;"</literal></expr>,
<expr><literal type="string">" if ((yylexemes = (YYINT *)realloc(yylexemes, s * sizeof(YYINT))) == NULL) goto yyenomem;"</literal></expr>,
<expr><literal type="string">" if ((yylvals = (YYSTYPE *)realloc(yylvals, s * sizeof(YYSTYPE))) == NULL) goto yyenomem;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" if ((yylpsns = (YYLTYPE *)realloc(yylpsns, s * sizeof(YYLTYPE))) == NULL) goto yyenomem;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yylvp = yylve = yylvals + p;"</literal></expr>,
<expr><literal type="string">" yylvlim = yylvals + s;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylpp = yylpe = yylpsns + p;"</literal></expr>,
<expr><literal type="string">" yylplim = yylpsns + s;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yylexp = yylexemes + p;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" *yylexp = (YYINT) YYLEX;"</literal></expr>,
<expr><literal type="string">" *yylvp++ = yylval;"</literal></expr>,
<expr><literal type="string">" yylve++;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" *yylpp++ = yylloc;"</literal></expr>,
<expr><literal type="string">" yylpe++;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yychar = *yylexp++;"</literal></expr>,
<expr><literal type="string">" break;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" /* normal operation, no conflict encountered */"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" yychar = YYLEX;"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" } while (0);"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" if (yychar &lt; 0) yychar = YYEOF;"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: state %d, reading token %d (%s)\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, yystate, yychar, yys);"</literal></expr>,
<expr><literal type="string">"#ifdef YYSTYPE_TOSTRING"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" if (!yytrial)"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" fprintf(stderr, \" &lt;%s&gt;\", YYSTYPE_TOSTRING(yychar, yylval));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" fputc('\\n', stderr);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* Do we have a conflict? */"</literal></expr>,
<expr><literal type="string">" if (((yyn = yycindex[yystate]) != 0) &amp;&amp; (yyn += yychar) &gt;= 0 &amp;&amp;"</literal></expr>,
<expr><literal type="string">" yyn &lt;= YYTABLESIZE &amp;&amp; yycheck[yyn] == (YYINT) yychar)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" YYINT ctry;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" if (yypath)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" YYParseState *save;"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: CONFLICT in state %d: following successful trial parse\\n\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, yystate);"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" /* Switch to the next conflict context */"</literal></expr>,
<expr><literal type="string">" save = yypath;"</literal></expr>,
<expr><literal type="string">" yypath = save-&gt;save;"</literal></expr>,
<expr><literal type="string">" save-&gt;save = NULL;"</literal></expr>,
<expr><literal type="string">" ctry = save-&gt;ctry;"</literal></expr>,
<expr><literal type="string">" if (save-&gt;state != yystate) YYABORT;"</literal></expr>,
<expr><literal type="string">" yyFreeState(save);"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" else"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* Unresolved conflict - start/continue trial parse */"</literal></expr>,
<expr><literal type="string">" YYParseState *save;"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: CONFLICT in state %d. \", YYDEBUGSTR, yydepth, yystate);"</literal></expr>,
<expr><literal type="string">" if (yyps-&gt;save)"</literal></expr>,
<expr><literal type="string">" fputs(\"ALREADY in conflict, continuing trial parse.\\n\", stderr);"</literal></expr>,
<expr><literal type="string">" else"</literal></expr>,
<expr><literal type="string">" fputs(\"Starting trial parse.\\n\", stderr);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" save = yyNewState((unsigned)(yystack.s_mark - yystack.s_base + 1));"</literal></expr>,
<expr><literal type="string">" if (save == NULL) goto yyenomem;"</literal></expr>,
<expr><literal type="string">" save-&gt;save = yyps-&gt;save;"</literal></expr>,
<expr><literal type="string">" save-&gt;state = yystate;"</literal></expr>,
<expr><literal type="string">" save-&gt;errflag = yyerrflag;"</literal></expr>,
<expr><literal type="string">" save-&gt;yystack.s_mark = save-&gt;yystack.s_base + (yystack.s_mark - yystack.s_base);"</literal></expr>,
<expr><literal type="string">" memcpy (save-&gt;yystack.s_base, yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));"</literal></expr>,
<expr><literal type="string">" save-&gt;yystack.l_mark = save-&gt;yystack.l_base + (yystack.l_mark - yystack.l_base);"</literal></expr>,
<expr><literal type="string">" memcpy (save-&gt;yystack.l_base, yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" save-&gt;yystack.p_mark = save-&gt;yystack.p_base + (yystack.p_mark - yystack.p_base);"</literal></expr>,
<expr><literal type="string">" memcpy (save-&gt;yystack.p_base, yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" ctry = yytable[yyn];"</literal></expr>,
<expr><literal type="string">" if (yyctable[ctry] == -1)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug &amp;&amp; yychar &gt;= YYEOF)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: backtracking 1 token\\n\", YYDEBUGSTR, yydepth);"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" ctry++;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" save-&gt;ctry = ctry;"</literal></expr>,
<expr><literal type="string">" if (yyps-&gt;save == NULL)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" /* If this is a first conflict in the stack, start saving lexemes */"</literal></expr>,
<expr><literal type="string">" if (!yylexemes)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" yylexemes = (YYINT *) malloc((YYLVQUEUEGROWTH) * sizeof(YYINT));"</literal></expr>,
<expr><literal type="string">" if (yylexemes == NULL) goto yyenomem;"</literal></expr>,
<expr><literal type="string">" yylvals = (YYSTYPE *) malloc((YYLVQUEUEGROWTH) * sizeof(YYSTYPE));"</literal></expr>,
<expr><literal type="string">" if (yylvals == NULL) goto yyenomem;"</literal></expr>,
<expr><literal type="string">" yylvlim = yylvals + YYLVQUEUEGROWTH;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylpsns = (YYLTYPE *) malloc((YYLVQUEUEGROWTH) * sizeof(YYLTYPE));"</literal></expr>,
<expr><literal type="string">" if (yylpsns == NULL) goto yyenomem;"</literal></expr>,
<expr><literal type="string">" yylplim = yylpsns + YYLVQUEUEGROWTH;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (yylvp == yylve)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" yylvp = yylve = yylvals;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylpp = yylpe = yylpsns;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yylexp = yylexemes;"</literal></expr>,
<expr><literal type="string">" if (yychar &gt;= YYEOF)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" *yylve++ = yylval;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" *yylpe++ = yylloc;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" *yylexp = (YYINT) yychar;"</literal></expr>,
<expr><literal type="string">" yychar = YYEMPTY;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (yychar &gt;= YYEOF)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" yylvp--;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylpp--;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yylexp--;"</literal></expr>,
<expr><literal type="string">" yychar = YYEMPTY;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" save-&gt;lexeme = (int) (yylvp - yylvals);"</literal></expr>,
<expr><literal type="string">" yyps-&gt;save = save;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (yytable[yyn] == ctry)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: state %d, shifting to state %d\\n\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, yystate, yyctable[ctry]);"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" if (yychar &lt; 0)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" yylvp++;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylpp++;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yylexp++;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (yystack.s_mark &gt;= yystack.s_last &amp;&amp; yygrowstack(&amp;yystack) == YYENOMEM)"</literal></expr>,
<expr><literal type="string">" goto yyoverflow;"</literal></expr>,
<expr><literal type="string">" yystate = yyctable[ctry];"</literal></expr>,
<expr><literal type="string">" *++yystack.s_mark = (YYINT) yystate;"</literal></expr>,
<expr><literal type="string">" *++yystack.l_mark = yylval;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" *++yystack.p_mark = yylloc;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yychar = YYEMPTY;"</literal></expr>,
<expr><literal type="string">" if (yyerrflag &gt; 0) --yyerrflag;"</literal></expr>,
<expr><literal type="string">" goto yyloop;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" else"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" yyn = yyctable[ctry];"</literal></expr>,
<expr><literal type="string">" goto yyreduce;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" } /* End of code dealing with conflicts */"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" if (((yyn = yysindex[yystate]) != 0) &amp;&amp; (yyn += yychar) &gt;= 0 &amp;&amp;"</literal></expr>,
<expr><literal type="string">" yyn &lt;= YYTABLESIZE &amp;&amp; yycheck[yyn] == (YYINT) yychar)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: state %d, shifting to state %d\\n\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, yystate, yytable[yyn]);"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" if (yystack.s_mark &gt;= yystack.s_last &amp;&amp; yygrowstack(&amp;yystack) == YYENOMEM) goto yyoverflow;"</literal></expr>,
<expr><literal type="string">" yystate = yytable[yyn];"</literal></expr>,
<expr><literal type="string">" *++yystack.s_mark = yytable[yyn];"</literal></expr>,
<expr><literal type="string">" *++yystack.l_mark = yylval;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" *++yystack.p_mark = yylloc;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yychar = YYEMPTY;"</literal></expr>,
<expr><literal type="string">" if (yyerrflag &gt; 0) --yyerrflag;"</literal></expr>,
<expr><literal type="string">" goto yyloop;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (((yyn = yyrindex[yystate]) != 0) &amp;&amp; (yyn += yychar) &gt;= 0 &amp;&amp;"</literal></expr>,
<expr><literal type="string">" yyn &lt;= YYTABLESIZE &amp;&amp; yycheck[yyn] == (YYINT) yychar)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" yyn = yytable[yyn];"</literal></expr>,
<expr><literal type="string">" goto yyreduce;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (yyerrflag != 0) goto yyinrecovery;"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" yynewerrflag = 1;"</literal></expr>,
<expr><literal type="string">" goto yyerrhandler;"</literal></expr>,
<expr><literal type="string">" goto yyerrlab; /* redundant goto avoids 'unused label' warning */"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"yyerrlab:"</literal></expr>,
<expr><literal type="string">" /* explicit YYERROR from an action -- pop the rhs of the rule reduced"</literal></expr>,
<expr><literal type="string">" * before looking for error recovery */"</literal></expr>,
<expr><literal type="string">" yystack.s_mark -= yym;"</literal></expr>,
<expr><literal type="string">" yystate = *yystack.s_mark;"</literal></expr>,
<expr><literal type="string">" yystack.l_mark -= yym;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yystack.p_mark -= yym;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" yynewerrflag = 0;"</literal></expr>,
<expr><literal type="string">"yyerrhandler:"</literal></expr>,
<expr><literal type="string">" while (yyps-&gt;save)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" int ctry;"</literal></expr>,
<expr><literal type="string">" YYParseState *save = yyps-&gt;save;"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\\n\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, yystate, yyps-&gt;save-&gt;state,"</literal></expr>,
<expr><literal type="string">" (int)(yylvp - yylvals - yyps-&gt;save-&gt;lexeme));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" /* Memorize most forward-looking error state in case it's really an error. */"</literal></expr>,
<expr><literal type="string">" if (yyerrctx == NULL || yyerrctx-&gt;lexeme &lt; yylvp - yylvals)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" /* Free old saved error context state */"</literal></expr>,
<expr><literal type="string">" if (yyerrctx) yyFreeState(yyerrctx);"</literal></expr>,
<expr><literal type="string">" /* Create and fill out new saved error context state */"</literal></expr>,
<expr><literal type="string">" yyerrctx = yyNewState((unsigned)(yystack.s_mark - yystack.s_base + 1));"</literal></expr>,
<expr><literal type="string">" if (yyerrctx == NULL) goto yyenomem;"</literal></expr>,
<expr><literal type="string">" yyerrctx-&gt;save = yyps-&gt;save;"</literal></expr>,
<expr><literal type="string">" yyerrctx-&gt;state = yystate;"</literal></expr>,
<expr><literal type="string">" yyerrctx-&gt;errflag = yyerrflag;"</literal></expr>,
<expr><literal type="string">" yyerrctx-&gt;yystack.s_mark = yyerrctx-&gt;yystack.s_base + (yystack.s_mark - yystack.s_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yyerrctx-&gt;yystack.s_base, yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));"</literal></expr>,
<expr><literal type="string">" yyerrctx-&gt;yystack.l_mark = yyerrctx-&gt;yystack.l_base + (yystack.l_mark - yystack.l_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yyerrctx-&gt;yystack.l_base, yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yyerrctx-&gt;yystack.p_mark = yyerrctx-&gt;yystack.p_base + (yystack.p_mark - yystack.p_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yyerrctx-&gt;yystack.p_base, yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yyerrctx-&gt;lexeme = (int) (yylvp - yylvals);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" yylvp = yylvals + save-&gt;lexeme;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylpp = yylpsns + save-&gt;lexeme;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yylexp = yylexemes + save-&gt;lexeme;"</literal></expr>,
<expr><literal type="string">" yychar = YYEMPTY;"</literal></expr>,
<expr><literal type="string">" yystack.s_mark = yystack.s_base + (save-&gt;yystack.s_mark - save-&gt;yystack.s_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yystack.s_base, save-&gt;yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));"</literal></expr>,
<expr><literal type="string">" yystack.l_mark = yystack.l_base + (save-&gt;yystack.l_mark - save-&gt;yystack.l_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yystack.l_base, save-&gt;yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yystack.p_mark = yystack.p_base + (save-&gt;yystack.p_mark - save-&gt;yystack.p_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yystack.p_base, save-&gt;yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" ctry = ++save-&gt;ctry;"</literal></expr>,
<expr><literal type="string">" yystate = save-&gt;state;"</literal></expr>,
<expr><literal type="string">" /* We tried shift, try reduce now */"</literal></expr>,
<expr><literal type="string">" if ((yyn = yyctable[ctry]) &gt;= 0) goto yyreduce;"</literal></expr>,
<expr><literal type="string">" yyps-&gt;save = save-&gt;save;"</literal></expr>,
<expr><literal type="string">" save-&gt;save = NULL;"</literal></expr>,
<expr><literal type="string">" yyFreeState(save);"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* Nothing left on the stack -- error */"</literal></expr>,
<expr><literal type="string">" if (!yyps-&gt;save)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%sdebug[%d,trial]: trial parse FAILED, entering ERROR mode\\n\","</literal></expr>,
<expr><literal type="string">" YYPREFIX, yydepth);"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" /* Restore state as it was in the most forward-advanced error */"</literal></expr>,
<expr><literal type="string">" yylvp = yylvals + yyerrctx-&gt;lexeme;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylpp = yylpsns + yyerrctx-&gt;lexeme;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yylexp = yylexemes + yyerrctx-&gt;lexeme;"</literal></expr>,
<expr><literal type="string">" yychar = yylexp[-1];"</literal></expr>,
<expr><literal type="string">" yylval = yylvp[-1];"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylloc = yylpp[-1];"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yystack.s_mark = yystack.s_base + (yyerrctx-&gt;yystack.s_mark - yyerrctx-&gt;yystack.s_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yystack.s_base, yyerrctx-&gt;yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));"</literal></expr>,
<expr><literal type="string">" yystack.l_mark = yystack.l_base + (yyerrctx-&gt;yystack.l_mark - yyerrctx-&gt;yystack.l_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yystack.l_base, yyerrctx-&gt;yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yystack.p_mark = yystack.p_base + (yyerrctx-&gt;yystack.p_mark - yyerrctx-&gt;yystack.p_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yystack.p_base, yyerrctx-&gt;yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yystate = yyerrctx-&gt;state;"</literal></expr>,
<expr><literal type="string">" yyFreeState(yyerrctx);"</literal></expr>,
<expr><literal type="string">" yyerrctx = NULL;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" yynewerrflag = 1;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (yynewerrflag == 0) goto yyinrecovery;"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" YYERROR_CALL(\"syntax error\");"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yyerror_loc_range[1] = yylloc; /* lookahead position is error start position */"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"#if !YYBTYACC"</literal></expr>,
<expr><literal type="string">" goto yyerrlab; /* redundant goto avoids 'unused label' warning */"</literal></expr>,
<expr><literal type="string">"yyerrlab:"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" ++yynerrs;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"yyinrecovery:"</literal></expr>,
<expr><literal type="string">" if (yyerrflag &lt; 3)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" yyerrflag = 3;"</literal></expr>,
<expr><literal type="string">" for (;;)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" if (((yyn = yysindex[*yystack.s_mark]) != 0) &amp;&amp; (yyn += YYERRCODE) &gt;= 0 &amp;&amp;"</literal></expr>,
<expr><literal type="string">" yyn &lt;= YYTABLESIZE &amp;&amp; yycheck[yyn] == (YYINT) YYERRCODE)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: state %d, error recovery shifting to state %d\\n\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, *yystack.s_mark, yytable[yyn]);"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" if (yystack.s_mark &gt;= yystack.s_last &amp;&amp; yygrowstack(&amp;yystack) == YYENOMEM) goto yyoverflow;"</literal></expr>,
<expr><literal type="string">" yystate = yytable[yyn];"</literal></expr>,
<expr><literal type="string">" *++yystack.s_mark = yytable[yyn];"</literal></expr>,
<expr><literal type="string">" *++yystack.l_mark = yylval;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" /* lookahead position is error end position */"</literal></expr>,
<expr><literal type="string">" yyerror_loc_range[2] = yylloc;"</literal></expr>,
<expr><literal type="string">" YYLLOC_DEFAULT(yyloc, yyerror_loc_range, 2); /* position of error span */"</literal></expr>,
<expr><literal type="string">" *++yystack.p_mark = yyloc;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" goto yyloop;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" else"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: error recovery discarding state %d\\n\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, *yystack.s_mark);"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" if (yystack.s_mark &lt;= yystack.s_base) goto yyabort;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" /* the current TOS position is the error start position */"</literal></expr>,
<expr><literal type="string">" yyerror_loc_range[1] = *yystack.p_mark;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">"#if defined(YYDESTRUCT_CALL)"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" if (!yytrial)"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" YYDESTRUCT_CALL(\"error: discarding state\","</literal></expr>,
<expr><literal type="string">" yystos[*yystack.s_mark], yystack.l_mark, yystack.p_mark);"</literal></expr>,
<expr><literal type="string">"#else"</literal></expr>,
<expr><literal type="string">" YYDESTRUCT_CALL(\"error: discarding state\","</literal></expr>,
<expr><literal type="string">" yystos[*yystack.s_mark], yystack.l_mark);"</literal></expr>,
<expr><literal type="string">"#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */"</literal></expr>,
<expr><literal type="string">"#endif /* defined(YYDESTRUCT_CALL) */"</literal></expr>,
<expr><literal type="string">" --yystack.s_mark;"</literal></expr>,
<expr><literal type="string">" --yystack.l_mark;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" --yystack.p_mark;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" else"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" if (yychar == YYEOF) goto yyabort;"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: state %d, error recovery discarding token %d (%s)\\n\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, yystate, yychar, yys);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">"#if defined(YYDESTRUCT_CALL)"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" if (!yytrial)"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" YYDESTRUCT_CALL(\"error: discarding token\", yychar, &amp;yylval, &amp;yylloc);"</literal></expr>,
<expr><literal type="string">"#else"</literal></expr>,
<expr><literal type="string">" YYDESTRUCT_CALL(\"error: discarding token\", yychar, &amp;yylval);"</literal></expr>,
<expr><literal type="string">"#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */"</literal></expr>,
<expr><literal type="string">"#endif /* defined(YYDESTRUCT_CALL) */"</literal></expr>,
<expr><literal type="string">" yychar = YYEMPTY;"</literal></expr>,
<expr><literal type="string">" goto yyloop;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"yyreduce:"</literal></expr>,
<expr><literal type="string">" yym = yylen[yyn];"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: state %d, reducing by rule %d (%s)\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, yystate, yyn, yyrule[yyn]);"</literal></expr>,
<expr><literal type="string">"#ifdef YYSTYPE_TOSTRING"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" if (!yytrial)"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" if (yym &gt; 0)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" int i;"</literal></expr>,
<expr><literal type="string">" fputc('&lt;', stderr);"</literal></expr>,
<expr><literal type="string">" for (i = yym; i &gt; 0; i--)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" if (i != yym) fputs(\", \", stderr);"</literal></expr>,
<expr><literal type="string">" fputs(YYSTYPE_TOSTRING(yystos[yystack.s_mark[1-i]],"</literal></expr>,
<expr><literal type="string">" yystack.l_mark[1-i]), stderr);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" fputc('&gt;', stderr);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" fputc('\\n', stderr);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" if (yym &gt; 0)"</literal></expr>,
<expr><literal type="string">" yyval = yystack.l_mark[1-yym];"</literal></expr>,
<expr><literal type="string">" else"</literal></expr>,
<expr><literal type="string">" memset(&amp;yyval, 0, sizeof yyval);"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* Perform position reduction */"</literal></expr>,
<expr><literal type="string">" memset(&amp;yyloc, 0, sizeof(yyloc));"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" if (!yytrial)"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" YYLLOC_DEFAULT(yyloc, &amp;yystack.p_mark[-yym], yym);"</literal></expr>,
<expr><literal type="string">" /* just in case YYERROR is invoked within the action, save"</literal></expr>,
<expr><literal type="string">" the start of the rhs as the error start position */"</literal></expr>,
<expr><literal type="string">" yyerror_loc_range[1] = yystack.p_mark[1-yym];"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" switch (yyn)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>trailer</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">" default:"</literal></expr>,
<expr><literal type="string">" break;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" yystack.s_mark -= yym;"</literal></expr>,
<expr><literal type="string">" yystate = *yystack.s_mark;"</literal></expr>,
<expr><literal type="string">" yystack.l_mark -= yym;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yystack.p_mark -= yym;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yym = yylhs[yyn];"</literal></expr>,
<expr><literal type="string">" if (yystate == 0 &amp;&amp; yym == 0)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: after reduction, \", YYDEBUGSTR, yydepth);"</literal></expr>,
<expr><literal type="string">"#ifdef YYSTYPE_TOSTRING"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" if (!yytrial)"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" fprintf(stderr, \"result is &lt;%s&gt;, \", YYSTYPE_TOSTRING(yystos[YYFINAL], yyval));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"shifting from state 0 to final state %d\\n\", YYFINAL);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yystate = YYFINAL;"</literal></expr>,
<expr><literal type="string">" *++yystack.s_mark = YYFINAL;"</literal></expr>,
<expr><literal type="string">" *++yystack.l_mark = yyval;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" *++yystack.p_mark = yyloc;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" if (yychar &lt; 0)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" do {"</literal></expr>,
<expr><literal type="string">" if (yylvp &lt; yylve)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" /* we're currently re-reading tokens */"</literal></expr>,
<expr><literal type="string">" yylval = *yylvp++;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylloc = *yylpp++;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yychar = *yylexp++;"</literal></expr>,
<expr><literal type="string">" break;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (yyps-&gt;save)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" /* in trial mode; save scanner results for future parse attempts */"</literal></expr>,
<expr><literal type="string">" if (yylvp == yylvlim)"</literal></expr>,
<expr><literal type="string">" { /* Enlarge lexical value queue */"</literal></expr>,
<expr><literal type="string">" size_t p = (size_t) (yylvp - yylvals);"</literal></expr>,
<expr><literal type="string">" size_t s = (size_t) (yylvlim - yylvals);"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" s += YYLVQUEUEGROWTH;"</literal></expr>,
<expr><literal type="string">" if ((yylexemes = (YYINT *)realloc(yylexemes, s * sizeof(YYINT))) == NULL)"</literal></expr>,
<expr><literal type="string">" goto yyenomem;"</literal></expr>,
<expr><literal type="string">" if ((yylvals = (YYSTYPE *)realloc(yylvals, s * sizeof(YYSTYPE))) == NULL)"</literal></expr>,
<expr><literal type="string">" goto yyenomem;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" if ((yylpsns = (YYLTYPE *)realloc(yylpsns, s * sizeof(YYLTYPE))) == NULL)"</literal></expr>,
<expr><literal type="string">" goto yyenomem;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yylvp = yylve = yylvals + p;"</literal></expr>,
<expr><literal type="string">" yylvlim = yylvals + s;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylpp = yylpe = yylpsns + p;"</literal></expr>,
<expr><literal type="string">" yylplim = yylpsns + s;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yylexp = yylexemes + p;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" *yylexp = (YYINT) YYLEX;"</literal></expr>,
<expr><literal type="string">" *yylvp++ = yylval;"</literal></expr>,
<expr><literal type="string">" yylve++;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" *yylpp++ = yylloc;"</literal></expr>,
<expr><literal type="string">" yylpe++;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yychar = *yylexp++;"</literal></expr>,
<expr><literal type="string">" break;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" /* normal operation, no conflict encountered */"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" yychar = YYLEX;"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" } while (0);"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" if (yychar &lt; 0) yychar = YYEOF;"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: state %d, reading token %d (%s)\\n\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, YYFINAL, yychar, yys);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (yychar == YYEOF) goto yyaccept;"</literal></expr>,
<expr><literal type="string">" goto yyloop;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" if (((yyn = yygindex[yym]) != 0) &amp;&amp; (yyn += yystate) &gt;= 0 &amp;&amp;"</literal></expr>,
<expr><literal type="string">" yyn &lt;= YYTABLESIZE &amp;&amp; yycheck[yyn] == (YYINT) yystate)"</literal></expr>,
<expr><literal type="string">" yystate = yytable[yyn];"</literal></expr>,
<expr><literal type="string">" else"</literal></expr>,
<expr><literal type="string">" yystate = yydgoto[yym];"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: after reduction, \", YYDEBUGSTR, yydepth);"</literal></expr>,
<expr><literal type="string">"#ifdef YYSTYPE_TOSTRING"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" if (!yytrial)"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" fprintf(stderr, \"result is &lt;%s&gt;, \", YYSTYPE_TOSTRING(yystos[yystate], yyval));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"shifting from state %d to state %d\\n\", *yystack.s_mark, yystate);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" if (yystack.s_mark &gt;= yystack.s_last &amp;&amp; yygrowstack(&amp;yystack) == YYENOMEM) goto yyoverflow;"</literal></expr>,
<expr><literal type="string">" *++yystack.s_mark = (YYINT) yystate;"</literal></expr>,
<expr><literal type="string">" *++yystack.l_mark = yyval;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" *++yystack.p_mark = yyloc;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" goto yyloop;"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" /* Reduction declares that this path is valid. Set yypath and do a full parse */"</literal></expr>,
<expr><literal type="string">"yyvalid:"</literal></expr>,
<expr><literal type="string">" if (yypath) YYABORT;"</literal></expr>,
<expr><literal type="string">" while (yyps-&gt;save)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" YYParseState *save = yyps-&gt;save;"</literal></expr>,
<expr><literal type="string">" yyps-&gt;save = save-&gt;save;"</literal></expr>,
<expr><literal type="string">" save-&gt;save = yypath;"</literal></expr>,
<expr><literal type="string">" yypath = save;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#if YYDEBUG"</literal></expr>,
<expr><literal type="string">" if (yydebug)"</literal></expr>,
<expr><literal type="string">" fprintf(stderr, \"%s[%d]: state %d, CONFLICT trial successful, backtracking to state %d, %d tokens\\n\","</literal></expr>,
<expr><literal type="string">" YYDEBUGSTR, yydepth, yystate, yypath-&gt;state, (int)(yylvp - yylvals - yypath-&gt;lexeme));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" if (yyerrctx)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" yyFreeState(yyerrctx);"</literal></expr>,
<expr><literal type="string">" yyerrctx = NULL;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" yylvp = yylvals + yypath-&gt;lexeme;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yylpp = yylpsns + yypath-&gt;lexeme;"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yylexp = yylexemes + yypath-&gt;lexeme;"</literal></expr>,
<expr><literal type="string">" yychar = YYEMPTY;"</literal></expr>,
<expr><literal type="string">" yystack.s_mark = yystack.s_base + (yypath-&gt;yystack.s_mark - yypath-&gt;yystack.s_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yystack.s_base, yypath-&gt;yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));"</literal></expr>,
<expr><literal type="string">" yystack.l_mark = yystack.l_base + (yypath-&gt;yystack.l_mark - yypath-&gt;yystack.l_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yystack.l_base, yypath-&gt;yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" yystack.p_mark = yystack.p_base + (yypath-&gt;yystack.p_mark - yypath-&gt;yystack.p_base);"</literal></expr>,
<expr><literal type="string">" memcpy (yystack.p_base, yypath-&gt;yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));"</literal></expr>,
<expr><literal type="string">"#endif"</literal></expr>,
<expr><literal type="string">" yystate = yypath-&gt;state;"</literal></expr>,
<expr><literal type="string">" goto yyloop;"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"yyoverflow:"</literal></expr>,
<expr><literal type="string">" YYERROR_CALL(\"yacc stack overflow\");"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" goto yyabort_nomem;"</literal></expr>,
<expr><literal type="string">"yyenomem:"</literal></expr>,
<expr><literal type="string">" YYERROR_CALL(\"memory exhausted\");"</literal></expr>,
<expr><literal type="string">"yyabort_nomem:"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" yyresult = 2;"</literal></expr>,
<expr><literal type="string">" goto yyreturn;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"yyabort:"</literal></expr>,
<expr><literal type="string">" yyresult = 1;"</literal></expr>,
<expr><literal type="string">" goto yyreturn;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"yyaccept:"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" if (yyps-&gt;save) goto yyvalid;"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" yyresult = 0;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"yyreturn:"</literal></expr>,
<expr><literal type="string">"#if defined(YYDESTRUCT_CALL)"</literal></expr>,
<expr><literal type="string">" if (yychar != YYEOF &amp;&amp; yychar != YYEMPTY)"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" YYDESTRUCT_CALL(\"cleanup: discarding token\", yychar, &amp;yylval, &amp;yylloc);"</literal></expr>,
<expr><literal type="string">"#else"</literal></expr>,
<expr><literal type="string">" YYDESTRUCT_CALL(\"cleanup: discarding token\", yychar, &amp;yylval);"</literal></expr>,
<expr><literal type="string">"#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" YYSTYPE *pv;"</literal></expr>,
<expr><literal type="string">"#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)"</literal></expr>,
<expr><literal type="string">" YYLTYPE *pp;"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">" for (pv = yystack.l_base, pp = yystack.p_base; pv &lt;= yystack.l_mark; ++pv, ++pp)"</literal></expr>,
<expr><literal type="string">" YYDESTRUCT_CALL(\"cleanup: discarding state\","</literal></expr>,
<expr><literal type="string">" yystos[*(yystack.s_base + (pv - yystack.l_base))], pv, pp);"</literal></expr>,
<expr><literal type="string">"#else"</literal></expr>,
<expr><literal type="string">" for (pv = yystack.l_base; pv &lt;= yystack.l_mark; ++pv)"</literal></expr>,
<expr><literal type="string">" YYDESTRUCT_CALL(\"cleanup: discarding state\","</literal></expr>,
<expr><literal type="string">" yystos[*(yystack.s_base + (pv - yystack.l_base))], pv);"</literal></expr>,
<expr><literal type="string">"#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif /* defined(YYDESTRUCT_CALL) */"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#if YYBTYACC"</literal></expr>,
<expr><literal type="string">" if (yyerrctx)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" yyFreeState(yyerrctx);"</literal></expr>,
<expr><literal type="string">" yyerrctx = NULL;"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" while (yyps)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" YYParseState *save = yyps;"</literal></expr>,
<expr><literal type="string">" yyps = save-&gt;save;"</literal></expr>,
<expr><literal type="string">" save-&gt;save = NULL;"</literal></expr>,
<expr><literal type="string">" yyFreeState(save);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">" while (yypath)"</literal></expr>,
<expr><literal type="string">" {"</literal></expr>,
<expr><literal type="string">" YYParseState *save = yypath;"</literal></expr>,
<expr><literal type="string">" yypath = save-&gt;save;"</literal></expr>,
<expr><literal type="string">" save-&gt;save = NULL;"</literal></expr>,
<expr><literal type="string">" yyFreeState(save);"</literal></expr>,
<expr><literal type="string">" }"</literal></expr>,
<expr><literal type="string">"#endif /* YYBTYACC */"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">" yyfreestack(&amp;yystack);"</literal></expr>,
<expr><literal type="string">" return (yyresult);"</literal></expr>,
<expr><literal type="string">"}"</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>write_section</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>section</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>s</name> <operator>=</operator> <name><name>section</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>code_file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>outline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
