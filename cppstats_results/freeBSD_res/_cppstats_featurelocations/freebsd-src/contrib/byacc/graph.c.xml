<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/graph.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defs.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>graph_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>graph_LA</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ruleno</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>larno</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>graph</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>shifts</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>as</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gflag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstates</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>closure</name><argument_list>(<argument><expr><name><name>state_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>items</name></expr></argument>, <argument><expr><name><name>state_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>graph_state</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstates</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>shift_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>nshifts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>sn</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>shift</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>as</name> <operator>=</operator> <name><name>accessing_symbol</name><index>[<expr><name>sn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>,
<argument><expr><literal type="string">"\tq%d -&gt; q%d [label=\"%s\"];\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>sn</name></expr></argument>, <argument><expr><name><name>symbol_pname</name><index>[<expr><name>as</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>symbol_pname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>symbol_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>graph_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>isp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>sp1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>larno</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>lookaheads</name><index>[<expr><name>stateno</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">"\n\tq%d [label=\"%d:\\l"</literal></expr></argument>, <argument><expr><name>stateno</name></expr></argument>, <argument><expr><name>stateno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>isp</name> <operator>=</operator> <name>itemset</name></expr>;</init> <condition><expr><name>isp</name> <operator>&lt;</operator> <name>itemsetend</name></expr>;</condition> <incr><expr><name>isp</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>sp1</name> <operator>=</operator> <name>sp</name> <operator>=</operator> <name>ritem</name> <operator>+</operator> <operator>*</operator><name>isp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>sp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>sp</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>rule</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>*</operator><name>sp</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">" %s -&gt; "</literal></expr></argument>, <argument><expr><name><name>symbol_pname</name><index>[<expr><name><name>rlhs</name><index>[<expr><name>rule</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>ritem</name> <operator>+</operator> <name><name>rrhs</name><index>[<expr><name>rule</name></expr>]</index></name></expr>;</init> <condition><expr><name>sp</name> <operator>&lt;</operator> <name>sp1</name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>symbol_pname</name><index>[<expr><operator>*</operator><name>sp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>graph_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>sp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>symbol_pname</name><index>[<expr><operator>*</operator><name>sp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>graph_LA</name><argument_list>(<argument><expr><operator>-</operator><operator>*</operator><name>sp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">"\\l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">"\"];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>graph_LA</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ruleno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tokensetsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rowp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tokensetsize</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>WORDSIZE</name><argument_list>(<argument><expr><name>ntokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ruleno</name> <operator>==</operator> <name><name>LAruleno</name><index>[<expr><name>larno</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>rowp</name> <operator>=</operator> <name>LA</name> <operator>+</operator> <name>larno</name> <operator>*</operator> <name>tokensetsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">" { "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ntokens</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BIT</name><argument_list>(<argument><expr><name>rowp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>symbol_pname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>larno</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
