<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/test/btyacc/btyacc_destroy1.tab.c">



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYBYACC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMINOR</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYCHECK</name></cpp:macro> <cpp:value>"yyyymmdd"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYEMPTY</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyclearin</name></cpp:macro> <cpp:value>(yychar = YYEMPTY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerrok</name></cpp:macro> <cpp:value>(yyerrflag = 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYRECOVERING</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(yyerrflag != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYENOMEM</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYEOF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>YYBTYACC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYBTYACC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYDEBUGSTR</name></cpp:macro> <cpp:value>(yytrial ? YYPREFIX "debug(trial)" : YYPREFIX "debug")</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyparse</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyparse</name></cpp:macro> <cpp:value>destroy1_parse</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylex</name></cpp:macro> <cpp:value>destroy1_lex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyerror</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerror</name></cpp:macro> <cpp:value>destroy1_error</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yychar</name></cpp:macro> <cpp:value>destroy1_char</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyval</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyval</name></cpp:macro> <cpp:value>destroy1_val</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylval</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylval</name></cpp:macro> <cpp:value>destroy1_lval</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydebug</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydebug</name></cpp:macro> <cpp:value>destroy1_debug</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yynerrs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yynerrs</name></cpp:macro> <cpp:value>destroy1_nerrs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyerrflag</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerrflag</name></cpp:macro> <cpp:value>destroy1_errflag</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylhs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylhs</name></cpp:macro> <cpp:value>destroy1_lhs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylen</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylen</name></cpp:macro> <cpp:value>destroy1_len</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydefred</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydefred</name></cpp:macro> <cpp:value>destroy1_defred</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yystos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yystos</name></cpp:macro> <cpp:value>destroy1_stos</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydgoto</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydgoto</name></cpp:macro> <cpp:value>destroy1_dgoto</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yysindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yysindex</name></cpp:macro> <cpp:value>destroy1_sindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyrindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrindex</name></cpp:macro> <cpp:value>destroy1_rindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yygindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yygindex</name></cpp:macro> <cpp:value>destroy1_gindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yytable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yytable</name></cpp:macro> <cpp:value>destroy1_table</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yycheck</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yycheck</name></cpp:macro> <cpp:value>destroy1_check</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyname</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyname</name></cpp:macro> <cpp:value>destroy1_name</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyrule</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrule</name></cpp:macro> <cpp:value>destroy1_rule</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yycindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yycindex</name></cpp:macro> <cpp:value>destroy1_cindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyctable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyctable</name></cpp:macro> <cpp:value>destroy1_ctable</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPREFIX</name></cpp:macro> <cpp:value>"destroy1_"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPURE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{<decl><name>cGLOBAL</name></decl>, <decl><name>cLOCAL</name></decl>}</block></enum></type> <name>class</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{<decl><name>tREAL</name></decl>, <decl><name>tINTEGER</name></decl>}</block></enum></type> <name>type</name>;</typedef>
<typedef>typedef <type><name>char</name> <modifier>*</modifier></type> <name>name</name>;</typedef>

<struct>struct <name>symbol</name> <block>{ <decl_stmt><decl><type><name>class</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>type</name></type> <name>t</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>name</name></type> <name>id</name></decl>;</decl_stmt> }</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>symbol</name></name></type> <name>symbol</name>;</typedef>

<struct>struct <name>namelist</name> <block>{ <decl_stmt><decl><type><name>symbol</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>struct</name> <name>namelist</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> }</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>namelist</name></name></type> <name>namelist</name>;</typedef>

<struct>struct <name>parser_param</name> <block>{
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>rtrn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symbol</name></type> <name>ss</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>symbol</name> <modifier>*</modifier></type><name>mksymbol</name><parameter_list>(<parameter><decl><type><name>type</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>class</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>name</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBISON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yylex(void)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyerror(const char *s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>YYSTYPE_IS_DECLARED</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTYPE_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTYPE_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>50</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<typedef>typedef <type><union>union
<block>{
<decl_stmt><decl><type><name>class</name></type> <name>cval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type</name></type> <name>tval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namelist</name> <modifier>*</modifier></type> <name>nlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>name</name></type> <name>id</name></decl>;</decl_stmt>
}</block></union></type> <name>YYSTYPE</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>160</cpp:number> <cpp:file>"btyacc_destroy1.tab.c"</cpp:file></cpp:line>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYPARSE_PARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYPARSE_PARAM_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(void *YYPARSE_PARAM)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(struct parser_param *param, int flag)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLEX_PARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yylex(void *YYLEX_PARAM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX</name></cpp:macro> <cpp:value>yylex(YYLEX_PARAM)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yylex(void)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX</name></cpp:macro> <cpp:value>yylex()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYERROR_DECL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyerror(struct parser_param *param, int flag, const char *s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYERROR_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR_CALL</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>yyerror(param, flag, msg)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYDESTRUCT_DECL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYDESTRUCT_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yydestruct(const char *msg, int psymb, YYSTYPE *val, struct parser_param *param, int flag)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYDESTRUCT_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYDESTRUCT_CALL</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>psymb</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>yydestruct(msg, psymb, val, param, flag)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>YYPARSE_DECL</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTEGER</name></cpp:macro> <cpp:value>260</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME</name></cpp:macro> <cpp:value>261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERRCODE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>YYINT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_lhs</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_len</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_defred</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYDESTRUCT_CALL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_TOSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_stos</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">257</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">259</literal></expr>, <expr><literal type="number">260</literal></expr>, <expr><literal type="number">263</literal></expr>, <expr><literal type="number">265</literal></expr>, <expr><literal type="number">266</literal></expr>, <expr><literal type="number">266</literal></expr>, <expr><literal type="number">261</literal></expr>, <expr><literal type="number">264</literal></expr>,
<expr><literal type="number">267</literal></expr>, <expr><literal type="number">267</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">261</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">265</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">265</literal></expr>, <expr><literal type="number">41</literal></expr>,
<expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">266</literal></expr>, <expr><literal type="number">266</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_dgoto</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_sindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">254</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">251</literal></expr>, <expr><operator>-</operator><literal type="number">248</literal></expr>, <expr><operator>-</operator><literal type="number">248</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">26</literal></expr>,
<expr><operator>-</operator><literal type="number">40</literal></expr>, <expr><operator>-</operator><literal type="number">39</literal></expr>, <expr><operator>-</operator><literal type="number">246</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">243</literal></expr>, <expr><operator>-</operator><literal type="number">246</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">24</literal></expr>, <expr><operator>-</operator><literal type="number">23</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><operator>-</operator><literal type="number">251</literal></expr>, <expr><operator>-</operator><literal type="number">251</literal></expr>, <expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_rindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_cindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_gindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTABLESIZE</name></cpp:macro> <cpp:value>222</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_table</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">19</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">21</literal></expr>,
<expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_check</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">40</literal></expr>,
<expr><literal type="number">40</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">257</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">259</literal></expr>, <expr><literal type="number">260</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">259</literal></expr>, <expr><literal type="number">260</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">257</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">261</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">44</literal></expr>,
<expr><literal type="number">44</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">261</literal></expr>, <expr><literal type="number">261</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>destroy1_ctable</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYFINAL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYDEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXTOKEN</name></cpp:macro> <cpp:value>261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYUNDFTOKEN</name></cpp:macro> <cpp:value>268</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTRANSLATE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; YYMAXTOKEN ? YYUNDFTOKEN : (a))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>destroy1_name</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"$end"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'('"</literal></expr>,<expr><literal type="string">"')'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"','"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"error"</literal></expr>,<expr><literal type="string">"GLOBAL"</literal></expr>,<expr><literal type="string">"LOCAL"</literal></expr>,
<expr><literal type="string">"REAL"</literal></expr>,<expr><literal type="string">"INTEGER"</literal></expr>,<expr><literal type="string">"NAME"</literal></expr>,<expr><literal type="string">"$accept"</literal></expr>,<expr><literal type="string">"declaration"</literal></expr>,<expr><literal type="string">"locnamelist"</literal></expr>,<expr><literal type="string">"class"</literal></expr>,<expr><literal type="string">"type"</literal></expr>,
<expr><literal type="string">"namelist"</literal></expr>,<expr><literal type="string">"illegal-symbol"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>destroy1_rule</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"$accept : declaration"</literal></expr>,
<expr><literal type="string">"declaration : class type namelist '(' class ',' type ')'"</literal></expr>,
<expr><literal type="string">"declaration : type locnamelist '(' class ')'"</literal></expr>,
<expr><literal type="string">"class : GLOBAL"</literal></expr>,
<expr><literal type="string">"class : LOCAL"</literal></expr>,
<expr><literal type="string">"type : REAL"</literal></expr>,
<expr><literal type="string">"type : INTEGER"</literal></expr>,
<expr><literal type="string">"namelist : namelist NAME"</literal></expr>,
<expr><literal type="string">"namelist : NAME"</literal></expr>,
<expr><literal type="string">"locnamelist : namelist '(' LOCAL ',' type ')'"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>yydebug</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>yyerrflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yychar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name></type> <name>yyval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name></type> <name>yylval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yynerrs</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>YYLTYPE</name></type> <name>yyloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYLTYPE</name></type> <name>yylloc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYLLOC_DEFAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLLOC_DEFAULT</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>, <parameter><type><name>rhs</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (n == 0) { (loc).first_line = YYRHSLOC(rhs, 0).last_line; (loc).first_column = YYRHSLOC(rhs, 0).last_column; (loc).last_line = YYRHSLOC(rhs, 0).last_line; (loc).last_column = YYRHSLOC(rhs, 0).last_column; } else { (loc).first_line = YYRHSLOC(rhs, 1).first_line; (loc).first_column = YYRHSLOC(rhs, 1).first_column; (loc).last_line = YYRHSLOC(rhs, n).last_line; (loc).last_column = YYRHSLOC(rhs, n).last_column; } } while (0)</cpp:value></cpp:define>

















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYLVQUEUEGROWTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLVQUEUEGROWTH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTACKSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>YYMAXDEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXDEPTH</name></cpp:macro> <cpp:value>YYSTACKSIZE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYMAXDEPTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACKSIZE</name></cpp:macro> <cpp:value>YYMAXDEPTH</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACKSIZE</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXDEPTH</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYINITSTACKSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYINITSTACKSIZE</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>stacksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>l_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>l_mark</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>p_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>p_mark</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>YYSTACKDATA</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>

<struct>struct <name>YYParseState_s</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>YYParseState_s</name></name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTACKDATA</name></type> <name>yystack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lexeme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name></type> <name>ctry</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>YYParseState_s</name></name></type> <name>YYParseState</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTACKDATA</name></type> <name>yystack</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYParseState</name> <modifier>*</modifier></type><name>yyps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYParseState</name> <modifier>*</modifier></type><name>yypath</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTYPE</name> <modifier>*</modifier></type><name>yylvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTYPE</name> <modifier>*</modifier></type><name>yylvp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTYPE</name> <modifier>*</modifier></type><name>yylve</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTYPE</name> <modifier>*</modifier></type><name>yylvlim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name> <modifier>*</modifier></type><name>yylpsns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name> <modifier>*</modifier></type><name>yylpp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name> <modifier>*</modifier></type><name>yylpe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name> <modifier>*</modifier></type><name>yylplim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYINT</name> <modifier>*</modifier></type><name>yylexp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>YYINT</name> <modifier>*</modifier></type><name>yylexemes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>89</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>YYLEX_DECL</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>YYERROR_DECL</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>492</cpp:number> <cpp:file>"btyacc_destroy1.tab.c"</cpp:file></cpp:line>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>defined</name> <name>YYDESTRUCT_IS_DECLARED</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>YYDESTRUCT_DECL</name><parameter_list>()</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>psymb</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">263</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>41</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<block>{<block_content>
<decl_stmt><decl><type><name>namelist</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>val</name><operator>)</operator><operator>.</operator><name>nlist</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> <decl_stmt><decl><type><name>namelist</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>
<break>break;</break>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>512</cpp:number> <cpp:file>"btyacc_destroy1.tab.c"</cpp:file></cpp:line>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYDESTRUCT_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydepth</name></cpp:macro> <cpp:value>(int)(yystack.s_mark - yystack.s_base)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yytrial</name></cpp:macro> <cpp:value>(yyps-&gt;save)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int</name></type> <name>yygrowstack</name><parameter_list>(<parameter><decl><type><name>YYSTACKDATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>newsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>newss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>newvs</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>newps</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsize</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>stacksize</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>YYINITSTACKSIZE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>newsize</name> <operator>&gt;=</operator> <name>YYMAXDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>newsize</name> <operator>*=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name>YYMAXDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>YYMAXDEPTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>s_mark</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>newss</name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newss</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name> <operator>=</operator> <name>newss</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_mark</name></name> <operator>=</operator> <name>newss</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newvs</name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newvs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newvs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name> <operator>=</operator> <name>newvs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>l_mark</name></name> <operator>=</operator> <name>newvs</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>newps</name> <operator>=</operator> <operator>(</operator><name>YYLTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>p_base</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newps</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_base</name></name> <operator>=</operator> <name>newps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_mark</name></name> <operator>=</operator> <name>newps</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_last</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>s_base</name></name> <operator>+</operator> <name>newsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%sdebug: stack size increased to %d\n"</literal></expr></argument>, <argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYPURE</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YY_NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>yyfreestack</name><parameter_list>(<parameter><decl><type><name>YYSTACKDATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>p_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyfreestack</name><parameter_list>(<parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>YYParseState</name> <modifier>*</modifier></type>
<name>yyNewState</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>YYParseState</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>YYParseState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>stacksize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>=</operator> <operator>(</operator><name>YYLTYPE</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>yyFreeState</name><parameter_list>(<parameter><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>yyfreestack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>yystack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYABORT</name></cpp:macro> <cpp:value>goto yyabort</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYREJECT</name></cpp:macro> <cpp:value>goto yyabort</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYACCEPT</name></cpp:macro> <cpp:value>goto yyaccept</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR</name></cpp:macro> <cpp:value>goto yyerrlab</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYVALID</name></cpp:macro> <cpp:value>do { if (yyps-&gt;save) goto yyvalid; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYVALID_NESTED</name></cpp:macro> <cpp:value>do { if (yyps-&gt;save &amp;&amp; yyps-&gt;save-&gt;save == 0) goto yyvalid; } while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>YYPARSE_DECL</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>yym</name></decl>, <decl><type ref="prev"/><name>yyn</name></decl>, <decl><type ref="prev"/><name>yystate</name></decl>, <decl><type ref="prev"/><name>yyresult</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>yynewerrflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>yyerrctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>YYLTYPE</name></type> <name><name>yyerror_loc_range</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>yys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"YYDEBUG"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <operator>*</operator><name>yys</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyn</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>yyn</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yydebug</name> <operator>=</operator> <name>yyn</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%sdebug[&lt;#of symbols on state stack&gt;]\n"</literal></expr></argument>, <argument><expr><name>YYPREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>yyerror_loc_range</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yyerror_loc_range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<expr_stmt><expr><name>yyps</name> <operator>=</operator> <call><name>yyNewState</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>yyps</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yynerrs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyerrflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYPURE</name></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yystack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>yyloop</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yydefred</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyreduce</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yylvp</name> <operator>&lt;</operator> <name>yylve</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>yylval</name> <operator>=</operator> <operator>*</operator><name>yylvp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylloc</name> <operator>=</operator> <operator>*</operator><name>yylpp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <operator>*</operator><name>yylexp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>yylvp</name> <operator>==</operator> <name>yylvlim</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>yylvlim</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>YYLVQUEUEGROWTH</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylexemes</name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylexemes</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylvals</name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylvals</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylpsns</name> <operator>=</operator> <operator>(</operator><name>YYLTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylpsns</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylve</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylvlim</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpe</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylplim</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>yylexp</name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>YYLEX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yylvp</name><operator>++</operator> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylve</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>yylpp</name><operator>++</operator> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylpe</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <operator>*</operator><name>yylexp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYLEX</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, reading token %d (%s)"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_TOSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" &lt;%s&gt;"</literal></expr></argument>, <argument><expr><call><name>YYSTYPE_TOSTRING</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yylval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yycindex</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yychar</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>YYINT</name></type> <name>ctry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>yypath</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: CONFLICT in state %d: following successful trial parse\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>save</name> <operator>=</operator> <name>yypath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yypath</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctry</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>ctry</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>save</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>yystate</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>YYABORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>


<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: CONFLICT in state %d. "</literal></expr></argument>, <argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"ALREADY in conflict, continuing trial parse.\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Starting trial parse.\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>save</name> <operator>=</operator> <call><name>yyNewState</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>save</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>yystate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>errflag</name></name> <operator>=</operator> <name>yyerrflag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ctry</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyctable</name><index>[<expr><name>ctry</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name> <operator>&amp;&amp;</operator> <name>yychar</name> <operator>&gt;=</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: backtracking 1 token\n"</literal></expr></argument>, <argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ctry</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>ctry</name></name> <operator>=</operator> <name>ctry</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yylexemes</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yylexemes</name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>YYLVQUEUEGROWTH</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yylexemes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yylvals</name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>YYLVQUEUEGROWTH</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yylvals</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yylvlim</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name>YYLVQUEUEGROWTH</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpsns</name> <operator>=</operator> <operator>(</operator><name>YYLTYPE</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>YYLVQUEUEGROWTH</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yylpsns</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yylplim</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name>YYLVQUEUEGROWTH</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yylvp</name> <operator>==</operator> <name>yylve</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylve</name> <operator>=</operator> <name>yylvals</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpe</name> <operator>=</operator> <name>yylpsns</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&gt;=</operator> <name>YYEOF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>yylve</name><operator>++</operator> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>yylpe</name><operator>++</operator> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>yylexp</name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&gt;=</operator> <name>YYEOF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yylvp</name><operator>--</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name><operator>--</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <name>ctry</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, shifting to state %d\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name><name>yyctable</name><index>[<expr><name>ctry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yylvp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yyctable</name><index>[<expr><name>ctry</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yystate</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>yyerrflag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yyctable</name><index>[<expr><name>ctry</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>yyreduce</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yysindex</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yychar</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, shifting to state %d\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>yyerrflag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yyrindex</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yychar</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>yyreduce</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyinrecovery</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>

<expr_stmt><expr><name>yynewerrflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>yyerrhandler</name>;</goto>
<goto>goto <name>yyerrlab</name>;</goto>

<label><name>yyerrlab</name>:</label>


<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>yynewerrflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>yyerrhandler</name>:</label>
<while>while <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ctry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name> <operator>-</operator> <name><name>yyps</name><operator>-&gt;</operator><name>save</name><operator>-&gt;</operator><name>lexeme</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>yyerrctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>&lt;</operator> <name>yylvp</name> <operator>-</operator> <name>yylvals</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>yyerrctx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>yyerrctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>yyerrctx</name> <operator>=</operator> <call><name>yyNewState</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>yystate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>errflag</name></name> <operator>=</operator> <name>yyerrflag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name><name>save</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name><name>save</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name> <operator>+</operator> <name><name>save</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <operator>(</operator><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <operator>(</operator><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ctry</name> <operator>=</operator> <operator>++</operator><name><name>save</name><operator>-&gt;</operator><name>ctry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yyctable</name><index>[<expr><name>ctry</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyreduce</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%sdebug[%d,trial]: trial parse FAILED, entering ERROR mode\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name> <operator>+</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name><name>yylexp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylval</name> <operator>=</operator> <name><name>yylvp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylloc</name> <operator>=</operator> <name><name>yylpp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>yyerrctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyerrctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>yynewerrflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>yynewerrflag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyinrecovery</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>YYERROR_CALL</name><argument_list>(<argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yyerror_loc_range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>YYBTYACC</name></expr></cpp:if>
<goto>goto <name>yyerrlab</name>;</goto>
<label><name>yyerrlab</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>yynerrs</name></expr>;</expr_stmt>

<label><name>yyinrecovery</name>:</label>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyerrflag</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yysindex</name><index>[<expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>YYERRCODE</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>YYERRCODE</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, error recovery shifting to state %d\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>, <argument><expr><name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>yyerror_loc_range</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YYLLOC_DEFAULT</name><argument_list>(<argument><expr><name>yyloc</name></expr></argument>, <argument><expr><name>yyerror_loc_range</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name>yyloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: error recovery discarding state %d\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&lt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyabort</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>yyerror_loc_range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYDESTRUCT_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"error: discarding state"</literal></expr></argument>,
<argument><expr><name><name>yystos</name><index>[<expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"error: discarding state"</literal></expr></argument>,
<argument><expr><name><name>yystos</name><index>[<expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>--</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>--</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyabort</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, error recovery discarding token %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYDESTRUCT_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"error: discarding token"</literal></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"error: discarding token"</literal></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></else></if_stmt>

<label><name>yyreduce</name>:</label>
<expr_stmt><expr><name>yym</name> <operator>=</operator> <name><name>yylen</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, reducing by rule %d (%s)"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yyn</name></expr></argument>, <argument><expr><name><name>yyrule</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_TOSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yym</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>yym</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>yym</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>YYSTYPE_TOSTRING</name><argument_list>(<argument><expr><name><name>yystos</name><index>[<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yym</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>yym</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yyval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>yyval</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yyloc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yyloc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>YYLLOC_DEFAULT</name><argument_list>(<argument><expr><name>yyloc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name><index>[<expr><operator>-</operator><name>yym</name></expr>]</index></name></expr></argument>, <argument><expr><name>yym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>yyerror_loc_range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_mark</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>yym</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>yyn</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>62</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>nlist</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>nlist</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>64</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>nlist</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>nlist</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>67</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>cval</name></name> <operator>=</operator> <name>cGLOBAL</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>cval</name></name> <operator>=</operator> <name>cLOCAL</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>71</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>tval</name></name> <operator>=</operator> <name>tREAL</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>72</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>tval</name></name> <operator>=</operator> <name>tINTEGER</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>76</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>nlist</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <call><name>mksymbol</name><argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>tval</name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cval</name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>nlist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nlist</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>80</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>nlist</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <call><name>mksymbol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>nlist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>86</cpp:number> <cpp:file>"btyacc_destroy1.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>nlist</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>nlist</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1235</cpp:number> <cpp:file>"btyacc_destroy1.tab.c"</cpp:file></cpp:line>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yym</name> <operator>=</operator> <name><name>yylhs</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yystate</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>yym</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: after reduction, "</literal></expr></argument>, <argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_TOSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"result is &lt;%s&gt;, "</literal></expr></argument>, <argument><expr><call><name>YYSTYPE_TOSTRING</name><argument_list>(<argument><expr><name><name>yystos</name><index>[<expr><name>YYFINAL</name></expr>]</index></name></expr></argument>, <argument><expr><name>yyval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"shifting from state 0 to final state %d\n"</literal></expr></argument>, <argument><expr><name>YYFINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name>YYFINAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name>YYFINAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yyval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name>yyloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yylvp</name> <operator>&lt;</operator> <name>yylve</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>yylval</name> <operator>=</operator> <operator>*</operator><name>yylvp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylloc</name> <operator>=</operator> <operator>*</operator><name>yylpp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <operator>*</operator><name>yylexp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>yylvp</name> <operator>==</operator> <name>yylvlim</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>yylvlim</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>YYLVQUEUEGROWTH</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylexemes</name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylexemes</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylvals</name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylvals</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylpsns</name> <operator>=</operator> <operator>(</operator><name>YYLTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylpsns</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylve</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylvlim</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpe</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylplim</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>yylexp</name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>YYLEX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yylvp</name><operator>++</operator> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylve</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>yylpp</name><operator>++</operator> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylpe</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <operator>*</operator><name>yylexp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYLEX</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, reading token %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>YYFINAL</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyaccept</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yygindex</name><index>[<expr><name>yym</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yystate</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yystate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yydgoto</name><index>[<expr><name>yym</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: after reduction, "</literal></expr></argument>, <argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_TOSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"result is &lt;%s&gt;, "</literal></expr></argument>, <argument><expr><call><name>YYSTYPE_TOSTRING</name><argument_list>(<argument><expr><name><name>yystos</name><index>[<expr><name>yystate</name></expr>]</index></name></expr></argument>, <argument><expr><name>yyval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"shifting from state %d to state %d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yystate</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yyval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name>yyloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>yyloop</name>;</goto>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>


<label><name>yyvalid</name>:</label>
<if_stmt><if>if <condition>(<expr><name>yypath</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>YYABORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>yypath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yypath</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, CONFLICT trial successful, backtracking to state %d, %d tokens\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name><name>yypath</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name> <operator>-</operator> <name><name>yypath</name><operator>-&gt;</operator><name>lexeme</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yyerrctx</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>yyerrctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyerrctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name><name>yypath</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name><name>yypath</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name> <operator>+</operator> <name><name>yypath</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yypath</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<goto>goto <name>yyloop</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>yyoverflow</name>:</label>
<expr_stmt><expr><call><name>YYERROR_CALL</name><argument_list>(<argument><expr><literal type="string">"yacc stack overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<goto>goto <name>yyabort_nomem</name>;</goto>
<label><name>yyenomem</name>:</label>
<expr_stmt><expr><call><name>YYERROR_CALL</name><argument_list>(<argument><expr><literal type="string">"memory exhausted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>yyabort_nomem</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yyresult</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>yyreturn</name>;</goto>

<label><name>yyabort</name>:</label>
<expr_stmt><expr><name>yyresult</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>yyreturn</name>;</goto>

<label><name>yyaccept</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyvalid</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yyresult</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>yyreturn</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYDESTRUCT_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>!=</operator> <name>YYEOF</name> <operator>&amp;&amp;</operator> <name>yychar</name> <operator>!=</operator> <name>YYEMPTY</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"cleanup: discarding token"</literal></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"cleanup: discarding token"</literal></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pv</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr><operator>,</operator> <expr><name>pp</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr>;</init> <condition><expr><name>pv</name> <operator>&lt;=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>pv</name></expr><operator>,</operator> <expr><operator>++</operator><name>pp</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"cleanup: discarding state"</literal></expr></argument>,
<argument><expr><name><name>yystos</name><index>[<expr><operator>*</operator><operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name>pv</name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>pv</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr>;</init> <condition><expr><name>pv</name> <operator>&lt;=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>pv</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"cleanup: discarding state"</literal></expr></argument>,
<argument><expr><name><name>yystos</name><index>[<expr><operator>*</operator><operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name>pv</name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yyerrctx</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>yyerrctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyerrctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>yyps</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name>yyps</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>yyps</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>yypath</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name>yypath</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>yypath</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>yyfreestack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>yyresult</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
