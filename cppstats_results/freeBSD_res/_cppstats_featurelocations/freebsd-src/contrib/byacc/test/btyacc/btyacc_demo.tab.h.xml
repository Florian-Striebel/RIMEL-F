<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/test/btyacc/btyacc_demo.tab.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_demo__defines_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_demo__defines_h_</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTFIX</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONSTANT</name></cpp:macro> <cpp:value>260</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERN</name></cpp:macro> <cpp:value>261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER</name></cpp:macro> <cpp:value>262</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC</name></cpp:macro> <cpp:value>263</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name></cpp:macro> <cpp:value>264</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOLATILE</name></cpp:macro> <cpp:value>265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF</name></cpp:macro> <cpp:value>266</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THEN</name></cpp:macro> <cpp:value>267</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELSE</name></cpp:macro> <cpp:value>268</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLCL</name></cpp:macro> <cpp:value>269</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>YYSTYPE_IS_DECLARED</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTYPE_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTYPE_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>Scope</name> <modifier>*</modifier></type><name>scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Expr_List</name> <modifier>*</modifier></type><name>elist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Type</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Decl</name> <modifier>*</modifier></type><name>decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Decl_List</name> <modifier>*</modifier></type><name>dlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Code</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
}</block></union></type> <name>YYSTYPE</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>extern</specifier> <name>YYSTYPE</name></type> <name>demo_lval</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>defined</name> <name>YYLTYPE</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>defined</name> <name>YYLTYPE_IS_DECLARED</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>YYLTYPE</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>first_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>source</name></decl>;</decl_stmt>
}</block></struct></type> <name>YYLTYPE</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLTYPE_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYRHSLOC</name><parameter_list>(<parameter><type><name>rhs</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((rhs)[k])</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>YYLTYPE</name></type> <name>demo_lloc</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
