<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/test/btyacc/expr.oxout.tab.c">



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYBYACC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMINOR</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYCHECK</name></cpp:macro> <cpp:value>"yyyymmdd"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYEMPTY</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyclearin</name></cpp:macro> <cpp:value>(yychar = YYEMPTY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerrok</name></cpp:macro> <cpp:value>(yyerrflag = 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYRECOVERING</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(yyerrflag != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYENOMEM</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYEOF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>YYBTYACC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYBTYACC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYDEBUGSTR</name></cpp:macro> <cpp:value>YYPREFIX "debug"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyparse</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyparse</name></cpp:macro> <cpp:value>expr.oxout_parse</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylex</name></cpp:macro> <cpp:value>expr.oxout_lex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyerror</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerror</name></cpp:macro> <cpp:value>expr.oxout_error</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yychar</name></cpp:macro> <cpp:value>expr.oxout_char</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyval</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyval</name></cpp:macro> <cpp:value>expr.oxout_val</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylval</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylval</name></cpp:macro> <cpp:value>expr.oxout_lval</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydebug</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydebug</name></cpp:macro> <cpp:value>expr.oxout_debug</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yynerrs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yynerrs</name></cpp:macro> <cpp:value>expr.oxout_nerrs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyerrflag</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerrflag</name></cpp:macro> <cpp:value>expr.oxout_errflag</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylhs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylhs</name></cpp:macro> <cpp:value>expr.oxout_lhs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylen</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylen</name></cpp:macro> <cpp:value>expr.oxout_len</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydefred</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydefred</name></cpp:macro> <cpp:value>expr.oxout_defred</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yystos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yystos</name></cpp:macro> <cpp:value>expr.oxout_stos</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydgoto</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydgoto</name></cpp:macro> <cpp:value>expr.oxout_dgoto</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yysindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yysindex</name></cpp:macro> <cpp:value>expr.oxout_sindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyrindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrindex</name></cpp:macro> <cpp:value>expr.oxout_rindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yygindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yygindex</name></cpp:macro> <cpp:value>expr.oxout_gindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yytable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yytable</name></cpp:macro> <cpp:value>expr.oxout_table</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yycheck</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yycheck</name></cpp:macro> <cpp:value>expr.oxout_check</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyname</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyname</name></cpp:macro> <cpp:value>expr.oxout_name</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyrule</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrule</name></cpp:macro> <cpp:value>expr.oxout_rule</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yycindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yycindex</name></cpp:macro> <cpp:value>expr.oxout_cindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyctable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyctable</name></cpp:macro> <cpp:value>expr.oxout_ctable</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPREFIX</name></cpp:macro> <cpp:value>"expr.oxout_"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPURE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>5</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>8</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"expr.oxout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>yylex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>yyerror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>27</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyR</name></cpp:macro> <cpp:value>USHRT_MAX</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>YYSTYPE_IS_DECLARED</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTYPE_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTYPE_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>31</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<typedef>typedef <type><union>union <block>{
<struct>struct <name>yyyOxAttrbs</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>yyyStackItem</name></name> <modifier>*</modifier></type><name>yyyOxStackItem</name></decl>;</decl_stmt>
}</block> <decl><name>yyyOxAttrbs</name></decl>;</struct>
}</block></union></type> <name>YYSTYPE</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>38</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>yyyYok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>yyyFT</name></type> <name><name>yyyRCIL</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>yyyExecuteRRsection</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>rootNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yyyYoxInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yyyDecorate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<struct_decl>struct <name>yyyOxAttrbs</name>;</struct_decl>
<function_decl><type><name>void</name></type> <name>yyyGenIntNode</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>yyyProdNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yyyRHSlength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yyyNattrbs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>yyyOxAttrbs</name></name> <modifier>*</modifier></type><name>yyval_OxAttrbs</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yyyAdjustINRC</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>yyyProdNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yyyRHSlength</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>startP</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stopP</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>yyyOxAttrbs</name></name> <modifier>*</modifier></type><name>yyval_OxAttrbs</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yyyCheckUnsolvedInstTrav</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>rootNode</name></decl></parameter>,<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>nNZrc</name></decl></parameter>,<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>cycleSum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yyyUnsolvedInstSearchTrav</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yyyUnsolvedInstSearchTravAux</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>yyyabort</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>166</cpp:number> <cpp:file>"expr.oxout.tab.c"</cpp:file></cpp:line>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYPARSE_PARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYPARSE_PARAM_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(void *YYPARSE_PARAM)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(void)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLEX_PARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yylex(void *YYLEX_PARAM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX</name></cpp:macro> <cpp:value>yylex(YYLEX_PARAM)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yylex(void)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX</name></cpp:macro> <cpp:value>yylex()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYERROR_DECL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyerror(const char *s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYERROR_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR_CALL</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>yyerror(msg)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>YYPARSE_DECL</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERRCODE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>YYINT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_lhs</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_len</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_defred</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYDESTRUCT_CALL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_TOSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_stos</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">260</literal></expr>, <expr><literal type="number">262</literal></expr>, <expr><literal type="number">257</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">261</literal></expr>, <expr><literal type="number">263</literal></expr>, <expr><literal type="number">263</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">45</literal></expr>,
<expr><literal type="number">42</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">263</literal></expr>, <expr><literal type="number">263</literal></expr>, <expr><literal type="number">263</literal></expr>, <expr><literal type="number">263</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_dgoto</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_sindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>, <expr><operator>-</operator><literal type="number">24</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal></expr>,
<expr><operator>-</operator><literal type="number">40</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">39</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_rindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_cindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_gindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTABLESIZE</name></cpp:macro> <cpp:value>218</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_table</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_check</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">40</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">47</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">257</literal></expr>, <expr><literal type="number">258</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>expr</name><operator>.</operator><name>oxout_ctable</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYFINAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYDEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXTOKEN</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYUNDFTOKEN</name></cpp:macro> <cpp:value>264</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTRANSLATE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; YYMAXTOKEN ? YYUNDFTOKEN : (a))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>expr</name><operator>.</operator><name>oxout_name</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"$end"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'('"</literal></expr>,<expr><literal type="string">"')'"</literal></expr>,<expr><literal type="string">"'*'"</literal></expr>,<expr><literal type="string">"'+'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'-'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'/'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"error"</literal></expr>,<expr><literal type="string">"ID"</literal></expr>,
<expr><literal type="string">"CONST"</literal></expr>,<expr><literal type="string">"$accept"</literal></expr>,<expr><literal type="string">"yyyAugNonterm"</literal></expr>,<expr><literal type="string">"s"</literal></expr>,<expr><literal type="string">"$$1"</literal></expr>,<expr><literal type="string">"expr"</literal></expr>,<expr><literal type="string">"illegal-symbol"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>expr</name><operator>.</operator><name>oxout_rule</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"$accept : yyyAugNonterm"</literal></expr>,
<expr><literal type="string">"$$1 :"</literal></expr>,
<expr><literal type="string">"yyyAugNonterm : $$1 s"</literal></expr>,
<expr><literal type="string">"s : expr"</literal></expr>,
<expr><literal type="string">"expr : expr '*' expr"</literal></expr>,
<expr><literal type="string">"expr : expr '+' expr"</literal></expr>,
<expr><literal type="string">"expr : expr '/' expr"</literal></expr>,
<expr><literal type="string">"expr : expr '-' expr"</literal></expr>,
<expr><literal type="string">"expr : '(' expr ')'"</literal></expr>,
<expr><literal type="string">"expr : ID"</literal></expr>,
<expr><literal type="string">"expr : CONST"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>yydebug</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>yyerrflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yychar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name></type> <name>yyval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name></type> <name>yylval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yynerrs</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>YYLTYPE</name></type> <name>yyloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYLTYPE</name></type> <name>yylloc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYLLOC_DEFAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLLOC_DEFAULT</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>, <parameter><type><name>rhs</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (n == 0) { (loc).first_line = YYRHSLOC(rhs, 0).last_line; (loc).first_column = YYRHSLOC(rhs, 0).last_column; (loc).last_line = YYRHSLOC(rhs, 0).last_line; (loc).last_column = YYRHSLOC(rhs, 0).last_column; } else { (loc).first_line = YYRHSLOC(rhs, 1).first_line; (loc).first_column = YYRHSLOC(rhs, 1).first_column; (loc).last_line = YYRHSLOC(rhs, n).last_line; (loc).last_column = YYRHSLOC(rhs, n).last_column; } } while (0)</cpp:value></cpp:define>

















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYLVQUEUEGROWTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLVQUEUEGROWTH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTACKSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>YYMAXDEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXDEPTH</name></cpp:macro> <cpp:value>YYSTACKSIZE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYMAXDEPTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACKSIZE</name></cpp:macro> <cpp:value>YYMAXDEPTH</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACKSIZE</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXDEPTH</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYINITSTACKSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYINITSTACKSIZE</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>stacksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>l_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>l_mark</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>p_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>p_mark</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>YYSTACKDATA</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>

<struct>struct <name>YYParseState_s</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>YYParseState_s</name></name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTACKDATA</name></type> <name>yystack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lexeme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name></type> <name>ctry</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>YYParseState_s</name></name></type> <name>YYParseState</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTACKDATA</name></type> <name>yystack</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYParseState</name> <modifier>*</modifier></type><name>yyps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYParseState</name> <modifier>*</modifier></type><name>yypath</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTYPE</name> <modifier>*</modifier></type><name>yylvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTYPE</name> <modifier>*</modifier></type><name>yylvp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTYPE</name> <modifier>*</modifier></type><name>yylve</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTYPE</name> <modifier>*</modifier></type><name>yylvlim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name> <modifier>*</modifier></type><name>yylpsns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name> <modifier>*</modifier></type><name>yylpp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name> <modifier>*</modifier></type><name>yylpe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name> <modifier>*</modifier></type><name>yylplim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name>YYINT</name> <modifier>*</modifier></type><name>yylexp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>YYINT</name> <modifier>*</modifier></type><name>yylexemes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>53</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>


<function_decl><type><name>int</name></type> <name>yyparse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content><expr_stmt><expr><call><name>yyparse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>138</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<decl_stmt><decl><type><name>long</name></type> <name>yyySSALspaceSize</name> <init>= <expr><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>yyyRSmaxSize</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>yyyTravStackMaxSize</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>yyySolvedSAlistCell</name> <block>{<decl_stmt><decl><type><name>yyyWAT</name></type> <name>attrbNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyLambdaSSAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<decl_stmt><decl><type><name>long</name></type> <name>yyySSALCfreeList</name> <init>= <expr><name>yyyLambdaSSAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>yyyNewSSALC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>yyySolvedSAlistCell</name></name> <modifier>*</modifier></type><name>yyySSALspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>yyyNbytesStackStg</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>yyyFT</name></type> <name><name>yyyRCIL</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name><name>yyyIIIEL</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">24</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name><name>yyyIIEL</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name><name>yyyIEL</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yyyFT</name></type> <name><name>yyyEntL</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>yyyfatal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content><expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>msg</name></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyySSALof</name></cpp:macro> <cpp:value>'S'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyRSof</name></cpp:macro> <cpp:value>'q'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyTSof</name></cpp:macro> <cpp:value>'t'</cpp:value></cpp:define>



<function><type><name>void</name></type> <name>yyyHandleOverflow</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>which</name></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg1</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>msg2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>oldSize</name></decl>,<decl><type ref="prev"/><name>newSize</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>which</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>yyySSALof</name></expr> :</case>
<expr_stmt><expr><name>msg1</name> <operator>=</operator> <literal type="string">"SSAL overflow: "</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oldSize</name> <operator>=</operator> <name>yyySSALspaceSize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>yyyRSof</name></expr> :</case>
<expr_stmt><expr><name>msg1</name> <operator>=</operator> <literal type="string">"ready set overflow: "</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oldSize</name> <operator>=</operator> <name>yyyRSmaxSize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>yyyTSof</name></expr> :</case>
<expr_stmt><expr><name>msg1</name> <operator>=</operator> <literal type="string">"traversal stack overflow: "</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oldSize</name> <operator>=</operator> <name>yyyTravStackMaxSize</name></expr>;</expr_stmt>
<break>break;</break>
<default>default :</default><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>newSize</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><name>oldSize</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newSize</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newSize</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>msg1</name></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"size was %ld.\n"</literal></expr></argument>,<argument><expr><name>oldSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg2</name> <operator>=</operator> <literal type="string">" Have to modify evaluator: -Y%c%ld.\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><name>msg2</name></expr></argument>,<argument><expr><name>which</name></expr></argument>,<argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>yyySignalEnts</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,<parameter><decl><type><name>long</name></type> <name>startP</name></decl></parameter>,<parameter><decl><type><name>long</name></type> <name>stopP</name></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>dumNode</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>startP</name> <operator>&lt;</operator> <name>stopP</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>yyyEntL</name><index>[<expr><name>startP</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dumNode</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>dumNode</name> <operator>=</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>cL</name></name><operator>)</operator><index>[<expr><name><name>yyyEntL</name><index>[<expr><name>startP</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>--</operator><operator>(</operator><operator>(</operator><name><name>dumNode</name><operator>-&gt;</operator><name>refCountList</name></name><operator>)</operator><index>[<expr><name><name>yyyEntL</name><index>[<expr><name>startP</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index>
<operator>)</operator>
<operator>)</operator></expr>
)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>yyyRSTop</name> <operator>==</operator> <name>yyyAfterRS</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><call><name>yyyHandleOverflow</name><argument_list>(<argument><expr><name>yyyRSof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>yyyRSTop</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>dumNode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyyRSTop</name><operator>-&gt;</operator><name>whichSym</name></name> <operator>=</operator> <name><name>yyyEntL</name><index>[<expr><name>startP</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyyRSTop</name><operator>-&gt;</operator><name>wa</name></name> <operator>=</operator> <name><name>yyyEntL</name><index>[<expr><name>startP</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>startP</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>yyySolveAndSignal</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>yyyiDum</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>yyypL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yyyws</name></decl>,<decl><type ref="prev"/><name>yyywa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>yyyRSTopN</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>yyyRefN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yyyParent</name></type> <name>yyyRSTopNp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>yyyRSTopNp</name> <operator>=</operator> <operator>(</operator><name>yyyRSTopN</name> <operator>=</operator> <name><name>yyyRSTop</name><operator>-&gt;</operator><name>node</name></name><operator>)</operator><operator>-&gt;</operator><name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyRefN</name><operator>=</operator> <ternary><condition><expr><operator>(</operator><name>yyyws</name> <operator>=</operator> <operator>(</operator><name><name>yyyRSTop</name><operator>-&gt;</operator><name>whichSym</name></name><operator>)</operator><operator>)</operator></expr>?</condition><then><expr><name><name>yyyRSTopNp</name><operator>.</operator><name>noderef</name></name></expr></then><else>:<expr><name>yyyRSTopN</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>yyywa</name> <operator>=</operator> <name><name>yyyRSTop</name><operator>-&gt;</operator><name>wa</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyRSTop</name><operator>--</operator></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>yyyRefN</name><operator>-&gt;</operator><name>prodNum</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch <condition>(<expr><name>yyyws</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<switch>switch <condition>(<expr><name>yyyws</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<switch>switch <condition>(<expr><name>yyyws</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<switch>switch <condition>(<expr><name>yyyws</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<switch>switch <condition>(<expr><name>yyyws</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<switch>switch <condition>(<expr><name>yyyws</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<switch>switch <condition>(<expr><name>yyyws</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch <condition>(<expr><name>yyywa</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<switch>switch <condition>(<expr><name>yyyws</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch <condition>(<expr><name>yyywa</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>yyyws</name></expr>)</condition>
<block>{<block_content><if_stmt><if>if <condition>(<expr><name><name>yyyRSTopN</name><operator>-&gt;</operator><name>prodNum</name></name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name>yyyiDum</name> <operator>=</operator> <name><name>yyyIIEL</name><index>[<expr><name><name>yyyIIIEL</name><index>[<expr><name><name>yyyRSTopN</name><operator>-&gt;</operator><name>prodNum</name></name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name>yyywa</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyySignalEnts</name><argument_list>(<argument><expr><name>yyyRSTopN</name></expr></argument>,<argument><expr><name><name>yyyIEL</name><index>[<expr><name>yyyiDum</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>yyyIEL</name><index>[<expr><name>yyyiDum</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content><if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>yyyRSTopN</name><operator>-&gt;</operator><name>parentIsStack</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name>yyyiDum</name> <operator>=</operator> <name><name>yyyIIEL</name><index>[<expr><name><name>yyyIIIEL</name><index>[<expr><name><name>yyyRSTopNp</name><operator>.</operator><name>noderef</name><operator>-&gt;</operator><name>prodNum</name></name></expr>]</index></name> <operator>+</operator>
<name><name>yyyRSTopN</name><operator>-&gt;</operator><name>whichSym</name></name></expr>
]</index></name> <operator>+</operator>
<name>yyywa</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyySignalEnts</name><argument_list>(<argument><expr><name><name>yyyRSTopNp</name><operator>.</operator><name>noderef</name></name></expr></argument>,
<argument><expr><name><name>yyyIEL</name><index>[<expr><name>yyyiDum</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>yyyIEL</name><index>[<expr><name>yyyiDum</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content><expr_stmt><expr><name>yyypL</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>yyyRSTopNp</name><operator>.</operator><name>stackref</name><operator>-&gt;</operator><name>solvedSAlist</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyySSALCfreeList</name> <operator>==</operator> <name>yyyLambdaSSAL</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name><name>yyySSALspace</name><index>[<expr><name>yyyNewSSALC</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>*</operator><name>yyypL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>yyypL</name> <operator>=</operator> <name>yyyNewSSALC</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>yyySSALspaceSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyHandleOverflow</name><argument_list>(<argument><expr><name>yyySSALof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content><expr_stmt><expr><name>yyyiDum</name> <operator>=</operator> <name>yyySSALCfreeList</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yyySSALCfreeList</name> <operator>=</operator> <name><name>yyySSALspace</name><index>[<expr><name>yyySSALCfreeList</name></expr>]</index></name><operator>.</operator><name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyySSALspace</name><index>[<expr><name>yyyiDum</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>*</operator><name>yyypL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yyypL</name> <operator>=</operator> <name>yyyiDum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>yyySSALspace</name><index>[<expr><operator>*</operator><name>yyypL</name></expr>]</index></name><operator>.</operator><name>attrbNum</name> <operator>=</operator> <name>yyywa</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>condStg</name></cpp:macro> <cpp:value>unsigned int conds;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyClearConds</name></cpp:macro> <cpp:value>{yyyTST-&gt;conds = 0;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyySetCond</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{yyyTST-&gt;conds += (1&lt;&lt;(n));}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyCond</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((yyyTST-&gt;conds &amp; (1&lt;&lt;(n)))?1:0)</cpp:value></cpp:define>



<struct>struct <name>yyyTravStackItem</name> <block>{<decl_stmt><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>isReady</name></decl>;</decl_stmt>
<expr_stmt><expr><name>condStg</name></expr></expr_stmt>
}</block>;</struct>



<function><type><name>void</name></type> <name>yyyDoTraversals</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>rootNode</name></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name><name>struct</name> <name>yyyTravStackItem</name></name> <modifier>*</modifier></type><name>yyyTravStack</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>yyyTST</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>yyyAfterTravStack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>yyyTSTn</name></decl>,<decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>yyyCLptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yyyi</name></decl>,<decl><type ref="prev"/><name>yyyRL</name></decl>,<decl><type ref="prev"/><name>yyyPass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yyyYok</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yyyTravStack</name> <operator>=</operator>
<operator>(</operator><operator>(</operator>struct <name>yyyTravStackItem</name> <operator>*</operator><operator>)</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>yyyTravStackMaxSize</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>yyyTravStackItem</name></expr></argument>)</argument_list></sizeof></expr></argument>
)</argument_list></call>
<operator>)</operator>
<operator>)</operator>
<operator>==</operator>
<operator>(</operator>struct <name>yyyTravStackItem</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>
)</condition>
<block>{<block_content><expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"malloc error in traversal stack allocation\n"</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>yyyAfterTravStack</name> <operator>=</operator> <name>yyyTravStack</name> <operator>+</operator> <name>yyyTravStackMaxSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyTravStack</name><operator>++</operator></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>yyyi</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>yyyi</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>yyyi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>yyyTST</name> <operator>=</operator> <name>yyyTravStack</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyyTST</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>rootNode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyyTST</name><operator>-&gt;</operator><name>isReady</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>yyyClearConds</name></macro>

<while>while<condition>(<expr><name>yyyTST</name> <operator>&gt;=</operator> <name>yyyTravStack</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name>yyyTSTn</name> <operator>=</operator> <name><name>yyyTST</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyyTST</name><operator>-&gt;</operator><name>isReady</name></name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name>yyyPass</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>yyyTravSwitch</name>;</goto>
<label><name>yyyTpop</name>:</label>
<expr_stmt><expr><name>yyyTST</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content><expr_stmt><expr><name>yyyPass</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>yyyTravSwitch</name>;</goto>
<label><name>yyyTpush</name>:</label>
<expr_stmt><expr><name><name>yyyTST</name><operator>-&gt;</operator><name>isReady</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyyTSTn</name><operator>-&gt;</operator><name>prodNum</name></name></expr>)</condition>
<block>{<block_content><if_stmt><if>if <condition>(<expr><name>yyyRL</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name>yyyCLptr2</name> <operator>=</operator> <name><name>yyyTSTn</name><operator>-&gt;</operator><name>cL</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>yyyTSTn</name><operator>-&gt;</operator><name>cLlen</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>
<block>{<block_content><if_stmt><if>if <condition>(<expr><operator>++</operator><name>yyyTST</name> <operator>==</operator> <name>yyyAfterTravStack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyHandleOverflow</name><argument_list>(<argument><expr><name>yyyTSof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content><expr_stmt><expr><name><name>yyyTST</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <operator>*</operator><name>yyyCLptr2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyyTST</name><operator>-&gt;</operator><name>isReady</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyClearConds</name></expr></expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>yyyCLptr2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content><expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>yyyTSTn</name><operator>-&gt;</operator><name>cLlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyCLptr2</name> <operator>=</operator> <name><name>yyyTSTn</name><operator>-&gt;</operator><name>cL</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name>yyyCLptr2</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>yyyTST</name> <operator>==</operator> <name>yyyAfterTravStack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyHandleOverflow</name><argument_list>(<argument><expr><name>yyyTSof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content><expr_stmt><expr><name><name>yyyTST</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <operator>*</operator><name>yyyCLptr2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyyTST</name><operator>-&gt;</operator><name>isReady</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyClearConds</name></expr></expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
<label><name>yyyTravSwitch</name>:</label>
<switch>switch<condition>(<expr><name><name>yyyTSTn</name><operator>-&gt;</operator><name>prodNum</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyi</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><macro><name>yyySetCond</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><operator>!</operator>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>24</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>444</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
)</condition><block type="pseudo"><block_content> <macro><name>yyySetCond</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>yyySetCond</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>24</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>453</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>24</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>459</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>25</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"prefix: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>465</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>23</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>477</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
)</condition><block type="pseudo"><block_content> <macro><name>yyySetCond</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>22</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>486</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>23</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>491</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>23</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<macro><name>printf</name><argument_list>(<argument><literal type="string">"postfix: "</literal></argument>)</argument_list></macro>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>497</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyi</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><macro><name>yyySetCond</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>29</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" * "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>518</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>28</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" * "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>533</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyi</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><macro><name>yyySetCond</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>32</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>554</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>33</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>569</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyi</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><macro><name>yyySetCond</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>37</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" / "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>590</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>36</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" / "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>605</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyi</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><macro><name>yyySetCond</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>41</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>626</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>40</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>641</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyi</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyi</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><macro><name>yyySetCond</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>46</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s "</literal></expr></argument>,<argument><expr><name><name>yyyTSTn</name><operator>-&gt;</operator><name>cL</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>yyyAttrbs</name><operator>.</operator><name>yyyAttrb1</name><operator>.</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>685</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>45</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s "</literal></expr></argument>,<argument><expr><name><name>yyyTSTn</name><operator>-&gt;</operator><name>cL</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>yyyAttrbs</name><operator>.</operator><name>yyyAttrb1</name><operator>.</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>700</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyi</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><macro><name>yyySetCond</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>50</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s "</literal></expr></argument>,<argument><expr><name><name>yyyTSTn</name><operator>-&gt;</operator><name>cL</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>yyyAttrbs</name><operator>.</operator><name>yyyAttrb1</name><operator>.</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>721</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch<condition>(<expr><name>yyyPass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>yyyRL</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>yyyCond</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>yyyPass</name></expr>)</condition> <block>{<block_content>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>49</cpp:number> <cpp:file>"expr.Y"</cpp:file></cpp:line>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s "</literal></expr></argument>,<argument><expr><name><name>yyyTSTn</name><operator>-&gt;</operator><name>cL</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>yyyAttrbs</name><operator>.</operator><name>yyyAttrb1</name><operator>.</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>736</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>yyyPass</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyyTpop</name>;</goto></block_content></block></if> <else>else<block type="pseudo"><block_content> <goto>goto <name>yyyTpush</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>yyyExecuteRRsection</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>rootNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>yyyi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>cycleSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>nNZrc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yyyYok</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yyyCheckUnsolvedInstTrav</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nNZrc</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cycleSum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nNZrc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n\n\n**********\n"</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"cycle detected in completed parse tree"</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" after decoration.\n"</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CYCLE_VERBOSE</name></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"number of unsolved attribute instances == %ld.\n"</literal></expr></argument>,
<argument><expr><name>nNZrc</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"total number of remaining dependencies == %ld.\n"</literal></expr></argument>,
<argument><expr><name>cycleSum</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"average number of remaining dependencies\n"</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" per unsolved instance == %f.\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>cycleSum</name><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>nNZrc</name><operator>)</operator><operator>)</operator></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"searching parse tree for %ld unsolved instances:\n"</literal></expr></argument>,
<argument><expr><name>nNZrc</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyUnsolvedInstSearchTravAux</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>yyyDoTraversals</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><name>yyyWAT</name></type> <name><name>yyyLRCIL</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>



<function><type><name>void</name></type> <name>yyyYoxInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>yyyInitDone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>yyyInitDone</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yyyRS</name> <operator>=</operator> <operator>(</operator>struct <name>yyyRSitem</name> <operator>*</operator><operator>)</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>yyyRSmaxSize</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>yyyRSitem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
<operator>)</operator>
<operator>==</operator>
<operator>(</operator><operator>(</operator>struct <name>yyyRSitem</name> <operator>*</operator><operator>)</operator> <name>NULL</name><operator>)</operator></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyfatal</name><argument_list>(<argument><expr><literal type="string">"malloc error in ox ready set space allocation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yyyRS</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyAfterRS</name> <operator>=</operator> <name>yyyRS</name> <operator>+</operator> <name>yyyRSmaxSize</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yyySSALspace</name> <operator>=</operator> <operator>(</operator>struct <name>yyySolvedSAlistCell</name> <operator>*</operator><operator>)</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>yyySSALspaceSize</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>yyySolvedSAlistCell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
<operator>)</operator>
<operator>==</operator>
<operator>(</operator><operator>(</operator>struct <name>yyySolvedSAlistCell</name> <operator>*</operator><operator>)</operator> <name>NULL</name><operator>)</operator></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyfatal</name><argument_list>(<argument><expr><literal type="string">"malloc error in stack solved list space allocation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yyyInitDone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yyyRSTop</name> <operator>=</operator> <name>yyyRS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>yyyDecorate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>yyyRSTop</name> <operator>&gt;=</operator> <name>yyyRS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyySolveAndSignal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>yyyGenIntNode</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>yyyProdNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yyyRHSlength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yyyNattrbs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>yyyOxAttrbs</name></name> <modifier>*</modifier></type><name>yyval_OxAttrbs</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>yyyWST</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yyySIT</name> <modifier>*</modifier><modifier>*</modifier></type><name>yyyOxStackItem</name> <init>= <expr><operator>&amp;</operator><name><name>yyval_OxAttrbs</name><operator>-&gt;</operator><name>yyyOxStackItem</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>gnpDum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>yyyOxStackItem</name> <operator>=</operator> <operator>(</operator><name>yyySIT</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>yyySIT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>yyyOxStackItem</name> <operator>==</operator> <operator>(</operator><name>yyySIT</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyfatal</name><argument_list>(<argument><expr><literal type="string">"malloc error in ox yacc semantic stack space allocation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name>node</name></name> <operator>=</operator>
<operator>(</operator><name>yyyGNT</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>yyyGNT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <operator>(</operator><name>yyyGNT</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyfatal</name><argument_list>(<argument><expr><literal type="string">"malloc error in ox node space allocation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name>solvedSAlist</name></name> <operator>=</operator> <name>yyyLambdaSSAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>stackref</name></name></name> <operator>=</operator> <operator>*</operator><name>yyyOxStackItem</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>parentIsStack</name></name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>cLlen</name></name></name> <operator>=</operator> <name>yyyRHSlength</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>cL</name></name></name> <operator>=</operator>
<operator>(</operator><name>yyyGNT</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>yyyRHSlength</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>yyyGNT</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>cL</name></name></name> <operator>==</operator> <operator>(</operator><name>yyyGNT</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyfatal</name><argument_list>(<argument><expr><literal type="string">"malloc error in ox child list space allocation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>refCountListLen</name></name></name> <operator>=</operator> <name>yyyNattrbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>refCountList</name></name></name> <operator>=</operator>
<operator>(</operator><name>yyyRCT</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>yyyNattrbs</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>yyyRCT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>refCountList</name></name></name> <operator>==</operator> <operator>(</operator><name>yyyRCT</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyfatal</name><argument_list>(<argument><expr><literal type="string">"malloc error in ox reference count list space allocation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>prodNum</name></name></name> <operator>=</operator> <name>yyyProdNum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>yyval_OxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>yyyRHSlength</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content><decl_stmt><decl><type><name>yyySIT</name> <modifier>*</modifier></type><name>yaccStDum</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr>struct <name>yyyOxAttrbs</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>yyyOxStackItem</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>gnpDum</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>cL</name></name></name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><name>yaccStDum</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gnpDum</name><operator>-&gt;</operator><name>whichSym</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gnpDum</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>noderef</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gnpDum</name><operator>-&gt;</operator><name>parentIsStack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyDECORfREQ</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>



<function><type><name>void</name></type> <name>yyyAdjustINRC</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>yyyProdNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yyyRHSlength</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>startP</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stopP</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>yyyOxAttrbs</name></name> <modifier>*</modifier></type><name>yyval_OxAttrbs</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>yyyWST</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yyySIT</name> <modifier>*</modifier></type><name>yyyOxStackItem</name> <init>= <expr><name><name>yyval_OxAttrbs</name><operator>-&gt;</operator><name>yyyOxStackItem</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>SSALptr</name></decl>,<decl><type ref="prev"/><name>SSALptrHead</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>cPtrPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>pL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>gnpDum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>iTemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>nextP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>intNodeCount</name> <init>= <expr><name>yyyDECORfREQ</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nextP</name> <operator>=</operator> <name>startP</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nextP</name> <operator>&lt;</operator> <name>stopP</name></expr>)</condition>
<block>{<block_content><if_stmt><if>if <condition>(<expr><name><name>yyyRCIL</name><index>[<expr><name>nextP</name></expr>]</index></name> <operator>==</operator> <name>yyyR</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><operator>(</operator><name><name>yyyOxStackItem</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>refCountList</name></name><operator>)</operator><index>[<expr><name><name>yyyRCIL</name><index>[<expr><name>nextP</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index> <operator>=</operator> <name><name>yyyRCIL</name><index>[<expr><name>nextP</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content><expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>yyyOxStackItem</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>cL</name></name><operator>)</operator><index>[<expr><name><name>yyyRCIL</name><index>[<expr><name>nextP</name></expr>]</index></name></expr>]</index><operator>)</operator><operator>-&gt;</operator><name>refCountList</name><operator>)</operator><index>[<expr><name><name>yyyRCIL</name><index>[<expr><name>nextP</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index> <operator>=</operator> <name><name>yyyRCIL</name><index>[<expr><name>nextP</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nextP</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>pL</name> <operator>=</operator> <name>yyyIIEL</name> <operator>+</operator> <name><name>yyyIIIEL</name><index>[<expr><name>yyyProdNum</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>yyval_OxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>yyyRHSlength</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content><decl_stmt><decl><type><name>yyySIT</name> <modifier>*</modifier></type><name>yaccStDum</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr>struct <name>yyyOxAttrbs</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>yyyOxStackItem</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pL</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>SSALptrHead</name> <operator>=</operator> <name>SSALptr</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>cPtrPtr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>yaccStDum</name><operator>-&gt;</operator><name>solvedSAlist</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>SSALptr</name> <operator>!=</operator> <name>yyyLambdaSSAL</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><operator>*</operator><name>cPtrPtr</name> <operator>=</operator> <name>yyyLambdaSSAL</name></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>iTemp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pL</name><operator>+</operator><name><name>yyySSALspace</name><index>[<expr><name>SSALptr</name></expr>]</index></name><operator>.</operator><name>attrbNum</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyySignalEnts</name><argument_list>(<argument><expr><name><name>yyyOxStackItem</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,
<argument><expr><name><name>yyyIEL</name><index>[<expr><name>iTemp</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>yyyIEL</name><index>[<expr><name>iTemp</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SSALptr</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>cPtrPtr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>yyySSALspace</name><index>[<expr><name>SSALptr</name></expr>]</index></name><operator>.</operator><name>next</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>SSALptr</name> <operator>!=</operator> <name>yyyLambdaSSAL</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>cPtrPtr</name> <operator>=</operator> <name>yyySSALCfreeList</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yyySSALCfreeList</name> <operator>=</operator> <name>SSALptrHead</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nextP</name> <operator>=</operator> <name>startP</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nextP</name> <operator>&lt;</operator> <name>stopP</name></expr>)</condition>
<block>{<block_content><if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>yyyRCIL</name><index>[<expr><name>nextP</name></expr>]</index></name></expr>)</condition>
<block>{<block_content><if_stmt><if>if <condition>(<expr><name><name>yyyRCIL</name><index>[<expr><name>nextP</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>yyyR</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name>pL</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>yyyOxStackItem</name><operator>-&gt;</operator><name>solvedSAlist</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyySSALCfreeList</name> <operator>==</operator> <name>yyyLambdaSSAL</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name><name>yyySSALspace</name><index>[<expr><name>yyyNewSSALC</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>*</operator><name>pL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pL</name> <operator>=</operator> <name>yyyNewSSALC</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>yyySSALspaceSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyHandleOverflow</name><argument_list>(<argument><expr><name>yyySSALof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content><expr_stmt><expr><name>iTemp</name> <operator>=</operator> <name>yyySSALCfreeList</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yyySSALCfreeList</name> <operator>=</operator> <name><name>yyySSALspace</name><index>[<expr><name>yyySSALCfreeList</name></expr>]</index></name><operator>.</operator><name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyySSALspace</name><index>[<expr><name>iTemp</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>*</operator><name>pL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pL</name> <operator>=</operator> <name>iTemp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>yyySSALspace</name><index>[<expr><operator>*</operator><name>pL</name></expr>]</index></name><operator>.</operator><name>attrbNum</name> <operator>=</operator> <name><name>yyyRCIL</name><index>[<expr><name>nextP</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content><if_stmt><if>if <condition>(<expr><operator>(</operator><name>gnpDum</name> <operator>=</operator> <operator>(</operator><name><name>yyyOxStackItem</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>cL</name></name><operator>)</operator><index>[<expr><name><name>yyyRCIL</name><index>[<expr><name>nextP</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>]</index><operator>)</operator><operator>-&gt;</operator><name>prodNum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>iTemp</name> <operator>=</operator> <name><name>yyyIIEL</name><index>[<expr><name><name>yyyIIIEL</name><index>[<expr><name><name>gnpDum</name><operator>-&gt;</operator><name>prodNum</name></name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>yyyRCIL</name><index>[<expr><name>nextP</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyySignalEnts</name><argument_list>(<argument><expr><name>gnpDum</name></expr></argument>,
<argument><expr><name><name>yyyIEL</name><index>[<expr><name>iTemp</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>yyyIEL</name><index>[<expr><name>iTemp</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nextP</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>intNodeCount</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name>intNodeCount</name> <operator>=</operator> <name>yyyDECORfREQ</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyDecorate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>yyyGenLeaf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nAttrbs</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>typeNum</name></decl></parameter>,<parameter><decl><type><name>long</name></type> <name>startP</name></decl></parameter>,<parameter><decl><type><name>long</name></type> <name>stopP</name></decl></parameter>,<parameter><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>yylval</name></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>yyyRCT</name> <modifier>*</modifier></type><name>rcPdum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yyySIT</name> <modifier>*</modifier><modifier>*</modifier></type><name>yyyOxStackItem</name> <init>= <expr><operator>&amp;</operator><name><name>yylval</name><operator>-&gt;</operator><name>yyyOxAttrbs</name><operator>.</operator><name>yyyOxStackItem</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yyySIT</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>yyySIT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>yyySIT</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyfatal</name><argument_list>(<argument><expr><literal type="string">"malloc error in ox yacc semantic stack space allocation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name>node</name></name> <operator>=</operator>
<operator>(</operator><name>yyyGNT</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>yyyGNT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>
;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <operator>(</operator><name>yyyGNT</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyfatal</name><argument_list>(<argument><expr><literal type="string">"malloc error in ox node space allocation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name>solvedSAlist</name></name> <operator>=</operator> <name>yyyLambdaSSAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>stackref</name></name></name> <operator>=</operator> <operator>*</operator><name>yyyOxStackItem</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>parentIsStack</name></name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>cLlen</name></name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>cL</name></name></name> <operator>=</operator> <operator>(</operator><name>yyyGNT</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>refCountListLen</name></name></name> <operator>=</operator> <name>nAttrbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rcPdum</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>refCountList</name></name></name> <operator>=</operator>
<operator>(</operator><name>yyyRCT</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nAttrbs</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>yyyRCT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rcPdum</name> <operator>==</operator> <operator>(</operator><name>yyyRCT</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyyfatal</name><argument_list>(<argument><expr><literal type="string">"malloc error in ox reference count list space allocation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>startP</name> <operator>&lt;</operator> <name>stopP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rcPdum</name><index>[<expr><name><name>yyyLRCIL</name><index>[<expr><name>startP</name><operator>++</operator></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>prodNum</name></name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>yyyOxStackItem</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>whichSym</name></name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>yyyabort</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><expr_stmt><expr><name>yyyYok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyLastProdNum</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyNsorts</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<decl_stmt><decl><type><name>int</name></type> <name><name>yyyProdsInd</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">26</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>yyyProds</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">116</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">412</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">420</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">452</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">436</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">396</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">404</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">619</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">462</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">567</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>yyySortsInd</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>yyySorts</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">413</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>yyyStringTab</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"s"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"y"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"LRpre"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'('"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"')'"</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'*'"</literal></expr>,<expr><literal type="string">"lexeme"</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="string">"'+'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'-'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'/'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"expr"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"printf"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"CONST"</literal></expr>,<expr><literal type="string">"LRpost"</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"ID"</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyySizeofProd</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yyyProdsInd[(num)+1] - yyyProdsInd[(num)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyGSoccurStr</name><parameter_list>(<parameter><type><name>prodNum</name></type></parameter>,<parameter><type><name>symPos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yyyStringTab[yyyProds[yyyProdsInd[(prodNum)] + (symPos)][0]])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyySizeofSort</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yyySortsInd[(num)+1] - yyySortsInd[(num)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyySortOf</name><parameter_list>(<parameter><type><name>prodNum</name></type></parameter>,<parameter><type><name>symPos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yyyProds[yyyProdsInd[(prodNum)] + (symPos)][1])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyyAttrbStr</name><parameter_list>(<parameter><type><name>prodNum</name></type></parameter>,<parameter><type><name>symPos</name></type></parameter>,<parameter><type><name>attrbNum</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yyyStringTab[yyySorts[yyySortsInd[yyySortOf(prodNum,symPos)] + (attrbNum) ] ] )</cpp:value></cpp:define>








<function><type><name>void</name></type> <name>yyyShowProd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>,<decl><type ref="prev"/><name>nSyms</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nSyms</name> <operator>=</operator> <call><name>yyySizeofProd</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nSyms</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><call><name>yyyGSoccurStr</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" : "</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">";\n"</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>yyyShowProds</name><parameter_list>()</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>yyyLastProdNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>yyyShowProd</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content>}</block></function>



<function><type><name>void</name></type> <name>yyyShowSymsAndSorts</name><parameter_list>()</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>yyyLastProdNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content><decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>nSyms</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\n\n\n---------------------------------- %3.1d\n"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nSyms</name> <operator>=</operator> <call><name>yyySizeofProd</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nSyms</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content><decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>sortSize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><call><name>yyyGSoccurStr</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sortSize</name> <operator>=</operator> <call><name>yyySizeofSort</name><argument_list>(<argument><expr><call><name>yyySortOf</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>sortSize</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" %s\n"</literal></expr></argument>,<argument><expr><call><name>yyyAttrbStr</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"-&gt;\n"</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>yyyCheckNodeInstancesSolved</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>np</name></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>int</name></type> <name>mysort</name></decl>,<decl><type ref="prev"/><name>sortSize</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>prodNum</name></decl>,<decl><type ref="prev"/><name>symPos</name></decl>,<decl><type ref="prev"/><name>inTerminalNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nUnsolvedInsts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>prodNum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content><expr_stmt><expr><name>inTerminalNode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prodNum</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>prodNum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>symPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content><expr_stmt><expr><name>inTerminalNode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prodNum</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>noderef</name><operator>-&gt;</operator><name>prodNum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>symPos</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>whichSym</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mysort</name> <operator>=</operator> <call><name>yyySortOf</name><argument_list>(<argument><expr><name>prodNum</name></expr></argument>,<argument><expr><name>symPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sortSize</name> <operator>=</operator> <call><name>yyySizeofSort</name><argument_list>(<argument><expr><name>mysort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>sortSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>refCountList</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nUnsolvedInsts</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>nUnsolvedInsts</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\nFound node that has %d unsolved attribute instance(s).\n"</literal></expr></argument>,
<argument><expr><name>nUnsolvedInsts</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Node is labeled \"%s\".\n"</literal></expr></argument>,
<argument><expr><call><name>yyyGSoccurStr</name><argument_list>(<argument><expr><name>prodNum</name></expr></argument>,<argument><expr><name>symPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inTerminalNode</name></expr>)</condition>
<block>{<block_content><expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Node is terminal. Its parent production is:\n "</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyShowProd</name><argument_list>(<argument><expr><name>prodNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content><expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Node is nonterminal. "</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>parentIsStack</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content><expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Node is %dth child in its parent production:\n "</literal></expr></argument>,
<argument><expr><name><name>np</name><operator>-&gt;</operator><name>whichSym</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyShowProd</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>noderef</name><operator>-&gt;</operator><name>prodNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Node is on left hand side of this production:\n "</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyShowProd</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>prodNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"The following instances are unsolved:\n"</literal></expr></argument>,<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>sortSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>refCountList</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">" %-16s still has %1d dependencies.\n"</literal></expr></argument>,
<argument><expr><call><name>yyyAttrbStr</name><argument_list>(<argument><expr><name>prodNum</name></expr></argument>,<argument><expr><name>symPos</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>refCountList</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>yyyCheckUnsolvedInstTrav</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>,<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>nNZrc</name></decl></parameter>,<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>cycleSum</name></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>yyyGNT</name> <modifier>*</modifier><modifier>*</modifier></type><name>yyyCLpdum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yyyRCT</name> <modifier>*</modifier></type><name>rcp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>rcp</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>refCountList</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>refCountListLen</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name><operator>++</operator></expr>)</condition> <block>{<block_content><expr_stmt><expr><operator>*</operator><name>cycleSum</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>rcp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nNZrc</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><name>yyyCLpdum</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>cL</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>cLlen</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>yyyCheckUnsolvedInstTrav</name><argument_list>(<argument><expr><operator>*</operator><name>yyyCLpdum</name></expr></argument>,<argument><expr><name>nNZrc</name></expr></argument>,<argument><expr><name>cycleSum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyCLpdum</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>yyyUnsolvedInstSearchTravAux</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>yyyGNT</name> <modifier>*</modifier><modifier>*</modifier></type><name>yyyCLpdum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yyyCheckNodeInstancesSolved</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyCLpdum</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>cL</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>cLlen</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>yyyUnsolvedInstSearchTravAux</name><argument_list>(<argument><expr><operator>*</operator><name>yyyCLpdum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyCLpdum</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>yyyUnsolvedInstSearchTrav</name><parameter_list>(<parameter><decl><type><name>yyyGNT</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list>
<block>{<block_content><decl_stmt><decl><type><name>yyyGNT</name> <modifier>*</modifier><modifier>*</modifier></type><name>yyyCLpdum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>yyyCLpdum</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>cL</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>cLlen</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>yyyUnsolvedInstSearchTravAux</name><argument_list>(<argument><expr><operator>*</operator><name>yyyCLpdum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyyCLpdum</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1797</cpp:number> <cpp:file>"expr.oxout.tab.c"</cpp:file></cpp:line>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydepth</name></cpp:macro> <cpp:value>(int)(yystack.s_mark - yystack.s_base)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yytrial</name></cpp:macro> <cpp:value>(yyps-&gt;save)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int</name></type> <name>yygrowstack</name><parameter_list>(<parameter><decl><type><name>YYSTACKDATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>newsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>newss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>newvs</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>newps</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsize</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>stacksize</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>YYINITSTACKSIZE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>newsize</name> <operator>&gt;=</operator> <name>YYMAXDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>newsize</name> <operator>*=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name>YYMAXDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>YYMAXDEPTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>s_mark</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>newss</name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newss</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name> <operator>=</operator> <name>newss</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_mark</name></name> <operator>=</operator> <name>newss</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newvs</name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newvs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newvs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name> <operator>=</operator> <name>newvs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>l_mark</name></name> <operator>=</operator> <name>newvs</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>newps</name> <operator>=</operator> <operator>(</operator><name>YYLTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>p_base</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newps</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_base</name></name> <operator>=</operator> <name>newps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_mark</name></name> <operator>=</operator> <name>newps</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_last</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>s_base</name></name> <operator>+</operator> <name>newsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%sdebug: stack size increased to %d\n"</literal></expr></argument>, <argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYPURE</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YY_NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>yyfreestack</name><parameter_list>(<parameter><decl><type><name>YYSTACKDATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>p_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyfreestack</name><parameter_list>(<parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>YYParseState</name> <modifier>*</modifier></type>
<name>yyNewState</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>YYParseState</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>YYParseState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>stacksize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>=</operator> <operator>(</operator><name>YYLTYPE</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>yyFreeState</name><parameter_list>(<parameter><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>yyfreestack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>yystack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYABORT</name></cpp:macro> <cpp:value>goto yyabort</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYREJECT</name></cpp:macro> <cpp:value>goto yyabort</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYACCEPT</name></cpp:macro> <cpp:value>goto yyaccept</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR</name></cpp:macro> <cpp:value>goto yyerrlab</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYVALID</name></cpp:macro> <cpp:value>do { if (yyps-&gt;save) goto yyvalid; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYVALID_NESTED</name></cpp:macro> <cpp:value>do { if (yyps-&gt;save &amp;&amp; yyps-&gt;save-&gt;save == 0) goto yyvalid; } while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>YYPARSE_DECL</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>yym</name></decl>, <decl><type ref="prev"/><name>yyn</name></decl>, <decl><type ref="prev"/><name>yystate</name></decl>, <decl><type ref="prev"/><name>yyresult</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>yynewerrflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>yyerrctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>YYLTYPE</name></type> <name><name>yyerror_loc_range</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>yys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"YYDEBUG"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <operator>*</operator><name>yys</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyn</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>yyn</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yydebug</name> <operator>=</operator> <name>yyn</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%sdebug[&lt;#of symbols on state stack&gt;]\n"</literal></expr></argument>, <argument><expr><name>YYPREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>yyerror_loc_range</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yyerror_loc_range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<expr_stmt><expr><name>yyps</name> <operator>=</operator> <call><name>yyNewState</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>yyps</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yynerrs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyerrflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYPURE</name></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yystack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>yyloop</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yydefred</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyreduce</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yylvp</name> <operator>&lt;</operator> <name>yylve</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>yylval</name> <operator>=</operator> <operator>*</operator><name>yylvp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylloc</name> <operator>=</operator> <operator>*</operator><name>yylpp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <operator>*</operator><name>yylexp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>yylvp</name> <operator>==</operator> <name>yylvlim</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>yylvlim</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>YYLVQUEUEGROWTH</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylexemes</name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylexemes</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylvals</name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylvals</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylpsns</name> <operator>=</operator> <operator>(</operator><name>YYLTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylpsns</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylve</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylvlim</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpe</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylplim</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>yylexp</name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>YYLEX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yylvp</name><operator>++</operator> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylve</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>yylpp</name><operator>++</operator> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylpe</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <operator>*</operator><name>yylexp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYLEX</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, reading token %d (%s)"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_TOSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" &lt;%s&gt;"</literal></expr></argument>, <argument><expr><call><name>YYSTYPE_TOSTRING</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yylval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yycindex</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yychar</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>YYINT</name></type> <name>ctry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>yypath</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: CONFLICT in state %d: following successful trial parse\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>save</name> <operator>=</operator> <name>yypath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yypath</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctry</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>ctry</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>save</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>yystate</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>YYABORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>


<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: CONFLICT in state %d. "</literal></expr></argument>, <argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"ALREADY in conflict, continuing trial parse.\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Starting trial parse.\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>save</name> <operator>=</operator> <call><name>yyNewState</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>save</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>yystate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>errflag</name></name> <operator>=</operator> <name>yyerrflag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ctry</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyctable</name><index>[<expr><name>ctry</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name> <operator>&amp;&amp;</operator> <name>yychar</name> <operator>&gt;=</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: backtracking 1 token\n"</literal></expr></argument>, <argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ctry</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>ctry</name></name> <operator>=</operator> <name>ctry</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yylexemes</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yylexemes</name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>YYLVQUEUEGROWTH</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yylexemes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yylvals</name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>YYLVQUEUEGROWTH</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yylvals</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yylvlim</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name>YYLVQUEUEGROWTH</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpsns</name> <operator>=</operator> <operator>(</operator><name>YYLTYPE</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>YYLVQUEUEGROWTH</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yylpsns</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yylplim</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name>YYLVQUEUEGROWTH</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yylvp</name> <operator>==</operator> <name>yylve</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylve</name> <operator>=</operator> <name>yylvals</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpe</name> <operator>=</operator> <name>yylpsns</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&gt;=</operator> <name>YYEOF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>yylve</name><operator>++</operator> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>yylpe</name><operator>++</operator> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>yylexp</name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&gt;=</operator> <name>YYEOF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yylvp</name><operator>--</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name><operator>--</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <name>ctry</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, shifting to state %d\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name><name>yyctable</name><index>[<expr><name>ctry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yylvp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yyctable</name><index>[<expr><name>ctry</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yystate</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>yyerrflag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yyctable</name><index>[<expr><name>ctry</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>yyreduce</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yysindex</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yychar</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, shifting to state %d\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>yyerrflag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yyrindex</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yychar</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>yyreduce</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyinrecovery</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>

<expr_stmt><expr><name>yynewerrflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>yyerrhandler</name>;</goto>
<goto>goto <name>yyerrlab</name>;</goto>

<label><name>yyerrlab</name>:</label>


<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>yynewerrflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>yyerrhandler</name>:</label>
<while>while <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ctry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name> <operator>-</operator> <name><name>yyps</name><operator>-&gt;</operator><name>save</name><operator>-&gt;</operator><name>lexeme</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>yyerrctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>&lt;</operator> <name>yylvp</name> <operator>-</operator> <name>yylvals</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>yyerrctx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>yyerrctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>yyerrctx</name> <operator>=</operator> <call><name>yyNewState</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>yystate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>errflag</name></name> <operator>=</operator> <name>yyerrflag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name><name>save</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name><name>save</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name> <operator>+</operator> <name><name>save</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <operator>(</operator><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <operator>(</operator><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><name><name>save</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ctry</name> <operator>=</operator> <operator>++</operator><name><name>save</name><operator>-&gt;</operator><name>ctry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yyctable</name><index>[<expr><name>ctry</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyreduce</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%sdebug[%d,trial]: trial parse FAILED, entering ERROR mode\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name> <operator>+</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name><name>yylexp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylval</name> <operator>=</operator> <name><name>yylvp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylloc</name> <operator>=</operator> <name><name>yylpp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><name><name>yyerrctx</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yyerrctx</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>yyerrctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyerrctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>yynewerrflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>yynewerrflag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyinrecovery</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>YYERROR_CALL</name><argument_list>(<argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yyerror_loc_range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>YYBTYACC</name></expr></cpp:if>
<goto>goto <name>yyerrlab</name>;</goto>
<label><name>yyerrlab</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>yynerrs</name></expr>;</expr_stmt>

<label><name>yyinrecovery</name>:</label>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyerrflag</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yysindex</name><index>[<expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>YYERRCODE</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>YYERRCODE</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, error recovery shifting to state %d\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>, <argument><expr><name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>yyerror_loc_range</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YYLLOC_DEFAULT</name><argument_list>(<argument><expr><name>yyloc</name></expr></argument>, <argument><expr><name>yyerror_loc_range</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name>yyloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: error recovery discarding state %d\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&lt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyabort</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>yyerror_loc_range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYDESTRUCT_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"error: discarding state"</literal></expr></argument>,
<argument><expr><name><name>yystos</name><index>[<expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"error: discarding state"</literal></expr></argument>,
<argument><expr><name><name>yystos</name><index>[<expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>--</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>--</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyabort</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, error recovery discarding token %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYDESTRUCT_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"error: discarding token"</literal></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"error: discarding token"</literal></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></else></if_stmt>

<label><name>yyreduce</name>:</label>
<expr_stmt><expr><name>yym</name> <operator>=</operator> <name><name>yylen</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, reducing by rule %d (%s)"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yyn</name></expr></argument>, <argument><expr><name><name>yyrule</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_TOSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yym</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>yym</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>yym</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>YYSTYPE_TOSTRING</name><argument_list>(<argument><expr><name><name>yystos</name><index>[<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yym</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>yym</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yyval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>yyval</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yyloc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yyloc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>YYLLOC_DEFAULT</name><argument_list>(<argument><expr><name>yyloc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name><index>[<expr><operator>-</operator><name>yym</name></expr>]</index></name></expr></argument>, <argument><expr><name>yym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>yyerror_loc_range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_mark</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>yym</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>yyn</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>64</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<block>{<block_content><expr_stmt><expr><call><name>yyyYoxInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>66</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><call><name>yyyDecorate</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>yyyExecuteRRsection</name><argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>yyyOxAttrbs</name><operator>.</operator><name>yyyOxStackItem</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>73</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<block>{<block_content><if_stmt><if>if<condition>(<expr><name>yyyYok</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>yyyGenIntNode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyAdjustINRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>80</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<block>{<block_content><if_stmt><if>if<condition>(<expr><name>yyyYok</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>yyyGenIntNode</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyAdjustINRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>87</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<block>{<block_content><if_stmt><if>if<condition>(<expr><name>yyyYok</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>yyyGenIntNode</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyAdjustINRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>94</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<block>{<block_content><if_stmt><if>if<condition>(<expr><name>yyyYok</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>yyyGenIntNode</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyAdjustINRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>101</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<block>{<block_content><if_stmt><if>if<condition>(<expr><name>yyyYok</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>yyyGenIntNode</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyAdjustINRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>108</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<block>{<block_content><if_stmt><if>if<condition>(<expr><name>yyyYok</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>yyyGenIntNode</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyAdjustINRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>114</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<block>{<block_content><if_stmt><if>if<condition>(<expr><name>yyyYok</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>yyyGenIntNode</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyAdjustINRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>121</cpp:number> <cpp:file>"expr.oxout.y"</cpp:file></cpp:line>
<block>{<block_content><if_stmt><if>if<condition>(<expr><name>yyyYok</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>yyyGenIntNode</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyyAdjustINRC</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yyval</name><operator>.</operator><name>yyyOxAttrbs</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>yyyOxAttrbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block>
<break>break;</break>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2525</cpp:number> <cpp:file>"expr.oxout.tab.c"</cpp:file></cpp:line>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yym</name> <operator>=</operator> <name><name>yylhs</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yystate</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>yym</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: after reduction, "</literal></expr></argument>, <argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_TOSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"result is &lt;%s&gt;, "</literal></expr></argument>, <argument><expr><call><name>YYSTYPE_TOSTRING</name><argument_list>(<argument><expr><name><name>yystos</name><index>[<expr><name>YYFINAL</name></expr>]</index></name></expr></argument>, <argument><expr><name>yyval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"shifting from state 0 to final state %d\n"</literal></expr></argument>, <argument><expr><name>YYFINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name>YYFINAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name>YYFINAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yyval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name>yyloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yylvp</name> <operator>&lt;</operator> <name>yylve</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>yylval</name> <operator>=</operator> <operator>*</operator><name>yylvp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylloc</name> <operator>=</operator> <operator>*</operator><name>yylpp</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <operator>*</operator><name>yylexp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>yylvp</name> <operator>==</operator> <name>yylvlim</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>yylvlim</name> <operator>-</operator> <name>yylvals</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>YYLVQUEUEGROWTH</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylexemes</name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylexemes</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylvals</name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylvals</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yylpsns</name> <operator>=</operator> <operator>(</operator><name>YYLTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name>yylpsns</name></expr></argument>, <argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>yyenomem</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylve</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylvlim</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpe</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylplim</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>yylexp</name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>YYLEX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yylvp</name><operator>++</operator> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylve</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>yylpp</name><operator>++</operator> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yylpe</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <operator>*</operator><name>yylexp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYLEX</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, reading token %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>YYFINAL</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyaccept</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yygindex</name><index>[<expr><name>yym</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yystate</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yystate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yydgoto</name><index>[<expr><name>yym</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: after reduction, "</literal></expr></argument>, <argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_TOSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yytrial</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"result is &lt;%s&gt;, "</literal></expr></argument>, <argument><expr><call><name>YYSTYPE_TOSTRING</name><argument_list>(<argument><expr><name><name>yystos</name><index>[<expr><name>yystate</name></expr>]</index></name></expr></argument>, <argument><expr><name>yyval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"shifting from state %d to state %d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yystate</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yyval</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name>yyloc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>yyloop</name>;</goto>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>


<label><name>yyvalid</name>:</label>
<if_stmt><if>if <condition>(<expr><name>yypath</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>YYABORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>yypath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yypath</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: state %d, CONFLICT trial successful, backtracking to state %d, %d tokens\n"</literal></expr></argument>,
<argument><expr><name>YYDEBUGSTR</name></expr></argument>, <argument><expr><name>yydepth</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name><name>yypath</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>yylvp</name> <operator>-</operator> <name>yylvals</name> <operator>-</operator> <name><name>yypath</name><operator>-&gt;</operator><name>lexeme</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>yyerrctx</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>yyerrctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyerrctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>yylvp</name> <operator>=</operator> <name>yylvals</name> <operator>+</operator> <name><name>yypath</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>yylpp</name> <operator>=</operator> <name>yylpsns</name> <operator>+</operator> <name><name>yypath</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yylexp</name> <operator>=</operator> <name>yylexemes</name> <operator>+</operator> <name><name>yypath</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>s_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYINT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>l_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <operator>(</operator><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><name><name>yypath</name><operator>-&gt;</operator><name>yystack</name><operator>.</operator><name>p_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>yystack</name><operator>.</operator><name>p_mark</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yypath</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<goto>goto <name>yyloop</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>yyoverflow</name>:</label>
<expr_stmt><expr><call><name>YYERROR_CALL</name><argument_list>(<argument><expr><literal type="string">"yacc stack overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<goto>goto <name>yyabort_nomem</name>;</goto>
<label><name>yyenomem</name>:</label>
<expr_stmt><expr><call><name>YYERROR_CALL</name><argument_list>(<argument><expr><literal type="string">"memory exhausted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>yyabort_nomem</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yyresult</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>yyreturn</name>;</goto>

<label><name>yyabort</name>:</label>
<expr_stmt><expr><name>yyresult</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>yyreturn</name>;</goto>

<label><name>yyaccept</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>yyps</name><operator>-&gt;</operator><name>save</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyvalid</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yyresult</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>yyreturn</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYDESTRUCT_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>!=</operator> <name>YYEOF</name> <operator>&amp;&amp;</operator> <name>yychar</name> <operator>!=</operator> <name>YYEMPTY</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"cleanup: discarding token"</literal></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"cleanup: discarding token"</literal></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYLTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pv</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr><operator>,</operator> <expr><name>pp</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>p_base</name></name></expr>;</init> <condition><expr><name>pv</name> <operator>&lt;=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>pv</name></expr><operator>,</operator> <expr><operator>++</operator><name>pp</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"cleanup: discarding state"</literal></expr></argument>,
<argument><expr><name><name>yystos</name><index>[<expr><operator>*</operator><operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name>pv</name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>pv</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr>;</init> <condition><expr><name>pv</name> <operator>&lt;=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>pv</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>YYDESTRUCT_CALL</name><argument_list>(<argument><expr><literal type="string">"cleanup: discarding state"</literal></expr></argument>,
<argument><expr><name><name>yystos</name><index>[<expr><operator>*</operator><operator>(</operator><name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>+</operator> <operator>(</operator><name>pv</name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name><operator>)</operator><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYBTYACC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yyerrctx</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>yyerrctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyerrctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>yyps</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name>yyps</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>yyps</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>yypath</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>YYParseState</name> <modifier>*</modifier></type><name>save</name> <init>= <expr><name>yypath</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>yypath</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>save</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyFreeState</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>yyfreestack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>yyresult</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
