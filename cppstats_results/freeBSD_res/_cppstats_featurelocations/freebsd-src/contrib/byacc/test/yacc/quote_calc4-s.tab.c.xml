<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/test/yacc/quote_calc4-s.tab.c">



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYBYACC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMINOR</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYCHECK</name></cpp:macro> <cpp:value>"yyyymmdd"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYEMPTY</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyclearin</name></cpp:macro> <cpp:value>(yychar = YYEMPTY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerrok</name></cpp:macro> <cpp:value>(yyerrflag = 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYRECOVERING</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(yyerrflag != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYENOMEM</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYEOF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyparse</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyparse</name></cpp:macro> <cpp:value>quote_calc4_parse</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylex</name></cpp:macro> <cpp:value>quote_calc4_lex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyerror</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerror</name></cpp:macro> <cpp:value>quote_calc4_error</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yychar</name></cpp:macro> <cpp:value>quote_calc4_char</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyval</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyval</name></cpp:macro> <cpp:value>quote_calc4_val</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylval</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylval</name></cpp:macro> <cpp:value>quote_calc4_lval</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydebug</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydebug</name></cpp:macro> <cpp:value>quote_calc4_debug</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yynerrs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yynerrs</name></cpp:macro> <cpp:value>quote_calc4_nerrs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyerrflag</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerrflag</name></cpp:macro> <cpp:value>quote_calc4_errflag</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylhs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylhs</name></cpp:macro> <cpp:value>quote_calc4_lhs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylen</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylen</name></cpp:macro> <cpp:value>quote_calc4_len</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydefred</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydefred</name></cpp:macro> <cpp:value>quote_calc4_defred</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydgoto</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydgoto</name></cpp:macro> <cpp:value>quote_calc4_dgoto</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yysindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yysindex</name></cpp:macro> <cpp:value>quote_calc4_sindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyrindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrindex</name></cpp:macro> <cpp:value>quote_calc4_rindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yygindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yygindex</name></cpp:macro> <cpp:value>quote_calc4_gindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yytable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yytable</name></cpp:macro> <cpp:value>quote_calc4_table</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yycheck</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yycheck</name></cpp:macro> <cpp:value>quote_calc4_check</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyname</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyname</name></cpp:macro> <cpp:value>quote_calc4_name</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyrule</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrule</name></cpp:macro> <cpp:value>quote_calc4_rule</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPREFIX</name></cpp:macro> <cpp:value>"quote_calc4_"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPURE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name><name>regs</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>yylex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>yyerror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>111</cpp:number> <cpp:file>"quote_calc4-s.tab.c"</cpp:file></cpp:line>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>int</name></type> <name>YYSTYPE</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTYPE_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYPARSE_PARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYPARSE_PARAM_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(void *YYPARSE_PARAM)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(void)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLEX_PARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yylex(void *YYLEX_PARAM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX</name></cpp:macro> <cpp:value>yylex(YYLEX_PARAM)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yylex(void)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX</name></cpp:macro> <cpp:value>yylex()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYERROR_DECL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyerror(const char *s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYERROR_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR_CALL</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>yyerror(msg)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>YYPARSE_DECL</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ADD</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SUB</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MUL</name></cpp:macro> <cpp:value>261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_DIV</name></cpp:macro> <cpp:value>263</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MOD</name></cpp:macro> <cpp:value>265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_AND</name></cpp:macro> <cpp:value>267</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIT</name></cpp:macro> <cpp:value>269</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LETTER</name></cpp:macro> <cpp:value>270</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMINUS</name></cpp:macro> <cpp:value>271</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERRCODE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>YYINT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>quote_calc4_lhs</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>quote_calc4_len</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>quote_calc4_defred</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>quote_calc4_dgoto</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>quote_calc4_sindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">51</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">121</literal></expr>, <expr><operator>-</operator><literal type="number">249</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">243</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">23</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>,
<expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">121</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">121</literal></expr>, <expr><operator>-</operator><literal type="number">121</literal></expr>, <expr><operator>-</operator><literal type="number">121</literal></expr>, <expr><operator>-</operator><literal type="number">121</literal></expr>, <expr><operator>-</operator><literal type="number">121</literal></expr>,
<expr><operator>-</operator><literal type="number">121</literal></expr>, <expr><operator>-</operator><literal type="number">243</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>quote_calc4_rindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>quote_calc4_gindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTABLESIZE</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>quote_calc4_table</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">23</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>,
<expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>quote_calc4_check</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">61</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">260</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">262</literal></expr>, <expr><literal type="number">269</literal></expr>,
<expr><literal type="number">264</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">266</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">268</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">41</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">124</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">124</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">260</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">262</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">264</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">266</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">268</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">260</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">260</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">269</literal></expr>, <expr><literal type="number">270</literal></expr>, <expr><literal type="number">269</literal></expr>, <expr><literal type="number">270</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">260</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">262</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">264</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">266</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">268</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">260</literal></expr>,
<expr><literal type="number">260</literal></expr>, <expr><literal type="number">262</literal></expr>, <expr><literal type="number">262</literal></expr>, <expr><literal type="number">264</literal></expr>, <expr><literal type="number">264</literal></expr>, <expr><literal type="number">266</literal></expr>, <expr><literal type="number">266</literal></expr>, <expr><literal type="number">268</literal></expr>, <expr><literal type="number">268</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYFINAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYDEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXTOKEN</name></cpp:macro> <cpp:value>271</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYUNDFTOKEN</name></cpp:macro> <cpp:value>277</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTRANSLATE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; YYMAXTOKEN ? YYUNDFTOKEN : (a))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>quote_calc4_name</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"end-of-file"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'\\n'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'%'"</literal></expr>,<expr><literal type="string">"'&amp;'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'('"</literal></expr>,<expr><literal type="string">"')'"</literal></expr>,<expr><literal type="string">"'*'"</literal></expr>,<expr><literal type="string">"'+'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'-'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'/'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'='"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'|'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"OP_ADD"</literal></expr>,<expr><literal type="string">"\"ADD-operator\""</literal></expr>,<expr><literal type="string">"OP_SUB"</literal></expr>,<expr><literal type="string">"\"SUB-operator\""</literal></expr>,<expr><literal type="string">"OP_MUL"</literal></expr>,
<expr><literal type="string">"\"MUL-operator\""</literal></expr>,<expr><literal type="string">"OP_DIV"</literal></expr>,<expr><literal type="string">"\"DIV-operator\""</literal></expr>,<expr><literal type="string">"OP_MOD"</literal></expr>,<expr><literal type="string">"\"MOD-operator\""</literal></expr>,
<expr><literal type="string">"OP_AND"</literal></expr>,<expr><literal type="string">"\"AND-operator\""</literal></expr>,<expr><literal type="string">"DIGIT"</literal></expr>,<expr><literal type="string">"LETTER"</literal></expr>,<expr><literal type="string">"UMINUS"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="string">"illegal-symbol"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>quote_calc4_rule</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"$accept : list"</literal></expr>,
<expr><literal type="string">"list :"</literal></expr>,
<expr><literal type="string">"list : list stat '\\n'"</literal></expr>,
<expr><literal type="string">"list : list error '\\n'"</literal></expr>,
<expr><literal type="string">"stat : expr"</literal></expr>,
<expr><literal type="string">"stat : LETTER '=' expr"</literal></expr>,
<expr><literal type="string">"expr : '(' expr ')'"</literal></expr>,
<expr><literal type="string">"expr : expr \"ADD-operator\" expr"</literal></expr>,
<expr><literal type="string">"expr : expr \"SUB-operator\" expr"</literal></expr>,
<expr><literal type="string">"expr : expr \"MUL-operator\" expr"</literal></expr>,
<expr><literal type="string">"expr : expr \"DIV-operator\" expr"</literal></expr>,
<expr><literal type="string">"expr : expr \"MOD-operator\" expr"</literal></expr>,
<expr><literal type="string">"expr : expr \"AND-operator\" expr"</literal></expr>,
<expr><literal type="string">"expr : expr '|' expr"</literal></expr>,
<expr><literal type="string">"expr : \"SUB-operator\" expr"</literal></expr>,
<expr><literal type="string">"expr : LETTER"</literal></expr>,
<expr><literal type="string">"expr : number"</literal></expr>,
<expr><literal type="string">"number : DIGIT"</literal></expr>,
<expr><literal type="string">"number : number DIGIT"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>yydebug</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>yyerrflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yychar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name></type> <name>yyval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name></type> <name>yylval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yynerrs</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTACKSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>YYMAXDEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXDEPTH</name></cpp:macro> <cpp:value>YYSTACKSIZE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYMAXDEPTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACKSIZE</name></cpp:macro> <cpp:value>YYMAXDEPTH</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACKSIZE</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXDEPTH</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYINITSTACKSIZE</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>stacksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>l_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>l_mark</name></decl>;</decl_stmt>
}</block></struct></type> <name>YYSTACKDATA</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTACKDATA</name></type> <name>yystack</name></decl>;</decl_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>73</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>


<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yyparse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>yyerror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>yylex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition> <block>{<block_content> </block_content>}</block></while>



<if_stmt><if>if<condition>( <expr><call><name>islower</name><argument_list>( <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>yylval</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator> <name>LETTER</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>yylval</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator> <name>DIGIT</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator> <name>c</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>372</cpp:number> <cpp:file>"quote_calc4-s.tab.c"</cpp:file></cpp:line>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int</name></type> <name>yygrowstack</name><parameter_list>(<parameter><decl><type><name>YYSTACKDATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>newsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>newss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>newvs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsize</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>stacksize</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>YYINITSTACKSIZE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>newsize</name> <operator>&gt;=</operator> <name>YYMAXDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>newsize</name> <operator>*=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name>YYMAXDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>YYMAXDEPTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>s_mark</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>newss</name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newss</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name> <operator>=</operator> <name>newss</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_mark</name></name> <operator>=</operator> <name>newss</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newvs</name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newvs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newvs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name> <operator>=</operator> <name>newvs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>l_mark</name></name> <operator>=</operator> <name>newvs</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_last</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>s_base</name></name> <operator>+</operator> <name>newsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYPURE</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YY_NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>yyfreestack</name><parameter_list>(<parameter><decl><type><name>YYSTACKDATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyfreestack</name><parameter_list>(<parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYABORT</name></cpp:macro> <cpp:value>goto yyabort</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYREJECT</name></cpp:macro> <cpp:value>goto yyabort</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYACCEPT</name></cpp:macro> <cpp:value>goto yyaccept</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR</name></cpp:macro> <cpp:value>goto yyerrlab</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>YYPARSE_DECL</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>yym</name></decl>, <decl><type ref="prev"/><name>yyn</name></decl>, <decl><type ref="prev"/><name>yystate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>yys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"YYDEBUG"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <operator>*</operator><name>yys</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyn</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>yyn</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yydebug</name> <operator>=</operator> <name>yyn</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>yym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yynerrs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyerrflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYPURE</name></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yystack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>yyloop</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yydefred</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyreduce</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYLEX</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, reading %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yysindex</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yychar</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, shifting to state %d\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>yyerrflag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yyrindex</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yychar</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>yyreduce</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyinrecovery</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>YYERROR_CALL</name><argument_list>(<argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>yyerrlab</name>;</goto>
<label><name>yyerrlab</name>:</label>
<expr_stmt><expr><operator>++</operator><name>yynerrs</name></expr>;</expr_stmt>

<label><name>yyinrecovery</name>:</label>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyerrflag</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yysindex</name><index>[<expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>YYERRCODE</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>YYERRCODE</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, error recovery shifting\
to state %d\n"</literal></expr></argument>, <argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>, <argument><expr><name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: error recovery discarding state %d\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&lt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyabort</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyabort</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, error recovery discards token %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></else></if_stmt>

<label><name>yyreduce</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, reducing by rule %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yyn</name></expr></argument>, <argument><expr><name><name>yyrule</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yym</name> <operator>=</operator> <name><name>yylen</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yym</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>yym</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yyval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>yyval</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name>yyn</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>35</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyerrok</name></expr> ;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>39</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>41</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name><name>regs</name><index>[<expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>45</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>47</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>49</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>51</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>53</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>55</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>%</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>59</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>61</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>63</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>regs</name><index>[<expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>base</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>70</cpp:number> <cpp:file>"quote_calc4.y"</cpp:file></cpp:line>
<block>{<block_content> <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name>base</name> <operator>*</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block>
<break>break;</break>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>631</cpp:number> <cpp:file>"quote_calc4-s.tab.c"</cpp:file></cpp:line>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yym</name> <operator>=</operator> <name><name>yylhs</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yystate</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>yym</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: after reduction, shifting from state 0 to\
state %d\n"</literal></expr></argument>, <argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>YYFINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name>YYFINAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name>YYFINAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yyval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYLEX</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, reading %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>YYFINAL</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyaccept</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yygindex</name><index>[<expr><name>yym</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yystate</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yystate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yydgoto</name><index>[<expr><name>yym</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: after reduction, shifting from state %d \
to state %d\n"</literal></expr></argument>, <argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yystate</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yyval</name></expr>;</expr_stmt>
<goto>goto <name>yyloop</name>;</goto>

<label><name>yyoverflow</name>:</label>
<expr_stmt><expr><call><name>YYERROR_CALL</name><argument_list>(<argument><expr><literal type="string">"yacc stack overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>yyabort</name>:</label>
<expr_stmt><expr><call><name>yyfreestack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>yyaccept</name>:</label>
<expr_stmt><expr><call><name>yyfreestack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
