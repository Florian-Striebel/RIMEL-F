<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/test/yacc/varsyntax_calc1.tab.c">



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYBYACC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMINOR</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYCHECK</name></cpp:macro> <cpp:value>"yyyymmdd"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYEMPTY</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyclearin</name></cpp:macro> <cpp:value>(yychar = YYEMPTY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerrok</name></cpp:macro> <cpp:value>(yyerrflag = 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYRECOVERING</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(yyerrflag != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYENOMEM</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYEOF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:empty>#ident "check variant syntax features"</cpp:empty>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyparse</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyparse</name></cpp:macro> <cpp:value>varsyntax_calc1_parse</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylex</name></cpp:macro> <cpp:value>varsyntax_calc1_lex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyerror</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerror</name></cpp:macro> <cpp:value>varsyntax_calc1_error</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yychar</name></cpp:macro> <cpp:value>varsyntax_calc1_char</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyval</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyval</name></cpp:macro> <cpp:value>varsyntax_calc1_val</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylval</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylval</name></cpp:macro> <cpp:value>varsyntax_calc1_lval</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydebug</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydebug</name></cpp:macro> <cpp:value>varsyntax_calc1_debug</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yynerrs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yynerrs</name></cpp:macro> <cpp:value>varsyntax_calc1_nerrs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyerrflag</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerrflag</name></cpp:macro> <cpp:value>varsyntax_calc1_errflag</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylhs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylhs</name></cpp:macro> <cpp:value>varsyntax_calc1_lhs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yylen</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylen</name></cpp:macro> <cpp:value>varsyntax_calc1_len</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydefred</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydefred</name></cpp:macro> <cpp:value>varsyntax_calc1_defred</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yydgoto</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydgoto</name></cpp:macro> <cpp:value>varsyntax_calc1_dgoto</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yysindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yysindex</name></cpp:macro> <cpp:value>varsyntax_calc1_sindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyrindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrindex</name></cpp:macro> <cpp:value>varsyntax_calc1_rindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yygindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yygindex</name></cpp:macro> <cpp:value>varsyntax_calc1_gindex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yytable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yytable</name></cpp:macro> <cpp:value>varsyntax_calc1_table</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yycheck</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yycheck</name></cpp:macro> <cpp:value>varsyntax_calc1_check</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyname</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyname</name></cpp:macro> <cpp:value>varsyntax_calc1_name</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyrule</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyrule</name></cpp:macro> <cpp:value>varsyntax_calc1_rule</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPREFIX</name></cpp:macro> <cpp:value>"varsyntax_calc1_"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPURE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>interval</name>
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>lo</name></decl>, <name>hi</name>;</decl_stmt>
}</block></struct></type>
<name>INTERVAL</name>;</typedef>

<function_decl><type><name>INTERVAL</name></type> <name>vmul</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>INTERVAL</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>INTERVAL</name></type> <name>vdiv</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>INTERVAL</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>yylex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>yyerror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dcheck</name><parameter_list>(<parameter><decl><type><name>INTERVAL</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>double</name></type> <name><name>dreg</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTERVAL</name></type> <name><name>vreg</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>YYSTYPE_IS_DECLARED</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTYPE_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYSTYPE_IS_DECLARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTYPE_IS_DECLARED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>32</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<typedef>typedef <type><union>union
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>ival</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTERVAL</name></type> <name>vval</name></decl>;</decl_stmt>
}</block></union></type> <name>YYSTYPE</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>142</cpp:number> <cpp:file>"varsyntax_calc1.tab.c"</cpp:file></cpp:line>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYPARSE_PARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYPARSE_PARAM_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(void *YYPARSE_PARAM)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPARSE_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyparse(void)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYLEX_PARAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yylex(void *YYLEX_PARAM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX</name></cpp:macro> <cpp:value>yylex(YYLEX_PARAM)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yylex(void)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLEX</name></cpp:macro> <cpp:value>yylex()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYERROR_DECL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR_DECL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>yyerror(const char *s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYERROR_CALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR_CALL</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>yyerror(msg)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>YYPARSE_DECL</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DREG</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VREG</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMINUS</name></cpp:macro> <cpp:value>260</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERRCODE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>YYINT</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>varsyntax_calc1_lhs</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>varsyntax_calc1_len</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>varsyntax_calc1_defred</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>varsyntax_calc1_dgoto</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">32</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>varsyntax_calc1_sindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">40</literal></expr>,
<expr><operator>-</operator><literal type="number">8</literal></expr>, <expr><operator>-</operator><literal type="number">48</literal></expr>, <expr><operator>-</operator><literal type="number">47</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><operator>-</operator><literal type="number">34</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>,
<expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">34</literal></expr>, <expr><operator>-</operator><literal type="number">34</literal></expr>,
<expr><literal type="number">25</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">34</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">37</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">111</literal></expr>,
<expr><operator>-</operator><literal type="number">34</literal></expr>, <expr><operator>-</operator><literal type="number">34</literal></expr>, <expr><operator>-</operator><literal type="number">34</literal></expr>, <expr><operator>-</operator><literal type="number">34</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>varsyntax_calc1_rindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">61</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>varsyntax_calc1_gindex</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTABLESIZE</name></cpp:macro> <cpp:value>225</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>varsyntax_calc1_table</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">29</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">21</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><literal type="number">56</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">52</literal></expr>,
<expr><literal type="number">22</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19</literal></expr>,
<expr><literal type="number">53</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>,
<expr><literal type="number">36</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>,
<expr><literal type="number">48</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">53</literal></expr>,
<expr><literal type="number">51</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YYINT</name></type> <name><name>varsyntax_calc1_check</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">40</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">45</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">42</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">43</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>,
<expr><literal type="number">43</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">47</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>,
<expr><literal type="number">45</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">43</literal></expr>,
<expr><literal type="number">42</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>,
<expr><literal type="number">27</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>,
<expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">257</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">259</literal></expr>, <expr><literal type="number">257</literal></expr>,
<expr><literal type="number">258</literal></expr>, <expr><literal type="number">259</literal></expr>, <expr><literal type="number">257</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">259</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYFINAL</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYDEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXTOKEN</name></cpp:macro> <cpp:value>260</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYUNDFTOKEN</name></cpp:macro> <cpp:value>266</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTRANSLATE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; YYMAXTOKEN ? YYUNDFTOKEN : (a))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>varsyntax_calc1_name</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"end-of-file"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'\\n'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'('"</literal></expr>,<expr><literal type="string">"')'"</literal></expr>,<expr><literal type="string">"'*'"</literal></expr>,<expr><literal type="string">"'+'"</literal></expr>,<expr><literal type="string">"','"</literal></expr>,<expr><literal type="string">"'-'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'/'"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"'='"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"DREG"</literal></expr>,<expr><literal type="string">"VREG"</literal></expr>,<expr><literal type="string">"CONST"</literal></expr>,<expr><literal type="string">"UMINUS"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"illegal-symbol"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>varsyntax_calc1_rule</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"$accept : line"</literal></expr>,
<expr><literal type="string">"lines :"</literal></expr>,
<expr><literal type="string">"lines : lines line"</literal></expr>,
<expr><literal type="string">"line : dexp '\\n'"</literal></expr>,
<expr><literal type="string">"line : vexp '\\n'"</literal></expr>,
<expr><literal type="string">"line : DREG '=' dexp '\\n'"</literal></expr>,
<expr><literal type="string">"line : VREG '=' vexp '\\n'"</literal></expr>,
<expr><literal type="string">"line : error '\\n'"</literal></expr>,
<expr><literal type="string">"dexp : CONST"</literal></expr>,
<expr><literal type="string">"dexp : DREG"</literal></expr>,
<expr><literal type="string">"dexp : dexp '+' dexp"</literal></expr>,
<expr><literal type="string">"dexp : dexp '-' dexp"</literal></expr>,
<expr><literal type="string">"dexp : dexp '*' dexp"</literal></expr>,
<expr><literal type="string">"dexp : dexp '/' dexp"</literal></expr>,
<expr><literal type="string">"dexp : '-' dexp"</literal></expr>,
<expr><literal type="string">"dexp : '(' dexp ')'"</literal></expr>,
<expr><literal type="string">"vexp : dexp"</literal></expr>,
<expr><literal type="string">"vexp : '(' dexp ',' dexp ')'"</literal></expr>,
<expr><literal type="string">"vexp : VREG"</literal></expr>,
<expr><literal type="string">"vexp : vexp '+' vexp"</literal></expr>,
<expr><literal type="string">"vexp : dexp '+' vexp"</literal></expr>,
<expr><literal type="string">"vexp : vexp '-' vexp"</literal></expr>,
<expr><literal type="string">"vexp : dexp '-' vexp"</literal></expr>,
<expr><literal type="string">"vexp : vexp '*' vexp"</literal></expr>,
<expr><literal type="string">"vexp : dexp '*' vexp"</literal></expr>,
<expr><literal type="string">"vexp : vexp '/' vexp"</literal></expr>,
<expr><literal type="string">"vexp : dexp '/' vexp"</literal></expr>,
<expr><literal type="string">"vexp : '-' vexp"</literal></expr>,
<expr><literal type="string">"vexp : '(' vexp ')'"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>yydebug</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>yyerrflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yychar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name></type> <name>yyval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name></type> <name>yylval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yynerrs</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYSTACKSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>YYMAXDEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXDEPTH</name></cpp:macro> <cpp:value>YYSTACKSIZE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYMAXDEPTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACKSIZE</name></cpp:macro> <cpp:value>YYMAXDEPTH</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACKSIZE</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXDEPTH</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYINITSTACKSIZE</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>stacksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>s_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>l_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>l_mark</name></decl>;</decl_stmt>
}</block></struct></type> <name>YYSTACKDATA</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTACKDATA</name></type> <name>yystack</name></decl>;</decl_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>178</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSZ</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>yyerror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>yylex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>ival</name></name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>VREG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>ival</name></name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DREG</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>expr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>cp</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&lt;</operator> <name>BSZ</name></expr>;</condition> <incr><expr><operator>++</operator><name>cp</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dot</name><operator>++</operator> <operator>||</operator> <name>expr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="char">'.'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>expr</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="char">'e'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<break>break;</break>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&gt;=</operator> <name>BSZ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"constant too long: truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>dval</name></name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>CONST</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>INTERVAL</name></type>
<name>hilo</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>INTERVAL</name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>d</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name><name>v</name><operator>.</operator><name>hi</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>lo</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name><name>v</name><operator>.</operator><name>hi</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>lo</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>v</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>INTERVAL</name></type>
<name>vmul</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>INTERVAL</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>hilo</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>lo</name></name></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dcheck</name><parameter_list>(<parameter><decl><type><name>INTERVAL</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>hi</name></name> <operator>&gt;=</operator> <literal type="number">0.</literal> <operator>&amp;&amp;</operator> <name><name>v</name><operator>.</operator><name>lo</name></name> <operator>&lt;=</operator> <literal type="number">0.</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"divisor interval contains 0.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>INTERVAL</name></type>
<name>vdiv</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>INTERVAL</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>hilo</name><argument_list>(<argument><expr><name>a</name> <operator>/</operator> <name><name>v</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name>a</name> <operator>/</operator> <name><name>v</name><operator>.</operator><name>lo</name></name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <name><name>v</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <name><name>v</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>494</cpp:number> <cpp:file>"varsyntax_calc1.tab.c"</cpp:file></cpp:line>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int</name></type> <name>yygrowstack</name><parameter_list>(<parameter><decl><type><name>YYSTACKDATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>newsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYINT</name> <modifier>*</modifier></type><name>newss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>newvs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newsize</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>stacksize</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>YYINITSTACKSIZE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>newsize</name> <operator>&gt;=</operator> <name>YYMAXDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>newsize</name> <operator>*=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name>YYMAXDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>YYMAXDEPTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>s_mark</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>s_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>newss</name> <operator>=</operator> <operator>(</operator><name>YYINT</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newss</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name> <operator>=</operator> <name>newss</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_mark</name></name> <operator>=</operator> <name>newss</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newvs</name> <operator>=</operator> <operator>(</operator><name>YYSTYPE</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name></expr></argument>, <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newvs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newvs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>YYENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name> <operator>=</operator> <name>newvs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>l_mark</name></name> <operator>=</operator> <name>newvs</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>s_last</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>s_base</name></name> <operator>+</operator> <name>newsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYPURE</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>YY_NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>yyfreestack</name><parameter_list>(<parameter><decl><type><name>YYSTACKDATA</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>s_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>l_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyfreestack</name><parameter_list>(<parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYABORT</name></cpp:macro> <cpp:value>goto yyabort</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYREJECT</name></cpp:macro> <cpp:value>goto yyabort</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYACCEPT</name></cpp:macro> <cpp:value>goto yyaccept</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR</name></cpp:macro> <cpp:value>goto yyerrlab</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>YYPARSE_DECL</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>yym</name></decl>, <decl><type ref="prev"/><name>yyn</name></decl>, <decl><type ref="prev"/><name>yystate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>yys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"YYDEBUG"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <operator>*</operator><name>yys</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyn</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>yyn</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yydebug</name> <operator>=</operator> <name>yyn</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>yym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yynerrs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyerrflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYPURE</name></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yystack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_base</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>yyloop</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yydefred</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyreduce</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYLEX</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, reading %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yysindex</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yychar</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, shifting to state %d\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>yyerrflag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yyrindex</name><index>[<expr><name>yystate</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yychar</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yychar</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>yyreduce</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyinrecovery</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>YYERROR_CALL</name><argument_list>(<argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>yyerrlab</name>;</goto>
<label><name>yyerrlab</name>:</label>
<expr_stmt><expr><operator>++</operator><name>yynerrs</name></expr>;</expr_stmt>

<label><name>yyinrecovery</name>:</label>
<if_stmt><if>if <condition>(<expr><name>yyerrflag</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yyerrflag</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yysindex</name><index>[<expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>YYERRCODE</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>YYERRCODE</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, error recovery shifting\
to state %d\n"</literal></expr></argument>, <argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>, <argument><expr><name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: error recovery discarding state %d\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&lt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_base</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyabort</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyabort</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, error recovery discards token %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></else></if_stmt>

<label><name>yyreduce</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, reducing by rule %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>, <argument><expr><name>yyn</name></expr></argument>, <argument><expr><name><name>yyrule</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yym</name> <operator>=</operator> <name><name>yylen</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yym</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>yym</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yyval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>yyval</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name>yyn</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>59</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%15.8f\n"</literal></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>63</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%15.8f, %15.8f)\n"</literal></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>lo</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>67</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>dreg</name><index>[<expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ival</name></expr>]</index></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>71</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>vreg</name><index>[<expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ival</name></expr>]</index></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vval</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>75</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name>yyerrok</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>82</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>dval</name></name> <operator>=</operator> <name><name>dreg</name><index>[<expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ival</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>86</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>dval</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name> <operator>+</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>90</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>dval</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>94</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>dval</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name> <operator>*</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">13</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>98</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>dval</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name> <operator>/</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>102</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>dval</name></name> <operator>=</operator> <operator>-</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>106</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>dval</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>112</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>116</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>lo</name></name> <operator>&gt;</operator> <name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>hi</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"interval out of order\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>YYERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>126</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name></name> <operator>=</operator> <name><name>vreg</name><index>[<expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ival</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>130</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>hi</name></name> <operator>+</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>lo</name></name> <operator>+</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">20</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>135</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name> <operator>+</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name> <operator>+</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>140</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>hi</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>lo</name></name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>145</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name> <operator>-</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>150</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name></name> <operator>=</operator> <call><name>vmul</name><argument_list>( <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>lo</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>154</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name></name> <operator>=</operator> <call><name>vmul</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">25</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>158</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dcheck</name><argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>YYERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name></name> <operator>=</operator> <call><name>vdiv</name> <argument_list>( <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>lo</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>hi</name></name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">26</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>163</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dcheck</name> <argument_list>( <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vval</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>YYERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name></name> <operator>=</operator> <call><name>vdiv</name> <argument_list>(<argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dval</name></expr></argument>, <argument><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>168</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>hi</name></name> <operator>=</operator> <operator>-</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>lo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <operator>-</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>hi</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">28</literal></expr>:</case>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>173</cpp:number> <cpp:file>"varsyntax_calc1.y"</cpp:file></cpp:line>
<block>{<block_content>
<expr_stmt><expr><name><name>yyval</name><operator>.</operator><name>vval</name></name> <operator>=</operator> <name><name>yystack</name><operator>.</operator><name>l_mark</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vval</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>856</cpp:number> <cpp:file>"varsyntax_calc1.tab.c"</cpp:file></cpp:line>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>-=</operator> <name>yym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yym</name> <operator>=</operator> <name><name>yylhs</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yystate</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>yym</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: after reduction, shifting from state 0 to\
state %d\n"</literal></expr></argument>, <argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>YYFINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name>YYFINAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <name>YYFINAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yyval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYLEX</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><call><name>YYTRANSLATE</name><argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>yys</name> <operator>=</operator> <name><name>yyname</name><index>[<expr><name>YYUNDFTOKEN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: state %d, reading %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><name>YYFINAL</name></expr></argument>, <argument><expr><name>yychar</name></expr></argument>, <argument><expr><name>yys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyaccept</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>yyloop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>yyn</name> <operator>=</operator> <name><name>yygindex</name><index>[<expr><name>yym</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yyn</name> <operator>+=</operator> <name>yystate</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>yyn</name> <operator>&lt;=</operator> <name>YYTABLESIZE</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yystate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>yystate</name> <operator>=</operator> <name><name>yydgoto</name><index>[<expr><name>yym</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>yydebug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%sdebug: after reduction, shifting from state %d \
to state %d\n"</literal></expr></argument>, <argument><expr><name>YYPREFIX</name></expr></argument>, <argument><expr><operator>*</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>&gt;=</operator> <name><name>yystack</name><operator>.</operator><name>s_last</name></name> <operator>&amp;&amp;</operator> <call><name>yygrowstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>YYENOMEM</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>yyoverflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>s_mark</name></name> <operator>=</operator> <operator>(</operator><name>YYINT</name><operator>)</operator> <name>yystate</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name><name>yystack</name><operator>.</operator><name>l_mark</name></name> <operator>=</operator> <name>yyval</name></expr>;</expr_stmt>
<goto>goto <name>yyloop</name>;</goto>

<label><name>yyoverflow</name>:</label>
<expr_stmt><expr><call><name>YYERROR_CALL</name><argument_list>(<argument><expr><literal type="string">"yacc stack overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>yyabort</name>:</label>
<expr_stmt><expr><call><name>yyfreestack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>yyaccept</name>:</label>
<expr_stmt><expr><call><name>yyfreestack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yystack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
