<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/mkpar.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NotSuppressed</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;suppressed == 0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MaySuppress</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((backtrack ? ((p)-&gt;suppressed &lt;= 1) : (p)-&gt;suppressed == 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>StartBacktrack</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (backtrack &amp;&amp; (p) != NULL &amp;&amp; NotSuppressed(p)) (p)-&gt;suppressed = 1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MaySuppress</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;suppressed == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>StartBacktrack</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>action</name> <modifier>*</modifier></type><name>add_reduce</name><parameter_list>(<parameter><decl><type><name>action</name> <modifier>*</modifier></type><name>actions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ruleno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbol</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>action</name> <modifier>*</modifier></type><name>add_reductions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>, <parameter><decl><type><name>action</name> <modifier>*</modifier></type><name>actions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>action</name> <modifier>*</modifier></type><name>get_shifts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>action</name> <modifier>*</modifier></type><name>parse_actions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sole_reduction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>defreds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>find_final_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_action_row</name><parameter_list>(<parameter><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>remove_conflicts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>total_conflicts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>unused_rules</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>action</name> <modifier>*</modifier><modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>SRexpect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>RRexpect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>SRtotal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>RRtotal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>SRconflicts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>RRconflicts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>defred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>rules_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name></type> <name>nunused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name></type> <name>final_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Value_t</name></type> <name>SRcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Value_t</name></type> <name>RRcount</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>make_parser</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>parser</name> <operator>=</operator> <call><name>NEW2</name><argument_list>(<argument><expr><name>nstates</name></expr></argument>, <argument><expr><name>action</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstates</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parser</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>parse_actions</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>find_final_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remove_conflicts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unused_rules</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>SRtotal</name> <operator>+</operator> <name>RRtotal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>total_conflicts</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>defreds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>action</name> <modifier>*</modifier></type>
<name>parse_actions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>actions</name></decl>;</decl_stmt>

<expr_stmt><expr><name>actions</name> <operator>=</operator> <call><name>get_shifts</name><argument_list>(<argument><expr><name>stateno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>actions</name> <operator>=</operator> <call><name>add_reductions</name><argument_list>(<argument><expr><name>stateno</name></expr></argument>, <argument><expr><name>actions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>actions</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>action</name> <modifier>*</modifier></type>
<name>get_shifts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>actions</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>shifts</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>to_state2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name></type> <name>symbol</name></decl>;</decl_stmt>

<expr_stmt><expr><name>actions</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>shift_table</name><index>[<expr><name>stateno</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>to_state2</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>shift</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>nshifts</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>to_state2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>accessing_symbol</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISTOKEN</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>NEW</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>actions</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <name>symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <name><name>symbol_prec</name><index>[<expr><name>symbol</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>action_code</name></name> <operator>=</operator> <name>SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>assoc</name></name> <operator>=</operator> <name><name>symbol_assoc</name><index>[<expr><name>symbol</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>actions</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>actions</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>action</name> <modifier>*</modifier></type>
<name>add_reductions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>, <parameter><decl><type><name>action</name> <modifier>*</modifier></type><name>actions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ruleno</name></decl>, <decl><type ref="prev"/><name>tokensetsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rowp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tokensetsize</name> <operator>=</operator> <call><name>WORDSIZE</name><argument_list>(<argument><expr><name>ntokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>lookaheads</name><index>[<expr><name>stateno</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>lookaheads</name><index>[<expr><name>stateno</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>m</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>ruleno</name> <operator>=</operator> <name><name>LAruleno</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rowp</name> <operator>=</operator> <name>LA</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>tokensetsize</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>ntokens</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BIT</name><argument_list>(<argument><expr><name>rowp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>actions</name> <operator>=</operator> <call><name>add_reduce</name><argument_list>(<argument><expr><name>actions</name></expr></argument>, <argument><expr><name>ruleno</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>actions</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>action</name> <modifier>*</modifier></type>
<name>add_reduce</name><parameter_list>(<parameter><decl><type><name>action</name> <modifier>*</modifier></type><name>actions</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ruleno</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>symbol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>actions</name></expr>;</init> <condition><expr><name>next</name> <operator>&amp;&amp;</operator> <name><name>next</name><operator>-&gt;</operator><name>symbol</name></name> <operator>&lt;</operator> <name>symbol</name></expr>;</condition> <incr><expr><name>next</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></for>

<while>while <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name><name>next</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>symbol</name> <operator>&amp;&amp;</operator> <name><name>next</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>SHIFT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name><name>next</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>symbol</name> <operator>&amp;&amp;</operator>
<name><name>next</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>REDUCE</name> <operator>&amp;&amp;</operator> <name><name>next</name><operator>-&gt;</operator><name>number</name></name> <operator>&lt;</operator> <name>ruleno</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>NEW</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><name>symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><name>ruleno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <name><name>rprec</name><index>[<expr><name>ruleno</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>action_code</name></name> <operator>=</operator> <name>REDUCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>assoc</name></name> <operator>=</operator> <name><name>rassoc</name><index>[<expr><name>ruleno</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>actions</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>actions</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_final_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>goal</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>to_state2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>shifts</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <name><name>shift_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>to_state2</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>shift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>goal</name> <operator>=</operator> <name><name>ritem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nshifts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>final_state</name> <operator>=</operator> <name><name>to_state2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>accessing_symbol</name><index>[<expr><name>final_state</name></expr>]</index></name> <operator>==</operator> <name>goal</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unused_rules</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rules_used</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>nrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>rules_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrules</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rules_used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstates</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>parser</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>REDUCE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>MaySuppress</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rules_used</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>number</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>nunused</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrules</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rules_used</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>nunused</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nunused</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nunused</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: 1 rule never reduced\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %d rules never reduced\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>nunused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_conflicts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>SRtotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>RRtotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>SRconflicts</name> <operator>=</operator> <call><name>NEW2</name><argument_list>(<argument><expr><name>nstates</name></expr></argument>, <argument><expr><name>Value_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RRconflicts</name> <operator>=</operator> <call><name>NEW2</name><argument_list>(<argument><expr><name>nstates</name></expr></argument>, <argument><expr><name>Value_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstates</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>SRcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>RRcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>parser</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>symbol</name></name> <operator>!=</operator> <name>symbol</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>pref</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>symbol</name></name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>final_state</name> <operator>&amp;&amp;</operator> <name>symbol</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>SRcount</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StartBacktrack</name><argument_list>(<argument><expr><name>pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pref</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pref</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>SHIFT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pref</name><operator>-&gt;</operator><name>prec</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>prec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pref</name><operator>-&gt;</operator><name>prec</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>prec</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pref</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pref</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>pref</name><operator>-&gt;</operator><name>prec</name></name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>prec</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>pref</name><operator>-&gt;</operator><name>assoc</name></name> <operator>==</operator> <name>LEFT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pref</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pref</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>pref</name><operator>-&gt;</operator><name>assoc</name></name> <operator>==</operator> <name>RIGHT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>pref</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>SRcount</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StartBacktrack</name><argument_list>(<argument><expr><name>pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>RRcount</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StartBacktrack</name><argument_list>(<argument><expr><name>pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>SRtotal</name> <operator>+=</operator> <name>SRcount</name></expr>;</expr_stmt>
<expr_stmt><expr><name>RRtotal</name> <operator>+=</operator> <name>RRcount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SRconflicts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>SRcount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RRconflicts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RRcount</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>total_conflicts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>SRtotal</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"1 shift/reduce conflict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>SRtotal</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d shift/reduce conflicts"</literal></expr></argument>, <argument><expr><name>SRtotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>SRtotal</name> <operator>&amp;&amp;</operator> <name>RRtotal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>RRtotal</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"1 reduce/reduce conflict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>RRtotal</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d reduce/reduce conflicts"</literal></expr></argument>, <argument><expr><name>RRtotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>SRexpect</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>SRtotal</name> <operator>!=</operator> <name>SRexpect</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"expected %d shift/reduce conflict%s.\n"</literal></expr></argument>,
<argument><expr><name>SRexpect</name></expr></argument>, <argument><expr><call><name>PLURAL</name><argument_list>(<argument><expr><name>SRexpect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_code</name> <operator>=</operator> <name>EXIT_FAILURE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>RRexpect</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>RRtotal</name> <operator>!=</operator> <name>RRexpect</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"expected %d reduce/reduce conflict%s.\n"</literal></expr></argument>,
<argument><expr><name>RRexpect</name></expr></argument>, <argument><expr><call><name>PLURAL</name><argument_list>(<argument><expr><name>RRexpect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_code</name> <operator>=</operator> <name>EXIT_FAILURE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sole_reduction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>ruleno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ruleno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>parser</name><index>[<expr><name>stateno</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>SHIFT</name> <operator>&amp;&amp;</operator> <call><name>MaySuppress</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>REDUCE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>MaySuppress</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ruleno</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>number</name></name> <operator>!=</operator> <name>ruleno</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>symbol</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ruleno</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ruleno</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>defreds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>defred</name> <operator>=</operator> <call><name>NEW2</name><argument_list>(<argument><expr><name>nstates</name></expr></argument>, <argument><expr><name>Value_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstates</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>defred</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><call><name>sole_reduction</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_action_row</name><parameter_list>(<parameter><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>free_parser</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstates</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_action_row</name><argument_list>(<argument><expr><name><name>parser</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>mkpar_leaks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>defred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>rules_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>SRconflicts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_FREE</name><argument_list>(<argument><expr><name>RRconflicts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
