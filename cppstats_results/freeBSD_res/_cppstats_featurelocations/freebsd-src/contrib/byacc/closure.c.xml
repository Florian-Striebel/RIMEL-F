<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/closure.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>itemset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>itemsetend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>ruleset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <modifier>*</modifier></type><name>first_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <modifier>*</modifier></type><name>first_derives</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <modifier>*</modifier></type><name>EFF</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_closure</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_EFF</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_first_derives</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_EFF</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rowsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rule</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rowsize</name> <operator>=</operator> <call><name>WORDSIZE</name><argument_list>(<argument><expr><name>nvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>EFF</name> <operator>=</operator> <call><name>NEW2</name><argument_list>(<argument><expr><name>nvars</name> <operator>*</operator> <name>rowsize</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>EFF</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_symbol</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>derives</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>rule</name> <operator>=</operator> <operator>*</operator><name>sp</name></expr>;</init> <condition><expr><name>rule</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>rule</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>sp</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>ritem</name><index>[<expr><name><name>rrhs</name><index>[<expr><name>rule</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISVAR</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>-=</operator> <name>start_symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETBIT</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name>rowsize</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>reflexive_transitive_closure</name><argument_list>(<argument><expr><name>EFF</name></expr></argument>, <argument><expr><name>nvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>print_EFF</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>set_first_derives</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rrow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>vrow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cword</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rulesetsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>varsetsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rulesetsize</name> <operator>=</operator> <call><name>WORDSIZE</name><argument_list>(<argument><expr><name>nrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varsetsize</name> <operator>=</operator> <call><name>WORDSIZE</name><argument_list>(<argument><expr><name>nvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first_base</name> <operator>=</operator> <call><name>NEW2</name><argument_list>(<argument><expr><name>nvars</name> <operator>*</operator> <name>rulesetsize</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first_derives</name> <operator>=</operator> <name>first_base</name> <operator>-</operator> <name>ntokens</name> <operator>*</operator> <name>rulesetsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_EFF</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rrow</name> <operator>=</operator> <name>first_derives</name> <operator>+</operator> <name>ntokens</name> <operator>*</operator> <name>rulesetsize</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_symbol</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>vrow</name> <operator>=</operator> <name>EFF</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>ntokens</name><operator>)</operator> <operator>*</operator> <name>varsetsize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>BITS_PER_WORD</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>start_symbol</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>BITS_PER_WORD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cword</name> <operator>=</operator> <operator>*</operator><name>vrow</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cword</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <name><name>derives</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>rule</name> <operator>=</operator> <operator>*</operator><name>rp</name><operator>++</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SETBIT</name><argument_list>(<argument><expr><name>rrow</name></expr></argument>, <argument><expr><name>rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>rrow</name> <operator>+=</operator> <name>rulesetsize</name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>print_first_derives</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>EFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>closure</name><parameter_list>(<parameter><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>nucleus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ruleno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>word</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>csp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>dsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rulesetsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>csend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rsend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>symbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name></type> <name>itemno</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rulesetsize</name> <operator>=</operator> <call><name>WORDSIZE</name><argument_list>(<argument><expr><name>nrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rsend</name> <operator>=</operator> <name>ruleset</name> <operator>+</operator> <name>rulesetsize</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>rsp</name> <operator>=</operator> <name>ruleset</name></expr>;</init> <condition><expr><name>rsp</name> <operator>&lt;</operator> <name>rsend</name></expr>;</condition> <incr><expr><name>rsp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rsp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>csend</name> <operator>=</operator> <name>nucleus</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>csp</name> <operator>=</operator> <name>nucleus</name></expr>;</init> <condition><expr><name>csp</name> <operator>&lt;</operator> <name>csend</name></expr>;</condition> <incr><expr><operator>++</operator><name>csp</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>ritem</name><index>[<expr><operator>*</operator><name>csp</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISVAR</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dsp</name> <operator>=</operator> <name>first_derives</name> <operator>+</operator> <name>symbol</name> <operator>*</operator> <name>rulesetsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rsp</name> <operator>=</operator> <name>ruleset</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rsp</name> <operator>&lt;</operator> <name>rsend</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rsp</name><operator>++</operator> <operator>|=</operator> <operator>*</operator><name>dsp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ruleno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>itemsetend</name> <operator>=</operator> <name>itemset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>csp</name> <operator>=</operator> <name>nucleus</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>rsp</name> <operator>=</operator> <name>ruleset</name></expr>;</init> <condition><expr><name>rsp</name> <operator>&lt;</operator> <name>rsend</name></expr>;</condition> <incr><expr><operator>++</operator><name>rsp</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>*</operator><name>rsp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>word</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BITS_PER_WORD</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>word</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>itemno</name> <operator>=</operator> <name><name>rrhs</name><index>[<expr><name>ruleno</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>csp</name> <operator>&lt;</operator> <name>csend</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>csp</name> <operator>&lt;</operator> <name>itemno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>itemsetend</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>csp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>itemsetend</name><operator>++</operator> <operator>=</operator> <name>itemno</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>csp</name> <operator>&lt;</operator> <name>csend</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>csp</name> <operator>==</operator> <name>itemno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>csp</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ruleno</name> <operator>+=</operator> <name>BITS_PER_WORD</name></expr>;</expr_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name>csp</name> <operator>&lt;</operator> <name>csend</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>itemsetend</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>csp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>print_closure</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>finalize_closure</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>itemset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>ruleset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>first_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_closure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>isp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\nn = %d\n\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>isp</name> <operator>=</operator> <name>itemset</name></expr>;</init> <condition><expr><name>isp</name> <operator>&lt;</operator> <name>itemsetend</name></expr>;</condition> <incr><expr><name>isp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>isp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_EFF</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rowp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>word</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\nEpsilon Free Firsts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_symbol</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s"</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rowp</name> <operator>=</operator> <name>EFF</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>start_symbol</name><operator>)</operator> <operator>*</operator> <call><name>WORDSIZE</name><argument_list>(<argument><expr><name>nvars</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>*</operator><name>rowp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>BITS_PER_WORD</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nvars</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>BITS_PER_WORD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>*</operator><name>rowp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>word</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name>start_symbol</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_first_derives</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cword</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\n\nFirst Derives\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_symbol</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s derives\n"</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <name>first_derives</name> <operator>+</operator> <name>i</name> <operator>*</operator> <call><name>WORDSIZE</name><argument_list>(<argument><expr><name>nrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>BITS_PER_WORD</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>nrules</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>BITS_PER_WORD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cword</name> <operator>=</operator> <operator>*</operator><name>rp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cword</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
