<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/verbose.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defs.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log_conflicts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log_unused</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_actions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_conflicts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_core</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_gotos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_nulls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_shifts</name><parameter_list>(<parameter><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_reductions</name><parameter_list>(<parameter><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defred2</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>Value_t</name> <modifier>*</modifier></type><name>null_rules</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>verbose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vflag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>null_rules</name> <operator>=</operator> <call><name>TMALLOC</name><argument_list>(<argument><expr><name>Value_t</name></expr></argument>, <argument><expr><name>nrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>null_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\f\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstates</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_state</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>null_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nunused</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_unused</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>SRtotal</name> <operator>||</operator> <name>RRtotal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_conflicts</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\n\n%d terminals, %d nonterminals\n"</literal></expr></argument>, <argument><expr><name>ntokens</name></expr></argument>,
<argument><expr><name>nvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"%d grammar rules, %d states\n"</literal></expr></argument>, <argument><expr><name>nrules</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>nstates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>maxtok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\ngrammar parser grammar\n"</literal></expr></argument>, <argument><expr><name>verbose_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"symbol#value#symbol\n"</literal></expr></argument>, <argument><expr><name>verbose_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntokens</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">" %5d %5d %s\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>symbol_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>symbol_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>maxtok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxtok</name> <operator>=</operator> <name><name>symbol_value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ntokens</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">" %5d %5d %s\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>maxtok</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>symbol_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_unused</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\n\nRules never reduced:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrules</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rules_used</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t%s :"</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name><name>rlhs</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>ritem</name> <operator>+</operator> <name><name>rrhs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">" (%d)\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_conflicts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstates</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>SRconflicts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>RRconflicts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"State %d contains "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>SRconflicts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"%d shift/reduce conflict%s"</literal></expr></argument>,
<argument><expr><name><name>SRconflicts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>PLURAL</name><argument_list>(<argument><expr><name><name>SRconflicts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>SRconflicts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>RRconflicts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>RRconflicts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"%d reduce/reduce conflict%s"</literal></expr></argument>,
<argument><expr><name><name>RRconflicts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>PLURAL</name><argument_list>(<argument><expr><name><name>RRconflicts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>SRconflicts</name><index>[<expr><name>state</name></expr>]</index></name> <operator>||</operator> <name><name>RRconflicts</name><index>[<expr><name>state</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_conflicts</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"state %d\n"</literal></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_core</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_nulls</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_actions</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_conflicts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>symbol</name></decl>, <decl><type ref="prev"/><name>act</name></decl>, <decl><type ref="prev"/><name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>act</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>parser</name><index>[<expr><name>state</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>symbol</name></name> <operator>!=</operator> <name>symbol</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>symbol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>SHIFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>act</name> <operator>=</operator> <name>SHIFT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>act</name> <operator>=</operator> <name>REDUCE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>final_state</name> <operator>&amp;&amp;</operator> <name>symbol</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"%d: shift/reduce conflict \
(accept, reduce %d) on $end\n"</literal></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>number</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>act</name> <operator>==</operator> <name>SHIFT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"%d: shift/reduce conflict \
(shift %d, reduce %d) on %s\n"</literal></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>number</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>symbol_name</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"%d: reduce/reduce conflict \
(reduce %d, reduce %d) on %s\n"</literal></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>number</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>number</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>symbol_name</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_core</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core</name> <modifier>*</modifier></type><name>statep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>sp1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>statep</name> <operator>=</operator> <name><name>state_table</name><index>[<expr><name>state</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>statep</name><operator>-&gt;</operator><name>nitems</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>sp1</name> <operator>=</operator> <name>sp</name> <operator>=</operator> <name>ritem</name> <operator>+</operator> <name><name>statep</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>sp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>sp</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>rule</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>*</operator><name>sp</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t%s : "</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name><name>rlhs</name><index>[<expr><name>rule</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>ritem</name> <operator>+</operator> <name><name>rrhs</name><index>[<expr><name>rule</name></expr>]</index></name></expr>;</init> <condition><expr><name>sp</name> <operator>&lt;</operator> <name>sp1</name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><operator>*</operator><name>sp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>verbose_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>sp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><operator>*</operator><name>sp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">" (%d)\n"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal> <operator>-</operator> <operator>*</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_nulls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>nnulls</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nnulls</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>parser</name><index>[<expr><name>state</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>REDUCE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rrhs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>rrhs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name>nnulls</name> <operator>&amp;&amp;</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <name><name>null_rules</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>nnulls</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>nnulls</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>null_rules</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>null_rules</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>nnulls</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>Value_t</name><operator>)</operator><operator>(</operator><name>nnulls</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <name>j</name></expr>;</condition> <incr><expr><operator>--</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>null_rules</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>null_rules</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>null_rules</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nnulls</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>null_rules</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t%s : . (%d)\n"</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name><name>rlhs</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_actions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>shifts</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>as</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stateno</name> <operator>==</operator> <name>final_state</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t$end accept\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>parser</name><index>[<expr><name>stateno</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>print_shifts</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_reductions</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>defred</name><index>[<expr><name>stateno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>shift_table</name><index>[<expr><name>stateno</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>nshifts</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>as</name> <operator>=</operator> <name><name>accessing_symbol</name><index>[<expr><name><name>sp</name><operator>-&gt;</operator><name>shift</name><index>[<expr><name><name>sp</name><operator>-&gt;</operator><name>nshifts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISVAR</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_gotos</name><argument_list>(<argument><expr><name>stateno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_shifts</name><parameter_list>(<parameter><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><name>q</name></expr>;</condition> <incr><expr><name>q</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>SHIFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>SHIFT</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t%s shift %d\n"</literal></expr></argument>,
<argument><expr><name><name>symbol_name</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>symbol</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>backtrack</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>SHIFT</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t%s [trial] shift %d\n"</literal></expr></argument>,
<argument><expr><name><name>symbol_name</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>symbol</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_reductions</name><parameter_list>(<parameter><decl><type><name>action</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defred2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>anyreds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>action</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>anyreds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><name>q</name></expr>;</condition> <incr><expr><name>q</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>REDUCE</name> <operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>anyreds</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>anyreds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t. error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>action_code</name></name> <operator>==</operator> <name>REDUCE</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>number</name></name> <operator>!=</operator> <name>defred2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>number</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t%s reduce %d\n"</literal></expr></argument>,
<argument><expr><name><name>symbol_name</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>symbol</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YYBTYACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>backtrack</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>suppressed</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t%s [trial] reduce %d\n"</literal></expr></argument>,
<argument><expr><name><name>symbol_name</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>symbol</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>defred2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t. reduce %d\n"</literal></expr></argument>, <argument><expr><name>defred2</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_gotos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Value_t</name> <modifier>*</modifier></type><name>to_state2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>shifts</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>verbose_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>shift_table</name><index>[<expr><name>stateno</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to_state2</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>shift</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>nshifts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>to_state2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>as</name> <operator>=</operator> <name><name>accessing_symbol</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISVAR</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>verbose_file</name></expr></argument>, <argument><expr><literal type="string">"\t%s goto %d\n"</literal></expr></argument>, <argument><expr><name><name>symbol_name</name><index>[<expr><name>as</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
