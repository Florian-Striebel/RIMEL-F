<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/byacc/warshall.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defs.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>transitive_closure</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rowsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rowj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>ccol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>relend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>cword</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rowi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rowsize</name> <operator>=</operator> <call><name>WORDSIZE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>relend</name> <operator>=</operator> <name>R</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>rowsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cword</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rowi</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rowi</name> <operator>&lt;</operator> <name>relend</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ccol</name> <operator>=</operator> <name>cword</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rowj</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>rowj</name> <operator>&lt;</operator> <name>relend</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ccol</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <name>rowi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rend</name> <operator>=</operator> <name>rowj</name> <operator>+</operator> <name>rowsize</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rowj</name> <operator>&lt;</operator> <name>rend</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rowj</name><operator>++</operator> <operator>|=</operator> <operator>*</operator><name>rp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>rowj</name> <operator>+=</operator> <name>rowsize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ccol</name> <operator>+=</operator> <name>rowsize</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name>BITS_PER_WORD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cword</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rowi</name> <operator>+=</operator> <name>rowsize</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>reflexive_transitive_closure</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rowsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>relend</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>transitive_closure</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rowsize</name> <operator>=</operator> <call><name>WORDSIZE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>relend</name> <operator>=</operator> <name>R</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>rowsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rp</name> <operator>&lt;</operator> <name>relend</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rp</name> <operator>|=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name>BITS_PER_WORD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>rowsize</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
