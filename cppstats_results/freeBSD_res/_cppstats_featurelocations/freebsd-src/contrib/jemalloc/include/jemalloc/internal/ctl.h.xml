<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/jemalloc/include/jemalloc/internal/ctl.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_CTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_CTL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/malloc_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex_prof.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ql.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/stats.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTL_MAX_DEPTH</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ctl_node_s</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>named</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctl_node_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctl_named_node_s</name> <block>{
<decl_stmt><decl><type><name>ctl_node_t</name></type> <name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nchildren</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctl_node_t</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ctl</name>)<parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>ctl_named_node_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctl_indexed_node_s</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ctl_node_s</name></name></type> <name>node</name></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>ctl_named_node_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>index</name>)<parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>ctl_indexed_node_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctl_arena_stats_s</name> <block>{
<decl_stmt><decl><type><name>arena_stats_t</name></type> <name>astats</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>allocated_small</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nmalloc_small</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ndalloc_small</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nrequests_small</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nfills_small</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nflushes_small</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bin_stats_t</name></type> <name><name>bstats</name><index>[<expr><name>SC_NBINS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_stats_large_t</name></type> <name><name>lstats</name><index>[<expr><name>SC_NSIZES</name> <operator>-</operator> <name>SC_NBINS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arena_stats_extents_t</name></type> <name><name>estats</name><index>[<expr><name>SC_NPSIZES</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ctl_arena_stats_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctl_stats_s</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>metadata_thp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>resident</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mapped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>retained</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>background_thread_stats_t</name></type> <name>background_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutex_prof_data_t</name></type> <name><name>mutex_prof_data</name><index>[<expr><name>mutex_prof_num_global_mutexes</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ctl_stats_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ctl_arena_s</name></name></type> <name>ctl_arena_t</name>;</typedef>
<struct>struct <name>ctl_arena_s</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>initialized</name></decl>;</decl_stmt>
<macro><name>ql_elm</name><argument_list>(<argument>ctl_arena_t</argument>)</argument_list></macro> <expr_stmt><expr><name>destroyed_link</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>nthreads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>dirty_decay_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>muzzy_decay_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pactive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pdirty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pmuzzy</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ctl_arena_stats_t</name> <modifier>*</modifier></type><name>astats</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>ctl_arenas_s</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>epoch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>narenas</name></decl>;</decl_stmt>
<macro><name>ql_head</name><argument_list>(<argument>ctl_arena_t</argument>)</argument_list></macro> <expr_stmt><expr><name>destroyed</name></expr>;</expr_stmt>







<decl_stmt><decl><type><name>ctl_arena_t</name> <modifier>*</modifier></type><name><name>arenas</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>MALLOCX_ARENA_LIMIT</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ctl_arenas_t</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ctl_byname</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>oldlenp</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ctl_nametomib</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mibp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>miblenp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ctl_bymib</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>mib</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>miblen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>oldlenp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ctl_boot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ctl_prefork</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ctl_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ctl_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmallctl</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>oldp</name></type></parameter>, <parameter><type><name>oldlenp</name></type></parameter>, <parameter><type><name>newp</name></type></parameter>, <parameter><type><name>newlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (je_mallctl(name, oldp, oldlenp, newp, newlen) != 0) { malloc_printf( "&lt;jemalloc&gt;: Failure in xmallctl(\"%s\", ...)\n", name); abort(); } } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmallctlnametomib</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mibp</name></type></parameter>, <parameter><type><name>miblenp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (je_mallctlnametomib(name, mibp, miblenp) != 0) { malloc_printf("&lt;jemalloc&gt;: Failure in " "xmallctlnametomib(\"%s\", ...)\n", name); abort(); } } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmallctlbymib</name><parameter_list>(<parameter><type><name>mib</name></type></parameter>, <parameter><type><name>miblen</name></type></parameter>, <parameter><type><name>oldp</name></type></parameter>, <parameter><type><name>oldlenp</name></type></parameter>, <parameter><type><name>newp</name></type></parameter>, <parameter><type><name>newlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (je_mallctlbymib(mib, miblen, oldp, oldlenp, newp, newlen) != 0) { malloc_write( "&lt;jemalloc&gt;: Failure in xmallctlbymib()\n"); abort(); } } while (0)</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
