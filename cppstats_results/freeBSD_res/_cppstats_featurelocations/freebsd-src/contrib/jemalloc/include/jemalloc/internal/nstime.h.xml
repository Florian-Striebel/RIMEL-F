<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/jemalloc/include/jemalloc/internal/nstime.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_NSTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_NSTIME_H</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSTIME_SEC_MAX</name></cpp:macro> <cpp:value>KQU(18446744072)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSTIME_ZERO_INITIALIZER</name></cpp:macro> <cpp:value>{0}</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ns</name></decl>;</decl_stmt>
}</block></struct></type> <name>nstime_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>nstime_init</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ns</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>nstime_init2</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>nsec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>nstime_ns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>nstime_sec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>nstime_msec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>nstime_nsec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>nstime_copy</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>nstime_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>nstime_add</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>addend</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>nstime_iadd</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>addend</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>nstime_subtract</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>subtrahend</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>nstime_isubtract</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>subtrahend</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>nstime_imultiply</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>multiplier</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>nstime_idivide</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>divisor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>nstime_divide</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>divisor</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>bool</name></type> (<name>nstime_monotonic_t</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>nstime_monotonic_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>nstime_monotonic</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>bool</name></type> (<name>nstime_update_t</name>)<parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>nstime_update_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>nstime_update</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
