<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/jemalloc/include/jemalloc/internal/mutex_pool.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_MUTEX_POOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_MUTEX_POOL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/witness.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_POOL_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>mutex_pool_s</name></name></type> <name>mutex_pool_t</name>;</typedef>
<struct>struct <name>mutex_pool_s</name> <block>{
<decl_stmt><decl><type><name>malloc_mutex_t</name></type> <name><name>mutexes</name><index>[<expr><name>MUTEX_POOL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>bool</name></type> <name>mutex_pool_init</name><parameter_list>(<parameter><decl><type><name>mutex_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>witness_rank_t</name></type> <name>rank</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>malloc_mutex_t</name> <modifier>*</modifier></type>
<name>mutex_pool_mutex</name><parameter_list>(<parameter><decl><type><name>mutex_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>hash_result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0xd50dcc1b</literal></expr></argument>, <argument><expr><name>hash_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>mutexes</name><index>[<expr><name><name>hash_result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%</operator> <name>MUTEX_POOL_SIZE</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>mutex_pool_assert_not_held</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>mutex_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MUTEX_POOL_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>malloc_mutex_assert_not_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>mutexes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>mutex_pool_lock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>mutex_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mutex_pool_assert_not_held</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>mutex_pool_mutex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>mutex_pool_unlock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>mutex_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>mutex_pool_mutex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mutex_pool_assert_not_held</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>mutex_pool_lock2</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>mutex_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key1</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mutex_pool_assert_not_held</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex1</name> <init>= <expr><call><name>mutex_pool_mutex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex2</name> <init>= <expr><call><name>mutex_pool_mutex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mutex1</name> <operator>&lt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mutex2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mutex1</name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mutex2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>mutex_pool_unlock2</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>mutex_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key1</name></decl></parameter>,
<parameter><decl><type><name>uintptr_t</name></type> <name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex1</name> <init>= <expr><call><name>mutex_pool_mutex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex2</name> <init>= <expr><call><name>mutex_pool_mutex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mutex1</name> <operator>==</operator> <name>mutex2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mutex_pool_assert_not_held</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>mutex_pool_assert_owner</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>mutex_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>mutex_pool_mutex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
