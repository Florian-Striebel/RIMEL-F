<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/jemalloc/include/jemalloc/internal/tsd.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_TSD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_TSD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/arena_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/bin_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_externs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/prof_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ql.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/rtree_tsd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/tcache_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/tcache_structs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/witness.h"</cpp:file></cpp:include>




































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_JET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>test_callback_t</name>)<parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_TSD_TEST_DATA_INIT</name></cpp:macro> <cpp:value>0x72b65c10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_TEST_TSD</name></cpp:macro> <cpp:value>O(test_data, int, int) O(test_callback, test_callback_t, int)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_TEST_TSD_INITIALIZER</name></cpp:macro> <cpp:value>, MALLOC_TSD_TEST_DATA_INIT, NULL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_TEST_TSD</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_TEST_TSD_INITIALIZER</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_TSD</name></cpp:macro> <cpp:value>O(tcache_enabled, bool, bool) O(arenas_tdata_bypass, bool, bool) O(reentrancy_level, int8_t, int8_t) O(narenas_tdata, uint32_t, uint32_t) O(offset_state, uint64_t, uint64_t) O(thread_allocated, uint64_t, uint64_t) O(thread_deallocated, uint64_t, uint64_t) O(bytes_until_sample, int64_t, int64_t) O(prof_tdata, prof_tdata_t *, prof_tdata_t *) O(rtree_ctx, rtree_ctx_t, rtree_ctx_t) O(iarena, arena_t *, arena_t *) O(arena, arena_t *, arena_t *) O(arenas_tdata, arena_tdata_t *, arena_tdata_t *)O(binshards, tsd_binshards_t, tsd_binshards_t)O(tcache, tcache_t, tcache_t) O(witness_tsd, witness_tsd_t, witness_tsdn_t) MALLOC_TEST_TSD</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSD_INITIALIZER</name></cpp:macro> <cpp:value>{ ATOMIC_INIT(tsd_state_uninitialized), TCACHE_ENABLED_ZERO_INITIALIZER, false, 0, 0, 0, 0, 0, 0, NULL, RTREE_CTX_ZERO_INITIALIZER, NULL, NULL, NULL, TSD_BINSHARDS_ZERO_INITIALIZER, TCACHE_ZERO_INITIALIZER, WITNESS_TSD_INITIALIZER MALLOC_TEST_TSD_INITIALIZER }</cpp:value></cpp:define>




















<function_decl><type><name>void</name> <modifier>*</modifier></type><name>malloc_tsd_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>malloc_tsd_dalloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>wrapper</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>malloc_tsd_cleanup_register</name><parameter_list>(<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>malloc_tsd_boot0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>malloc_tsd_boot1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tsd_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd_fetch_slow</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>internal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tsd_state_set</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>new_state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tsd_slow_update</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tsd_prefork</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tsd_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tsd_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>tsd_global_slow_inc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tsd_global_slow_dec</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tsd_global_slow</name><parameter_list>()</parameter_list>;</function_decl>

<enum>enum <block>{

<decl><name>tsd_state_nominal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>tsd_state_nominal_slow</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,









<decl><name>tsd_state_nominal_recompute</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,





<decl><name>tsd_state_nominal_max</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,






<decl><name>tsd_state_minimal_initialized</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>tsd_state_purgatory</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>tsd_state_reincarnated</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,






<decl><name>tsd_state_uninitialized</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>
}</block>;</enum>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSD_MANGLE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cant_access_tsd_items_directly_use_a_getter_or_setter_##n</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_U8_ATOMICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsd_state_t</name></cpp:macro> <cpp:value>atomic_u8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsd_atomic_load</name></cpp:macro> <cpp:value>atomic_load_u8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsd_atomic_store</name></cpp:macro> <cpp:value>atomic_store_u8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsd_atomic_exchange</name></cpp:macro> <cpp:value>atomic_exchange_u8</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsd_state_t</name></cpp:macro> <cpp:value>atomic_u32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsd_atomic_load</name></cpp:macro> <cpp:value>atomic_load_u32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsd_atomic_store</name></cpp:macro> <cpp:value>atomic_store_u32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsd_atomic_exchange</name></cpp:macro> <cpp:value>atomic_exchange_u32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct>struct <name>tsd_s</name> <block>{










<decl_stmt><decl><type><name>tsd_state_t</name></type> <name>state</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>nt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t TSD_MANGLE(n);</cpp:value></cpp:define>

<expr_stmt><expr><name>MALLOC_TSD</name></expr></expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>O</name></cpp:undef>

}</block> <decl><name>JEMALLOC_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></decl>;</struct>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>uint8_t</name></type>
<name>tsd_state_get</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>






<return>return <expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>tsd</name><operator>-&gt;</operator><name>state</name></name></expr>;</return>
</block_content>}</block></function>






<struct>struct <name>tsdn_s</name> <block>{
<decl_stmt><decl><type><name>tsd_t</name></type> <name>tsd</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDN_NULL</name></cpp:macro> <cpp:value>((tsdn_t *)0)</cpp:value></cpp:define>
<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>tsdn_t</name> <modifier>*</modifier></type>
<name>tsd_tsdn</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>tsdn_t</name> <operator>*</operator><operator>)</operator><name>tsd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>tsdn_null</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>tsdn</name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>tsd_t</name> <modifier>*</modifier></type>
<name>tsdn_tsd</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>tsdn</name><operator>-&gt;</operator><name>tsd</name></name></expr>;</return>
</block_content>}</block></function>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_MALLOC_THREAD_CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/tsd_malloc_thread_cleanup.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_TLS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/tsd_tls.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/tsd_win.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/tsd_generic.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>nt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ALWAYS_INLINE t * tsd_##n##p_get_unsafe(tsd_t *tsd) { return &amp;tsd-&gt;TSD_MANGLE(n); }</cpp:value></cpp:define>




<function><type><name>MALLOC_TSD</name>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>O</name></cpp:undef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>nt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ALWAYS_INLINE t * tsd_##n##p_get(tsd_t *tsd) { uint8_t state = tsd_state_get(tsd); assert(state == tsd_state_nominal || state == tsd_state_nominal_slow || state == tsd_state_nominal_recompute || state == tsd_state_reincarnated || state == tsd_state_minimal_initialized); return tsd_##n##p_get_unsafe(tsd); }</cpp:value></cpp:define>














<name>MALLOC_TSD</name>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>O</name></cpp:undef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>nt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ALWAYS_INLINE nt * tsdn_##n##p_get(tsdn_t *tsdn) { if (tsdn_null(tsdn)) { return NULL; } tsd_t *tsd = tsdn_tsd(tsdn); return (nt *)tsd_##n##p_get(tsd); }</cpp:value></cpp:define>








<name>MALLOC_TSD</name>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>O</name></cpp:undef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>nt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ALWAYS_INLINE t tsd_##n##_get(tsd_t *tsd) { return *tsd_##n##p_get(tsd); }</cpp:value></cpp:define>




<name>MALLOC_TSD</name>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>O</name></cpp:undef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>nt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_ALWAYS_INLINE void tsd_##n##_set(tsd_t *tsd, t val) { assert(tsd_state_get(tsd) != tsd_state_reincarnated &amp;&amp; tsd_state_get(tsd) != tsd_state_minimal_initialized); *tsd_##n##p_get(tsd) = val; }</cpp:value></cpp:define>






<name>MALLOC_TSD</name>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>O</name></cpp:undef>

<name>JEMALLOC_ALWAYS_INLINE</name> <name>void</name></type>
<name>tsd_assert_fast</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>





<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>malloc_slow</name> <operator>&amp;&amp;</operator> <call><name>tsd_tcache_enabled_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>tsd_reentrancy_level_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>bool</name></type>
<name>tsd_fast</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>fast</name> <init>= <expr><operator>(</operator><call><name>tsd_state_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>tsd_state_nominal</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fast</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tsd_assert_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>fast</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>tsd_t</name> <modifier>*</modifier></type>
<name>tsd_fetch_impl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>init</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>minimal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name> <init>= <expr><call><name>tsd_get</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>&amp;&amp;</operator> <call><name>tsd_get_allocates</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>tsd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tsd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>tsd_state_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>tsd_state_nominal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>tsd_fetch_slow</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>minimal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tsd_assert_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tsd</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>tsd_t</name> <modifier>*</modifier></type>
<name>tsd_fetch_min</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>tsd_fetch_impl</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>tsd_t</name> <modifier>*</modifier></type>
<name>tsd_internal_fetch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name> <init>= <expr><call><name>tsd_fetch_min</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tsd_state_set</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tsd_state_reincarnated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tsd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>tsd_t</name> <modifier>*</modifier></type>
<name>tsd_fetch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>tsd_fetch_impl</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>tsd_nominal</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>tsd_state_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>tsd_state_nominal_max</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>tsdn_t</name> <modifier>*</modifier></type>
<name>tsdn_fetch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tsd_booted_get</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><call><name>tsd_fetch_impl</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>rtree_ctx_t</name> <modifier>*</modifier></type>
<name>tsd_rtree_ctx</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>tsd_rtree_ctxp_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JEMALLOC_ALWAYS_INLINE</name> <name>rtree_ctx_t</name> <modifier>*</modifier></type>
<name>tsdn_rtree_ctx</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>fallback</name></decl></parameter>)</parameter_list> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtree_ctx_data_init</name><argument_list>(<argument><expr><name>fallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>fallback</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>tsd_rtree_ctx</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
