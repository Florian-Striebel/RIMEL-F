<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/jemalloc/include/jemalloc/internal/atomic.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_ATOMIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_ATOMIC_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INLINE</name></cpp:macro> <cpp:value>JEMALLOC_ALWAYS_INLINE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_U8_ATOMICS</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_GCC_ATOMIC_ATOMICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic_gcc_atomic.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_GCC_U8_ATOMIC_ATOMICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JEMALLOC_U8_ATOMICS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_GCC_SYNC_ATOMICS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic_gcc_sync.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_GCC_U8_SYNC_ATOMICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JEMALLOC_U8_ATOMICS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic_msvc.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_C11_ATOMICS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic_c11.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Don't have atomics implemented on this platform."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_RELAXED</name></cpp:macro> <cpp:value>atomic_memory_order_relaxed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_ACQUIRE</name></cpp:macro> <cpp:value>atomic_memory_order_acquire</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_RELEASE</name></cpp:macro> <cpp:value>atomic_memory_order_release</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_ACQ_REL</name></cpp:macro> <cpp:value>atomic_memory_order_acq_rel</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SEQ_CST</name></cpp:macro> <cpp:value>atomic_memory_order_seq_cst</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>LG_SIZEOF_INT</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_ATOMIC_U64</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>JEMALLOC_GENERATE_ATOMICS</name><argument_list>(<argument>void *</argument>, <argument>p</argument>, <argument>LG_SIZEOF_PTR</argument>)</argument_list></macro>





<macro><name>JEMALLOC_GENERATE_ATOMICS</name><argument_list>(<argument>bool</argument>, <argument>b</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>JEMALLOC_GENERATE_INT_ATOMICS</name><argument_list>(<argument>unsigned</argument>, <argument>u</argument>, <argument>LG_SIZEOF_INT</argument>)</argument_list></macro>

<macro><name>JEMALLOC_GENERATE_INT_ATOMICS</name><argument_list>(<argument>size_t</argument>, <argument>zu</argument>, <argument>LG_SIZEOF_PTR</argument>)</argument_list></macro>

<macro><name>JEMALLOC_GENERATE_INT_ATOMICS</name><argument_list>(<argument>ssize_t</argument>, <argument>zd</argument>, <argument>LG_SIZEOF_PTR</argument>)</argument_list></macro>

<macro><name>JEMALLOC_GENERATE_INT_ATOMICS</name><argument_list>(<argument>uint8_t</argument>, <argument>u8</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>JEMALLOC_GENERATE_INT_ATOMICS</name><argument_list>(<argument>uint32_t</argument>, <argument>u32</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_ATOMIC_U64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>JEMALLOC_GENERATE_INT_ATOMICS</name><argument_list>(<argument>uint64_t</argument>, <argument>u64</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ATOMIC_INLINE</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
