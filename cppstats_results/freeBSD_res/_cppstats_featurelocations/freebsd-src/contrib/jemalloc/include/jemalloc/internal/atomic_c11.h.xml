<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/jemalloc/include/jemalloc/internal/atomic_c11.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_ATOMIC_C11_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_ATOMIC_C11_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INIT</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATOMIC_VAR_INIT(__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_memory_order_t</name></cpp:macro> <cpp:value>memory_order</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_memory_order_relaxed</name></cpp:macro> <cpp:value>memory_order_relaxed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_memory_order_acquire</name></cpp:macro> <cpp:value>memory_order_acquire</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_memory_order_release</name></cpp:macro> <cpp:value>memory_order_release</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_memory_order_acq_rel</name></cpp:macro> <cpp:value>memory_order_acq_rel</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_memory_order_seq_cst</name></cpp:macro> <cpp:value>memory_order_seq_cst</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fence</name></cpp:macro> <cpp:value>atomic_thread_fence</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_GENERATE_ATOMICS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>short_type</name></type></parameter>, <parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef _Atomic(type) atomic_##short_type##_t; ATOMIC_INLINE type atomic_load_##short_type(const atomic_##short_type##_t *a, atomic_memory_order_t mo) { atomic_##short_type##_t* a_nonconst = (atomic_##short_type##_t*)a; return atomic_load_explicit(a_nonconst, mo); } ATOMIC_INLINE void atomic_store_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { atomic_store_explicit(a, val, mo); } ATOMIC_INLINE type atomic_exchange_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return atomic_exchange_explicit(a, val, mo); } ATOMIC_INLINE bool atomic_compare_exchange_weak_##short_type(atomic_##short_type##_t *a, type *expected, type desired, atomic_memory_order_t success_mo, atomic_memory_order_t failure_mo) { return atomic_compare_exchange_weak_explicit(a, expected, desired, success_mo, failure_mo); } ATOMIC_INLINE bool atomic_compare_exchange_strong_##short_type(atomic_##short_type##_t *a, type *expected, type desired, atomic_memory_order_t success_mo, atomic_memory_order_t failure_mo) { return atomic_compare_exchange_strong_explicit(a, expected, desired, success_mo, failure_mo); }</cpp:value></cpp:define>
















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_GENERATE_INT_ATOMICS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>short_type</name></type></parameter>, <parameter><type><name>lg_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>JEMALLOC_GENERATE_ATOMICS(type, short_type, lg_size) ATOMIC_INLINE type atomic_fetch_add_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return atomic_fetch_add_explicit(a, val, mo); } ATOMIC_INLINE type atomic_fetch_sub_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return atomic_fetch_sub_explicit(a, val, mo); } ATOMIC_INLINE type atomic_fetch_and_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return atomic_fetch_and_explicit(a, val, mo); } ATOMIC_INLINE type atomic_fetch_or_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return atomic_fetch_or_explicit(a, val, mo); } ATOMIC_INLINE type atomic_fetch_xor_##short_type(atomic_##short_type##_t *a, type val, atomic_memory_order_t mo) { return atomic_fetch_xor_explicit(a, val, mo); }</cpp:value></cpp:define>






























<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
