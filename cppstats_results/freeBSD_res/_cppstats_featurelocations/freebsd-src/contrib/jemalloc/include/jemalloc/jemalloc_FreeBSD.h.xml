<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/jemalloc/include/jemalloc/jemalloc_FreeBSD.h">



<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JEMALLOC_OVERRIDE_VALLOC</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MALLOC_PRODUCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_DEBUG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JEMALLOC_DSS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JEMALLOC_BACKGROUND_THREAD</name></cpp:undef>





<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JEMALLOC_TLS_MODEL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LG_PAGE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LG_VADDR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LG_SIZEOF_PTR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LG_SIZEOF_INT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LG_SIZEOF_LONG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LG_SIZEOF_INTMAX_T</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_TLS_MODEL</name></cpp:macro> <cpp:value>__attribute__((tls_model("initial-exec")))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ia64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_TLS_MODEL</name></cpp:macro> <cpp:value>__attribute__((tls_model("initial-exec")))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_TLS_MODEL</name></cpp:macro> <cpp:value>__attribute__((tls_model("initial-exec")))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips_n64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_VADDR</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_PTR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_VADDR</name> <operator>&gt;</operator> <literal type="number">32</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_RETAIN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_TLS_MODEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_TLS_MODEL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_PAGE</name></cpp:macro> <cpp:value>PAGE_SHIFT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_INT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_LONG</name></cpp:macro> <cpp:value>LG_SIZEOF_PTR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_INTMAX_T</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CPU_SPINWAIT</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/cpu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/cpufunc.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_SPINWAIT</name></cpp:macro> <cpp:value>cpu_spinwait()</cpp:value></cpp:define>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JEMALLOC_LAZY_LOCK</name></cpp:undef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__isthreaded</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isthreaded</name></cpp:macro> <cpp:value>((bool)__isthreaded)</cpp:value></cpp:define>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_malloc</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_calloc</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_posix_memalign</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_aligned_alloc</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_realloc</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_free</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_malloc_usable_size</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_mallocx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_rallocx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_xallocx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_sallocx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_dallocx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_sdallocx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_nallocx</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_mallctl</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_mallctlnametomib</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_mallctlbymib</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_malloc_stats_print</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_allocm</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_rallocm</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_sallocm</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_dallocm</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>je_nallocm</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_malloc</name></cpp:macro> <cpp:value>__malloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_calloc</name></cpp:macro> <cpp:value>__calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_posix_memalign</name></cpp:macro> <cpp:value>__posix_memalign</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_aligned_alloc</name></cpp:macro> <cpp:value>__aligned_alloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_realloc</name></cpp:macro> <cpp:value>__realloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_free</name></cpp:macro> <cpp:value>__free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_malloc_usable_size</name></cpp:macro> <cpp:value>__malloc_usable_size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_mallocx</name></cpp:macro> <cpp:value>__mallocx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_rallocx</name></cpp:macro> <cpp:value>__rallocx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_xallocx</name></cpp:macro> <cpp:value>__xallocx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_sallocx</name></cpp:macro> <cpp:value>__sallocx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_dallocx</name></cpp:macro> <cpp:value>__dallocx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_sdallocx</name></cpp:macro> <cpp:value>__sdallocx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_nallocx</name></cpp:macro> <cpp:value>__nallocx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_mallctl</name></cpp:macro> <cpp:value>__mallctl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_mallctlnametomib</name></cpp:macro> <cpp:value>__mallctlnametomib</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_mallctlbymib</name></cpp:macro> <cpp:value>__mallctlbymib</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_malloc_stats_print</name></cpp:macro> <cpp:value>__malloc_stats_print</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_allocm</name></cpp:macro> <cpp:value>__allocm</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_rallocm</name></cpp:macro> <cpp:value>__rallocm</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_sallocm</name></cpp:macro> <cpp:value>__sallocm</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_dallocm</name></cpp:macro> <cpp:value>__dallocm</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>je_nallocm</name></cpp:macro> <cpp:value>__nallocm</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open</name></cpp:macro> <cpp:value>_open</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name></cpp:macro> <cpp:value>_read</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write</name></cpp:macro> <cpp:value>_write</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>close</name></cpp:macro> <cpp:value>_close</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_join</name></cpp:macro> <cpp:value>_pthread_join</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_once</name></cpp:macro> <cpp:value>_pthread_once</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_self</name></cpp:macro> <cpp:value>_pthread_self</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_equal</name></cpp:macro> <cpp:value>_pthread_equal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutex_lock</name></cpp:macro> <cpp:value>_pthread_mutex_lock</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutex_trylock</name></cpp:macro> <cpp:value>_pthread_mutex_trylock</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutex_unlock</name></cpp:macro> <cpp:value>_pthread_mutex_unlock</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cond_init</name></cpp:macro> <cpp:value>_pthread_cond_init</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cond_wait</name></cpp:macro> <cpp:value>_pthread_cond_wait</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cond_timedwait</name></cpp:macro> <cpp:value>_pthread_cond_timedwait</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cond_signal</name></cpp:macro> <cpp:value>_pthread_cond_signal</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_C_</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__malloc</name></expr></argument>, <argument><expr><name>malloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__calloc</name></expr></argument>, <argument><expr><name>calloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__posix_memalign</name></expr></argument>, <argument><expr><name>posix_memalign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__aligned_alloc</name></expr></argument>, <argument><expr><name>aligned_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__realloc</name></expr></argument>, <argument><expr><name>realloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__free</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__malloc_usable_size</name></expr></argument>, <argument><expr><name>malloc_usable_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__mallocx</name></expr></argument>, <argument><expr><name>mallocx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__rallocx</name></expr></argument>, <argument><expr><name>rallocx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__xallocx</name></expr></argument>, <argument><expr><name>xallocx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__sallocx</name></expr></argument>, <argument><expr><name>sallocx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__dallocx</name></expr></argument>, <argument><expr><name>dallocx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__sdallocx</name></expr></argument>, <argument><expr><name>sdallocx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__nallocx</name></expr></argument>, <argument><expr><name>nallocx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__mallctl</name></expr></argument>, <argument><expr><name>mallctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__mallctlnametomib</name></expr></argument>, <argument><expr><name>mallctlnametomib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__mallctlbymib</name></expr></argument>, <argument><expr><name>mallctlbymib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__malloc_stats_print</name></expr></argument>, <argument><expr><name>malloc_stats_print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__allocm</name></expr></argument>, <argument><expr><name>allocm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__rallocm</name></expr></argument>, <argument><expr><name>rallocm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__sallocm</name></expr></argument>, <argument><expr><name>sallocm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__dallocm</name></expr></argument>, <argument><expr><name>dallocm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__weak_reference</name><argument_list>(<argument><expr><name>__nallocm</name></expr></argument>, <argument><expr><name>nallocm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
