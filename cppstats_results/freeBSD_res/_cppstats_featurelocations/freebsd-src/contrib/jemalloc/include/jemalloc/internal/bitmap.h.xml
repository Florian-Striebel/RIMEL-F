<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/jemalloc/include/jemalloc/internal/bitmap.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_BITMAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_BITMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/arena_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/bit_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sc.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>bitmap_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_SIZEOF_BITMAP</name></cpp:macro> <cpp:value>LG_SIZEOF_LONG</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_SLAB_MAXREGS</name> <operator>&gt;</operator> <call><name>LG_CEIL</name><argument_list>(<argument><expr><name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_BITMAP_MAXBITS</name></cpp:macro> <cpp:value>LG_SLAB_MAXREGS</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_BITMAP_MAXBITS</name></cpp:macro> <cpp:value>LG_CEIL(SC_NSIZES)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_MAXBITS</name></cpp:macro> <cpp:value>(ZU(1) &lt;&lt; LG_BITMAP_MAXBITS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_BITMAP_GROUP_NBITS</name></cpp:macro> <cpp:value>(LG_SIZEOF_BITMAP + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUP_NBITS</name></cpp:macro> <cpp:value>(1U &lt;&lt; LG_BITMAP_GROUP_NBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUP_NBITS_MASK</name></cpp:macro> <cpp:value>(BITMAP_GROUP_NBITS-1)</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>-</operator> <name>LG_BITMAP_GROUP_NBITS</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_USE_TREE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_BITS2GROUPS</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((nbits) + BITMAP_GROUP_NBITS_MASK) &gt;&gt; LG_BITMAP_GROUP_NBITS)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_L0</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(nbits)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_L1</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(nbits))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_L2</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS((nbits))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_L3</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS( BITMAP_BITS2GROUPS((nbits)))))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_L4</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS( BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS((nbits))))))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_1_LEVEL</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_GROUPS_L0(nbits)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_2_LEVEL</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BITMAP_GROUPS_1_LEVEL(nbits) + BITMAP_GROUPS_L1(nbits))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_3_LEVEL</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BITMAP_GROUPS_2_LEVEL(nbits) + BITMAP_GROUPS_L2(nbits))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_4_LEVEL</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BITMAP_GROUPS_3_LEVEL(nbits) + BITMAP_GROUPS_L3(nbits))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_5_LEVEL</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BITMAP_GROUPS_4_LEVEL(nbits) + BITMAP_GROUPS_L4(nbits))</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BITMAP_USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>&lt;=</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_GROUPS_1_LEVEL(nbits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_GROUPS_1_LEVEL(BITMAP_MAXBITS)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>&lt;=</operator> <name>LG_BITMAP_GROUP_NBITS</name> <operator>*</operator> <literal type="number">2</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_GROUPS_2_LEVEL(nbits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_GROUPS_2_LEVEL(BITMAP_MAXBITS)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>&lt;=</operator> <name>LG_BITMAP_GROUP_NBITS</name> <operator>*</operator> <literal type="number">3</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_GROUPS_3_LEVEL(nbits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_GROUPS_3_LEVEL(BITMAP_MAXBITS)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>&lt;=</operator> <name>LG_BITMAP_GROUP_NBITS</name> <operator>*</operator> <literal type="number">4</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_GROUPS_4_LEVEL(nbits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_GROUPS_4_LEVEL(BITMAP_MAXBITS)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_BITMAP_MAXBITS</name> <operator>&lt;=</operator> <name>LG_BITMAP_GROUP_NBITS</name> <operator>*</operator> <literal type="number">5</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_GROUPS_5_LEVEL(nbits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_GROUPS_5_LEVEL(BITMAP_MAXBITS)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported bitmap size"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_MAX_LEVELS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_INFO_INITIALIZER</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ nbits, (BITMAP_GROUPS_L0(nbits) &gt; BITMAP_GROUPS_L1(nbits)) + (BITMAP_GROUPS_L1(nbits) &gt; BITMAP_GROUPS_L2(nbits)) + (BITMAP_GROUPS_L2(nbits) &gt; BITMAP_GROUPS_L3(nbits)) + (BITMAP_GROUPS_L3(nbits) &gt; BITMAP_GROUPS_L4(nbits)) + 1, { {0}, {BITMAP_GROUPS_L0(nbits)}, {BITMAP_GROUPS_L1(nbits) + BITMAP_GROUPS_L0(nbits)}, {BITMAP_GROUPS_L2(nbits) + BITMAP_GROUPS_L1(nbits) + BITMAP_GROUPS_L0(nbits)}, {BITMAP_GROUPS_L3(nbits) + BITMAP_GROUPS_L2(nbits) + BITMAP_GROUPS_L1(nbits) + BITMAP_GROUPS_L0(nbits)}, {BITMAP_GROUPS_L4(nbits) + BITMAP_GROUPS_L3(nbits) + BITMAP_GROUPS_L2(nbits) + BITMAP_GROUPS_L1(nbits) + BITMAP_GROUPS_L0(nbits)} } }</cpp:value></cpp:define>






















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(nbits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_GROUPS_MAX</name></cpp:macro> <cpp:value>BITMAP_BITS2GROUPS(BITMAP_MAXBITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_INFO_INITIALIZER</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ nbits, BITMAP_BITS2GROUPS(nbits) }</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>bitmap_level_s</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>group_offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>bitmap_level_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>bitmap_info_s</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BITMAP_USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nlevels</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bitmap_level_t</name></type> <name><name>levels</name><index>[<expr><name>BITMAP_MAX_LEVELS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>size_t</name></type> <name>ngroups</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>bitmap_info_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>bitmap_info_init</name><parameter_list>(<parameter><decl><type><name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbits</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitmap_init</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fill</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>bitmap_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>bitmap_full</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BITMAP_USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>rgoff</name> <init>= <expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>rg</name> <init>= <expr><name><name>bitmap</name><index>[<expr><name>rgoff</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>rg</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>ngroups</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>bitmap_get</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>goff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bit</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>goff</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>goff</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><operator>(</operator><name>g</name> <operator>&amp;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>bitmap_set</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>goff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>gp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bit</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>goff</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gp</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><index>[<expr><name>goff</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><name>gp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>g</name> <operator>&amp;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>^=</operator> <call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gp</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BITMAP_USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>goff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>goff</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gp</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>+</operator> <name>goff</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><name>gp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>g</name> <operator>&amp;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>^=</operator> <call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gp</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>bitmap_ffu</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>min_bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>min_bit</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BITMAP_USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>level</name> <init>= <expr><name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr></init></decl>;</init> <condition><expr><name>level</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>lg_bits_per_group</name> <init>= <expr><operator>(</operator><name>LG_BITMAP_GROUP_NBITS</name> <operator>*</operator> <operator>(</operator><name>level</name> <operator>+</operator>
<literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>group</name> <init>= <expr><name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>+</operator> <operator>(</operator><name>bit</name>
<operator>&gt;&gt;</operator> <name>lg_bits_per_group</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>group_nmask</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>min_bit</name> <operator>&gt;</operator> <name>bit</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>min_bit</name> <operator>-</operator>
<name>bit</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>lg_bits_per_group</name> <operator>-</operator> <name>LG_BITMAP_GROUP_NBITS</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>group_nmask</name> <operator>&lt;=</operator> <name>BITMAP_GROUP_NBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>group_mask</name> <init>= <expr><operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1LU</literal> <operator>&lt;&lt;</operator> <name>group_nmask</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>group_masked</name> <init>= <expr><name>group</name> <operator>&amp;</operator> <name>group_mask</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>group_masked</name> <operator>==</operator> <literal type="number">0LU</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <literal type="number">0LU</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>







<decl_stmt><decl><type><name>size_t</name></type> <name>sib_base</name> <init>= <expr><name>bit</name> <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_bits_per_group</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sib_base</name> <operator>&gt;</operator> <name>min_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sib_base</name> <operator>&gt;</operator> <name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sib_base</name> <operator>&gt;=</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>sib_base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bit</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><call><name>ffs_lu</name><argument_list>(<argument><expr><name>group_masked</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator>
<operator>(</operator><name>lg_bits_per_group</name> <operator>-</operator> <name>LG_BITMAP_GROUP_NBITS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bit</name> <operator>&gt;=</operator> <name>min_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bit</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bit</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>min_bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>g</name> <init>= <expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1LU</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>min_bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator>
<operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bit</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>ffs_lu</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <name>LG_BITMAP_GROUP_NBITS</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>ngroups</name></name></expr>)</condition>;</do>
<return>return <expr><name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>bitmap_sfu</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bitmap_full</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BITMAP_USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>ffs_lu</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>+</operator> <name>bit</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>bit</name> <operator>&lt;&lt;</operator> <name>LG_BITMAP_GROUP_NBITS</name><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>ffs_lu</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>bit</name> <operator>=</operator> <call><name>ffs_lu</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <name>LG_BITMAP_GROUP_NBITS</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>bitmap_unset</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>goff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>gp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitmap_t</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UNUSED</name> <name>bool</name></type> <name>propagate</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bit</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>goff</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gp</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><index>[<expr><name>goff</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><name>gp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>propagate</name> <operator>=</operator> <operator>(</operator><name>g</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>g</name> <operator>&amp;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>^=</operator> <call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gp</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BITMAP_USE_TREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>propagate</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>goff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>goff</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <name>LG_BITMAP_GROUP_NBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gp</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>+</operator> <name>goff</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><name>gp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>propagate</name> <operator>=</operator> <operator>(</operator><name>g</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>g</name> <operator>&amp;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>^=</operator> <call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gp</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>propagate</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
