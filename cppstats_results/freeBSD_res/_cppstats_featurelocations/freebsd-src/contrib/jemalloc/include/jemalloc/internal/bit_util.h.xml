<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/jemalloc/include/jemalloc/internal/bit_util.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_BIT_UTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_BIT_UTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_UTIL_INLINE</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_FFSLL</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_FFSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_FFS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> JEMALLOC_INTERNAL_FFS{,L,LL} should have been defined by configure</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>ffs_llu</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>JEMALLOC_INTERNAL_FFSLL</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>ffs_lu</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>JEMALLOC_INTERNAL_FFSL</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>ffs_u</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>JEMALLOC_INTERNAL_FFS</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_POPCOUNTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>popcount_lu</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>JEMALLOC_INTERNAL_POPCOUNTL</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>BIT_UTIL_INLINE</name> <name>size_t</name></type>
<name>cfs_lu</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bit</name> <init>= <expr><call><name>ffs_lu</name><argument_list>(<argument><expr><operator>*</operator><name>bitmap</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>bitmap</name> <operator>^=</operator> <call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>bit</name></expr>;</expr_stmt>
<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>ffs_zu</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_SIZEOF_PTR</name> <operator>==</operator> <name>LG_SIZEOF_INT</name></expr></cpp:if>
<return>return <expr><call><name>ffs_u</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_SIZEOF_PTR</name> <operator>==</operator> <name>LG_SIZEOF_LONG</name></expr></cpp:elif>
<return>return <expr><call><name>ffs_lu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_SIZEOF_PTR</name> <operator>==</operator> <name>LG_SIZEOF_LONG_LONG</name></expr></cpp:elif>
<return>return <expr><call><name>ffs_llu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> No implementation for size_t ffs()</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>ffs_u64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_SIZEOF_LONG</name> <operator>==</operator> <literal type="number">3</literal></expr></cpp:if>
<return>return <expr><call><name>ffs_lu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LG_SIZEOF_LONG_LONG</name> <operator>==</operator> <literal type="number">3</literal></expr></cpp:elif>
<return>return <expr><call><name>ffs_llu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> No implementation for 64-bit ffs()</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>ffs_u32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_SIZEOF_INT</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<return>return <expr><call><name>ffs_u</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> No implementation for 32-bit ffs()</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>ffs_u</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>BIT_UTIL_INLINE</name> <name>uint64_t</name></type>
<name>pow2_ceil_u64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_BUILTIN_CLZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>msb_on_index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<asm>asm ("bsrq %1, %0"
: "=r"(msb_on_index)
: "r"(x-1)
);</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_BUILTIN_CLZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<expr_stmt><expr><name>msb_on_index</name> <operator>=</operator> <operator>(</operator><literal type="number">63</literal> <operator>^</operator> <call><name>__builtin_clzll</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>msb_on_index</name> <operator>&lt;</operator> <literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>msb_on_index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>BIT_UTIL_INLINE</name> <name>uint32_t</name></type>
<name>pow2_ceil_u32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_BUILTIN_CLZ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>msb_on_index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<asm>asm ("bsr %1, %0"
: "=r"(msb_on_index)
: "r"(x-1)
);</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_BUILTIN_CLZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<expr_stmt><expr><name>msb_on_index</name> <operator>=</operator> <operator>(</operator><literal type="number">31</literal> <operator>^</operator> <call><name>__builtin_clz</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>msb_on_index</name> <operator>&lt;</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>msb_on_index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>BIT_UTIL_INLINE</name> <name>size_t</name></type>
<name>pow2_ceil_zu</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>
<return>return <expr><call><name>pow2_ceil_u64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>pow2_ceil_u32</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>lg_floor</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>asm ("bsr %1, %0"
: "=r"(ret)
: "r"(x)
);</asm>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>&lt;</operator> <name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>lg_floor</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><call><name>_BitScanReverse64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:elif>
<expr_stmt><expr><call><name>_BitScanReverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported type size for lg_floor()"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>&lt;</operator> <name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_BUILTIN_CLZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>lg_floor</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <name>LG_SIZEOF_INT</name><operator>)</operator></expr></cpp:if>
<return>return <expr><operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>__builtin_clz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <name>LG_SIZEOF_LONG</name><operator>)</operator></expr></cpp:elif>
<return>return <expr><operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>__builtin_clzl</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported type size for lg_floor()"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>lg_floor</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>SIZE_T_MAX</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>ffs_zu</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>BIT_UTIL_INLINE</name> <name>unsigned</name></type>
<name>lg_ceil</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>lg_floor</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_UTIL_INLINE</name></cpp:undef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_FLOOR_1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_FLOOR_2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &lt; (1ULL &lt;&lt; 1) ? LG_FLOOR_1(x) : 1 + LG_FLOOR_1(x &gt;&gt; 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_FLOOR_4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &lt; (1ULL &lt;&lt; 2) ? LG_FLOOR_2(x) : 2 + LG_FLOOR_2(x &gt;&gt; 2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_FLOOR_8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &lt; (1ULL &lt;&lt; 4) ? LG_FLOOR_4(x) : 4 + LG_FLOOR_4(x &gt;&gt; 4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_FLOOR_16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &lt; (1ULL &lt;&lt; 8) ? LG_FLOOR_8(x) : 8 + LG_FLOOR_8(x &gt;&gt; 8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_FLOOR_32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &lt; (1ULL &lt;&lt; 16) ? LG_FLOOR_16(x) : 16 + LG_FLOOR_16(x &gt;&gt; 16))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_FLOOR_64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &lt; (1ULL &lt;&lt; 32) ? LG_FLOOR_32(x) : 32 + LG_FLOOR_32(x &gt;&gt; 32))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_FLOOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LG_FLOOR_32((x))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_FLOOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LG_FLOOR_64((x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LG_CEIL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LG_FLOOR(x) + (((x) &amp; ((x) - 1)) == 0 ? 0 : 1))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
