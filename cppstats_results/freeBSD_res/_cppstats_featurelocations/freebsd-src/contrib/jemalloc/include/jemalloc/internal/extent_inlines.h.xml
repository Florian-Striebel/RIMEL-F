<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/jemalloc/include/jemalloc/internal/extent_inlines.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_INTERNAL_EXTENT_INLINES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_INTERNAL_EXTENT_INLINES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/pages.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/prng.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ql.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sz.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_lock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>extent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutex_pool_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_mutex_pool</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_unlock</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>extent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutex_pool_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_mutex_pool</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_lock2</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent1</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>extent1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>extent2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutex_pool_lock2</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_mutex_pool</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>extent1</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>extent2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_unlock2</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent1</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>extent1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>extent2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutex_pool_unlock2</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_mutex_pool</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>extent1</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>extent2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>extent_arena_ind_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator>
<name>EXTENT_BITS_ARENA_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>EXTENT_BITS_ARENA_SHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>arena_ind</name> <operator>&lt;</operator> <name>MALLOCX_ARENA_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>arena_ind</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>arena_t</name> <modifier>*</modifier></type>
<name>extent_arena_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name> <init>= <expr><call><name>extent_arena_ind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>arena_t</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arenas</name><index>[<expr><name>arena_ind</name></expr>]</index></name></expr></argument>, <argument><expr><name>ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>szind_t</name></type>
<name>extent_szind_get_maybe_invalid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name> <init>= <expr><operator>(</operator><name>szind_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <name>EXTENT_BITS_SZIND_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator>
<name>EXTENT_BITS_SZIND_SHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>&lt;=</operator> <name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>szind</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>szind_t</name></type>
<name>extent_szind_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name> <init>= <expr><call><name>extent_szind_get_maybe_invalid</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>&lt;</operator> <name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>szind</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>extent_usize_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sz_index2size</name><argument_list>(<argument><expr><call><name>extent_szind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>extent_binshard_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>binshard</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator>
<name>EXTENT_BITS_BINSHARD_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>EXTENT_BITS_BINSHARD_SHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binshard</name> <operator>&lt;</operator> <name><name>bin_infos</name><index>[<expr><call><name>extent_szind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>n_shards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>binshard</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>extent_sn_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <name>EXTENT_BITS_SN_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator>
<name>EXTENT_BITS_SN_SHIFT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>extent_state_t</name></type>
<name>extent_state_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>extent_state_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <name>EXTENT_BITS_STATE_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator>
<name>EXTENT_BITS_STATE_SHIFT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>extent_zeroed_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <name>EXTENT_BITS_ZEROED_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator>
<name>EXTENT_BITS_ZEROED_SHIFT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>extent_committed_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <name>EXTENT_BITS_COMMITTED_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator>
<name>EXTENT_BITS_COMMITTED_SHIFT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>extent_dumpable_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <name>EXTENT_BITS_DUMPABLE_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator>
<name>EXTENT_BITS_DUMPABLE_SHIFT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>extent_slab_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <name>EXTENT_BITS_SLAB_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator>
<name>EXTENT_BITS_SLAB_SHIFT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>extent_nfree_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <name>EXTENT_BITS_NFREE_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator>
<name>EXTENT_BITS_NFREE_SHIFT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>
<name>extent_base_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name> <operator>==</operator> <call><name>PAGE_ADDR2BASE</name><argument_list>(<argument><expr><name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PAGE_ADDR2BASE</name><argument_list>(<argument><expr><name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>
<name>extent_addr_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name> <operator>==</operator> <call><name>PAGE_ADDR2BASE</name><argument_list>(<argument><expr><name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>extent_size_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_size_esn</name></name> <operator>&amp;</operator> <name>EXTENT_SIZE_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>extent_esn_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_size_esn</name></name> <operator>&amp;</operator> <name>EXTENT_ESN_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>extent_bsize_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>extent</name><operator>-&gt;</operator><name>e_bsize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>
<name>extent_before_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_base_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>PAGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>
<name>extent_last_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_base_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>extent_size_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>PAGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>
<name>extent_past_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_base_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>extent_size_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>arena_slab_data_t</name> <modifier>*</modifier></type>
<name>extent_slab_data_get</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>extent</name><operator>-&gt;</operator><name>e_slab_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>arena_slab_data_t</name> <modifier>*</modifier></type>
<name>extent_slab_data_get_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>extent</name><operator>-&gt;</operator><name>e_slab_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>prof_tctx_t</name> <modifier>*</modifier></type>
<name>extent_prof_tctx_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>prof_tctx_t</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>extent</name><operator>-&gt;</operator><name>e_prof_tctx</name></name></expr></argument>,
<argument><expr><name>ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>nstime_t</name></type>
<name>extent_prof_alloc_time_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>extent</name><operator>-&gt;</operator><name>e_alloc_time</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_arena_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>arena</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>arena_ind_get</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator>
<name>MALLOCX_ARENA_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_ARENA_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>arena_ind</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_ARENA_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_binshard_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>binshard</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binshard</name> <operator>&lt;</operator> <name><name>bin_infos</name><index>[<expr><call><name>extent_szind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>n_shards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_BINSHARD_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>binshard</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_BINSHARD_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_addr_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_addr_randomize</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_base_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alignment</name> <operator>&lt;</operator> <name>PAGE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_range</name> <init>= <expr><name>LG_PAGE</name> <operator>-</operator>
<call><name>lg_floor</name><argument_list>(<argument><expr><call><name>CACHELINE_CEILING</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name> <init>= <expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>prng_lg_range_u64</name><argument_list>(
<argument><expr><call><name>tsd_offset_statep_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>prng_lg_range_zu</name><argument_list>(
<argument><expr><operator>&amp;</operator><call><name>extent_arena_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>offset_state</name></expr></argument>,
<argument><expr><name>lg_range</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>random_offset</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>r</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>LG_PAGE</name> <operator>-</operator>
<name>lg_range</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name> <operator>+</operator>
<name>random_offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ALIGNMENT_ADDR2BASE</name><argument_list>(<argument><expr><name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name><name>extent</name><operator>-&gt;</operator><name>e_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_size_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_SIZE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_size_esn</name></name> <operator>=</operator> <name>size</name> <operator>|</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_size_esn</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_SIZE_MASK</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_esn_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>esn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_size_esn</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_size_esn</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_ESN_MASK</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>esn</name> <operator>&amp;</operator>
<name>EXTENT_ESN_MASK</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_bsize_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bsize</name></name> <operator>=</operator> <name>bsize</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_szind_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>szind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>szind</name> <operator>&lt;=</operator> <name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_SZIND_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>szind</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_SZIND_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_nfree_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfree</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_NFREE_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>nfree</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_NFREE_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_nfree_binshard_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>binshard</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binshard</name> <operator>&lt;</operator> <name><name>bin_infos</name><index>[<expr><call><name>extent_szind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>n_shards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator>
<operator>(</operator><operator>~</operator><name>EXTENT_BITS_NFREE_MASK</name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_BINSHARD_MASK</name><operator>)</operator><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>binshard</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_BINSHARD_SHIFT</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>nfree</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_NFREE_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_nfree_inc</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_NFREE_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_nfree_dec</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_NFREE_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_nfree_sub</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_slab_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>-=</operator> <operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_NFREE_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_sn_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_SN_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>sn</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_SN_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_state_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>extent_state_t</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_STATE_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>state</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_STATE_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_zeroed_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zeroed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_ZEROED_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>zeroed</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_ZEROED_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_committed_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_COMMITTED_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>committed</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_COMMITTED_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_dumpable_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dumpable</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_DUMPABLE_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>dumpable</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_DUMPABLE_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_slab_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>slab</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_SLAB_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>slab</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_SLAB_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_prof_tctx_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>extent</name><operator>-&gt;</operator><name>e_prof_tctx</name></name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_prof_alloc_time_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>nstime_t</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>extent</name><operator>-&gt;</operator><name>e_alloc_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>extent_is_head_get</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maps_coalesce</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <name>EXTENT_BITS_IS_HEAD_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator>
<name>EXTENT_BITS_IS_HEAD_SHIFT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_is_head_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_head</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maps_coalesce</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>=</operator> <operator>(</operator><name><name>extent</name><operator>-&gt;</operator><name>e_bits</name></name> <operator>&amp;</operator> <operator>~</operator><name>EXTENT_BITS_IS_HEAD_MASK</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>is_head</name> <operator>&lt;&lt;</operator> <name>EXTENT_BITS_IS_HEAD_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_init</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>slab</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>szind</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sn</name></decl></parameter>, <parameter><decl><type><name>extent_state_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zeroed</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dumpable</name></decl></parameter>, <parameter><decl><type><name>extent_head_state_t</name></type> <name>is_head</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>addr</name> <operator>==</operator> <call><name>PAGE_ADDR2BASE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>slab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extent_arena_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_addr_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_size_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_slab_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>slab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_szind_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>szind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_sn_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_state_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_zeroed_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>zeroed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_committed_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>committed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_dumpable_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>dumpable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ql_elm_new</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>ql_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>maps_coalesce</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>extent_is_head_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>is_head</name> <operator>==</operator> <name>EXTENT_IS_HEAD</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>:
<expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>config_prof</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>extent_prof_tctx_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_binit</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>extent_arena_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_addr_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_bsize_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_slab_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_szind_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_sn_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_state_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>extent_state_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_zeroed_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_committed_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extent_dumpable_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_list_init</name><parameter_list>(<parameter><decl><type><name>extent_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ql_new</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>extent_t</name> <modifier>*</modifier></type>
<name>extent_list_first</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ql_first</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>extent_t</name> <modifier>*</modifier></type>
<name>extent_list_last</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ql_last</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>ql_link</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_list_append</name><parameter_list>(<parameter><decl><type><name>extent_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ql_tail_insert</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>ql_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_list_prepend</name><parameter_list>(<parameter><decl><type><name>extent_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ql_head_insert</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>ql_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_list_replace</name><parameter_list>(<parameter><decl><type><name>extent_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>to_remove</name></decl></parameter>,
<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>to_insert</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ql_after_insert</name><argument_list>(<argument><expr><name>to_remove</name></expr></argument>, <argument><expr><name>to_insert</name></expr></argument>, <argument><expr><name>ql_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ql_remove</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>to_remove</name></expr></argument>, <argument><expr><name>ql_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>extent_list_remove</name><parameter_list>(<parameter><decl><type><name>extent_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ql_remove</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>ql_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>extent_sn_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>a_sn</name> <init>= <expr><call><name>extent_sn_get</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>b_sn</name> <init>= <expr><call><name>extent_sn_get</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>a_sn</name> <operator>&gt;</operator> <name>b_sn</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>a_sn</name> <operator>&lt;</operator> <name>b_sn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>extent_esn_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>a_esn</name> <init>= <expr><call><name>extent_esn_get</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>b_esn</name> <init>= <expr><call><name>extent_esn_get</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>a_esn</name> <operator>&gt;</operator> <name>b_esn</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>a_esn</name> <operator>&lt;</operator> <name>b_esn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>extent_ad_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>a_addr</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>b_addr</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>a_addr</name> <operator>&gt;</operator> <name>b_addr</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>a_addr</name> <operator>&lt;</operator> <name>b_addr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>extent_ead_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>a_eaddr</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>b_eaddr</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>a_eaddr</name> <operator>&gt;</operator> <name>b_eaddr</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>a_eaddr</name> <operator>&lt;</operator> <name>b_eaddr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>extent_snad_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>extent_sn_comp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>extent_ad_comp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>extent_esnead_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>extent_esn_comp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>extent_ead_comp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
