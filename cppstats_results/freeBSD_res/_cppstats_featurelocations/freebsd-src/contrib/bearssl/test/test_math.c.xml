<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/test/test_math.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gmp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>word_size</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>zero</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bit_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>decode</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>decode_mod</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>reduce</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>decode_reduce</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>encode</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>add</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ctl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>sub</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ctl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>ninv</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>montymul</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>m0i</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>to_monty</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>from_monty</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>m0i</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>modpow</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>m0i</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>int_impl</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int_impl</name></type> <name>i31_impl</name> <init>= <expr><block>{
<expr><literal type="number">31</literal></expr>,
<expr><operator>&amp;</operator><name>br_i31_zero</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_decode</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_decode_mod</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_reduce</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_decode_reduce</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_encode</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_add</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_sub</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_ninv31</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_montymul</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_to_monty</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_from_monty</name></expr>,
<expr><operator>&amp;</operator><name>br_i31_modpow</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int_impl</name></type> <name>i32_impl</name> <init>= <expr><block>{
<expr><literal type="number">32</literal></expr>,
<expr><operator>&amp;</operator><name>br_i32_zero</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_decode</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_decode_mod</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_reduce</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_decode_reduce</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_encode</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_add</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_sub</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_ninv32</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_montymul</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_to_monty</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_from_monty</name></expr>,
<expr><operator>&amp;</operator><name>br_i32_modpow</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int_impl</name> <modifier>*</modifier></type><name>impl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>gmp_randstate_t</name></type> <name>RNG</name></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>rand_prime</name><parameter_list>(<parameter><decl><type><name>mpz_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mpz_urandomb</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>RNG</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_setbit</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_setbit</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpz_probab_prime_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mpz_sub_ui</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpz_divisible_ui_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">65537</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mpz_add_ui</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_z</name><parameter_list>(<parameter><decl><type><name>mpz_t</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zb</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>zlen</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mpz_export</name><argument_list>(<argument><expr><name>zb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zlen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" 00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>zlen</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>zlen</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>zb</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>zb</name></expr></argument>, <argument><expr><name>zlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zlen</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>zlen</name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %02X%02X%02X%02X"</literal></expr></argument>,
<argument><expr><name><name>zb</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>zb</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>zb</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>zb</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_u</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" 00000000 (0, 0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %08lX"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" (%u, %u)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_eqz</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>mpz_t</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>xb</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zb</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>xlen</name></decl>, <decl><type ref="prev"/><name>zlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>good</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xlen</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>encode</name></name><argument_list>(<argument><expr><name>xb</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_export</name><argument_list>(<argument><expr><name>zb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zlen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>good</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xlen</name> <operator>&lt;</operator> <name>zlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>good</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>xlen</name> <operator>&gt;</operator> <name>zlen</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <name>xlen</name></expr>;</init> <condition><expr><name>u</name> <operator>&gt;</operator> <name>zlen</name></expr>;</condition> <incr><expr><name>u</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xb</name><index>[<expr><name>xlen</name> <operator>-</operator> <name>u</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>good</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>good</name> <operator>=</operator> <name>good</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>xb</name> <operator>+</operator> <name>xlen</name> <operator>-</operator> <name>zlen</name></expr></argument>, <argument><expr><name>zb</name></expr></argument>, <argument><expr><name>zlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>good</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Mismatch:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" x = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_u</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ex = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>xlen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>xb</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" z = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_z</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_modint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpz_t</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Test modular integers: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gmp_randinit_mt</name><argument_list>(<argument><expr><name>RNG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_init</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_set_ui</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gmp_randseed</name><argument_list>(<argument><expr><name>RNG</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ep</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ea</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>eb</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ev</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>, <decl><type ref="prev"/><name>alen</name></decl>, <decl><type ref="prev"/><name>blen</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>mp</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ma</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>mb</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>mv</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>mx</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>mt1</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>mt2</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>mt3</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ctl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mp0i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rand_prime</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_urandomm</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>RNG</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_urandomm</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>RNG</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_urandomb</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>RNG</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mpz_sgn</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mpz_set_ui</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mpz_export</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_export</name><argument_list>(<argument><expr><name>ea</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_export</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_export</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_mod</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>ea</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Decode error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ea = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_z</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" p = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_u</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mp0i</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>ninv</name></name><argument_list>(<argument><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_mod</name></name><argument_list>(<argument><expr><name>mb</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Decode error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" eb = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_z</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" p = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_u</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>mb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_mod</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>ea</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_mod</name></name><argument_list>(<argument><expr><name>mb</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctl</name> <operator>|=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>sub</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>sub</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_add</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_mod</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_mod</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>ea</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_mod</name></name><argument_list>(<argument><expr><name>mb</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><call><name><name>impl</name><operator>-&gt;</operator><name>sub</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_sub</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_mod</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_reduce</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_mod</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>reduce</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_mod</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_mod</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>ea</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>to_monty</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_mul_2exp</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>k</name> <operator>+</operator> <name><name>impl</name><operator>-&gt;</operator><name>word_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>/</operator> <name><name>impl</name><operator>-&gt;</operator><name>word_size</name></name><operator>)</operator> <operator>*</operator> <name><name>impl</name><operator>-&gt;</operator><name>word_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_mod</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>from_monty</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>mp0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_mod</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>ea</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_mod</name></name><argument_list>(<argument><expr><name>mb</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>to_monty</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>montymul</name></name><argument_list>(<argument><expr><name>mt1</name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>mp0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_mul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_mod</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>mt1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>decode_mod</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>ea</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>modpow</name></name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>mp0i</name></expr></argument>, <argument><expr><name>mt1</name></expr></argument>, <argument><expr><name>mt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_powm</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_eqz</name><argument_list>(<argument><expr><name>ma</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




























</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mpz_clear</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_clear</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_clear</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_clear</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpz_clear</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void
test_RSA_core(void)
{
int i, j, k;
mpz_t n, e, d, p, q, dp, dq, iq, t1, t2, phi;

printf("Test RSA core: ");
fflush(stdout);

gmp_randinit_mt(RNG);
mpz_init(n);
mpz_init(e);
mpz_init(d);
mpz_init(p);
mpz_init(q);
mpz_init(dp);
mpz_init(dq);
mpz_init(iq);
mpz_init(t1);
mpz_init(t2);
mpz_init(phi);
mpz_set_ui(t1, (unsigned long)time(NULL));
gmp_randseed(RNG, t1);












for (i = 64; i &lt;= 96; i ++) {
rand_prime(p, i);
for (j = i - 33; j &lt;= i + 33; j ++) {
uint32_t mp[40], mq[40], mdp[40], mdq[40], miq[40];





do {
rand_prime(q, j);
} while (mpz_cmp(p, q) == 0);
mpz_mul(n, p, q);
mpz_set_ui(e, 65537);
mpz_sub_ui(t1, p, 1);
mpz_sub_ui(t2, q, 1);
mpz_mul(phi, t1, t2);
mpz_invert(d, e, phi);
mpz_mod(dp, d, t1);
mpz_mod(dq, d, t2);
mpz_invert(iq, q, p);




mp_to_br(mp, mpz_sizeinbase(p, 2), p);
mp_to_br(mq, mpz_sizeinbase(q, 2), q);
mp_to_br(mdp, mpz_sizeinbase(dp, 2), dp);
mp_to_br(mdq, mpz_sizeinbase(dq, 2), dq);
mp_to_br(miq, mp[0], iq);




for (k = 0; k &lt; 10; k ++) {
uint32_t mx[40];

mpz_urandomm(t1, RNG, n);
mpz_powm(t2, t1, e, n);
mp_to_br(mx, mpz_sizeinbase(n, 2), t2);
br_rsa_private_core(mx, mp, mq, mdp, mdq, miq);
check_eqz(mx, t1);
}
}
printf(".");
fflush(stdout);
}

printf(" done.\n");
fflush(stdout);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"===== i32 ======\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>impl</name> <operator>=</operator> <operator>&amp;</operator><name>i32_impl</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_modint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"===== i31 ======\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>impl</name> <operator>=</operator> <operator>&amp;</operator><name>i31_impl</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_modint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
