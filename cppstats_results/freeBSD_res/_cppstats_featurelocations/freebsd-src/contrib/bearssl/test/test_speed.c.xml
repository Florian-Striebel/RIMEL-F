<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/test/test_speed.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_SIZE</name><parameter_list>(<parameter><type><name>cname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>br_ ##cname ##_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED_HASH</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>cname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void test_speed_ ##cname(void) { unsigned char buf[8192]; unsigned char tmp[HASH_SIZE(cname)]; br_ ##cname ##_context mc; int i; long num; memset(buf, 'T', sizeof buf); for (i = 0; i &lt; 10; i ++) { br_ ##cname ##_init(&amp;mc); br_ ##cname ##_update(&amp;mc, buf, sizeof buf); br_ ##cname ##_out(&amp;mc, tmp); } num = 10; for (;;) { clock_t begin, end; double tt; long k; br_ ##cname ##_init(&amp;mc); begin = clock(); for (k = num; k &gt; 0; k --) { br_ ##cname ##_update(&amp;mc, buf, sizeof buf); } end = clock(); br_ ##cname ##_out(&amp;mc, tmp); tt = (double)(end - begin) / CLOCKS_PER_SEC; if (tt &gt;= 2.0) { printf("%-30s %8.2f MB/s\n", #Name, ((double)sizeof buf) * (double)num / (tt * 1000000.0)); fflush(stdout); return; } num &lt;&lt;= 1; } }</cpp:value></cpp:define>








































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_SIZE</name><parameter_list>(<parameter><type><name>cname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>br_ ##cname ##_BLOCK_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED_BLOCKCIPHER_CBC</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>fname</name></type></parameter>, <parameter><type><name>cname</name></type></parameter>, <parameter><type><name>klen</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void test_speed_ ##fname(void) { unsigned char key[klen]; unsigned char buf[8192 - (8192 % BLOCK_SIZE(cname))]; unsigned char iv[BLOCK_SIZE(cname)]; const br_block_cbc ##dir ##_class *vt; br_ ##cname ##_cbc ##dir ##_keys ec; int i; long num; memset(key, 'T', sizeof key); memset(buf, 'P', sizeof buf); memset(iv, 'X', sizeof iv); vt = br_ ##cname ##_cbc ##dir ##_get_vtable(); if (vt == NULL) { printf("%-30s UNAVAILABLE\n", #Name); fflush(stdout); return; } for (i = 0; i &lt; 10; i ++) { vt-&gt;init(&amp;ec.vtable, key, sizeof key); vt-&gt;run(&amp;ec.vtable, iv, buf, sizeof buf); } num = 10; for (;;) { clock_t begin, end; double tt; long k; vt-&gt;init(&amp;ec.vtable, key, sizeof key); begin = clock(); for (k = num; k &gt; 0; k --) { vt-&gt;run(&amp;ec.vtable, iv, buf, sizeof buf); } end = clock(); tt = (double)(end - begin) / CLOCKS_PER_SEC; if (tt &gt;= 2.0) { printf("%-30s %8.2f MB/s\n", #Name, ((double)sizeof buf) * (double)num / (tt * 1000000.0)); fflush(stdout); return; } num &lt;&lt;= 1; } }</cpp:value></cpp:define>
















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED_BLOCKCIPHER_CTR</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>fname</name></type></parameter>, <parameter><type><name>cname</name></type></parameter>, <parameter><type><name>klen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void test_speed_ ##fname(void) { unsigned char key[klen]; unsigned char buf[8192 - (8192 % BLOCK_SIZE(cname))]; unsigned char iv[BLOCK_SIZE(cname) - 4]; const br_block_ctr_class *vt; br_ ##cname ##_ctr_keys ec; int i; long num; memset(key, 'T', sizeof key); memset(buf, 'P', sizeof buf); memset(iv, 'X', sizeof iv); vt = br_ ##cname ##_ctr_get_vtable(); if (vt == NULL) { printf("%-30s UNAVAILABLE\n", #Name); fflush(stdout); return; } for (i = 0; i &lt; 10; i ++) { vt-&gt;init(&amp;ec.vtable, key, sizeof key); vt-&gt;run(&amp;ec.vtable, iv, 1, buf, sizeof buf); } num = 10; for (;;) { clock_t begin, end; double tt; long k; vt-&gt;init(&amp;ec.vtable, key, sizeof key); begin = clock(); for (k = num; k &gt; 0; k --) { vt-&gt;run(&amp;ec.vtable, iv, 1, buf, sizeof buf); } end = clock(); tt = (double)(end - begin) / CLOCKS_PER_SEC; if (tt &gt;= 2.0) { printf("%-30s %8.2f MB/s\n", #Name, ((double)sizeof buf) * (double)num / (tt * 1000000.0)); fflush(stdout); return; } num &lt;&lt;= 1; } }</cpp:value></cpp:define>
















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED_CHACHA20</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>fname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void test_speed_ ##fname(void) { br_chacha20_run bc; unsigned char key[32]; unsigned char buf[8192]; unsigned char iv[12]; int i; long num; bc = br_ ##fname ##_get(); if (bc == 0) { printf("%-30s UNAVAILABLE\n", #Name); fflush(stdout); return; } memset(key, 'T', sizeof key); memset(buf, 'P', sizeof buf); memset(iv, 'X', sizeof iv); for (i = 0; i &lt; 10; i ++) { bc(key, iv, i, buf, sizeof buf); } num = 10; for (;;) { clock_t begin, end; double tt; long k; begin = clock(); for (k = num; k &gt; 0; k --) { bc(key, iv, (uint32_t)k, buf, sizeof buf); } end = clock(); tt = (double)(end - begin) / CLOCKS_PER_SEC; if (tt &gt;= 2.0) { printf("%-30s %8.2f MB/s\n", #Name, ((double)sizeof buf) * (double)num / (tt * 1000000.0)); fflush(stdout); return; } num &lt;&lt;= 1; } }</cpp:value></cpp:define>













































<macro><name>SPEED_HASH</name><argument_list>(<argument>MD5</argument>, <argument>md5</argument>)</argument_list></macro>
<macro><name>SPEED_HASH</name><argument_list>(<argument>SHA-<literal type="number">1</literal></argument>, <argument>sha1</argument>)</argument_list></macro>
<macro><name>SPEED_HASH</name><argument_list>(<argument>SHA-<literal type="number">256</literal></argument>, <argument>sha256</argument>)</argument_list></macro>
<macro><name>SPEED_HASH</name><argument_list>(<argument>SHA-<literal type="number">512</literal></argument>, <argument>sha512</argument>)</argument_list></macro>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_big_cbcenc_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_big_cbcenc_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_big_cbcdec_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_big_cbcdec_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_big_ctr_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_big_ctr_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_big_ctrcbc_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_big_ctrcbc_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_small_cbcenc_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_small_cbcenc_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_small_cbcdec_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_small_cbcdec_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_small_ctr_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_small_ctr_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_small_ctrcbc_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_small_ctrcbc_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_ct_cbcenc_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_ct_cbcenc_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_ct_cbcdec_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_ct_cbcdec_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_ct_ctr_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_ct_ctr_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_ct_ctrcbc_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_ct_ctrcbc_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_ct64_cbcenc_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_ct64_cbcenc_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_ct64_cbcdec_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_ct64_cbcdec_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_ct64_ctr_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_ct64_ctr_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_aes_ct64_ctrcbc_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_aes_ct64_ctrcbc_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_chacha20_ct_get</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_chacha20_ct_run)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED_AES</name><parameter_list>(<parameter><type><name>iname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SPEED_BLOCKCIPHER_CBC(AES-128 CBC encrypt (iname), aes128_ ##iname ##_cbcenc, aes_ ##iname, 16, enc) SPEED_BLOCKCIPHER_CBC(AES-128 CBC decrypt (iname), aes128_ ##iname ##_cbcdec, aes_ ##iname, 16, dec) SPEED_BLOCKCIPHER_CBC(AES-192 CBC encrypt (iname), aes192_ ##iname ##_cbcenc, aes_ ##iname, 24, enc) SPEED_BLOCKCIPHER_CBC(AES-192 CBC decrypt (iname), aes192_ ##iname ##_cbcdec, aes_ ##iname, 24, dec) SPEED_BLOCKCIPHER_CBC(AES-256 CBC encrypt (iname), aes256_ ##iname ##_cbcenc, aes_ ##iname, 32, enc) SPEED_BLOCKCIPHER_CBC(AES-256 CBC decrypt (iname), aes256_ ##iname ##_cbcdec, aes_ ##iname, 32, dec) SPEED_BLOCKCIPHER_CTR(AES-128 CTR (iname), aes128_ ##iname ##_ctr, aes_ ##iname, 16) SPEED_BLOCKCIPHER_CTR(AES-192 CTR (iname), aes192_ ##iname ##_ctr, aes_ ##iname, 24) SPEED_BLOCKCIPHER_CTR(AES-256 CTR (iname), aes256_ ##iname ##_ctr, aes_ ##iname, 32)</cpp:value></cpp:define>










<macro><name>SPEED_AES</name><argument_list>(<argument>big</argument>)</argument_list></macro>
<macro><name>SPEED_AES</name><argument_list>(<argument>small</argument>)</argument_list></macro>
<macro><name>SPEED_AES</name><argument_list>(<argument>ct</argument>)</argument_list></macro>
<macro><name>SPEED_AES</name><argument_list>(<argument>ct64</argument>)</argument_list></macro>
<macro><name>SPEED_AES</name><argument_list>(<argument>x86ni</argument>)</argument_list></macro>
<macro><name>SPEED_AES</name><argument_list>(<argument>pwr8</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_des_tab_cbcenc_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_des_tab_cbcenc_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_des_tab_cbcdec_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_des_tab_cbcdec_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_des_ct_cbcenc_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_des_ct_cbcenc_vtable)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_des_ct_cbcdec_get_vtable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(&amp;br_des_ct_cbcdec_vtable)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED_DES</name><parameter_list>(<parameter><type><name>iname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SPEED_BLOCKCIPHER_CBC(DES CBC encrypt (iname), des_ ##iname ##_cbcenc, des_ ##iname, 8, enc) SPEED_BLOCKCIPHER_CBC(DES CBC decrypt (iname), des_ ##iname ##_cbcdec, des_ ##iname, 8, dec) SPEED_BLOCKCIPHER_CBC(3DES CBC encrypt (iname), 3des_ ##iname ##_cbcenc, des_ ##iname, 24, enc) SPEED_BLOCKCIPHER_CBC(3DES CBC decrypt (iname), 3des_ ##iname ##_cbcdec, des_ ##iname, 24, dec)</cpp:value></cpp:define>





<macro><name>SPEED_DES</name><argument_list>(<argument>tab</argument>)</argument_list></macro>
<macro><name>SPEED_DES</name><argument_list>(<argument>ct</argument>)</argument_list></macro>

<macro><name>SPEED_CHACHA20</name><argument_list>(<argument>ChaCha20 (ct)</argument>, <argument>chacha20_ct</argument>)</argument_list></macro>
<macro><name>SPEED_CHACHA20</name><argument_list>(<argument>ChaCha20 (sse2)</argument>, <argument>chacha20_sse2</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ghash_inner</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>br_ghash</name></type> <name>gh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>h</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>h</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>y</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gh</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gh</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f MB/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><sizeof>sizeof <name>buf</name></sizeof><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>num</name>
<operator>/</operator> <operator>(</operator><name>tt</name> <operator>*</operator> <literal type="number">1000000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ghash_ctmul</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ghash_inner</name><argument_list>(<argument><expr><literal type="string">"GHASH (ctmul)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_ghash_ctmul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ghash_ctmul32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ghash_inner</name><argument_list>(<argument><expr><literal type="string">"GHASH (ctmul32)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_ghash_ctmul32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ghash_ctmul64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ghash_inner</name><argument_list>(<argument><expr><literal type="string">"GHASH (ctmul64)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_ghash_ctmul64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ghash_pclmul</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_ghash</name></type> <name>gh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gh</name> <operator>=</operator> <call><name>br_ghash_pclmul_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gh</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><literal type="string">"GHASH (pclmul)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ghash_inner</name><argument_list>(<argument><expr><literal type="string">"GHASH (pclmul)"</literal></expr></argument>, <argument><expr><name>gh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ghash_pwr8</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_ghash</name></type> <name>gh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gh</name> <operator>=</operator> <call><name>br_ghash_pwr8_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gh</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><literal type="string">"GHASH (pwr8)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ghash_inner</name><argument_list>(<argument><expr><literal type="string">"GHASH (pwr8)"</literal></expr></argument>, <argument><expr><name>gh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>fake_chacha20</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>iv</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<return>return <expr><name>cc</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_poly1305_inner</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>br_poly1305_run</name></type> <name>pl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iv</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>aad</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tag</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="char">'K'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>key</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>iv</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aad</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>aad</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>pl</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>,
<argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof <name>aad</name></sizeof></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fake_chacha20</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>pl</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>,
<argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof <name>aad</name></sizeof></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fake_chacha20</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f MB/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><sizeof>sizeof <name>buf</name></sizeof><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>num</name>
<operator>/</operator> <operator>(</operator><name>tt</name> <operator>*</operator> <literal type="number">1000000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_poly1305_ctmul</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_poly1305_inner</name><argument_list>(<argument><expr><literal type="string">"Poly1305 (ctmul)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_poly1305_ctmul_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_poly1305_ctmul32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_poly1305_inner</name><argument_list>(<argument><expr><literal type="string">"Poly1305 (ctmul32)"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_poly1305_ctmul32_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_poly1305_ctmulq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_poly1305_run</name></type> <name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>br_poly1305_ctmulq_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><literal type="string">"Poly1305 (ctmulq)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>test_speed_poly1305_inner</name><argument_list>(<argument><expr><literal type="string">"Poly1305 (ctmulq)"</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_poly1305_i15</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_poly1305_inner</name><argument_list>(<argument><expr><literal type="string">"Poly1305 (i15)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_poly1305_i15_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_eax_inner</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nonce</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>aad</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tag</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_aes_gen_ctrcbc_keys</name></type> <name>ac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_eax_context</name></type> <name>ec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="char">'K'</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>nonce</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aad</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>aad</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ac</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><sizeof>sizeof <name>nonce</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_aad_inject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof <name>aad</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_flip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_get_tag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ac</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><sizeof>sizeof <name>nonce</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_aad_inject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof <name>aad</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_flip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_eax_get_tag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f MB/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><sizeof>sizeof <name>buf</name></sizeof><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>num</name>
<operator>/</operator> <operator>(</operator><name>tt</name> <operator>*</operator> <literal type="number">1000000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED_EAX</name><parameter_list>(<parameter><type><name>Algo</name></type></parameter>, <parameter><type><name>algo</name></type></parameter>, <parameter><type><name>keysize</name></type></parameter>, <parameter><type><name>impl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void test_speed_eax_ ##algo ##keysize ##_ ##impl(void) { test_speed_eax_inner("EAX " #Algo "-" #keysize "(" #impl ")", br_ ##algo ##_ ##impl ##_ctrcbc_get_vtable() , (keysize) &gt;&gt; 3); }</cpp:value></cpp:define>








<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">128</literal></argument>, <argument>big</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">128</literal></argument>, <argument>small</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">128</literal></argument>, <argument>ct</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">128</literal></argument>, <argument>ct64</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">128</literal></argument>, <argument>x86ni</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">128</literal></argument>, <argument>pwr8</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">192</literal></argument>, <argument>big</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">192</literal></argument>, <argument>small</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">192</literal></argument>, <argument>ct</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">192</literal></argument>, <argument>ct64</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">192</literal></argument>, <argument>x86ni</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">192</literal></argument>, <argument>pwr8</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">256</literal></argument>, <argument>big</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">256</literal></argument>, <argument>small</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">256</literal></argument>, <argument>ct</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">256</literal></argument>, <argument>ct64</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">256</literal></argument>, <argument>x86ni</argument>)</argument_list></macro>
<macro><name>SPEED_EAX</name><argument_list>(<argument>AES</argument>, <argument>aes</argument>, <argument><literal type="number">256</literal></argument>, <argument>pwr8</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_shake_inner</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>security_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_shake_context</name></type> <name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_shake_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>security_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_shake_inject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_shake_inject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SHAKE%-3d (inject) %8.2f MB/s\n"</literal></expr></argument>,
<argument><expr><name>security_level</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><sizeof>sizeof <name>buf</name></sizeof><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>num</name>
<operator>/</operator> <operator>(</operator><name>tt</name> <operator>*</operator> <literal type="number">1000000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>br_shake_flip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_shake_produce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_shake_produce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SHAKE%-3d (produce) %8.2f MB/s\n"</literal></expr></argument>,
<argument><expr><name>security_level</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><sizeof>sizeof <name>buf</name></sizeof><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>num</name>
<operator>/</operator> <operator>(</operator><name>tt</name> <operator>*</operator> <literal type="number">1000000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_shake128</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_shake_inner</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_shake256</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_shake_inner</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>RSA_N</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x23</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x23</literal></expr>,
<expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x5B</literal></expr>,
<expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
<expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xFE</literal></expr>,
<expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x47</literal></expr>,
<expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xDE</literal></expr>,
<expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xF3</literal></expr>,
<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>,
<expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x1D</literal></expr>,
<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
<expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x6B</literal></expr>,
<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x1E</literal></expr>,
<expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xF6</literal></expr>,
<expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7D</literal></expr>,
<expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xDD</literal></expr>,
<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xF5</literal></expr>,
<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x2B</literal></expr>,
<expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xCC</literal></expr>,
<expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xDB</literal></expr>,
<expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
<expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x4C</literal></expr>,
<expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x70</literal></expr>,
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xD6</literal></expr>,
<expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x85</literal></expr>,
<expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x87</literal></expr>,
<expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xCF</literal></expr>,
<expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xDD</literal></expr>,
<expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x6C</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x94</literal></expr>,
<expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x09</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>RSA_E</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>RSA_P</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
<expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x2F</literal></expr>,
<expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
<expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0xA7</literal></expr>,
<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x2F</literal></expr>,
<expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xC8</literal></expr>,
<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
<expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xED</literal></expr>,
<expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
<expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xCF</literal></expr>,
<expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x7B</literal></expr>,
<expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x98</literal></expr>,
<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x61</literal></expr>,
<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xD0</literal></expr>,
<expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x70</literal></expr>,
<expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xFF</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>RSA_Q</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xDB</literal></expr>,
<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA0</literal></expr>,
<expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xD0</literal></expr>,
<expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xB6</literal></expr>,
<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x48</literal></expr>,
<expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xF4</literal></expr>,
<expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x57</literal></expr>,
<expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x2A</literal></expr>,
<expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xDC</literal></expr>,
<expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x6F</literal></expr>,
<expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x6E</literal></expr>,
<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x51</literal></expr>,
<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x1E</literal></expr>,
<expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xF7</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>RSA_DP</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xAA</literal></expr>,
<expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x8A</literal></expr>,
<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0xF2</literal></expr>,
<expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xF2</literal></expr>,
<expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x89</literal></expr>,
<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0xE4</literal></expr>,
<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x63</literal></expr>,
<expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xDA</literal></expr>,
<expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x5E</literal></expr>,
<expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x4E</literal></expr>,
<expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xBA</literal></expr>,
<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xB0</literal></expr>,
<expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xED</literal></expr>,
<expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
<expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x35</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>RSA_DQ</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x7E</literal></expr>,
<expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
<expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xDC</literal></expr>,
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xA9</literal></expr>,
<expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x97</literal></expr>,
<expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x88</literal></expr>,
<expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xA3</literal></expr>,
<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
<expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x8B</literal></expr>,
<expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
<expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xBD</literal></expr>,
<expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x43</literal></expr>,
<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xB4</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x9F</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>RSA_IQ</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
<expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x37</literal></expr>,
<expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x8B</literal></expr>,
<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xA2</literal></expr>,
<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
<expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x50</literal></expr>,
<expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xB5</literal></expr>,
<expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x8D</literal></expr>,
<expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x66</literal></expr>,
<expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xE6</literal></expr>,
<expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x93</literal></expr>,
<expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xD7</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x8D</literal></expr>,
<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
<expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xC4</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>br_rsa_public_key</name></type> <name>RSA_PK</name> <init>= <expr><block>{
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>RSA_N</name></expr>, <expr><sizeof>sizeof <name>RSA_N</name></sizeof></expr>,
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>RSA_E</name></expr>, <expr><sizeof>sizeof <name>RSA_E</name></sizeof></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>br_rsa_private_key</name></type> <name>RSA_SK</name> <init>= <expr><block>{
<expr><literal type="number">2048</literal></expr>,
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>RSA_P</name></expr>, <expr><sizeof>sizeof <name>RSA_P</name></sizeof></expr>,
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>RSA_Q</name></expr>, <expr><sizeof>sizeof <name>RSA_Q</name></sizeof></expr>,
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>RSA_DP</name></expr>, <expr><sizeof>sizeof <name>RSA_DP</name></sizeof></expr>,
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>RSA_DQ</name></expr>, <expr><sizeof>sizeof <name>RSA_DQ</name></sizeof></expr>,
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>RSA_IQ</name></expr>, <expr><sizeof>sizeof <name>RSA_IQ</name></sizeof></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_rsa_inner</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>br_rsa_public</name></type> <name>fpub</name></decl></parameter>, <parameter><decl><type><name>br_rsa_private</name></type> <name>fpriv</name></decl></parameter>, <parameter><decl><type><name>br_rsa_keygen</name></type> <name>kgen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><sizeof>sizeof <name>RSA_N</name></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>br_aesctr_drbg_context</name></type> <name>rng</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>ictr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fpriv</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RSA_SK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fpriv</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RSA_SK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f priv/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fpub</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>RSA_PK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fpub</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>RSA_PK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f pub/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>kgen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s KEYGEN UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>ictr</name> <operator>=</operator> <call><name>br_aes_x86ni_ctr_get_vtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ictr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ictr</name> <operator>=</operator> <call><name>br_aes_pwr8_ctr_get_vtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ictr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_64</name></expr></cpp:if>
<expr_stmt><expr><name>ictr</name> <operator>=</operator> <operator>&amp;</operator><name>br_aes_ct64_ctr_vtable</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ictr</name> <operator>=</operator> <operator>&amp;</operator><name>br_aes_ct_ctr_vtable</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>br_aesctr_drbg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rng</name></expr></argument>, <argument><expr><name>ictr</name></expr></argument>, <argument><expr><literal type="string">"RSA keygen seed"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>br_rsa_private_key</name></type> <name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kbuf</name><index>[<expr><call><name>BR_RSA_KBUF_PRIV_SIZE</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kgen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rng</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sk</name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">10.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f kgen[1024]/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>br_rsa_private_key</name></type> <name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kbuf</name><index>[<expr><call><name>BR_RSA_KBUF_PRIV_SIZE</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kgen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rng</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sk</name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">10.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f kgen[2048]/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_rsa_i15</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_rsa_inner</name><argument_list>(<argument><expr><literal type="string">"RSA i15"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_rsa_i15_public</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_rsa_i15_private</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_rsa_i15_keygen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_rsa_i31</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_rsa_inner</name><argument_list>(<argument><expr><literal type="string">"RSA i31"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_rsa_i31_public</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_rsa_i31_private</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_rsa_i31_keygen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_rsa_i32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_rsa_inner</name><argument_list>(<argument><expr><literal type="string">"RSA i32"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_rsa_i32_public</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_rsa_i32_private</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_rsa_i62</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_rsa_public</name></type> <name>pub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_rsa_private</name></type> <name>priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_rsa_keygen</name></type> <name>kgen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pub</name> <operator>=</operator> <call><name>br_rsa_i62_public_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>br_rsa_i62_private_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kgen</name> <operator>=</operator> <call><name>br_rsa_i62_keygen_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pub</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test_speed_rsa_inner</name><argument_list>(<argument><expr><literal type="string">"RSA i62"</literal></expr></argument>, <argument><expr><name>pub</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>, <argument><expr><name>kgen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><literal type="string">"RSA i62"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_inner_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_curve_def</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bx</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>U</name><index>[<expr><literal type="number">160</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>x</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>n</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>, <decl><type ref="prev"/><name>ulen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>order_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>bx</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode_reduce</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><sizeof>sizeof <name>bx</name></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_encode</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ulen</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>generator_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>generator</name></name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>mul</name></name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>mul</name></name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f mul/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_inner_2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_curve_def</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bx</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>U</name><index>[<expr><literal type="number">160</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>x</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>n</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>order_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>bx</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode_reduce</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><sizeof>sizeof <name>bx</name></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_encode</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>mulgen</name></name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>mulgen</name></name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f mul/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_inner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_curve_def</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_speed_ec_inner_1</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>impl</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%s (FP)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_speed_ec_inner_2</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>impl</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_p256_m15</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC p256_m15"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_p256_m15</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_p256_m31</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC p256_m31"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_p256_m31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_p256_m62</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>br_ec_p256_m62_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC p256_m62"</literal></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><literal type="string">"EC p256_m62"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_p256_m64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>br_ec_p256_m64_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC p256_m64"</literal></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><literal type="string">"EC p256_m64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_prime_i15</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC prime_i15 P-256"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i15</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC prime_i15 P-384"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i15</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp384r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC prime_i15 P-521"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i15</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp521r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_prime_i31</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC prime_i31 P-256"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC prime_i31 P-384"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp384r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC prime_i31 P-521"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp521r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_c25519_i15</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC c25519_i15"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_c25519_i15</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_curve25519</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_c25519_i31</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC c25519_i31"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_c25519_i31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_curve25519</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_c25519_m15</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC c25519_m15"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_c25519_m15</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_curve25519</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_c25519_m31</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC c25519_m31"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_c25519_m31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_curve25519</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_c25519_m62</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>br_ec_c25519_m62_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC c25519_m62"</literal></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_curve25519</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><literal type="string">"EC c25519_m62"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ec_c25519_m64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>br_ec_c25519_m64_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ec_inner</name><argument_list>(<argument><expr><literal type="string">"EC c25519_m64"</literal></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_curve25519</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><literal type="string">"EC c25519_m64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ecdsa_inner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_curve_def</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>,
<parameter><decl><type><name>br_ecdsa_sign</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>br_ecdsa_vrfy</name></type> <name>vrfy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bx</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>U</name><index>[<expr><literal type="number">160</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hv</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sig</name><index>[<expr><literal type="number">160</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>x</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>n</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>, <decl><type ref="prev"/><name>ulen</name></decl>, <decl><type ref="prev"/><name>sig_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ec_private_key</name></type> <name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ec_public_key</name></type> <name>pk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>order_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>bx</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode_reduce</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><sizeof>sizeof <name>bx</name></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_encode</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ulen</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>generator_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>generator</name></name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>mul</name></name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sk</name><operator>.</operator><name>curve</name></name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>curve</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sk</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>bx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sk</name><operator>.</operator><name>xlen</name></name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>curve</name></name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>curve</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>q</name></name> <operator>=</operator> <name>U</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>qlen</name></name> <operator>=</operator> <name>ulen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hv</name></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>hv</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sig_len</name> <operator>=</operator> <call><name>sign</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_sha256_vtable</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sk</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vrfy</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><sizeof>sizeof <name>hv</name></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"self-test sign/verify failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>hv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sign</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_sha256_vtable</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sk</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vrfy</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><sizeof>sizeof <name>hv</name></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>hv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sig_len</name> <operator>=</operator> <call><name>sign</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_sha256_vtable</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sk</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f sign/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>vrfy</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><sizeof>sizeof <name>hv</name></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f verify/s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ecdsa_p256_m15</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ecdsa_inner</name><argument_list>(<argument><expr><literal type="string">"ECDSA m15 P-256"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_p256_m15</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i15_sign_asn1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i15_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ecdsa_p256_m31</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ecdsa_inner</name><argument_list>(<argument><expr><literal type="string">"ECDSA m31 P-256"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_p256_m31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_sign_asn1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ecdsa_p256_m62</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>br_ec_p256_m62_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ecdsa_inner</name><argument_list>(<argument><expr><literal type="string">"ECDSA m62 P-256"</literal></expr></argument>,
<argument><expr><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_sign_asn1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><literal type="string">"ECDSA m62 P-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ecdsa_p256_m64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>br_ec_p256_m64_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ecdsa_inner</name><argument_list>(<argument><expr><literal type="string">"ECDSA m64 P-256"</literal></expr></argument>,
<argument><expr><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_sign_asn1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s UNAVAILABLE\n"</literal></expr></argument>, <argument><expr><literal type="string">"ECDSA m64 P-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ecdsa_i15</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ecdsa_inner</name><argument_list>(<argument><expr><literal type="string">"ECDSA i15 P-256"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i15</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i15_sign_asn1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i15_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_speed_ecdsa_inner</name><argument_list>(<argument><expr><literal type="string">"ECDSA i15 P-384"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i15</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp384r1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i15_sign_asn1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i15_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_speed_ecdsa_inner</name><argument_list>(<argument><expr><literal type="string">"ECDSA i15 P-521"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i15</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp521r1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i15_sign_asn1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i15_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_ecdsa_i31</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_speed_ecdsa_inner</name><argument_list>(<argument><expr><literal type="string">"ECDSA i31 P-256"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp256r1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_sign_asn1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_speed_ecdsa_inner</name><argument_list>(<argument><expr><literal type="string">"ECDSA i31 P-384"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp384r1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_sign_asn1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_speed_ecdsa_inner</name><argument_list>(<argument><expr><literal type="string">"ECDSA i31 P-521"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ec_prime_i31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_secp521r1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_sign_asn1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_speed_i31</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bp</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x2F</literal></expr>,
<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
<expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x9C</literal></expr>,
<expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
<expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x09</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">60</literal> <operator>+</operator> <sizeof>sizeof <name>bp</name></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>p</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>x</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>z</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>uu</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>p0i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>bp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p0i</name> <operator>=</operator> <call><name>br_i31_ninv31</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode_reduce</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode_reduce</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_to_monty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_to_monty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f ops/s\n"</literal></expr></argument>, <argument><expr><literal type="string">"i31 to_monty"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_from_monty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_from_monty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f ops/s\n"</literal></expr></argument>, <argument><expr><literal type="string">"i31 from_monty"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_montymul</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_montymul</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f ops/s\n"</literal></expr></argument>, <argument><expr><literal type="string">"i31 montymul"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_moddiv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p0i</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_moddiv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p0i</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-30s %8.2f ops/s\n"</literal></expr></argument>, <argument><expr><literal type="string">"i31 moddiv"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>/</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static unsigned char P2048[] = {
0xFD, 0xB6, 0xE0, 0x3E, 0x00, 0x49, 0x4C, 0xF0, 0x69, 0x3A, 0xDD, 0x7D,
0xF8, 0xA2, 0x41, 0xB0, 0x6C, 0x67, 0xC5, 0xBA, 0xB8, 0x46, 0x80, 0xF5,
0xBF, 0xAB, 0x98, 0xFC, 0x84, 0x73, 0xA5, 0x63, 0xC9, 0x52, 0x12, 0xDA,
0x4C, 0xC1, 0x5B, 0x9D, 0x8D, 0xDF, 0xCD, 0xFE, 0xC5, 0xAD, 0x5A, 0x6F,
0xDD, 0x02, 0xD9, 0xEC, 0x71, 0xEF, 0xEB, 0xB6, 0x95, 0xED, 0x94, 0x25,
0x0E, 0x63, 0xDD, 0x6A, 0x52, 0xC7, 0x93, 0xAF, 0x85, 0x9D, 0x2C, 0xBE,
0x5C, 0xBE, 0x35, 0xD8, 0xDD, 0x39, 0xEF, 0x1B, 0xB1, 0x49, 0x67, 0xB2,
0x33, 0xC9, 0x7C, 0xE1, 0x51, 0x79, 0x51, 0x59, 0xCA, 0x6E, 0x2A, 0xDF,
0x0D, 0x76, 0x1C, 0xE7, 0xA5, 0xC0, 0x1E, 0x6C, 0x56, 0x3A, 0x32, 0xE5,
0xB5, 0xC5, 0xD4, 0xDB, 0xFE, 0xFF, 0xF8, 0xF2, 0x96, 0xA9, 0xC9, 0x65,
0x59, 0x9E, 0x01, 0x79, 0x9D, 0x38, 0x68, 0x0F, 0xAD, 0x43, 0x3A, 0xD6,
0x84, 0x0A, 0xE2, 0xEF, 0x96, 0xC1, 0x6D, 0x89, 0x74, 0x19, 0x63, 0x82,
0x3B, 0xA0, 0x9C, 0xBA, 0x78, 0xDE, 0xDC, 0xC2, 0xE7, 0xD4, 0xFA, 0xD6,
0x19, 0x21, 0x29, 0xAE, 0x5E, 0xF4, 0x38, 0x81, 0xC6, 0x9E, 0x0E, 0x3C,
0xCD, 0xC0, 0xDC, 0x93, 0x5D, 0xFD, 0x9A, 0x5C, 0xAB, 0x54, 0x1F, 0xFF,
0x9C, 0x12, 0x1B, 0x4C, 0xDF, 0x2D, 0x9C, 0x85, 0xF9, 0x68, 0x15, 0x89,
0x42, 0x9B, 0x6C, 0x45, 0x89, 0x3A, 0xBC, 0xE9, 0x19, 0x91, 0xBE, 0x0C,
0xEF, 0x90, 0xCC, 0xF6, 0xD6, 0xF0, 0x3D, 0x5C, 0xF5, 0xE5, 0x0F, 0x2F,
0x02, 0x8A, 0x83, 0x4B, 0x93, 0x2F, 0x14, 0x12, 0x1F, 0x56, 0x9A, 0x12,
0x58, 0x88, 0xAE, 0x60, 0xB8, 0x5A, 0xE4, 0xA1, 0xBF, 0x4A, 0x81, 0x84,
0xAB, 0xBB, 0xE4, 0xD0, 0x1D, 0x41, 0xD9, 0x0A, 0xAB, 0x1E, 0x47, 0x5B,
0x31, 0xAC, 0x2B, 0x73
};

static unsigned char G2048[] = {
0x02
};

static void
test_speed_modpow(void)
{
uint32_t mx[65], mp[65], me[65], t1[65], t2[65], len;
unsigned char e[64];
int i;
long num;

len = br_int_decode(mp, sizeof mp / sizeof mp[0],
P2048, sizeof P2048);
if (len != 65) {
abort();
}
memset(e, 'P', sizeof e);
if (!br_int_decode(me, sizeof me / sizeof me[0], e, sizeof e)) {
abort();
}
if (!br_modint_decode(mx, mp, G2048, sizeof G2048)) {
abort();
}
for (i = 0; i &lt; 10; i ++) {
br_modint_to_monty(mx, mp);
br_modint_montypow(mx, me, mp, t1, t2);
br_modint_from_monty(mx, mp);
}
num = 10;
for (;;) {
clock_t begin, end;
double tt;
long k;

begin = clock();
for (k = num; k &gt; 0; k --) {
br_modint_to_monty(mx, mp);
br_modint_montypow(mx, me, mp, t1, t2);
br_modint_from_monty(mx, mp);
}
end = clock();
tt = (double)(end - begin) / CLOCKS_PER_SEC;
if (tt &gt;= 2.0) {
printf("%-30s %8.2f exp/s\n", "pow[2048:256]",
(double)num / tt);
fflush(stdout);
return;
}
num &lt;&lt;= 1;
}
}

static void
test_speed_moddiv(void)
{
uint32_t mx[65], my[65], mp[65], t1[65], t2[65], t3[65], len;
unsigned char x[255], y[255];
int i;
long num;

len = br_int_decode(mp, sizeof mp / sizeof mp[0],
P2048, sizeof P2048);
if (len != 65) {
abort();
}
memset(x, 'T', sizeof x);
memset(y, 'P', sizeof y);
if (!br_modint_decode(mx, mp, x, sizeof x)) {
abort();
}
if (!br_modint_decode(my, mp, y, sizeof y)) {
abort();
}
for (i = 0; i &lt; 10; i ++) {
br_modint_div(mx, my, mp, t1, t2, t3);
}
num = 10;
for (;;) {
clock_t begin, end;
double tt;
long k;

begin = clock();
for (k = num; k &gt; 0; k --) {
br_modint_div(mx, my, mp, t1, t2, t3);
}
end = clock();
tt = (double)(end - begin) / CLOCKS_PER_SEC;
if (tt &gt;= 2.0) {
printf("%-30s %8.2f div/s\n", "div[2048]",
(double)num / tt);
fflush(stdout);
return;
}
num &lt;&lt;= 1;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STU</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ test_speed_ ##x, #x }</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>tfns</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>STU</name><argument_list>(<argument><expr><name>md5</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>sha256</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>sha512</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_big_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_big_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_big_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_big_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_big_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_big_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_big_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_big_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_big_ctr</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_small_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_small_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_small_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_small_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_small_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_small_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_small_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_small_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_small_ctr</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_ct_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_ct_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_ct_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_ct_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_ct_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_ct_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_ct_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_ct_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_ct_ctr</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_ct64_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_ct64_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_ct64_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_ct64_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_ct64_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_ct64_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_ct64_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_ct64_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_ct64_ctr</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_x86ni_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_x86ni_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_x86ni_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_x86ni_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_x86ni_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_x86ni_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_x86ni_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_x86ni_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_x86ni_ctr</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_pwr8_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_pwr8_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_pwr8_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_pwr8_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_pwr8_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_pwr8_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes128_pwr8_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes192_pwr8_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>aes256_pwr8_ctr</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>des_tab_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>des_tab_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><literal type="number">3des_tab_cbcenc</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><literal type="number">3des_tab_cbcdec</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>des_ct_cbcenc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>des_ct_cbcdec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><literal type="number">3des_ct_cbcenc</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><literal type="number">3des_ct_cbcdec</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>chacha20_ct</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>chacha20_sse2</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>ghash_ctmul</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ghash_ctmul32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ghash_ctmul64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ghash_pclmul</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ghash_pwr8</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>poly1305_ctmul</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>poly1305_ctmul32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>poly1305_ctmulq</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>poly1305_i15</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes128_big</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes192_big</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes256_big</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes128_small</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes192_small</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes256_small</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes128_ct</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes192_ct</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes256_ct</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes128_ct64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes192_ct64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes256_ct64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes128_x86ni</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes192_x86ni</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes256_x86ni</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes128_pwr8</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes192_pwr8</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>eax_aes256_pwr8</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>shake128</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>shake256</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>STU</name><argument_list>(<argument><expr><name>rsa_i15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>rsa_i31</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>rsa_i32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>rsa_i62</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_prime_i15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_prime_i31</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_p256_m15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_p256_m31</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_p256_m62</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_p256_m64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_c25519_i15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_c25519_i31</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_c25519_m15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_c25519_m31</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_c25519_m62</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ec_c25519_m64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ecdsa_p256_m15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ecdsa_p256_m31</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ecdsa_p256_m62</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ecdsa_p256_m64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ecdsa_i15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>STU</name><argument_list>(<argument><expr><name>ecdsa_i31</name></expr></argument>)</argument_list></call></expr>,

<macro><name>STU</name><argument_list>(<argument>i31</argument>)</argument_list></macro>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>eq_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>s1</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>c1</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <case>case <expr><literal type="char">'_'</literal></expr>:</case> <case>case <expr><literal type="char">'.'</literal></expr>:</case> <case>case <expr><literal type="char">' '</literal></expr>:</case>
<continue>continue;</continue>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></for>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>s2</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>c2</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <case>case <expr><literal type="char">'_'</literal></expr>:</case> <case>case <expr><literal type="char">'.'</literal></expr>:</case> <case>case <expr><literal type="char">' '</literal></expr>:</case>
<continue>continue;</continue>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: testspeed all | name...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"individual test names:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <name>tfns</name></sizeof><operator>)</operator> <operator>/</operator> <operator>(</operator><sizeof>sizeof <name><name>tfns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>tfns</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <name>tfns</name></sizeof><operator>)</operator> <operator>/</operator> <operator>(</operator><sizeof>sizeof <name><name>tfns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>eq_name</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tfns</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>eq_name</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tfns</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>fn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
