<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/test/test_x509.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STR_(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SRCDIRNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRNAME</name></cpp:macro> <cpp:value>STR(SRCDIRNAME) "/test/x509"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRNAME</name></cpp:macro> <cpp:value>"test/x509"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFFILE</name></cpp:macro> <cpp:value>DIRNAME "/alltests.txt"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TIME</name></cpp:macro> <cpp:value>"2016-08-30T18:00:00Z"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>xmalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error: cannot allocate %lu byte(s)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xstrdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>, <name>len</name>;</decl_stmt>
}</block></struct></type> <name>string_builder</name>;</typedef>

<function><type><specifier>static</specifier> <name>string_builder</name> <modifier>*</modifier></type>
<name>SB_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>string_builder</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SB_expand</name><parameter_list>(<parameter><decl><type><name>string_builder</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>extra_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nbuf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>extra_len</name> <operator>&lt;</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extra_len</name> <operator>&gt;</operator> <operator>(</operator><name>nlen</name> <operator>-</operator> <name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name>extra_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nbuf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SB_append_char</name><parameter_list>(<parameter><decl><type><name>string_builder</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SB_expand</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>



























<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>SB_contents</name><parameter_list>(<parameter><decl><type><name>string_builder</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>SB_length</name><parameter_list>(<parameter><decl><type><name>string_builder</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SB_set_length</name><parameter_list>(<parameter><decl><type><name>string_builder</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SB_expand</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SB_reset</name><parameter_list>(<parameter><decl><type><name>string_builder</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SB_set_length</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SB_free</name><parameter_list>(<parameter><decl><type><name>string_builder</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ht_elt_</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_elt_</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>ht_elt</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ht_elt</name> <modifier>*</modifier><modifier>*</modifier></type><name>buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_buckets</name></decl>;</decl_stmt>
}</block></struct></type> <name>HT</name>;</typedef>

<function><type><specifier>static</specifier> <name>HT</name> <modifier>*</modifier></type>
<name>HT_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HT</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>num_buckets</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>num_buckets</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ht_elt</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>num_buckets</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ht</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>hash_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <operator>(</operator><name>hc</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <name>hc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hc</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>hc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>eqstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s1</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>s2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x1</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x2</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>x2</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x2</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>!=</operator> <name>x2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>s1</name> <operator>||</operator> <operator>*</operator><name>s2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>HT_expand</name><parameter_list>(<parameter><decl><type><name>HT</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ht_elt</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_buckets</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>num_buckets</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>n</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_buckets</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>n2</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>new_buckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>n2</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>new_buckets</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ht_elt</name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</init> <condition><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name>f</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>hash_string</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>hc</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>n2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>new_buckets</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_buckets</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <name>new_buckets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>num_buckets</name></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>HT_put</name><parameter_list>(<parameter><decl><type><name>HT</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ht_elt</name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>hash_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>hc</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>num_buckets</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><name>prev</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_value</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>old_value</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>*</operator><name>prev</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>num_buckets</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>HT_expand</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>HT_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HT</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ht_elt</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>hash_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>hc</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>num_buckets</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</init> <condition><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>HT_clear</name><parameter_list>(<parameter><decl><type><name>HT</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_value</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>num_buckets</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ht_elt</name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</init> <condition><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name>f</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>free_value</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_value</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>HT_free</name><parameter_list>(<parameter><decl><type><name>HT</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_value</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>HT_clear</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>free_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>read_all</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>blen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>blen</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>blen</name> <operator>-</operator> <name>ptr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf3</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf3</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<return>return <expr><name>buf3</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>rlen</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>read_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DIRNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>DIRNAME</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>dname</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>DIRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>dname</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not open file '%s'\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>read_all</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"read error on file '%s'\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DIRNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_dec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>acc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_choice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acceptable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>acceptable</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>*</operator><name>acceptable</name> <operator>++</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>month_length</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>base_month_length</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>base_month_length</name><index>[<expr><name>month</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>month</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>year</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">100</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>year</name> <operator>%</operator> <literal type="number">400</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>string_to_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>days</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>, <decl><type ref="prev"/><name>month</name></decl>, <decl><type ref="prev"/><name>day</name></decl>, <decl><type ref="prev"/><name>hour</name></decl>, <decl><type ref="prev"/><name>minute</name></decl>, <decl><type ref="prev"/><name>second</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day_of_year</name></decl>, <decl><type ref="prev"/><name>leaps</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_dec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>year</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_choice</name><argument_list>(<argument><expr><name>s</name> <operator>++</operator></expr></argument>, <argument><expr><literal type="string">"-:/ "</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_dec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>month</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_choice</name><argument_list>(<argument><expr><name>s</name> <operator>++</operator></expr></argument>, <argument><expr><literal type="string">"-:/ "</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_dec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>day</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_choice</name><argument_list>(<argument><expr><name>s</name> <operator>++</operator></expr></argument>, <argument><expr><literal type="string">" T"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_dec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hour</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_choice</name><argument_list>(<argument><expr><name>s</name> <operator>++</operator></expr></argument>, <argument><expr><literal type="string">"-:/ "</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_dec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>minute</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_choice</name><argument_list>(<argument><expr><name>s</name> <operator>++</operator></expr></argument>, <argument><expr><literal type="string">"-:/ "</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_dec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>second</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>++</operator> <operator>!=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>month</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>month</name></expr></argument> &gt;</argument_list></name> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>day_of_year</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>month</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>day_of_year</name> <operator>+=</operator> <call><name>month_length</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>day</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>day</name></expr></argument> &gt;</argument_list></name> <call><name>month_length</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>day_of_year</name> <operator>+=</operator> <operator>(</operator><name>day</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>leaps</name> <operator>=</operator> <operator>(</operator><name>year</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>year</name> <operator>+</operator> <literal type="number">99</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <operator>(</operator><name>year</name> <operator>+</operator> <literal type="number">399</literal><operator>)</operator> <operator>/</operator> <literal type="number">400</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hour</name> <operator>&gt;</operator> <literal type="number">23</literal> <operator>||</operator> <name>minute</name> <operator>&gt;</operator> <literal type="number">59</literal> <operator>||</operator> <name>second</name> <operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>days</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>year</name> <operator>*</operator> <literal type="number">365</literal> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>leaps</name> <operator>+</operator> <name>day_of_year</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>seconds</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>hour</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>minute</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>second</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>conf_delayed_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>conf_linenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>string_builder</name> <modifier>*</modifier></type><name>line_builder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>current_linenum</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>conf_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>conf</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>conf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not open file '%s'\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>conf_delayed_char</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>conf_linenum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line_builder</name> <operator>=</operator> <call><name>SB_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>conf_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>conf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"read error on configuration file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>conf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>line_builder</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SB_free</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_builder</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>conf_next_low</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>conf_delayed_char</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>conf_delayed_char</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>conf_delayed_char</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>conf_linenum</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_ws</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_name_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>conf_next_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lcwb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SB_reset</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>conf_next_low</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_ws</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>conf_next_low</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>





<expr_stmt><expr><name>current_linenum</name> <operator>=</operator> <name>conf_linenum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lcwb</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SB_append_char</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>conf_next_low</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lcwb</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SB_set_length</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>,
<argument><expr><call><name>SB_length</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lcwb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lcwb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SB_append_char</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>SB_length</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>is_ws</name><argument_list>(
<argument><expr><call><name>SB_contents</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>)</argument_list></call><index>[<expr><name>u</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SB_set_length</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>, <argument><expr><name>u</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>






<if_stmt><if>if <condition>(<expr><call><name>SB_length</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>parse_header_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>SB_contents</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>SB_length</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'['</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>v</name> <operator>&amp;&amp;</operator> <call><name>is_ws</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>v</name> <operator>&amp;&amp;</operator> <call><name>is_ws</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name>u</name></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>v</name></expr>;</condition> <incr><expr><name>w</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_name_char</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>u</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_keyvalue</name><parameter_list>(<parameter><decl><type><name>HT</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>SB_contents</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>SB_length</name><argument_list>(<argument><expr><name>line_builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_name_char</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HT_get</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>is_ws</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&gt;=</operator> <name>len</name> <operator>||</operator> <name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>is_ws</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <name>u</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>u</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>len</name> <operator>-</operator> <name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HT_put</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>HT</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>HT</name> <modifier>*</modifier></type><name>trust_anchors</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dn_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>test_trust_anchor</name>;</typedef>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ta_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cert_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>servername</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>key_type_usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ee_key_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hashes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>days</name></decl>, <name>seconds</name>;</decl_stmt>
}</block></struct></type> <name>test_case</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>test_case</name> <modifier>*</modifier></type><name>all_chains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>all_chains_ptr</name></decl>, <decl><type ref="prev"/><name>all_chains_len</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_key</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pk</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown key type: %d\n"</literal></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_trust_anchor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>test_trust_anchor</name> <modifier>*</modifier></type><name>ttc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ttc</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>dn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>key_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ttc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_test_case_contents</name><parameter_list>(<parameter><decl><type><name>test_case</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tc</name><operator>-&gt;</operator><name>ta_names</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>ta_names</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>ta_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tc</name><operator>-&gt;</operator><name>cert_names</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>cert_names</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>cert_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>ee_key_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_value</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>objtype</name></decl></parameter>, <parameter><decl><type><name>HT</name> <modifier>*</modifier></type><name>objdata</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>linenum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>HT_get</name><argument_list>(<argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"missing property '%s' in section '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>parse_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>linenum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acc</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>value</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>value</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid hexadecimal character"</literal>
<literal type="string">" in '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ptr</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>!</operator><name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid hexadecimal value (partial"</literal>
<literal type="string">" byte) in '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>split_names</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>names</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>v</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>is_ws</name><argument_list>(<argument><expr><name><name>value</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_ws</name><argument_list>(<argument><expr><name><name>value</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>u</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>names</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>v</name> <operator>-</operator> <name>u</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name> <operator>+</operator> <name>u</name></expr></argument>, <argument><expr><name>v</name> <operator>-</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>v</name> <operator>-</operator> <name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>names</name><index>[<expr><name>ptr</name></expr>]</index></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>names</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>names</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>names</name><index>[<expr><name>ptr</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>names</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>string_to_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>name</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>name</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>v</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <sizeof>sizeof <name>tmp</name></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"md5"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>br_md5_ID</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>br_sha1_ID</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"sha224"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>br_sha224_ID</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>br_sha256_ID</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"sha384"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>br_sha384_ID</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"sha512"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>br_sha512_ID</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>string_to_curve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>name</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>name</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>v</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <sizeof>sizeof <name>tmp</name></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"p256"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"secp256r1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>BR_EC_secp256r1</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"p384"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"secp384r1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>BR_EC_secp384r1</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"p521"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>eqstring</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"secp521r1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>BR_EC_secp521r1</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_object</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>objtype</name></decl></parameter>, <parameter><decl><type><name>HT</name> <modifier>*</modifier></type><name>objdata</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>linenum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stype</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>stype</name></expr></argument>, <argument><expr><literal type="string">"RSA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>se</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sn</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>se</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name>BR_KEYTYPE_RSA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><literal type="string">"modulus"</literal></expr></argument>, <argument><expr><name>linenum</name></expr></argument>,
<argument><expr><name>sn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><literal type="string">"exponent"</literal></expr></argument>, <argument><expr><name>linenum</name></expr></argument>,
<argument><expr><name>se</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>stype</name></expr></argument>, <argument><expr><literal type="string">"EC"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curve</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"curve"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sq</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curve</name> <operator>=</operator> <call><name>string_to_curve</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curve</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown curve name: '%s'"</literal>
<literal type="string">" (line %ld)\n"</literal></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name>BR_KEYTYPE_EC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name> <operator>=</operator> <name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><literal type="string">"public point"</literal></expr></argument>, <argument><expr><name>linenum</name></expr></argument>,
<argument><expr><name>sq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown key type '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>stype</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HT_put</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"duplicate key: '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><literal type="string">"anchor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dnfile</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tatype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>test_trust_anchor</name> <modifier>*</modifier></type><name>tta</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dnfile</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"DN_file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kname</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tatype</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tta</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>tta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tta</name><operator>-&gt;</operator><name>dn</name></name> <operator>=</operator> <call><name>read_file</name><argument_list>(<argument><expr><name>dnfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tta</name><operator>-&gt;</operator><name>dn_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tta</name><operator>-&gt;</operator><name>key_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>kname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tatype</name></expr></argument>, <argument><expr><literal type="string">"CA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tta</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>BR_X509_TA_CA</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>tatype</name></expr></argument>, <argument><expr><literal type="string">"EE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tta</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"unknown trust anchor type: '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>tatype</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HT_put</name><argument_list>(<argument><expr><name>trust_anchors</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>tta</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"duplicate trust anchor: '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><literal type="string">"chain"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>test_case</name></type> <name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ktype</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kusage</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sstatus</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shashes</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>stime</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ktype</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"keytype"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kusage</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"keyusage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sstatus</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>ta_names</name></name> <operator>=</operator> <call><name>split_names</name><argument_list>(
<argument><expr><call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"anchors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>cert_names</name></name> <operator>=</operator> <call><name>split_names</name><argument_list>(
<argument><expr><call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"chain"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>servername</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><call><name>HT_get</name><argument_list>(<argument><expr><name>objdata</name></expr></argument>, <argument><expr><literal type="string">"servername"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>ktype</name></expr></argument>, <argument><expr><literal type="string">"RSA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>key_type_usage</name></name> <operator>=</operator> <name>BR_KEYTYPE_RSA</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>ktype</name></expr></argument>, <argument><expr><literal type="string">"EC"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>key_type_usage</name></name> <operator>=</operator> <name>BR_KEYTYPE_EC</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"unknown key type: '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>ktype</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>kusage</name></expr></argument>, <argument><expr><literal type="string">"KEYX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>key_type_usage</name></name> <operator>|=</operator> <name>BR_KEYTYPE_KEYX</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstring</name><argument_list>(<argument><expr><name>kusage</name></expr></argument>, <argument><expr><literal type="string">"SIGN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>key_type_usage</name></name> <operator>|=</operator> <name>BR_KEYTYPE_SIGN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"unknown key usage: '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>kusage</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>sstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>.</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>ee_key_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(
<argument><expr><call><name>get_value</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><literal type="string">"eekey"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>ee_key_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>shashes</name> <operator>=</operator> <call><name>HT_get</name><argument_list>(<argument><expr><name>objdata</name></expr></argument>, <argument><expr><literal type="string">"hashes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shashes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>hashes</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>hashes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hns</name> <operator>=</operator> <call><name>split_names</name><argument_list>(<argument><expr><name>shashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hn</name> <operator>=</operator> <name><name>hns</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>string_to_hash</name><argument_list>(<argument><expr><name>hn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"unknown hash function '%s'"</literal>
<literal type="string">" (line %ld)\n"</literal></expr></argument>, <argument><expr><name>hn</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tc</name><operator>.</operator><name>hashes</name></name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>hn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>hns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>stime</name> <operator>=</operator> <call><name>HT_get</name><argument_list>(<argument><expr><name>objdata</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stime</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stime</name> <operator>=</operator> <name>DEFAULT_TIME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>string_to_time</name><argument_list>(<argument><expr><name>stime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tc</name><operator>.</operator><name>days</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tc</name><operator>.</operator><name>seconds</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid time string '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>stime</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>all_chains_ptr</name> <operator>==</operator> <name>all_chains_len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>all_chains_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>all_chains_len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>all_chains</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(
<argument><expr><name>all_chains_len</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>all_chains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>test_case</name> <modifier>*</modifier></type><name>ntc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name>all_chains_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ntc</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>nlen</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>ntc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ntc</name></expr></argument>, <argument><expr><name>all_chains</name></expr></argument>,
<argument><expr><name>all_chains_len</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>all_chains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>all_chains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>all_chains</name> <operator>=</operator> <name>ntc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>all_chains_len</name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>all_chains</name><index>[<expr><name>all_chains_ptr</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name>tc</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown section type '%s' (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_conf_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>objtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HT</name> <modifier>*</modifier></type><name>objdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>objlinenum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>HT_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trust_anchors</name> <operator>=</operator> <call><name>HT_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>all_chains</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>all_chains_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>all_chains_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conf_init</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>objtype</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>objdata</name> <operator>=</operator> <call><name>HT_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>objlinenum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>conf_next_line</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hname</name> <operator>=</operator> <call><name>parse_header_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>objtype</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_object</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>objlinenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HT_clear</name><argument_list>(<argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>xfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>objtype</name> <operator>=</operator> <name>hname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>objlinenum</name> <operator>=</operator> <name>current_linenum</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>objtype</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no current section (line %ld)\n"</literal></expr></argument>,
<argument><expr><name>current_linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_keyvalue</name><argument_list>(<argument><expr><name>objdata</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"wrong configuration, line %ld\n"</literal></expr></argument>,
<argument><expr><name>current_linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>objtype</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_object</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>objlinenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>HT_free</name><argument_list>(<argument><expr><name>objdata</name></expr></argument>, <argument><expr><name>xfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conf_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>impl</name></decl>;</decl_stmt>
}</block> <decl><name><name>hash_impls</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>br_md5_ID</name></expr>, <expr><operator>&amp;</operator><name>br_md5_vtable</name></expr> }</block></expr>,
<expr><block>{ <expr><name>br_sha1_ID</name></expr>, <expr><operator>&amp;</operator><name>br_sha1_vtable</name></expr> }</block></expr>,
<expr><block>{ <expr><name>br_sha224_ID</name></expr>, <expr><operator>&amp;</operator><name>br_sha224_vtable</name></expr> }</block></expr>,
<expr><block>{ <expr><name>br_sha256_ID</name></expr>, <expr><operator>&amp;</operator><name>br_sha256_vtable</name></expr> }</block></expr>,
<expr><block>{ <expr><name>br_sha384_ID</name></expr>, <expr><operator>&amp;</operator><name>br_sha384_vtable</name></expr> }</block></expr>,
<expr><block>{ <expr><name>br_sha512_ID</name></expr>, <expr><operator>&amp;</operator><name>br_sha512_vtable</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>blob</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>eqbigint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b1_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b2_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>b1_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>b1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b1</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_len</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>b2_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>b2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b2</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b2_len</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>b1_len</name> <operator>==</operator> <name>b2_len</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b1_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>eqpkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pk1</name> <operator>==</operator> <name>pk2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pk1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pk2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pk1</name><operator>-&gt;</operator><name>key_type</name></name> <operator>!=</operator> <name><name>pk2</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>pk1</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
<return>return <expr><call><name>eqbigint</name><argument_list>(<argument><expr><name><name>pk1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pk1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr></argument>,
<argument><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>eqbigint</name><argument_list>(<argument><expr><name><name>pk1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>pk1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr></argument>,
<argument><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
<return>return <expr><name><name>pk1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name> <operator>==</operator> <name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name>
<operator>&amp;&amp;</operator> <name><name>pk1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name> <operator>==</operator> <name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name>
<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pk1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>,
<argument><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>pk1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown key type: %d\n"</literal></expr></argument>, <argument><expr><name><name>pk1</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>max_dp_usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>max_rp_usage</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>run_test_case</name><parameter_list>(<parameter><decl><type><name>test_case</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_x509_minimal_context</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>anchors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_anchors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dnhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_certs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blob</name> <modifier>*</modifier></type><name>certs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_x509_pkey</name> <modifier>*</modifier></type><name>ee_pkey_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>ee_pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>usages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>dnhash</name> <operator>=</operator> <operator>&amp;</operator><name>br_sha1_vtable</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_impls</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tc</name><operator>-&gt;</operator><name>hashes</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>hash_impls</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>id</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dnhash</name> <operator>=</operator> <name><name>hash_impls</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>impl</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<for>for <control>(<init><expr><name>num_anchors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tc</name><operator>-&gt;</operator><name>ta_names</name><index>[<expr><name>num_anchors</name></expr>]</index></name></expr>;</condition> <incr><expr><name>num_anchors</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>anchors</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>num_anchors</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>anchors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tc</name><operator>-&gt;</operator><name>ta_names</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>test_trust_anchor</name> <modifier>*</modifier></type><name>tta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_x509_pkey</name> <modifier>*</modifier></type><name>tak</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tta</name> <operator>=</operator> <call><name>HT_get</name><argument_list>(<argument><expr><name>trust_anchors</name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>ta_names</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tta</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no such trust anchor: '%s'\n"</literal></expr></argument>,
<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>ta_names</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tak</name> <operator>=</operator> <call><name>HT_get</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name><name>tta</name><operator>-&gt;</operator><name>key_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tak</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no such public key: '%s'\n"</literal></expr></argument>,
<argument><expr><name><name>tta</name><operator>-&gt;</operator><name>key_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>anchors</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name><name>dn</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>tta</name><operator>-&gt;</operator><name>dn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anchors</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name><name>dn</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>tta</name><operator>-&gt;</operator><name>dn_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anchors</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>tta</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anchors</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>pkey</name> <operator>=</operator> <operator>*</operator><name>tak</name></expr>;</expr_stmt>
</block_content>}</block></for>




<for>for <control>(<init><expr><name>num_certs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tc</name><operator>-&gt;</operator><name>cert_names</name><index>[<expr><name>num_certs</name></expr>]</index></name></expr>;</condition> <incr><expr><name>num_certs</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>certs</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>num_certs</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num_certs</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>certs</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <call><name>read_file</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>cert_names</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>certs</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>ee_key_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ee_pkey_ref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ee_pkey_ref</name> <operator>=</operator> <call><name>HT_get</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>ee_key_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ee_pkey_ref</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no such public key: '%s'\n"</literal></expr></argument>,
<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>ee_key_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>br_x509_minimal_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>dnhash</name></expr></argument>, <argument><expr><name>anchors</name></expr></argument>, <argument><expr><name>num_anchors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_impls</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>hash_impls</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tc</name><operator>-&gt;</operator><name>hashes</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>id</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_x509_minimal_set_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>hash_impls</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>br_x509_minimal_set_rsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><call><name>br_rsa_pkcs1_vrfy_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_x509_minimal_set_ecdsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,
<argument><expr><call><name>br_ec_get_default</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>br_ecdsa_vrfy_asn1_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>br_x509_minimal_set_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>days</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>.</operator><name>dp_stack</name></name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>dp_stack</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xA7C083FE</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>.</operator><name>rp_stack</name></name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>rp_stack</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xA7C083FE</literal></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>start_chain</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num_certs</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>start_cert</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>certs</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>v</name> <operator>&lt;</operator> <name><name>certs</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>certs</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>certs</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>v</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>end_cert</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>end_chain</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ee_pkey</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>get_pkey</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>ee_pkey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ktu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ktu</name> <operator>=</operator> <name><name>ee_pkey</name><operator>-&gt;</operator><name>key_type</name></name> <operator>|</operator> <name>usages</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>key_type_usage</name></name> <operator>!=</operator> <operator>(</operator><name>ktu</name> <operator>&amp;</operator> <name><name>tc</name><operator>-&gt;</operator><name>key_type_usage</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"wrong key type + usage"</literal>
<literal type="string">" (expected 0x%02X, got 0x%02X)\n"</literal></expr></argument>,
<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>key_type_usage</name></name></expr></argument>, <argument><expr><name>ktu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name><name>tc</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"wrong status (got %d, expected %d)\n"</literal></expr></argument>,
<argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>BR_ERR_X509_NOT_TRUSTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ee_pkey</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eqpkey</name><argument_list>(<argument><expr><name>ee_pkey</name></expr></argument>, <argument><expr><name>ee_pkey_ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"wrong EE public key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>.</operator><name>dp_stack</name></name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><name>u</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>u</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>dp_stack</name><index>[<expr><name>u</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xA7C083FE</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_dp_usage</name> <operator>&lt;</operator> <name>u</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_dp_usage</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>.</operator><name>rp_stack</name></name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><name>u</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>u</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>rp_stack</name><index>[<expr><name>u</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xA7C083FE</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_rp_usage</name> <operator>&lt;</operator> <name>u</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_rp_usage</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num_certs</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>certs</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl>;</decl_stmt>
}</block></struct></type> <name>name_element_test</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>name_element_test</name></type> <name><name>names_ref</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"foo"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"bar"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"1234"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"foo"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"foo"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"foo"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"foo"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"foo"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"foo"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"caf\xC3\xA9"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"caf\xC3\xA9"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"caf\xE3\x90\x8C"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"caf\xE3\x90\x8C"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">14</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"\xF0\xA0\xAF\xB4go"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">18</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">19</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">20</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">21</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">22</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"foo"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">23</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{

<expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"f\xEF\xBF\xBDo"</literal></expr>
}</block></expr>,


<expr><block>{
<expr><literal type="number">127</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr>,


<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"foo@bar.com"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"bar@foo.com"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"example.com"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"www.example.com"</literal></expr>
}</block></expr>,
<expr><block>{

<expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"http://www.example.com/"</literal></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_name_elements</name><parameter_list>(<parameter><decl><type><name>br_name_element</name> <modifier>*</modifier></type><name>elts</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>elts</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>elts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_name_extraction</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_x509_minimal_context</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>days</name></decl>, <decl><type ref="prev"/><name>seconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_name_element</name> <modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>good</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Name extraction: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>read_file</name><argument_list>(<argument><expr><literal type="string">"names.crt"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_x509_minimal_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_sha256_vtable</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_impls</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>hash_impls</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_x509_minimal_set_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>hash_impls</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>br_x509_minimal_set_rsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><call><name>br_rsa_pkcs1_vrfy_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_x509_minimal_set_ecdsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,
<argument><expr><call><name>br_ec_get_default</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>br_ecdsa_vrfy_asn1_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_to_time</name><argument_list>(<argument><expr><name>DEFAULT_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>days</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_x509_minimal_set_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>days</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof <name>names_ref</name></sizeof><operator>)</operator> <operator>/</operator> <operator>(</operator><sizeof>sizeof <name><name>names_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>names</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>num_names</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num_names</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>names_ref</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x29</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x2B</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x82</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x37</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>oid</name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>br_x509_minimal_set_name_elements</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>num_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>.</operator><name>dp_stack</name></name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>dp_stack</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xA7C083FE</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>.</operator><name>rp_stack</name></name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>rp_stack</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xA7C083FE</literal></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>start_chain</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>start_cert</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>end_cert</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>end_chain</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>BR_ERR_X509_NOT_TRUSTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"wrong status: %u\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>.</operator><name>dp_stack</name></name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><name>u</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>u</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>dp_stack</name><index>[<expr><name>u</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xA7C083FE</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_dp_usage</name> <operator>&lt;</operator> <name>u</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_dp_usage</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>.</operator><name>rp_stack</name></name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><name>u</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>u</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>rp_stack</name><index>[<expr><name>u</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xA7C083FE</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_rp_usage</name> <operator>&lt;</operator> <name>u</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_rp_usage</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>good</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num_names</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>!=</operator> <name><name>names_ref</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>status</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERR: name %u (id=%d): status=%d, expected=%d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>u</name></expr></argument>, <argument><expr><name><name>names_ref</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>,
<argument><expr><name><name>names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>, <argument><expr><name><name>names_ref</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" obtained:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %02X"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>good</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>names_ref</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>expected</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERR: name %u not zero-terminated\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>good</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name><name>names_ref</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>expected</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERR: name %u (id=%d): wrong value\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>u</name></expr></argument>, <argument><expr><name><name>names_ref</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" expected:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>names_ref</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>expected</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %02X"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" obtained:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %02X"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>good</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>good</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>















<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_name_elements</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>num_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SRCDIRNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>






<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</init><condition>;</condition> <incr><expr><name>c</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sep</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>sep</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dn</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dn</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_chdir</name><argument_list>(<argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>chdir</name><argument_list>(<argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"warning: could not"</literal>
<literal type="string">" set directory to '%s'\n"</literal></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>arg</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>process_conf_file</name><argument_list>(<argument><expr><name>CONFFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_dp_usage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max_rp_usage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>all_chains_ptr</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>run_test_case</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>all_chains</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>test_name_extraction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Maximum data stack usage: %u\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>max_dp_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Maximum return stack usage: %u\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>max_rp_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HT_free</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>free_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HT_free</name><argument_list>(<argument><expr><name>trust_anchors</name></expr></argument>, <argument><expr><name>free_trust_anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>all_chains_ptr</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free_test_case_contents</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>all_chains</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>all_chains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
