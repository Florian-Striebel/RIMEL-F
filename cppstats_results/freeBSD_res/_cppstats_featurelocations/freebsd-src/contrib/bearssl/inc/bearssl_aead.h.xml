<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/inc/bearssl_aead.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_BEARSSL_AEAD_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_BEARSSL_AEAD_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_block.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_hash.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>















































































































































<typedef>typedef <type><name><name>struct</name> <name>br_aead_class_</name></name></type> <name>br_aead_class</name>;</typedef>
<struct>struct <name>br_aead_class_</name> <block>{





<decl_stmt><decl><type><name>size_t</name></type> <name>tag_size</name></decl>;</decl_stmt>



















<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>reset</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aead_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>aad_inject</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aead_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>flip</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aead_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>run</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aead_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_tag</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aead_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>check_tag</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aead_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_tag_trunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aead_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>check_tag_trunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aead_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>


























<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_aead_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>bctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ghash</name></type> <name>gh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>h</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>j0_1</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>y</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>j0_2</name></decl>, <name>jc</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>count_aad</name></decl>, <name>count_ctr</name>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_gcm_context</name>;</typedef>

















<function_decl><type><name>void</name></type> <name>br_gcm_init</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>bctx</name></decl></parameter>, <parameter><decl><type><name>br_ghash</name></type> <name>gh</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>void</name></type> <name>br_gcm_reset</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>br_gcm_aad_inject</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>br_gcm_flip</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>void</name></type> <name>br_gcm_run</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>void</name></type> <name>br_gcm_get_tag</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>uint32_t</name></type> <name>br_gcm_check_tag</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
































<function_decl><type><name>void</name></type> <name>br_gcm_get_tag_trunc</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>uint32_t</name></type> <name>br_gcm_check_tag_trunc</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_aead_class</name></type> <name>br_gcm_vtable</name></decl>;</decl_stmt>





























<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_aead_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>bctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>L2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>L4</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nonce</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>head</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ctr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>cbcmac</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_eax_context</name>;</typedef>









<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>st</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_eax_state</name>;</typedef>















<function_decl><type><name>void</name></type> <name>br_eax_init</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>bctx</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>br_eax_capture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>br_eax_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>void</name></type> <name>br_eax_reset</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>void</name></type> <name>br_eax_reset_pre_aad</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_eax_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>void</name></type> <name>br_eax_reset_post_aad</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_eax_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_eax_aad_inject</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>br_eax_flip</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_eax_get_aad_mac</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>br_eax_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>head</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
















<function_decl><type><name>void</name></type> <name>br_eax_run</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>void</name></type> <name>br_eax_get_tag</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>uint32_t</name></type> <name>br_eax_check_tag</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>
































<function_decl><type><name>void</name></type> <name>br_eax_get_tag_trunc</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>uint32_t</name></type> <name>br_eax_check_tag_trunc</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_aead_class</name></type> <name>br_eax_vtable</name></decl>;</decl_stmt>


































<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>bctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ctr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>cbcmac</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tagmask</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tag_len</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_ccm_context</name>;</typedef>















<function_decl><type><name>void</name></type> <name>br_ccm_init</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>bctx</name></decl></parameter>)</parameter_list>;</function_decl>










































<function_decl><type><name>int</name></type> <name>br_ccm_reset</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nonce_len</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>aad_len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>data_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>br_ccm_aad_inject</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>br_ccm_flip</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>void</name></type> <name>br_ccm_run</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>size_t</name></type> <name>br_ccm_get_tag</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>uint32_t</name></type> <name>br_ccm_check_tag</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
