<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/inc/bearssl_rand.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_BEARSSL_RAND_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_BEARSSL_RAND_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_block.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_hash.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

































































































<typedef>typedef <type><name><name>struct</name> <name>br_prng_class_</name></name></type> <name>br_prng_class</name>;</typedef>
<struct>struct <name>br_prng_class_</name> <block>{




<decl_stmt><decl><type><name>size_t</name></type> <name>context_size</name></decl>;</decl_stmt>




















<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seed_len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>generate</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>update</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seed_len</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>







<typedef>typedef <type><struct>struct <block>{





<decl_stmt><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>K</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>V</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>digest_class</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_hmac_drbg_context</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_prng_class</name></type> <name>br_hmac_drbg_vtable</name></decl>;</decl_stmt>























<function_decl><type><name>void</name></type> <name>br_hmac_drbg_init</name><parameter_list>(<parameter><decl><type><name>br_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>digest_class</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seed_len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_hmac_drbg_generate</name><parameter_list>(<parameter><decl><type><name>br_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_hmac_drbg_update</name><parameter_list>(<parameter><decl><type><name>br_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seed_len</name></decl></parameter>)</parameter_list>;</function_decl>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type>
<name>br_hmac_drbg_get_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>digest_class</name></name></expr>;</return>
</block_content>}</block></function>

















<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>br_prng_seeder</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
















<function_decl><type><name>br_prng_seeder</name></type> <name>br_prng_seeder_system</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>







<typedef>typedef <type><struct>struct <block>{





<decl_stmt><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>br_aes_gen_ctr_keys</name></type> <name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_aesctr_drbg_context</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_prng_class</name></type> <name>br_aesctr_drbg_vtable</name></decl>;</decl_stmt>



















<function_decl><type><name>void</name></type> <name>br_aesctr_drbg_init</name><parameter_list>(<parameter><decl><type><name>br_aesctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>aesctr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seed_len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>br_aesctr_drbg_generate</name><parameter_list>(<parameter><decl><type><name>br_aesctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_aesctr_drbg_update</name><parameter_list>(<parameter><decl><type><name>br_aesctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seed_len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
