<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/inc/bearssl_x509.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_BEARSSL_X509_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_BEARSSL_X509_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_ec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_rsa.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




























































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_OK</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_INVALID_VALUE</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_TRUNCATED</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_EMPTY_CHAIN</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_INNER_TRUNC</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_BAD_TAG_CLASS</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_BAD_TAG_VALUE</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_INDEFINITE_LENGTH</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_EXTRA_ELEMENT</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_UNEXPECTED</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_NOT_CONSTRUCTED</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_NOT_PRIMITIVE</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_PARTIAL_BYTE</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_BAD_BOOLEAN</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_OVERFLOW</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_BAD_DN</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_BAD_TIME</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_UNSUPPORTED</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_LIMIT_EXCEEDED</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_WRONG_KEY_TYPE</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_BAD_SIGNATURE</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_TIME_UNKNOWN</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_EXPIRED</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_DN_MISMATCH</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_BAD_SERVER_NAME</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_CRITICAL_EXTENSION</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_NOT_CA</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_FORBIDDEN_KEY_USAGE</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_WEAK_PUBLIC_KEY</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_X509_NOT_TRUSTED</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>key_type</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>br_rsa_public_key</name></type> <name>rsa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_ec_public_key</name></type> <name>ec</name></decl>;</decl_stmt>
}</block> <decl><name>key</name></decl>;</union>
}</block></struct></type> <name>br_x509_pkey</name>;</typedef>






<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>br_x500_name</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>br_x500_name</name></type> <name>dn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_x509_pkey</name></type> <name>pkey</name></decl>;</decl_stmt>
}</block></struct></type> <name>br_x509_trust_anchor</name>;</typedef>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_X509_TA_CA</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_KEYTYPE_RSA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_KEYTYPE_EC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_KEYTYPE_KEYX</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_KEYTYPE_SIGN</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>




























































<typedef>typedef <type><name><name>struct</name> <name>br_x509_class_</name></name></type> <name>br_x509_class</name>;</typedef>
<struct>struct <name>br_x509_class_</name> <block>{



<decl_stmt><decl><type><name>size_t</name></type> <name>context_size</name></decl>;</decl_stmt>
















<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start_chain</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_name</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start_cert</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>append</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>end_cert</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>unsigned</name></type> (<modifier>*</modifier><name>end_chain</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_pkey</name>)<parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>usages</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>










<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>br_x509_pkey</name></type> <name>pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>usages</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_x509_knownkey_context</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_x509_class</name></type> <name>br_x509_knownkey_vtable</name></decl>;</decl_stmt>














<function_decl><type><name>void</name></type> <name>br_x509_knownkey_init_rsa</name><parameter_list>(<parameter><decl><type><name>br_x509_knownkey_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>usages</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>br_x509_knownkey_init_ec</name><parameter_list>(<parameter><decl><type><name>br_x509_knownkey_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>usages</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>




























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_X509_BUFSIZE_KEY</name></cpp:macro> <cpp:value>520</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_X509_BUFSIZE_SIG</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<typedef>typedef <type><struct>struct <block>{






























<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

}</block></struct></type> <name>br_name_element</name>;</typedef>










<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>br_x509_pkey</name></type> <name>pkey</name></decl>;</decl_stmt>


<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
}</block> <decl><name>cpu</name></decl>;</struct>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>dp_stack</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>rp_stack</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>key_usages</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>days</name></decl>, <name>seconds</name>;</decl_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>cert_length</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_certs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pad</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ee_pkey_data</name><index>[<expr><name>BR_X509_BUFSIZE_KEY</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pkey_data</name><index>[<expr><name>BR_X509_BUFSIZE_KEY</name></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cert_signer_key_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cert_sig_hash_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cert_sig_hash_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>cert_sig</name><index>[<expr><name>BR_X509_BUFSIZE_SIG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cert_sig_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int16_t</name></type> <name>min_rsa_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>trust_anchors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>trust_anchors_num</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>do_mhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_multihash_context</name></type> <name>mhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tbs_hash</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>do_dn_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dn_hash_impl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_hash_compat_context</name></type> <name>dn_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>current_dn_hash</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>next_dn_hash</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>saved_dn_hash</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>br_name_element</name> <modifier>*</modifier></type><name>name_elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_name_elts</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>br_rsa_pkcs1_vrfy</name></type> <name>irsa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ecdsa_vrfy</name></type> <name>iecdsa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>iec</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>br_x509_minimal_context</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_x509_class</name></type> <name>br_x509_minimal_vtable</name></decl>;</decl_stmt>

















<function_decl><type><name>void</name></type> <name>br_x509_minimal_init</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dn_hash_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>trust_anchors</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>trust_anchors_num</name></decl></parameter>)</parameter_list>;</function_decl>


















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_x509_minimal_set_hash</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>br_multihash_setimpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_x509_minimal_set_rsa</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>br_rsa_pkcs1_vrfy</name></type> <name>irsa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>irsa</name></name> <operator>=</operator> <name>irsa</name></expr>;</expr_stmt>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_x509_minimal_set_ecdsa</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>iec</name></decl></parameter>, <parameter><decl><type><name>br_ecdsa_vrfy</name></type> <name>iecdsa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>iecdsa</name></name> <operator>=</operator> <name>iecdsa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>iec</name></name> <operator>=</operator> <name>iec</name></expr>;</expr_stmt>
</block_content>}</block></function>












<function_decl><type><name>void</name></type> <name>br_x509_minimal_init_full</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>trust_anchors</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>trust_anchors_num</name></decl></parameter>)</parameter_list>;</function_decl>


























<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_x509_minimal_set_time</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>days</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>days</name></name> <operator>=</operator> <name>days</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>seconds</name></name> <operator>=</operator> <name>seconds</name></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_x509_minimal_set_minrsa</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>byte_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>min_rsa_size</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>byte_length</name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_x509_minimal_set_name_elements</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>br_name_element</name> <modifier>*</modifier></type><name>elts</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_elts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>name_elts</name></name> <operator>=</operator> <name>elts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_name_elts</name></name> <operator>=</operator> <name>num_elts</name></expr>;</expr_stmt>
</block_content>}</block></function>










<typedef>typedef <type><struct>struct <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>br_x509_pkey</name></type> <name>pkey</name></decl>;</decl_stmt>


<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
}</block> <decl><name>cpu</name></decl>;</struct>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>dp_stack</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>rp_stack</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pad</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>decoded</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>notbefore_days</name></decl>, <name>notbefore_seconds</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>notafter_days</name></decl>, <name>notafter_seconds</name>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>isCA</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>copy_dn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>append_dn_ctx</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>append_dn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pkey_data</name><index>[<expr><name>BR_X509_BUFSIZE_KEY</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>signer_key_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>signer_hash_id</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>br_x509_decoder_context</name>;</typedef>














<function_decl><type><name>void</name></type> <name>br_x509_decoder_init</name><parameter_list>(<parameter><decl><type><name>br_x509_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>append_dn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>append_dn_ctx</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>br_x509_decoder_push</name><parameter_list>(<parameter><decl><type><name>br_x509_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type>
<name>br_x509_decoder_get_pkey</name><parameter_list>(<parameter><decl><type><name>br_x509_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pkey</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>br_x509_decoder_last_error</name><parameter_list>(<parameter><decl><type><name>br_x509_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>BR_ERR_X509_TRUNCATED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>br_x509_decoder_isCA</name><parameter_list>(<parameter><decl><type><name>br_x509_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>isCA</name></name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>br_x509_decoder_get_signer_key_type</name><parameter_list>(<parameter><decl><type><name>br_x509_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>signer_key_type</name></name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>br_x509_decoder_get_signer_hash_id</name><parameter_list>(<parameter><decl><type><name>br_x509_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>signer_hash_id</name></name></expr>;</return>
</block_content>}</block></function>




<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>data_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>br_x509_certificate</name>;</typedef>










<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<union>union <block>{
<decl_stmt><decl><type><name>br_rsa_private_key</name></type> <name>rsa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ec_private_key</name></type> <name>ec</name></decl>;</decl_stmt>
}</block> <decl><name>key</name></decl>;</union>


<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
}</block> <decl><name>cpu</name></decl>;</struct>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>dp_stack</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>rp_stack</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pad</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>key_type</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key_data</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>BR_X509_BUFSIZE_SIG</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_skey_decoder_context</name>;</typedef>






<function_decl><type><name>void</name></type> <name>br_skey_decoder_init</name><parameter_list>(<parameter><decl><type><name>br_skey_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>br_skey_decoder_push</name><parameter_list>(<parameter><decl><type><name>br_skey_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>br_skey_decoder_last_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_skey_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>BR_ERR_X509_TRUNCATED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>br_skey_decoder_key_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_skey_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>key_type</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type>
<name>br_skey_decoder_get_rsa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_skey_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>BR_KEYTYPE_RSA</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type>
<name>br_skey_decoder_get_ec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_skey_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>BR_KEYTYPE_EC</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
































<function_decl><type><name>size_t</name></type> <name>br_encode_rsa_raw_der</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>;</function_decl>
































<function_decl><type><name>size_t</name></type> <name>br_encode_rsa_pkcs8_der</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>size_t</name></type> <name>br_encode_ec_raw_der</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>;</function_decl>






























<function_decl><type><name>size_t</name></type> <name>br_encode_ec_pkcs8_der</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ENCODE_PEM_RSA_RAW</name></cpp:macro> <cpp:value>"RSA PRIVATE KEY"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ENCODE_PEM_EC_RAW</name></cpp:macro> <cpp:value>"EC PRIVATE KEY"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ENCODE_PEM_PKCS8</name></cpp:macro> <cpp:value>"PRIVATE KEY"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
