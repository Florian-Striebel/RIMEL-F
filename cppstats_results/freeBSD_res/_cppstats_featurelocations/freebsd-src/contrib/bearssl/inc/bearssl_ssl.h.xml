<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/inc/bearssl_ssl.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_BEARSSL_SSL_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_BEARSSL_SSL_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_block.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_hmac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_prf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_rand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_x509.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSL_BUFSIZE_INPUT</name></cpp:macro> <cpp:value>(16384 + 325)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSL_BUFSIZE_OUTPUT</name></cpp:macro> <cpp:value>(16384 + 85)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSL_BUFSIZE_MONO</name></cpp:macro> <cpp:value>BR_SSL_BUFSIZE_INPUT</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSL_BUFSIZE_BIDI</name></cpp:macro> <cpp:value>(BR_SSL_BUFSIZE_INPUT + BR_SSL_BUFSIZE_OUTPUT)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSL30</name></cpp:macro> <cpp:value>0x0300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS10</name></cpp:macro> <cpp:value>0x0301</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS11</name></cpp:macro> <cpp:value>0x0302</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS12</name></cpp:macro> <cpp:value>0x0303</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_PARAM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_STATE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_UNSUPPORTED_VERSION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_VERSION</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_LENGTH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_TOO_LARGE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_MAC</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_NO_RANDOM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_UNKNOWN_TYPE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_UNEXPECTED</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_CCS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_ALERT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_HANDSHAKE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_OVERSIZED_ID</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_CIPHER_SUITE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_COMPRESSION</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_FRAGLEN</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_SECRENEG</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_EXTRA_EXTENSION</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_SNI</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_HELLO_DONE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_LIMIT_EXCEEDED</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_FINISHED</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_RESUME_MISMATCH</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_INVALID_ALGORITHM</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_BAD_SIGNATURE</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_WRONG_KEY_USAGE</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_NO_CLIENT_AUTH</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_IO</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_RECV_FATAL_ALERT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ERR_SEND_FATAL_ALERT</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>













<typedef>typedef <type><name><name>struct</name> <name>br_sslrec_in_class_</name></name></type> <name>br_sslrec_in_class</name>;</typedef>
<struct>struct <name>br_sslrec_in_class_</name> <block>{



<decl_stmt><decl><type><name>size_t</name></type> <name>context_size</name></decl>;</decl_stmt>











<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>check_length</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_class</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>record_len</name></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>decrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>











<typedef>typedef <type><name><name>struct</name> <name>br_sslrec_out_class_</name></name></type> <name>br_sslrec_out_class</name>;</typedef>
<struct>struct <name>br_sslrec_out_class_</name> <block>{



<decl_stmt><decl><type><name>size_t</name></type> <name>context_size</name></decl>;</decl_stmt>


















<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>max_plaintext</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_class</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>encrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>plaintext</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>







<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
}</block></struct></type> <name>br_sslrec_out_clear_context</name>;</typedef>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_sslrec_out_class</name></type> <name>br_sslrec_out_clear_vtable</name></decl>;</decl_stmt>












<typedef>typedef <type><name><name>struct</name> <name>br_sslrec_in_cbc_class_</name></name></type> <name>br_sslrec_in_cbc_class</name>;</typedef>
<struct>struct <name>br_sslrec_in_cbc_class_</name> <block>{



<decl_stmt><decl><type><name>br_sslrec_in_class</name></type> <name>inner</name></decl>;</decl_stmt>
















<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_cbc_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcdec_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bc_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bc_key_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mac_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_out_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>










<typedef>typedef <type><name><name>struct</name> <name>br_sslrec_out_cbc_class_</name></name></type> <name>br_sslrec_out_cbc_class</name>;</typedef>
<struct>struct <name>br_sslrec_out_cbc_class_</name> <block>{



<decl_stmt><decl><type><name>br_sslrec_out_class</name></type> <name>inner</name></decl>;</decl_stmt>
















<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_cbc_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcenc_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bc_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bc_key_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mac_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_out_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>








<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_cbc_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>seq</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_cbcdec_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_aes_gen_cbcdec_keys</name></type> <name>aes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_des_gen_cbcdec_keys</name></type> <name>des</name></decl>;</decl_stmt>
}</block> <decl><name>bc</name></decl>;</union>
<decl_stmt><decl><type><name>br_hmac_key_context</name></type> <name>mac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mac_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>explicit_IV</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_sslrec_in_cbc_context</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_sslrec_in_cbc_class</name></type> <name>br_sslrec_in_cbc_vtable</name></decl>;</decl_stmt>








<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_cbc_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>seq</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_cbcenc_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_aes_gen_cbcenc_keys</name></type> <name>aes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_des_gen_cbcenc_keys</name></type> <name>des</name></decl>;</decl_stmt>
}</block> <decl><name>bc</name></decl>;</union>
<decl_stmt><decl><type><name>br_hmac_key_context</name></type> <name>mac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mac_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>explicit_IV</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_sslrec_out_cbc_context</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_sslrec_out_cbc_class</name></type> <name>br_sslrec_out_cbc_vtable</name></decl>;</decl_stmt>











<typedef>typedef <type><name><name>struct</name> <name>br_sslrec_in_gcm_class_</name></name></type> <name>br_sslrec_in_gcm_class</name>;</typedef>
<struct>struct <name>br_sslrec_in_gcm_class_</name> <block>{



<decl_stmt><decl><type><name>br_sslrec_in_class</name></type> <name>inner</name></decl>;</decl_stmt>













<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_gcm_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>,
<parameter><decl><type><name>br_ghash</name></type> <name>gh_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>









<typedef>typedef <type><name><name>struct</name> <name>br_sslrec_out_gcm_class_</name></name></type> <name>br_sslrec_out_gcm_class</name>;</typedef>
<struct>struct <name>br_sslrec_out_gcm_class_</name> <block>{



<decl_stmt><decl><type><name>br_sslrec_out_class</name></type> <name>inner</name></decl>;</decl_stmt>













<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_gcm_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>,
<parameter><decl><type><name>br_ghash</name></type> <name>gh_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>









<typedef>typedef <type><struct>struct <block>{

<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>gen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_gcm_class</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_gcm_class</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
}</block> <decl><name>vtable</name></decl>;</union>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>seq</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_aes_gen_ctr_keys</name></type> <name>aes</name></decl>;</decl_stmt>
}</block> <decl><name>bc</name></decl>;</union>
<decl_stmt><decl><type><name>br_ghash</name></type> <name>gh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>h</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_sslrec_gcm_context</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_sslrec_in_gcm_class</name></type> <name>br_sslrec_in_gcm_vtable</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_sslrec_out_gcm_class</name></type> <name>br_sslrec_out_gcm_vtable</name></decl>;</decl_stmt>











<typedef>typedef <type><name><name>struct</name> <name>br_sslrec_in_chapol_class_</name></name></type> <name>br_sslrec_in_chapol_class</name>;</typedef>
<struct>struct <name>br_sslrec_in_chapol_class_</name> <block>{



<decl_stmt><decl><type><name>br_sslrec_in_class</name></type> <name>inner</name></decl>;</decl_stmt>












<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_chapol_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>br_chacha20_run</name></type> <name>ichacha</name></decl></parameter>,
<parameter><decl><type><name>br_poly1305_run</name></type> <name>ipoly</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>









<typedef>typedef <type><name><name>struct</name> <name>br_sslrec_out_chapol_class_</name></name></type> <name>br_sslrec_out_chapol_class</name>;</typedef>
<struct>struct <name>br_sslrec_out_chapol_class_</name> <block>{



<decl_stmt><decl><type><name>br_sslrec_out_class</name></type> <name>inner</name></decl>;</decl_stmt>












<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_chapol_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>br_chacha20_run</name></type> <name>ichacha</name></decl></parameter>,
<parameter><decl><type><name>br_poly1305_run</name></type> <name>ipoly</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>









<typedef>typedef <type><struct>struct <block>{

<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>gen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_chapol_class</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_chapol_class</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
}</block> <decl><name>vtable</name></decl>;</union>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_chacha20_run</name></type> <name>ichacha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_poly1305_run</name></type> <name>ipoly</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_sslrec_chapol_context</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_sslrec_in_chapol_class</name></type> <name>br_sslrec_in_chapol_vtable</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_sslrec_out_chapol_class</name></type> <name>br_sslrec_out_chapol_vtable</name></decl>;</decl_stmt>











<typedef>typedef <type><name><name>struct</name> <name>br_sslrec_in_ccm_class_</name></name></type> <name>br_sslrec_in_ccm_class</name>;</typedef>
<struct>struct <name>br_sslrec_in_ccm_class_</name> <block>{



<decl_stmt><decl><type><name>br_sslrec_in_class</name></type> <name>inner</name></decl>;</decl_stmt>













<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_ccm_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>









<typedef>typedef <type><name><name>struct</name> <name>br_sslrec_out_ccm_class_</name></name></type> <name>br_sslrec_out_ccm_class</name>;</typedef>
<struct>struct <name>br_sslrec_out_ccm_class_</name> <block>{



<decl_stmt><decl><type><name>br_sslrec_out_class</name></type> <name>inner</name></decl>;</decl_stmt>













<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_ccm_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>









<typedef>typedef <type><struct>struct <block>{

<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>gen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_ccm_class</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_ccm_class</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
}</block> <decl><name>vtable</name></decl>;</union>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>seq</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_aes_gen_ctrcbc_keys</name></type> <name>aes</name></decl>;</decl_stmt>
}</block> <decl><name>bc</name></decl>;</union>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tag_len</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_sslrec_ccm_context</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_sslrec_in_ccm_class</name></type> <name>br_sslrec_in_ccm_vtable</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_sslrec_out_ccm_class</name></type> <name>br_sslrec_out_ccm_vtable</name></decl>;</decl_stmt>






<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>session_id</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>session_id_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cipher_suite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>master_secret</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>br_ssl_session_parameters</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_MAX_CIPHER_SUITES</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ibuf</name></decl>, <modifier>*</modifier><name>obuf</name>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ibuf_len</name></decl>, <name>obuf_len</name>;</decl_stmt>







<decl_stmt><decl><type><name>uint16_t</name></type> <name>max_frag_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>log_max_frag_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>peer_log_max_frag_len</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>ixa</name></decl>, <name>ixb</name>, <name>ixc</name>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>oxa</name></decl>, <name>oxb</name>, <name>oxc</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>iomode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>incrypt</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>shutdown_recv</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>record_type_in</name></decl>, <name>record_type_out</name>;</decl_stmt>












<decl_stmt><decl><type><name>uint16_t</name></type> <name>version_in</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint16_t</name></type> <name>version_out</name></decl>;</decl_stmt>




<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslrec_in_cbc_context</name></type> <name>cbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslrec_gcm_context</name></type> <name>gcm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslrec_chapol_context</name></type> <name>chapol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslrec_ccm_context</name></type> <name>ccm</name></decl>;</decl_stmt>
}</block> <decl><name>in</name></decl>;</union>
<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslrec_out_clear_context</name></type> <name>clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslrec_out_cbc_context</name></type> <name>cbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslrec_gcm_context</name></type> <name>gcm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslrec_chapol_context</name></type> <name>chapol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslrec_ccm_context</name></type> <name>ccm</name></decl>;</decl_stmt>
}</block> <decl><name>out</name></decl>;</union>








<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>application_data</name></decl>;</decl_stmt>












<decl_stmt><decl><type><name>br_hmac_drbg_context</name></type> <name>rng</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rng_init_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rng_os_rand_done</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint16_t</name></type> <name>version_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>version_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>suites_buf</name><index>[<expr><name>BR_MAX_CIPHER_SUITES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>suites_num</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>char</name></type> <name><name>server_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>client_random</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>server_random</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ssl_session_parameters</name></type> <name>session</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ecdhe_curve</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ecdhe_point</name><index>[<expr><literal type="number">133</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ecdhe_point_len</name></decl>;</decl_stmt>











<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>reneg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>saved_finished</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>








<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
}</block> <decl><name>cpu</name></decl>;</struct>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>dp_stack</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>rp_stack</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pad</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hbuf_in</name></decl>, <modifier>*</modifier><name>hbuf_out</name>, <modifier>*</modifier><name>saved_hbuf_out</name>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hlen_in</name></decl>, <name>hlen_out</name>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hsrun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>










<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>action</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>alert</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>close_received</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>br_multihash_context</name></type> <name>mhash</name></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>x509ctx</name></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chain_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cert_cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cert_len</name></decl>;</decl_stmt>


















<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>protocol_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>protocol_names_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>selected_protocol</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>br_tls_prf_impl</name></type> <name>prf10</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_tls_prf_impl</name></type> <name>prf_sha256</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_tls_prf_impl</name></type> <name>prf_sha384</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_cbcenc_class</name> <modifier>*</modifier></type><name>iaes_cbcenc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_cbcdec_class</name> <modifier>*</modifier></type><name>iaes_cbcdec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>iaes_ctr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier></type><name>iaes_ctrcbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_cbcenc_class</name> <modifier>*</modifier></type><name>ides_cbcenc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_cbcdec_class</name> <modifier>*</modifier></type><name>ides_cbcdec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ghash</name></type> <name>ighash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_chacha20_run</name></type> <name>ichacha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_poly1305_run</name></type> <name>ipoly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_cbc_class</name> <modifier>*</modifier></type><name>icbc_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_cbc_class</name> <modifier>*</modifier></type><name>icbc_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_gcm_class</name> <modifier>*</modifier></type><name>igcm_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_gcm_class</name> <modifier>*</modifier></type><name>igcm_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_chapol_class</name> <modifier>*</modifier></type><name>ichapol_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_chapol_class</name> <modifier>*</modifier></type><name>ichapol_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_ccm_class</name> <modifier>*</modifier></type><name>iccm_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_ccm_class</name> <modifier>*</modifier></type><name>iccm_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>iec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_rsa_pkcs1_vrfy</name></type> <name>irsavrfy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ecdsa_vrfy</name></type> <name>iecdsa</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_ssl_engine_context</name>;</typedef>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>br_ssl_engine_get_flags</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>flags</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_all_flags</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_add_flags</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_remove_flags</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_OPT_ENFORCE_SERVER_PREFERENCES</name></cpp:macro> <cpp:value>((uint32_t)1 &lt;&lt; 0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_OPT_NO_RENEGOTIATION</name></cpp:macro> <cpp:value>((uint32_t)1 &lt;&lt; 1)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_OPT_TOLERATE_NO_CLIENT_AUTH</name></cpp:macro> <cpp:value>((uint32_t)1 &lt;&lt; 2)</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_OPT_FAIL_ON_ALPN_MISMATCH</name></cpp:macro> <cpp:value>((uint32_t)1 &lt;&lt; 3)</cpp:value></cpp:define>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_versions</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>version_min</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>version_min</name></name> <operator>=</operator> <name>version_min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>version_max</name></name> <operator>=</operator> <name>version_max</name></expr>;</expr_stmt>
</block_content>}</block></function>




















<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_suites</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>suites</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suites_num</name></decl></parameter>)</parameter_list>;</function_decl>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_x509</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>x509ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>x509ctx</name></name> <operator>=</operator> <name>x509ctx</name></expr>;</expr_stmt>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_protocol_names</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>protocol_names</name></name> <operator>=</operator> <name>names</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>protocol_names_num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>br_ssl_engine_get_selected_protocol</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>selected_protocol</name></name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>k</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>k</name> <operator>==</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>protocol_names</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_hash</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>br_multihash_setimpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type>
<name>br_ssl_engine_get_hash</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>br_multihash_getimpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_prf10</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>br_tls_prf_impl</name></type> <name>impl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>prf10</name></name> <operator>=</operator> <name>impl</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_prf_sha256</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>br_tls_prf_impl</name></type> <name>impl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>prf_sha256</name></name> <operator>=</operator> <name>impl</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_prf_sha384</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>br_tls_prf_impl</name></type> <name>impl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>prf_sha384</name></name> <operator>=</operator> <name>impl</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_aes_cbc</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcenc_class</name> <modifier>*</modifier></type><name>impl_enc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcdec_class</name> <modifier>*</modifier></type><name>impl_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_cbcenc</name></name> <operator>=</operator> <name>impl_enc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_cbcdec</name></name> <operator>=</operator> <name>impl_dec</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_default_aes_cbc</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_aes_ctr</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_ctr</name></name> <operator>=</operator> <name>impl</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_default_aes_gcm</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_des_cbc</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcenc_class</name> <modifier>*</modifier></type><name>impl_enc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcdec_class</name> <modifier>*</modifier></type><name>impl_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>ides_cbcenc</name></name> <operator>=</operator> <name>impl_enc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>ides_cbcdec</name></name> <operator>=</operator> <name>impl_dec</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_default_des_cbc</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_ghash</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>br_ghash</name></type> <name>impl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>ighash</name></name> <operator>=</operator> <name>impl</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_chacha20</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>br_chacha20_run</name></type> <name>ichacha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>ichacha</name></name> <operator>=</operator> <name>ichacha</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_poly1305</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>br_poly1305_run</name></type> <name>ipoly</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>ipoly</name></name> <operator>=</operator> <name>ipoly</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_default_chapol</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_aes_ctrcbc</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_ctrcbc</name></name> <operator>=</operator> <name>impl</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_default_aes_ccm</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_cbc</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_cbc_class</name> <modifier>*</modifier></type><name>impl_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_cbc_class</name> <modifier>*</modifier></type><name>impl_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>icbc_in</name></name> <operator>=</operator> <name>impl_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>icbc_out</name></name> <operator>=</operator> <name>impl_out</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_gcm</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_gcm_class</name> <modifier>*</modifier></type><name>impl_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_gcm_class</name> <modifier>*</modifier></type><name>impl_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>igcm_in</name></name> <operator>=</operator> <name>impl_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>igcm_out</name></name> <operator>=</operator> <name>impl_out</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_ccm</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_ccm_class</name> <modifier>*</modifier></type><name>impl_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_ccm_class</name> <modifier>*</modifier></type><name>impl_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>iccm_in</name></name> <operator>=</operator> <name>impl_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>iccm_out</name></name> <operator>=</operator> <name>impl_out</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_chapol</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_chapol_class</name> <modifier>*</modifier></type><name>impl_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_chapol_class</name> <modifier>*</modifier></type><name>impl_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>ichapol_in</name></name> <operator>=</operator> <name>impl_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>ichapol_out</name></name> <operator>=</operator> <name>impl_out</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_ec</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>iec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>iec</name></name> <operator>=</operator> <name>iec</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_default_ec</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type>
<name>br_ssl_engine_get_ec</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>iec</name></name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_rsavrfy</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>br_rsa_pkcs1_vrfy</name></type> <name>irsavrfy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>irsavrfy</name></name> <operator>=</operator> <name>irsavrfy</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_default_rsavrfy</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>br_rsa_pkcs1_vrfy</name></type>
<name>br_ssl_engine_get_rsavrfy</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>irsavrfy</name></name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_ecdsa</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>br_ecdsa_vrfy</name></type> <name>iecdsa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>iecdsa</name></name> <operator>=</operator> <name>iecdsa</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_default_ecdsa</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>br_ecdsa_vrfy</name></type>
<name>br_ssl_engine_get_ecdsa</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>iecdsa</name></name></expr>;</return>
</block_content>}</block></function>































<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_buffer</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iobuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>iobuf_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bidi</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><name>void</name></type> <name>br_ssl_engine_set_buffers_bidi</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ibuf_len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>obuf_len</name></decl></parameter>)</parameter_list>;</function_decl>
































<function_decl><type><name>void</name></type> <name>br_ssl_engine_inject_entropy</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

















<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>br_ssl_engine_get_server_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>server_name</name></name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type>
<name>br_ssl_engine_get_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>version</name></name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_get_session_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_session_parameters</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_engine_set_session_parameters</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_session_parameters</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>br_ssl_engine_get_ecdhe_curve</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>ecdhe_curve</name></name></expr>;</return>
</block_content>}</block></function>












































<function_decl><type><name>unsigned</name></type> <name>br_ssl_engine_current_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSL_CLOSED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSL_SENDREC</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSL_RECVREC</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSL_SENDAPP</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSL_RECVAPP</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>br_ssl_engine_last_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
</block_content>}</block></function>

















































<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>br_ssl_engine_sendapp_buf</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_ssl_engine_sendapp_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>br_ssl_engine_recvapp_buf</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_ssl_engine_recvapp_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>br_ssl_engine_sendrec_buf</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_ssl_engine_sendrec_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>br_ssl_engine_recvrec_buf</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_ssl_engine_recvrec_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>void</name></type> <name>br_ssl_engine_flush</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>br_ssl_engine_close</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>int</name></type> <name>br_ssl_engine_renegotiate</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>
































<function_decl><type><name>int</name></type> <name>br_ssl_key_export</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>context_len</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><name><name>struct</name> <name>br_ssl_client_context_</name></name></type> <name>br_ssl_client_context</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{






<decl_stmt><decl><type><name>int</name></type> <name>auth_type</name></decl>;</decl_stmt>















<decl_stmt><decl><type><name>int</name></type> <name>hash_id</name></decl>;</decl_stmt>










<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>size_t</name></type> <name>chain_len</name></decl>;</decl_stmt>

}</block></struct></type> <name>br_ssl_client_certificate</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_AUTH_ECDH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_AUTH_RSA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_AUTH_ECDSA</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

















<typedef>typedef <type><name><name>struct</name> <name>br_ssl_client_certificate_class_</name></name></type> <name>br_ssl_client_certificate_class</name>;</typedef>
<struct>struct <name>br_ssl_client_certificate_class_</name> <block>{



<decl_stmt><decl><type><name>size_t</name></type> <name>context_size</name></decl>;</decl_stmt>







<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start_name_list</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start_name</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>append_name</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>end_name</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>end_name_list</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>;</function_decl>













































<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>choose</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>auth_types</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_client_certificate</name> <modifier>*</modifier></type><name>choices</name></decl></parameter>)</parameter_list>;</function_decl>











































<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>do_keyx</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>




































<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>do_sign</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hash_id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hv_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>










<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chain_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_rsa_pkcs1_sign</name></type> <name>irsasign</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_ssl_client_certificate_rsa_context</name>;</typedef>













<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chain_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>allowed_usages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>issuer_key_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_multihash_context</name> <modifier>*</modifier></type><name>mhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>iec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ecdsa_sign</name></type> <name>iecdsa</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_ssl_client_certificate_ec_context</name>;</typedef>









<struct>struct <name>br_ssl_client_context_</name> <block>{



<decl_stmt><decl><type><name>br_ssl_engine_context</name></type> <name>eng</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>






<decl_stmt><decl><type><name>uint16_t</name></type> <name>min_clienthello_len</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint32_t</name></type> <name>hashes</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>server_curve</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>client_auth_vtable</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>auth_type</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>hash_id</name></decl>;</decl_stmt>





<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ssl_client_certificate_rsa_context</name></type> <name>single_rsa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ssl_client_certificate_ec_context</name></type> <name>single_ec</name></decl>;</decl_stmt>
}</block> <decl><name>client_auth</name></decl>;</union>




<decl_stmt><decl><type><name>br_rsa_public</name></type> <name>irsapub</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>































<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>br_ssl_client_get_server_hashes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>hashes</name></name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>br_ssl_client_get_server_curve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>server_curve</name></name></expr>;</return>
</block_content>}</block></function>
























<function_decl><type><name>void</name></type> <name>br_ssl_client_init_full</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>xc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>trust_anchors</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>trust_anchors_num</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>br_ssl_client_zero</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_client_set_client_certificate</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth_vtable</name></name> <operator>=</operator> <name>pctx</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_client_set_rsapub</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>br_rsa_public</name></type> <name>irsapub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>irsapub</name></name> <operator>=</operator> <name>irsapub</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function_decl><type><name>void</name></type> <name>br_ssl_client_set_default_rsapub</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>


















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_client_set_min_clienthello_len</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>min_clienthello_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>































<function_decl><type><name>int</name></type> <name>br_ssl_client_reset</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resume_session</name></decl></parameter>)</parameter_list>;</function_decl>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_client_forget_session</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>session</name><operator>.</operator><name>session_id_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





















<function_decl><type><name>void</name></type> <name>br_ssl_client_set_single_rsa</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>br_rsa_pkcs1_sign</name></type> <name>irsasign</name></decl></parameter>)</parameter_list>;</function_decl>






































<function_decl><type><name>void</name></type> <name>br_ssl_client_set_single_ec</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>allowed_usages</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>cert_issuer_key_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>iec</name></decl></parameter>, <parameter><decl><type><name>br_ecdsa_sign</name></type> <name>iecdsa</name></decl></parameter>)</parameter_list>;</function_decl>




















































<typedef>typedef <type><name>uint16_t</name></type> <name><name>br_suite_translated</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLKEYX_RSA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLKEYX_ECDHE_RSA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLKEYX_ECDHE_ECDSA</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLKEYX_ECDH_RSA</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLKEYX_ECDH_ECDSA</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLENC_3DES_CBC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLENC_AES128_CBC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLENC_AES256_CBC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLENC_AES128_GCM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLENC_AES256_GCM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLENC_CHACHA20</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLMAC_AEAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLMAC_SHA1</name></cpp:macro> <cpp:value>br_sha1_ID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLMAC_SHA256</name></cpp:macro> <cpp:value>br_sha256_ID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLMAC_SHA384</name></cpp:macro> <cpp:value>br_sha384_ID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLPRF_SHA256</name></cpp:macro> <cpp:value>br_sha256_ID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_SSLPRF_SHA384</name></cpp:macro> <cpp:value>br_sha384_ID</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <type><name><name>struct</name> <name>br_ssl_server_context_</name></name></type> <name>br_ssl_server_context</name>;</typedef>





<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><name>uint16_t</name></type> <name>cipher_suite</name></decl>;</decl_stmt>










































<decl_stmt><decl><type><name>unsigned</name></type> <name>algo_id</name></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>chain_len</name></decl>;</decl_stmt>

}</block></struct></type> <name>br_ssl_server_choices</name>;</typedef>













<typedef>typedef <type><name><name>struct</name> <name>br_ssl_server_policy_class_</name></name></type> <name>br_ssl_server_policy_class</name>;</typedef>
<struct>struct <name>br_ssl_server_policy_class_</name> <block>{



<decl_stmt><decl><type><name>size_t</name></type> <name>context_size</name></decl>;</decl_stmt>
































<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>choose</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_server_choices</name> <modifier>*</modifier></type><name>choices</name></decl></parameter>)</parameter_list>;</function_decl>




















































<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>do_keyx</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>








































<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>do_sign</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>algo_id</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hv_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>











<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chain_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>allowed_usages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_rsa_private</name></type> <name>irsacore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_rsa_pkcs1_sign</name></type> <name>irsasign</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_ssl_server_policy_rsa_context</name>;</typedef>















<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chain_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>allowed_usages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cert_issuer_key_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_multihash_context</name> <modifier>*</modifier></type><name>mhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>iec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ecdsa_sign</name></type> <name>iecdsa</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_ssl_server_policy_ec_context</name>;</typedef>











<typedef>typedef <type><name><name>struct</name> <name>br_ssl_session_cache_class_</name></name></type> <name>br_ssl_session_cache_class</name>;</typedef>
<struct>struct <name>br_ssl_session_cache_class_</name> <block>{



<decl_stmt><decl><type><name>size_t</name></type> <name>context_size</name></decl>;</decl_stmt>













<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>save</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_session_cache_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>server_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_session_parameters</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>load</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_session_cache_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>server_ctx</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_session_parameters</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>















<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_session_cache_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>store_len</name></decl>, <name>store_ptr</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>index_key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>init_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>head</name></decl>, <name>tail</name>, <name>root</name>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_ssl_session_cache_lru</name>;</typedef>












<function_decl><type><name>void</name></type> <name>br_ssl_session_cache_lru_init</name><parameter_list>(<parameter><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>store_len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>br_ssl_session_cache_lru_forget</name><parameter_list>(
<parameter><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>









<struct>struct <name>br_ssl_server_context_</name> <block>{



<decl_stmt><decl><type><name>br_ssl_engine_context</name></type> <name>eng</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>uint16_t</name></type> <name>client_max_version</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_session_cache_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>cache_vtable</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>br_suite_translated</name></type> <name><name>client_suites</name><index>[<expr><name>BR_MAX_CIPHER_SUITES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>client_suites_num</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>uint32_t</name></type> <name>hashes</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>curves</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>policy_vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sign_hash_id</name></decl>;</decl_stmt>





<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ssl_server_policy_rsa_context</name></type> <name>single_rsa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ssl_server_policy_ec_context</name></type> <name>single_ec</name></decl>;</decl_stmt>
}</block> <decl><name>chain_handler</name></decl>;</union>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ecdhe_key</name><index>[<expr><literal type="number">70</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ecdhe_key_len</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>br_x500_name</name> <modifier>*</modifier></type><name>ta_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>tas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_tas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cur_dn_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cur_dn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cur_dn_len</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash_CV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hash_CV_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash_CV_id</name></decl>;</decl_stmt>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>









































<function_decl><type><name>void</name></type> <name>br_ssl_server_init_full_rsa</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>void</name></type> <name>br_ssl_server_init_full_ec</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>cert_issuer_key_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_ssl_server_init_minr2g</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>br_ssl_server_init_mine2g</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>void</name></type> <name>br_ssl_server_init_minf2g</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>void</name></type> <name>br_ssl_server_init_minu2g</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>void</name></type> <name>br_ssl_server_init_minv2g</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_ssl_server_init_mine2c</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_ssl_server_init_minf2c</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>























<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>br_suite_translated</name> <modifier>*</modifier></type>
<name>br_ssl_server_get_client_suites</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>client_suites_num</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>client_suites</name></name></expr>;</return>
</block_content>}</block></function>































<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>br_ssl_server_get_client_hashes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>hashes</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>br_ssl_server_get_client_curves</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>curves</name></name></expr>;</return>
</block_content>}</block></function>










<function_decl><type><name>void</name></type> <name>br_ssl_server_zero</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_server_set_policy</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>policy_vtable</name></name> <operator>=</operator> <name>pctx</name></expr>;</expr_stmt>
</block_content>}</block></function>



















<function_decl><type><name>void</name></type> <name>br_ssl_server_set_single_rsa</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>allowed_usages</name></decl></parameter>,
<parameter><decl><type><name>br_rsa_private</name></type> <name>irsacore</name></decl></parameter>, <parameter><decl><type><name>br_rsa_pkcs1_sign</name></type> <name>irsasign</name></decl></parameter>)</parameter_list>;</function_decl>

























<function_decl><type><name>void</name></type> <name>br_ssl_server_set_single_ec</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>allowed_usages</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>cert_issuer_key_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>iec</name></decl></parameter>, <parameter><decl><type><name>br_ecdsa_sign</name></type> <name>iecdsa</name></decl></parameter>)</parameter_list>;</function_decl>




















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_server_set_trust_anchor_names</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x500_name</name> <modifier>*</modifier></type><name>ta_names</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>ta_names</name></name> <operator>=</operator> <name>ta_names</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>tas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>num_tas</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_server_set_trust_anchor_names_alt</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>tas</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>ta_names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>tas</name></name> <operator>=</operator> <name>tas</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>num_tas</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_ssl_server_set_cache</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_session_cache_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>vtable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>cache_vtable</name></name> <operator>=</operator> <name>vtable</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function_decl><type><name>int</name></type> <name>br_ssl_server_reset</name><parameter_list>(<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>



































<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>engine</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>low_read</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>read_context</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>read_context</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>low_write</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>write_context</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>write_context</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_sslio_context</name>;</typedef>
















































<function_decl><type><name>void</name></type> <name>br_sslio_init</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>engine</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>low_read</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>read_context</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>read_context</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>low_write</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>write_context</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>write_context</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><name>int</name></type> <name>br_sslio_read</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>int</name></type> <name>br_sslio_read_all</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

























<function_decl><type><name>int</name></type> <name>br_sslio_write</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>int</name></type> <name>br_sslio_write_all</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>int</name></type> <name>br_sslio_flush</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>int</name></type> <name>br_sslio_close</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>;</function_decl>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_NULL_WITH_NULL_NULL</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_NULL_MD5</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_NULL_SHA</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_NULL_SHA256</name></cpp:macro> <cpp:value>0x003B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_RC4_128_MD5</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_RC4_128_SHA</name></cpp:macro> <cpp:value>0x0005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0x000A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0x002F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0x0035</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_AES_128_CBC_SHA256</name></cpp:macro> <cpp:value>0x003C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_AES_256_CBC_SHA256</name></cpp:macro> <cpp:value>0x003D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0x0013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0x0016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_DSS_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0x0030</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_RSA_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0x0031</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_DSS_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0x0032</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_RSA_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0x0033</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_DSS_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0x0036</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_RSA_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0x0037</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_DSS_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0x0038</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_RSA_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0x0039</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_DSS_WITH_AES_128_CBC_SHA256</name></cpp:macro> <cpp:value>0x003E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_RSA_WITH_AES_128_CBC_SHA256</name></cpp:macro> <cpp:value>0x003F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</name></cpp:macro> <cpp:value>0x0067</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_DSS_WITH_AES_256_CBC_SHA256</name></cpp:macro> <cpp:value>0x0068</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_RSA_WITH_AES_256_CBC_SHA256</name></cpp:macro> <cpp:value>0x0069</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256</name></cpp:macro> <cpp:value>0x006A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</name></cpp:macro> <cpp:value>0x006B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_anon_WITH_RC4_128_MD5</name></cpp:macro> <cpp:value>0x0018</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0x001B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_anon_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0x0034</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_anon_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0x003A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_anon_WITH_AES_128_CBC_SHA256</name></cpp:macro> <cpp:value>0x006C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_anon_WITH_AES_256_CBC_SHA256</name></cpp:macro> <cpp:value>0x006D</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_ECDSA_WITH_NULL_SHA</name></cpp:macro> <cpp:value>0xC001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_ECDSA_WITH_RC4_128_SHA</name></cpp:macro> <cpp:value>0xC002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0xC003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0xC004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0xC005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_NULL_SHA</name></cpp:macro> <cpp:value>0xC006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA</name></cpp:macro> <cpp:value>0xC007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0xC008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0xC009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0xC00A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_RSA_WITH_NULL_SHA</name></cpp:macro> <cpp:value>0xC00B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_RSA_WITH_RC4_128_SHA</name></cpp:macro> <cpp:value>0xC00C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0xC00D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0xC00E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0xC00F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_RSA_WITH_NULL_SHA</name></cpp:macro> <cpp:value>0xC010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_RSA_WITH_RC4_128_SHA</name></cpp:macro> <cpp:value>0xC011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0xC012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0xC013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0xC014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_anon_WITH_NULL_SHA</name></cpp:macro> <cpp:value>0xC015</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_anon_WITH_RC4_128_SHA</name></cpp:macro> <cpp:value>0xC016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA</name></cpp:macro> <cpp:value>0xC017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_anon_WITH_AES_128_CBC_SHA</name></cpp:macro> <cpp:value>0xC018</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_anon_WITH_AES_256_CBC_SHA</name></cpp:macro> <cpp:value>0xC019</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_AES_128_GCM_SHA256</name></cpp:macro> <cpp:value>0x009C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_AES_256_GCM_SHA384</name></cpp:macro> <cpp:value>0x009D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</name></cpp:macro> <cpp:value>0x009E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</name></cpp:macro> <cpp:value>0x009F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_RSA_WITH_AES_128_GCM_SHA256</name></cpp:macro> <cpp:value>0x00A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_RSA_WITH_AES_256_GCM_SHA384</name></cpp:macro> <cpp:value>0x00A1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256</name></cpp:macro> <cpp:value>0x00A2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384</name></cpp:macro> <cpp:value>0x00A3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_DSS_WITH_AES_128_GCM_SHA256</name></cpp:macro> <cpp:value>0x00A4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_DSS_WITH_AES_256_GCM_SHA384</name></cpp:macro> <cpp:value>0x00A5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_anon_WITH_AES_128_GCM_SHA256</name></cpp:macro> <cpp:value>0x00A6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DH_anon_WITH_AES_256_GCM_SHA384</name></cpp:macro> <cpp:value>0x00A7</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</name></cpp:macro> <cpp:value>0xC023</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</name></cpp:macro> <cpp:value>0xC024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256</name></cpp:macro> <cpp:value>0xC025</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384</name></cpp:macro> <cpp:value>0xC026</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</name></cpp:macro> <cpp:value>0xC027</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</name></cpp:macro> <cpp:value>0xC028</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256</name></cpp:macro> <cpp:value>0xC029</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384</name></cpp:macro> <cpp:value>0xC02A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</name></cpp:macro> <cpp:value>0xC02B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</name></cpp:macro> <cpp:value>0xC02C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256</name></cpp:macro> <cpp:value>0xC02D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384</name></cpp:macro> <cpp:value>0xC02E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</name></cpp:macro> <cpp:value>0xC02F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</name></cpp:macro> <cpp:value>0xC030</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256</name></cpp:macro> <cpp:value>0xC031</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384</name></cpp:macro> <cpp:value>0xC032</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_AES_128_CCM</name></cpp:macro> <cpp:value>0xC09C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_AES_256_CCM</name></cpp:macro> <cpp:value>0xC09D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_AES_128_CCM_8</name></cpp:macro> <cpp:value>0xC0A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_WITH_AES_256_CCM_8</name></cpp:macro> <cpp:value>0xC0A1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_AES_128_CCM</name></cpp:macro> <cpp:value>0xC0AC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_AES_256_CCM</name></cpp:macro> <cpp:value>0xC0AD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8</name></cpp:macro> <cpp:value>0xC0AE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8</name></cpp:macro> <cpp:value>0xC0AF</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</name></cpp:macro> <cpp:value>0xCCA8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</name></cpp:macro> <cpp:value>0xCCA9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256</name></cpp:macro> <cpp:value>0xCCAA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256</name></cpp:macro> <cpp:value>0xCCAB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256</name></cpp:macro> <cpp:value>0xCCAC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256</name></cpp:macro> <cpp:value>0xCCAD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256</name></cpp:macro> <cpp:value>0xCCAE</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_TLS_FALLBACK_SCSV</name></cpp:macro> <cpp:value>0x5600</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_CLOSE_NOTIFY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_UNEXPECTED_MESSAGE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_BAD_RECORD_MAC</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_RECORD_OVERFLOW</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_DECOMPRESSION_FAILURE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_HANDSHAKE_FAILURE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_BAD_CERTIFICATE</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_UNSUPPORTED_CERTIFICATE</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_CERTIFICATE_REVOKED</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_CERTIFICATE_EXPIRED</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_CERTIFICATE_UNKNOWN</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_ILLEGAL_PARAMETER</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_UNKNOWN_CA</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_ACCESS_DENIED</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_DECODE_ERROR</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_DECRYPT_ERROR</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_PROTOCOL_VERSION</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_INSUFFICIENT_SECURITY</name></cpp:macro> <cpp:value>71</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_INTERNAL_ERROR</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_USER_CANCELED</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_NO_RENEGOTIATION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_UNSUPPORTED_EXTENSION</name></cpp:macro> <cpp:value>110</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ALERT_NO_APPLICATION_PROTOCOL</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
