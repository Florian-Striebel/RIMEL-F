<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/inc/bearssl_ec.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_BEARSSL_EC_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_BEARSSL_EC_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_rand.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

















































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect163k1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect163r1</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect163r2</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect193r1</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect193r2</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect233k1</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect233r1</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect239k1</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect283k1</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect283r1</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect409k1</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect409r1</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect571k1</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_sect571r1</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp160k1</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp160r1</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp160r2</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp192k1</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp192r1</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp224k1</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp224r1</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp256k1</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp256r1</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp384r1</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_secp521r1</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_brainpoolP256r1</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_brainpoolP384r1</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_brainpoolP512r1</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_curve25519</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_curve448</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>curve</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>qlen</name></decl>;</decl_stmt>
}</block></struct></type> <name>br_ec_public_key</name>;</typedef>









<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>curve</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>xlen</name></decl>;</decl_stmt>
}</block></struct></type> <name>br_ec_private_key</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{








<decl_stmt><decl><type><name>uint32_t</name></type> <name>supported_curves</name></decl>;</decl_stmt>












<function_decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>generator</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>order</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>xoff</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>































<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>mul</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>G</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Glen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>mulgen</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>;</function_decl>












































<function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>muladd</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>br_ec_impl</name>;</typedef>








<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_prime_i31</name></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_prime_i15</name></decl>;</decl_stmt>









<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_p256_m15</name></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_p256_m31</name></decl>;</decl_stmt>










<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_p256_m62</name></decl>;</decl_stmt>






<function_decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>br_ec_p256_m62_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>










<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_p256_m64</name></decl>;</decl_stmt>






<function_decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>br_ec_p256_m64_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>













<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_c25519_i15</name></decl>;</decl_stmt>













<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_c25519_i31</name></decl>;</decl_stmt>













<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_c25519_m15</name></decl>;</decl_stmt>













<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_c25519_m31</name></decl>;</decl_stmt>
















<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_c25519_m62</name></decl>;</decl_stmt>






<function_decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>br_ec_c25519_m62_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
















<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_c25519_m64</name></decl>;</decl_stmt>






<function_decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>br_ec_c25519_m64_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>










<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_all_m15</name></decl>;</decl_stmt>










<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_all_m31</name></decl>;</decl_stmt>









<function_decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>br_ec_get_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>size_t</name></type> <name>br_ecdsa_raw_to_asn1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>size_t</name></type> <name>br_ecdsa_asn1_to_raw</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>;</function_decl>






























<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>br_ecdsa_sign</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash_value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>;</function_decl></typedef>























<typedef>typedef <function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>br_ecdsa_vrfy</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>













<function_decl><type><name>size_t</name></type> <name>br_ecdsa_i31_sign_asn1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash_value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>size_t</name></type> <name>br_ecdsa_i31_sign_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash_value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>uint32_t</name></type> <name>br_ecdsa_i31_vrfy_asn1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>uint32_t</name></type> <name>br_ecdsa_i31_vrfy_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>size_t</name></type> <name>br_ecdsa_i15_sign_asn1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash_value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>size_t</name></type> <name>br_ecdsa_i15_sign_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash_value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>uint32_t</name></type> <name>br_ecdsa_i15_vrfy_asn1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>uint32_t</name></type> <name>br_ecdsa_i15_vrfy_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>br_ecdsa_sign</name></type> <name>br_ecdsa_sign_asn1_get_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>br_ecdsa_sign</name></type> <name>br_ecdsa_sign_raw_get_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>br_ecdsa_vrfy</name></type> <name>br_ecdsa_vrfy_asn1_get_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>br_ecdsa_vrfy</name></type> <name>br_ecdsa_vrfy_raw_get_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_KBUF_PRIV_MAX_SIZE</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_EC_KBUF_PUB_MAX_SIZE</name></cpp:macro> <cpp:value>145</cpp:value></cpp:define>



























<function_decl><type><name>size_t</name></type> <name>br_ec_keygen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>rng_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>, <parameter><decl><type><name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>size_t</name></type> <name>br_ec_compute_pub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>, <parameter><decl><type><name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
