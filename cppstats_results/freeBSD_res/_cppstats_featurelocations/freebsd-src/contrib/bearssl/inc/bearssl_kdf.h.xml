<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/inc/bearssl_kdf.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_BEARSSL_KDF_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_BEARSSL_KDF_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl_hmac.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


















































































<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<union>union <block>{
<decl_stmt><decl><type><name>br_hmac_context</name></type> <name>hmac_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_hmac_key_context</name></type> <name>prk_ctx</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dig_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>chunk_num</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_hkdf_context</name>;</typedef>



















<function_decl><type><name>void</name></type> <name>br_hkdf_init</name><parameter_list>(<parameter><decl><type><name>br_hkdf_context</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>digest_vtable</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HKDF_NO_SALT</name></cpp:macro> <cpp:value>(&amp;br_hkdf_no_salt)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>br_hkdf_no_salt</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<function_decl><type><name>void</name></type> <name>br_hkdf_inject</name><parameter_list>(<parameter><decl><type><name>br_hkdf_context</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ikm</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ikm_len</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>br_hkdf_flip</name><parameter_list>(<parameter><decl><type><name>br_hkdf_context</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>size_t</name></type> <name>br_hkdf_produce</name><parameter_list>(<parameter><decl><type><name>br_hkdf_context</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>info_len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_len</name></decl></parameter>)</parameter_list>;</function_decl>












<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>dbuf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>A</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_shake_context</name>;</typedef>

















<function_decl><type><name>void</name></type> <name>br_shake_init</name><parameter_list>(<parameter><decl><type><name>br_shake_context</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>security_level</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>br_shake_inject</name><parameter_list>(<parameter><decl><type><name>br_shake_context</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>br_shake_flip</name><parameter_list>(<parameter><decl><type><name>br_shake_context</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_shake_produce</name><parameter_list>(<parameter><decl><type><name>br_shake_context</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
