<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/inc/bearssl_hash.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_BEARSSL_HASH_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_BEARSSL_HASH_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


























































































































































































<typedef>typedef <type><name><name>struct</name> <name>br_hash_class_</name></name></type> <name>br_hash_class</name>;</typedef>
<struct>struct <name>br_hash_class_</name> <block>{




<decl_stmt><decl><type><name>size_t</name></type> <name>context_size</name></decl>;</decl_stmt>





























<decl_stmt><decl><type><name>uint32_t</name></type> <name>desc</name></decl>;</decl_stmt>











<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>update</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>out</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>uint64_t</name></type> (<modifier>*</modifier><name>state</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_state</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_ID</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(id) &lt;&lt; BR_HASHDESC_ID_OFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_ID_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_ID_MASK</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_OUT</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(size) &lt;&lt; BR_HASHDESC_OUT_OFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_OUT_OFF</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_OUT_MASK</name></cpp:macro> <cpp:value>0x7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_STATE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(size) &lt;&lt; BR_HASHDESC_STATE_OFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_STATE_OFF</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_STATE_MASK</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_LBLEN</name><parameter_list>(<parameter><type><name>ls</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(ls) &lt;&lt; BR_HASHDESC_LBLEN_OFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_LBLEN_OFF</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_LBLEN_MASK</name></cpp:macro> <cpp:value>0x0F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_MD_PADDING</name></cpp:macro> <cpp:value>((uint32_t)1 &lt;&lt; 28)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_MD_PADDING_128</name></cpp:macro> <cpp:value>((uint32_t)1 &lt;&lt; 29)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_HASHDESC_MD_PADDING_BE</name></cpp:macro> <cpp:value>((uint32_t)1 &lt;&lt; 30)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_md5_ID</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_md5_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_hash_class</name></type> <name>br_md5_vtable</name></decl>;</decl_stmt>







<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>val</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_md5_context</name>;</typedef>









<function_decl><type><name>void</name></type> <name>br_md5_init</name><parameter_list>(<parameter><decl><type><name>br_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>br_md5_update</name><parameter_list>(<parameter><decl><type><name>br_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_md5_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>uint64_t</name></type> <name>br_md5_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>br_md5_set_state</name><parameter_list>(<parameter><decl><type><name>br_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha1_ID</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha1_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_hash_class</name></type> <name>br_sha1_vtable</name></decl>;</decl_stmt>







<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>val</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_sha1_context</name>;</typedef>









<function_decl><type><name>void</name></type> <name>br_sha1_init</name><parameter_list>(<parameter><decl><type><name>br_sha1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>br_sha1_update</name><parameter_list>(<parameter><decl><type><name>br_sha1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_sha1_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>uint64_t</name></type> <name>br_sha1_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>br_sha1_set_state</name><parameter_list>(<parameter><decl><type><name>br_sha1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha224_ID</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha224_SIZE</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_hash_class</name></type> <name>br_sha224_vtable</name></decl>;</decl_stmt>







<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>val</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_sha224_context</name>;</typedef>









<function_decl><type><name>void</name></type> <name>br_sha224_init</name><parameter_list>(<parameter><decl><type><name>br_sha224_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>br_sha224_update</name><parameter_list>(<parameter><decl><type><name>br_sha224_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_sha224_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha224_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>uint64_t</name></type> <name>br_sha224_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha224_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>br_sha224_set_state</name><parameter_list>(<parameter><decl><type><name>br_sha224_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha256_ID</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha256_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_hash_class</name></type> <name>br_sha256_vtable</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>






<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
}</block></struct></type> <name>br_sha256_context</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>br_sha224_context</name></type> <name>br_sha256_context</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function_decl><type><name>void</name></type> <name>br_sha256_init</name><parameter_list>(<parameter><decl><type><name>br_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function_decl><type><name>void</name></type> <name>br_sha256_update</name><parameter_list>(<parameter><decl><type><name>br_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha256_update</name></cpp:macro> <cpp:value>br_sha224_update</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<function_decl><type><name>void</name></type> <name>br_sha256_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_DOXYGEN_IGNORE</name></expr></cpp:if>












<function_decl><type><name>uint64_t</name></type> <name>br_sha256_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha256_state</name></cpp:macro> <cpp:value>br_sha224_state</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_DOXYGEN_IGNORE</name></expr></cpp:if>









<function_decl><type><name>void</name></type> <name>br_sha256_set_state</name><parameter_list>(<parameter><decl><type><name>br_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha256_set_state</name></cpp:macro> <cpp:value>br_sha224_set_state</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha384_ID</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha384_SIZE</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_hash_class</name></type> <name>br_sha384_vtable</name></decl>;</decl_stmt>







<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>val</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_sha384_context</name>;</typedef>









<function_decl><type><name>void</name></type> <name>br_sha384_init</name><parameter_list>(<parameter><decl><type><name>br_sha384_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>br_sha384_update</name><parameter_list>(<parameter><decl><type><name>br_sha384_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_sha384_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha384_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>uint64_t</name></type> <name>br_sha384_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha384_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>br_sha384_set_state</name><parameter_list>(<parameter><decl><type><name>br_sha384_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha512_ID</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha512_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_hash_class</name></type> <name>br_sha512_vtable</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>






<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
}</block></struct></type> <name>br_sha512_context</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>br_sha384_context</name></type> <name>br_sha512_context</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function_decl><type><name>void</name></type> <name>br_sha512_init</name><parameter_list>(<parameter><decl><type><name>br_sha512_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function_decl><type><name>void</name></type> <name>br_sha512_update</name><parameter_list>(<parameter><decl><type><name>br_sha512_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha512_update</name></cpp:macro> <cpp:value>br_sha384_update</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<function_decl><type><name>void</name></type> <name>br_sha512_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha512_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function_decl><type><name>uint64_t</name></type> <name>br_sha512_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha512_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha512_state</name></cpp:macro> <cpp:value>br_sha384_state</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>









<function_decl><type><name>void</name></type> <name>br_sha512_set_state</name><parameter_list>(<parameter><decl><type><name>br_sha512_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_sha512_set_state</name></cpp:macro> <cpp:value>br_sha384_set_state</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_md5sha1_ID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>br_md5sha1_SIZE</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_hash_class</name></type> <name>br_md5sha1_vtable</name></decl>;</decl_stmt>







<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>val_md5</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>val_sha1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_md5sha1_context</name>;</typedef>









<function_decl><type><name>void</name></type> <name>br_md5sha1_init</name><parameter_list>(<parameter><decl><type><name>br_md5sha1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>br_md5sha1_update</name><parameter_list>(<parameter><decl><type><name>br_md5sha1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_md5sha1_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_md5sha1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>uint64_t</name></type> <name>br_md5sha1_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_md5sha1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>br_md5sha1_set_state</name><parameter_list>(<parameter><decl><type><name>br_md5sha1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>







<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_md5_context</name></type> <name>md5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sha1_context</name></type> <name>sha1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sha224_context</name></type> <name>sha224</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sha256_context</name></type> <name>sha256</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sha384_context</name></type> <name>sha384</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sha512_context</name></type> <name>sha512</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_md5sha1_context</name></type> <name>md5sha1</name></decl>;</decl_stmt>
}</block></union></type> <name>br_hash_compat_context</name>;</typedef>




















<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_DOXYGEN_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>val_32</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>val_64</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name><name>impl</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>br_multihash_context</name>;</typedef>









<function_decl><type><name>void</name></type> <name>br_multihash_zero</name><parameter_list>(<parameter><decl><type><name>br_multihash_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>br_multihash_setimpl</name><parameter_list>(<parameter><decl><type><name>br_multihash_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>impl</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>impl</name></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type>
<name>br_multihash_getimpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_multihash_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>impl</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>









<function_decl><type><name>void</name></type> <name>br_multihash_init</name><parameter_list>(<parameter><decl><type><name>br_multihash_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>br_multihash_update</name><parameter_list>(<parameter><decl><type><name>br_multihash_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>






















<function_decl><type><name>size_t</name></type> <name>br_multihash_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_multihash_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
























<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>br_ghash</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>













<function_decl><type><name>void</name></type> <name>br_ghash_ctmul</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>void</name></type> <name>br_ghash_ctmul32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>br_ghash_ctmul64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>void</name></type> <name>br_ghash_pclmul</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>br_ghash</name></type> <name>br_ghash_pclmul_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>br_ghash_pwr8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>br_ghash</name></type> <name>br_ghash_pwr8_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
