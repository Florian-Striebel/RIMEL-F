<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ssl/ssl_engine_default_aesgcm.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>br_ssl_engine_set_default_aes_gcm</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_AES_X86NI</name> <operator>||</operator> <name>BR_POWER8</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>ictr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ghash</name></type> <name>ighash</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>br_ssl_engine_set_gcm</name><argument_list>(<argument><expr><name>cc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_sslrec_in_gcm_vtable</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_sslrec_out_gcm_vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_AES_X86NI</name></expr></cpp:if>
<expr_stmt><expr><name>ictr</name> <operator>=</operator> <call><name>br_aes_x86ni_ctr_get_vtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ictr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_aes_ctr</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>ictr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_64</name></expr></cpp:if>
<expr_stmt><expr><call><name>br_ssl_engine_set_aes_ctr</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_aes_ct64_ctr_vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>br_ssl_engine_set_aes_ctr</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_aes_ct_ctr_vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_POWER8</name></expr></cpp:elif>
<expr_stmt><expr><name>ictr</name> <operator>=</operator> <call><name>br_aes_pwr8_ctr_get_vtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ictr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_aes_ctr</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>ictr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_64</name></expr></cpp:if>
<expr_stmt><expr><call><name>br_ssl_engine_set_aes_ctr</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_aes_ct64_ctr_vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>br_ssl_engine_set_aes_ctr</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_aes_ct_ctr_vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_64</name></expr></cpp:if>
<expr_stmt><expr><call><name>br_ssl_engine_set_aes_ctr</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_aes_ct64_ctr_vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>br_ssl_engine_set_aes_ctr</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_aes_ct_ctr_vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_AES_X86NI</name></expr></cpp:if>
<expr_stmt><expr><name>ighash</name> <operator>=</operator> <call><name>br_ghash_pclmul_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ighash</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_ghash</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>ighash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8</name></expr></cpp:if>
<expr_stmt><expr><name>ighash</name> <operator>=</operator> <call><name>br_ghash_pwr8_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ighash</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_ghash</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>ighash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_LOMUL</name></expr></cpp:if>
<expr_stmt><expr><call><name>br_ssl_engine_set_ghash</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_ghash_ctmul32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_64</name></expr></cpp:elif>
<expr_stmt><expr><call><name>br_ssl_engine_set_ghash</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_ghash_ctmul64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>br_ssl_engine_set_ghash</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_ghash_ctmul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
