<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ssl/ssl_io.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>br_sslio_init</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>engine</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>low_read</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>read_context</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>read_context</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>low_write</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>write_context</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>write_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name> <operator>=</operator> <name>engine</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>low_read</name></name> <operator>=</operator> <name>low_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_context</name></name> <operator>=</operator> <name>read_context</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>low_write</name></name> <operator>=</operator> <name>low_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_context</name></name> <operator>=</operator> <name>write_context</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>run_until</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_SENDREC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_sendrec_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>low_write</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>shutdown_recv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>BR_ERR_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_sendrec_ack</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_RECVAPP</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_RECVREC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_recvrec_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>low_read</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>BR_ERR_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_recvrec_ack</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><call><name>br_ssl_engine_flush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>br_sslio_read</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_until</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>BR_SSL_RECVAPP</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_recvapp_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_engine_recvapp_ack</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>alen</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>br_sslio_read_all</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>br_sslio_read</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>rlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>rlen</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>br_sslio_write</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_until</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>BR_SSL_SENDAPP</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_sendapp_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_engine_sendapp_ack</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>alen</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>br_sslio_write_all</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>br_sslio_write</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>wlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>wlen</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>br_sslio_flush</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<expr_stmt><expr><call><name>br_ssl_engine_flush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>run_until</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>BR_SSL_SENDAPP</name> <operator>|</operator> <name>BR_SSL_RECVAPP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>br_sslio_close</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_close</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>run_until</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>BR_SSL_RECVAPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_recvapp_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_recvapp_ack</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>br_ssl_engine_last_error</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BR_ERR_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
