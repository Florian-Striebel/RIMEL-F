<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ssl/ssl_rec_cbc.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>in_cbc_init</name><parameter_list>(<parameter><decl><type><name>br_sslrec_in_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcdec_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bc_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bc_key_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mac_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_out_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sslrec_in_cbc_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bc_impl</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>bc_key</name></expr></argument>, <argument><expr><name>bc_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name>dig_impl</name></expr></argument>, <argument><expr><name>mac_key</name></expr></argument>, <argument><expr><name>mac_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>=</operator> <name>mac_out_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>bc_impl</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cbc_check_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>











<decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>min_len</name></decl>, <decl><type ref="prev"/><name>max_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_len</name> <operator>=</operator> <operator>(</operator><name>blen</name> <operator>+</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>max_len</name> <operator>=</operator> <operator>(</operator><literal type="number">16384</literal> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_len</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_len</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>min_len</name> <operator>&lt;=</operator> <name>rlen</name> <operator>&amp;&amp;</operator> <name>rlen</name> <operator>&lt;=</operator> <name>max_len</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>cond_rotate</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>v</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>cbc_decrypt</name><parameter_list>(<parameter><decl><type><name>br_sslrec_in_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>blen</name></decl>, <decl><type ref="prev"/><name>min_len</name></decl>, <decl><type ref="prev"/><name>max_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>good</name></decl>, <decl><type ref="prev"/><name>pad_len</name></decl>, <decl><type ref="prev"/><name>rot_count</name></decl>, <decl><type ref="prev"/><name>len_withmac</name></decl>, <decl><type ref="prev"/><name>len_nomac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_hmac_context</name></type> <name>hc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>data_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>








<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>blen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>min_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>+</operator> <literal type="number">256</literal> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr> ?</condition><then> <expr><name>len</name> <operator>-</operator> <literal type="number">256</literal></expr> </then><else>: <expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>max_len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>pad_len</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>max_len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>good</name> <operator>=</operator> <call><name>LE</name><argument_list>(<argument><expr><name>pad_len</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>max_len</name> <operator>-</operator> <name>min_len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><name>good</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>max_len</name> <operator>-</operator> <name>pad_len</name><operator>)</operator></expr></argument>, <argument><expr><name>min_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <name>min_len</name></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>max_len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>good</name> <operator>&amp;=</operator> <call><name>LT</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>EQ</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>pad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>










<expr_stmt><expr><name>len_withmac</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len_nomac</name> <operator>=</operator> <name>len_withmac</name> <operator>-</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_len</name> <operator>-=</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rot_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <name>min_len</name></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>max_len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp1</name><index>[<expr><name>v</name></expr>]</index></name> <operator>|=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>GE</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>len_nomac</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LT</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>len_withmac</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rot_count</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>len_nomac</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>rot_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>v</name> <operator>==</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>max_len</name> <operator>-=</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</expr_stmt>







<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cond_rotate</name><argument_list>(<argument><expr><name>rot_count</name> <operator>&gt;&gt;</operator> <name>i</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rot_count</name> <operator>&amp;=</operator> <operator>~</operator><name>rc</name></expr>;</expr_stmt>
</block_content>}</block></for>









<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name> <operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>record_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>tmp2</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>tmp2</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>len_nomac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_outCT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len_nomac</name></expr></argument>, <argument><expr><name>min_len</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>good</name> <operator>&amp;=</operator> <call><name>EQ0</name><argument_list>(<argument><expr><name><name>tmp1</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^</operator> <name><name>tmp2</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>









<expr_stmt><expr><name>good</name> <operator>&amp;=</operator> <call><name>LE</name><argument_list>(<argument><expr><name>len_nomac</name></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>good</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <name>len_nomac</name></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_cbc_class</name></type> <name>br_sslrec_in_cbc_vtable</name> <init>= <expr><block>{
<expr><block>{
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sslrec_in_cbc_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_in_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;</operator><name>cbc_check_length</name></expr>,
<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_in_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
<argument><expr><name>int</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;</operator><name>cbc_decrypt</name></expr>
}</block></expr>,
<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_in_cbc_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>br_block_cbcdec_class</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;</operator><name>in_cbc_init</name></expr>
}</block></expr></init></decl>;</decl_stmt>



















<function><type><specifier>static</specifier> <name>void</name></type>
<name>out_cbc_init</name><parameter_list>(<parameter><decl><type><name>br_sslrec_out_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcenc_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bc_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bc_key_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig_impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mac_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_out_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sslrec_out_cbc_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bc_impl</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>bc_key</name></expr></argument>, <argument><expr><name>bc_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name>dig_impl</name></expr></argument>, <argument><expr><name>mac_key</name></expr></argument>, <argument><expr><name>mac_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>=</operator> <name>mac_out_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>bc_impl</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cbc_max_plaintext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>+</operator> <name>blen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>end</name> <operator>-</operator> <operator>*</operator><name>start</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>start</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>cbc_encrypt</name><parameter_list>(<parameter><decl><type><name>br_sslrec_out_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>blen</name></decl>, <decl><type ref="prev"/><name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_hmac_context</name></type> <name>hc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>data_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>













<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <name>blen</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>record_type</name> <operator>==</operator> <name>BR_SSL_APPLICATION_DATA</name></expr>)</condition> <block>{<block_content>













<decl_stmt><decl><type><name>size_t</name></type> <name>xlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <literal type="number">4</literal>
<operator>-</operator> <operator>(</operator><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>+</operator> <name>blen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <call><name>cbc_encrypt</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>record_type</name></expr></argument>,
<argument><expr><name>version</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name> <operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>record_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>plen</name> <operator>=</operator> <name>blen</name> <operator>-</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>plen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>plen</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>-=</operator> <name>blen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>record_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>-</operator> <name>rbuf</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>rbuf</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_cbc_class</name></type> <name>br_sslrec_out_cbc_vtable</name> <init>= <expr><block>{
<expr><block>{
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sslrec_out_cbc_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>,
<argument><expr><name>size_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;</operator><name>cbc_max_plaintext</name></expr>,
<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
<argument><expr><name>int</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;</operator><name>cbc_encrypt</name></expr>
}</block></expr>,
<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_cbc_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>br_block_cbcenc_class</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;</operator><name>out_cbc_init</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
