<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ssl/ssl_engine.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_USE_URANDOM</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_AIX</name> <operator>||</operator> <name>defined</name> <name>__ANDROID__</name> <operator>||</operator> <name>defined</name> <name>__FreeBSD__</name> <operator>||</operator> <name>defined</name> <name>__NetBSD__</name> <operator>||</operator> <name>defined</name> <name>__OpenBSD__</name> <operator>||</operator> <name>defined</name> <name>__DragonFly__</name> <operator>||</operator> <name>defined</name> <name>__linux__</name> <operator>||</operator> <operator>(</operator><name>defined</name> <name>__sun</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>__SVR4</name> <operator>||</operator> <name>defined</name> <name>__svr4__</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>defined</name> <name>__APPLE__</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>__MACH__</name><operator>)</operator></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_USE_URANDOM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BR_USE_WIN32_RAND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>_WIN64</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_USE_WIN32_RAND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_USE_URANDOM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_USE_WIN32_RAND</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name> <cpp:literal>"advapi32"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








































































































































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OUT_OVERHEAD</name></cpp:macro> <cpp:value>85</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_IN_OVERHEAD</name></cpp:macro> <cpp:value>325</cpp:value></cpp:define>


<function><type><name>void</name></type>
<name>br_ssl_engine_fail</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>!=</operator> <name>BR_IO_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>=</operator> <name>BR_IO_FAILED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_ready_in</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixc</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>==</operator> <name>BR_IO_IN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>=</operator> <name>BR_IO_INOUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_ready_out</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>obuf_len</name></name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>max_plaintext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>&gt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>max_frag_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name><name>rc</name><operator>-&gt;</operator><name>max_frag_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>oxc</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>==</operator> <name>BR_IO_OUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>=</operator> <name>BR_IO_INOUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_new_max_frag_len</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_frag_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>nxb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>max_frag_len</name></name> <operator>=</operator> <name>max_frag_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nxb</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxc</name></name> <operator>+</operator> <name>max_frag_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>&lt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name> <operator>&amp;&amp;</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name> <operator>&gt;</operator> <name>nxb</name> <operator>&amp;&amp;</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>&lt;</operator> <name>nxb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name> <operator>=</operator> <name>nxb</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_set_buffer</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bidi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_buffers_bidi</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
















<if_stmt><if>if <condition>(<expr><name>bidi</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">512</literal> <operator>+</operator> <name>MAX_IN_OVERHEAD</name>
<operator>+</operator> <literal type="number">512</literal> <operator>+</operator> <name>MAX_OUT_OVERHEAD</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>=</operator> <name>BR_IO_FAILED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>BR_ERR_BAD_PARAM</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>buf_len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">16384</literal> <operator>+</operator> <name>MAX_IN_OVERHEAD</name>
<operator>+</operator> <literal type="number">512</literal> <operator>+</operator> <name>MAX_OUT_OVERHEAD</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">512</literal> <operator>+</operator> <name>MAX_OUT_OVERHEAD</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>buf_len</name> <operator>-</operator> <operator>(</operator><literal type="number">16384</literal> <operator>+</operator> <name>MAX_IN_OVERHEAD</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>br_ssl_engine_set_buffers_bidi</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name> <operator>-</operator> <name>w</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>w</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_buffers_bidi</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_set_buffers_bidi</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ibuf_len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>obuf_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>=</operator> <name>BR_IO_INOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>incrypt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>BR_ERR_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>version_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>record_type_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>version_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>record_type_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ibuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>BR_ERR_BAD_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>=</operator> <name>ibuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ibuf_len</name></name> <operator>=</operator> <name>ibuf_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obuf</name> <operator>=</operator> <name>ibuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>obuf_len</name> <operator>=</operator> <name>ibuf_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>obuf_len</name></name> <operator>=</operator> <name>obuf_len</name></expr>;</expr_stmt>









<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">14</literal></expr>;</init> <condition><expr><name>u</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>u</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>flen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>u</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obuf_len</name> <operator>&gt;=</operator> <name>flen</name> <operator>+</operator> <name>MAX_OUT_OVERHEAD</name>
<operator>&amp;&amp;</operator> <name>ibuf_len</name> <operator>&gt;=</operator> <name>flen</name> <operator>+</operator> <name>MAX_IN_OVERHEAD</name></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>BR_ERR_BAD_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>max_frag_len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>log_max_frag_len</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>peer_log_max_frag_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sslrec_out_clear_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_ready_in</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_ready_out</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>engine_clearbuf</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>make_ready_in</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_ready_out</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>rng_init</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>rng_init_done</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>













<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>br_multihash_getimpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>br_sha256_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>br_multihash_getimpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>br_sha384_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>br_multihash_getimpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>,
<argument><expr><name>br_sha1_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>BR_ERR_BAD_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>br_hmac_drbg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>rng</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>rng_init_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>br_ssl_engine_init_rand</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rng_init</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cc</name><operator>-&gt;</operator><name>rng_os_rand_done</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>br_prng_seeder</name></type> <name>sd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>br_prng_seeder_system</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sd</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>rng</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>rng_init_done</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>rng_os_rand_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>rng_init_done</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>BR_ERR_NO_RANDOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_inject_entropy</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rng_init</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>br_hmac_drbg_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>rng</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>rng_init_done</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>recvrec_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>shutdown_recv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>











<switch>switch <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_IO_IN</name></expr>:</case>
<case>case <expr><name>BR_IO_INOUT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>==</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>ibuf_len</name></name> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>ibuf_len</name></name> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<return>return <expr><name><name>rc</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>+</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>recvrec_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pbuf_len</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>==</operator> <name>BR_IO_INOUT</name> <operator>&amp;&amp;</operator> <name><name>rc</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>==</operator> <name><name>rc</name><operator>-&gt;</operator><name>obuf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>=</operator> <name>BR_IO_IN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixb</name></name> <operator>=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>+=</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixc</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>rlen</name></decl>;</decl_stmt>













<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>record_type_in</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>ibuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>br_dec16be</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>version</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>BR_ERR_UNSUPPORTED_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>version_in</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rc</name><operator>-&gt;</operator><name>version_in</name></name> <operator>!=</operator> <name>version</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>BR_ERR_BAD_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>version_in</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>











<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>br_dec16be</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>incrypt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>rc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>check_length</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>rc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>BR_ERR_BAD_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&gt;</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>ibuf_len</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>BR_ERR_TOO_LARGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&gt;</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>BR_ERR_BAD_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>














<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>make_ready_in</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixb</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixc</name></name> <operator>=</operator> <name>rlen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rc</name><operator>-&gt;</operator><name>incrypt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>ixc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>pbuf_len</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name><name>rc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>decrypt</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>vtable</name></name></expr></argument>,
<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>record_type_in</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>version_in</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pbuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pbuf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>BR_ERR_BAD_MAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>pbuf</name> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>ibuf</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixb</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>+</operator> <name>pbuf_len</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>==</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>make_ready_in</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>br_ssl_engine_recvrec_finished</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_IO_IN</name></expr>:</case>
<case>case <expr><name>BR_IO_INOUT</name></expr>:</case>
<return>return <expr><name><name>rc</name><operator>-&gt;</operator><name>ixc</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>recvpld_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<switch>switch <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_IO_IN</name></expr>:</case>
<case>case <expr><name>BR_IO_INOUT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixb</name></name> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>+</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name><operator>)</operator></expr></else></ternary></expr>;</return>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>recvpld_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>==</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixb</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>ixc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>make_ready_in</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ixa</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>ixb</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>sendpld_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<switch>switch <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_IO_OUT</name></expr>:</case>
<case>case <expr><name>BR_IO_INOUT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>obuf</name></name> <operator>+</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name><operator>)</operator></expr></else></ternary></expr>;</return>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>sendpld_flush</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>xlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>==</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>xlen</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name><name>rc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>encrypt</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>vtable</name></name></expr></argument>,
<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>record_type_out</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>version_out</name></name></expr></argument>,
<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>obuf</name></name> <operator>+</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf</name> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>obuf</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>oxc</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>+</operator> <name>xlen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sendpld_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>==</operator> <name>BR_IO_INOUT</name> <operator>&amp;&amp;</operator> <name><name>rc</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>==</operator> <name><name>rc</name><operator>-&gt;</operator><name>obuf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name> <operator>=</operator> <name>BR_IO_OUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>&gt;=</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sendpld_flush</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>sendrec_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<switch>switch <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>iomode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_IO_OUT</name></expr>:</case>
<case>case <expr><name>BR_IO_INOUT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>oxc</name></name> <operator>&gt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxc</name></name> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>rc</name><operator>-&gt;</operator><name>obuf</name></name> <operator>+</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sendrec_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name> <operator>=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>+=</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>==</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>make_ready_out</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>has_rec_tosend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>==</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxb</name></name> <operator>&amp;&amp;</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxa</name></name> <operator>!=</operator> <name><name>rc</name><operator>-&gt;</operator><name>oxc</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>clear_max_plaintext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_clear_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>end</name> <operator>-</operator> <operator>*</operator><name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>start</name> <operator>+</operator> <literal type="number">16384</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>clear_encrypt</name><parameter_list>(<parameter><decl><type><name>br_sslrec_out_clear_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>record_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>*</operator><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_class</name></type> <name>br_sslrec_out_clear_vtable</name> <init>= <expr><block>{
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sslrec_out_clear_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;</operator><name>clear_max_plaintext</name></expr>,
<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
<argument><expr><name>int</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;</operator><name>clear_encrypt</name></expr>
}</block></expr></init></decl>;</decl_stmt>




















































<function><type><name>void</name></type>
<name>br_ssl_engine_set_suites</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>suites</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suites_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>suites_num</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>suites</name><operator>)</operator> <operator>&gt;</operator> <sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>suites_buf</name></name></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>BR_ERR_BAD_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>suites_buf</name></name></expr></argument>, <argument><expr><name>suites</name></expr></argument>, <argument><expr><name>suites_num</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>suites_num</name></name> <operator>=</operator> <name>suites_num</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>jump_handshake</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>hlen_in</name></decl>, <decl><type ref="prev"/><name>hlen_out</name></decl>;</decl_stmt>







<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>hbuf_in</name></name> <operator>=</operator> <call><name>recvpld_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hlen_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>hbuf_in</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>cc</name><operator>-&gt;</operator><name>record_type_in</name></name> <operator>==</operator> <name>BR_SSL_APPLICATION_DATA</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hlen_in</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>saved_hbuf_out</name></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>hbuf_out</name></name> <operator>=</operator> <call><name>sendpld_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hlen_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>hbuf_out</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>br_ssl_engine_has_pld_to_send</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hlen_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>hlen_in</name></name> <operator>=</operator> <name>hlen_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>hlen_out</name></name> <operator>=</operator> <name>hlen_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>hsrun</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_closed</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>hbuf_out</name></name> <operator>!=</operator> <name><name>cc</name><operator>-&gt;</operator><name>saved_hbuf_out</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sendpld_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>hbuf_out</name></name> <operator>-</operator> <name><name>cc</name><operator>-&gt;</operator><name>saved_hbuf_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hlen_in</name> <operator>!=</operator> <name><name>cc</name><operator>-&gt;</operator><name>hlen_in</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>recvpld_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>hlen_in</name> <operator>-</operator> <name><name>cc</name><operator>-&gt;</operator><name>hlen_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>hlen_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name>action</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_flush_record</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>hbuf_out</name></name> <operator>!=</operator> <name><name>cc</name><operator>-&gt;</operator><name>saved_hbuf_out</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sendpld_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>hbuf_out</name></name> <operator>-</operator> <name><name>cc</name><operator>-&gt;</operator><name>saved_hbuf_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_has_pld_to_send</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sendpld_flush</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>saved_hbuf_out</name></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>hbuf_out</name></name> <operator>=</operator> <call><name>sendpld_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>hlen_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>br_ssl_engine_sendapp_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>application_data</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>sendpld_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_sendapp_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sendpld_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>br_ssl_engine_recvapp_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>application_data</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>||</operator> <name><name>cc</name><operator>-&gt;</operator><name>record_type_in</name></name> <operator>!=</operator> <name>BR_SSL_APPLICATION_DATA</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>recvpld_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_recvapp_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>recvpld_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>br_ssl_engine_sendrec_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>sendrec_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_sendrec_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sendrec_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>has_rec_tosend</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>record_type_out</name></name> <operator>!=</operator> <name>BR_SSL_APPLICATION_DATA</name>
<operator>||</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>application_data</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>jump_handshake</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>br_ssl_engine_recvrec_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>recvrec_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_recvrec_ack</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>recvrec_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_closed</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>recvpld_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>record_type_in</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_SSL_CHANGE_CIPHER_SPEC</name></expr>:</case>
<case>case <expr><name>BR_SSL_ALERT</name></expr>:</case>
<case>case <expr><name>BR_SSL_HANDSHAKE</name></expr>:</case>
<expr_stmt><expr><call><name>jump_handshake</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BR_SSL_APPLICATION_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>application_data</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>application_data</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>recvpld_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<default>default:</default>
<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>BR_ERR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_close</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>br_ssl_engine_closed</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jump_handshake</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>br_ssl_engine_renegotiate</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_closed</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>cc</name><operator>-&gt;</operator><name>reneg</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>BR_OPT_NO_RENEGOTIATION</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>br_ssl_engine_recvapp_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jump_handshake</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name></type>
<name>br_ssl_engine_current_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_closed</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>BR_SSL_CLOSED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_sendrec_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>|=</operator> <name>BR_SSL_SENDREC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_recvrec_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>|=</operator> <name>BR_SSL_RECVREC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_sendapp_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>|=</operator> <name>BR_SSL_SENDAPP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_recvapp_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>|=</operator> <name>BR_SSL_RECVAPP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_flush</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>br_ssl_engine_closed</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>application_data</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sendpld_flush</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_hs_reset</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hsinit</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hsrun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>engine_clearbuf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>dp</name></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>dp_stack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>rp</name></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>rp_stack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hsinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>hsrun</name></name> <operator>=</operator> <name>hsrun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>shutdown_recv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>application_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>alert</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jump_handshake</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>br_tls_prf_impl</name></type>
<name>br_ssl_engine_get_PRF</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name>BR_TLS12</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prf_id</name> <operator>==</operator> <name>br_sha384_ID</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>prf_sha384</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>prf_sha256</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>prf10</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_compute_master</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pms</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pms_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_tls_prf_impl</name></type> <name>iprf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_tls_prf_seed_chunk</name></type> <name><name>seed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name><name>cc</name><operator>-&gt;</operator><name>client_random</name></name></expr>, <expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>client_random</name></name></sizeof></expr> }</block></expr>,
<expr><block>{ <expr><name><name>cc</name><operator>-&gt;</operator><name>server_random</name></name></expr>, <expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>server_random</name></name></sizeof></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iprf</name> <operator>=</operator> <call><name>br_ssl_engine_get_PRF</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iprf</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>master_secret</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>master_secret</name></name></sizeof></expr></argument>,
<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>pms_len</name></expr></argument>, <argument><expr><literal type="string">"master secret"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>compute_key_block</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>half_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_tls_prf_impl</name></type> <name>iprf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_tls_prf_seed_chunk</name></type> <name><name>seed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name><name>cc</name><operator>-&gt;</operator><name>server_random</name></name></expr>, <expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>server_random</name></name></sizeof></expr> }</block></expr>,
<expr><block>{ <expr><name><name>cc</name><operator>-&gt;</operator><name>client_random</name></name></expr>, <expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>client_random</name></name></sizeof></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iprf</name> <operator>=</operator> <call><name>br_ssl_engine_get_PRF</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iprf</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>half_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>master_secret</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>master_secret</name></name></sizeof></expr></argument>,
<argument><expr><literal type="string">"key expansion"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_switch_cbc_in</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mac_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcdec_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cipher_key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kb</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cipher_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mac_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>imh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mac_key_len</name></decl>, <decl><type ref="prev"/><name>mac_out_len</name></decl>, <decl><type ref="prev"/><name>iv_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>imh</name> <operator>=</operator> <call><name>br_ssl_engine_get_hash</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>mac_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mac_out_len</name> <operator>=</operator> <operator>(</operator><name><name>imh</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_OUT_OFF</name><operator>)</operator> <operator>&amp;</operator> <name>BR_HASHDESC_OUT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mac_key_len</name> <operator>=</operator> <name>mac_out_len</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name>BR_TLS11</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iv_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>iv_len</name> <operator>=</operator> <name><name>bc_impl</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>compute_key_block</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>,
<argument><expr><name>mac_key_len</name> <operator>+</operator> <name>cipher_key_len</name> <operator>+</operator> <name>iv_len</name></expr></argument>, <argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mac_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>mac_key_len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><operator>(</operator><name>mac_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>cipher_key_len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><operator>(</operator><operator>(</operator><name>mac_key_len</name> <operator>+</operator> <name>cipher_key_len</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>iv_len</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mac_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>mac_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><operator>(</operator><name>mac_key_len</name> <operator>+</operator> <name>cipher_key_len</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iv_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>icbc_in</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>cbc</name><operator>.</operator><name>vtable</name></name></expr></argument>,
<argument><expr><name>bc_impl</name></expr></argument>, <argument><expr><name>cipher_key</name></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>,
<argument><expr><name>imh</name></expr></argument>, <argument><expr><name>mac_key</name></expr></argument>, <argument><expr><name>mac_key_len</name></expr></argument>, <argument><expr><name>mac_out_len</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>incrypt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_switch_cbc_out</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mac_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcenc_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cipher_key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kb</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cipher_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mac_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>imh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mac_key_len</name></decl>, <decl><type ref="prev"/><name>mac_out_len</name></decl>, <decl><type ref="prev"/><name>iv_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>imh</name> <operator>=</operator> <call><name>br_ssl_engine_get_hash</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>mac_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mac_out_len</name> <operator>=</operator> <operator>(</operator><name><name>imh</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_OUT_OFF</name><operator>)</operator> <operator>&amp;</operator> <name>BR_HASHDESC_OUT_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mac_key_len</name> <operator>=</operator> <name>mac_out_len</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name>BR_TLS11</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iv_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>iv_len</name> <operator>=</operator> <name><name>bc_impl</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>compute_key_block</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>,
<argument><expr><name>mac_key_len</name> <operator>+</operator> <name>cipher_key_len</name> <operator>+</operator> <name>iv_len</name></expr></argument>, <argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mac_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>mac_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><operator>(</operator><name>mac_key_len</name> <operator>+</operator> <name>cipher_key_len</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mac_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>mac_key_len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><operator>(</operator><name>mac_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>cipher_key_len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><operator>(</operator><operator>(</operator><name>mac_key_len</name> <operator>+</operator> <name>cipher_key_len</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>iv_len</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iv_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>icbc_out</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>cbc</name><operator>.</operator><name>vtable</name></name></expr></argument>,
<argument><expr><name>bc_impl</name></expr></argument>, <argument><expr><name>cipher_key</name></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>,
<argument><expr><name>imh</name></expr></argument>, <argument><expr><name>mac_key</name></expr></argument>, <argument><expr><name>mac_key_len</name></expr></argument>, <argument><expr><name>mac_out_len</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_switch_gcm_in</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cipher_key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kb</name><index>[<expr><literal type="number">72</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cipher_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_key_block</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><name>cipher_key_len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>cipher_key_len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><operator>(</operator><name>cipher_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>cipher_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>igcm_in</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>gcm</name><operator>.</operator><name>vtable</name><operator>.</operator><name>in</name></name></expr></argument>,
<argument><expr><name>bc_impl</name></expr></argument>, <argument><expr><name>cipher_key</name></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ighash</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>incrypt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_switch_gcm_out</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cipher_key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kb</name><index>[<expr><literal type="number">72</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cipher_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_key_block</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><name>cipher_key_len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>cipher_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>cipher_key_len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><operator>(</operator><name>cipher_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>igcm_out</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>gcm</name><operator>.</operator><name>vtable</name><operator>.</operator><name>out</name></name></expr></argument>,
<argument><expr><name>bc_impl</name></expr></argument>, <argument><expr><name>cipher_key</name></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ighash</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_switch_chapol_in</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kb</name><index>[<expr><literal type="number">88</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cipher_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_key_block</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">76</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>ichapol_in</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>chapol</name><operator>.</operator><name>vtable</name><operator>.</operator><name>in</name></name></expr></argument>,
<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ichacha</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ipoly</name></name></expr></argument>, <argument><expr><name>cipher_key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>incrypt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_switch_chapol_out</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kb</name><index>[<expr><literal type="number">88</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cipher_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_key_block</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">76</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>ichapol_out</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>chapol</name><operator>.</operator><name>vtable</name><operator>.</operator><name>out</name></name></expr></argument>,
<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ichacha</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ipoly</name></name></expr></argument>, <argument><expr><name>cipher_key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_switch_ccm_in</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>cipher_key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kb</name><index>[<expr><literal type="number">72</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cipher_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_key_block</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><name>cipher_key_len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>cipher_key_len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><operator>(</operator><name>cipher_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>cipher_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>iccm_in</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ccm</name><operator>.</operator><name>vtable</name><operator>.</operator><name>in</name></name></expr></argument>,
<argument><expr><name>bc_impl</name></expr></argument>, <argument><expr><name>cipher_key</name></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>incrypt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_ssl_engine_switch_ccm_out</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>cipher_key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kb</name><index>[<expr><literal type="number">72</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cipher_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_key_block</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><name>cipher_key_len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>cipher_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cipher_key</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><name>cipher_key_len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><index>[<expr><operator>(</operator><name>cipher_key_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>iccm_out</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ccm</name><operator>.</operator><name>vtable</name><operator>.</operator><name>out</name></name></expr></argument>,
<argument><expr><name>bc_impl</name></expr></argument>, <argument><expr><name>cipher_key</name></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
