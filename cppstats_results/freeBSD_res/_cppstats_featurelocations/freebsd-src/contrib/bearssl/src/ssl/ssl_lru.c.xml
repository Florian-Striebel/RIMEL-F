<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ssl/ssl_lru.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>





















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_ID_LEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASTER_SECRET_LEN</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_ID_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASTER_SECRET_OFF</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERSION_OFF</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIPHER_SUITE_OFF</name></cpp:macro> <cpp:value>82</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_PREV_OFF</name></cpp:macro> <cpp:value>84</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_NEXT_OFF</name></cpp:macro> <cpp:value>88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_LEFT_OFF</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_RIGHT_OFF</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LRU_ENTRY_LEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_NULL</name></cpp:macro> <cpp:value>((uint32_t)-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSET</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>off</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline uint32_t get_ ##name(br_ssl_session_cache_lru *cc, uint32_t x) { return br_dec32be(cc-&gt;store + x + (off)); } static inline void set_ ##name(br_ssl_session_cache_lru *cc, uint32_t x, uint32_t val) { br_enc32be(cc-&gt;store + x + (off), val); }</cpp:value></cpp:define>










<macro><name>GETSET</name><argument_list>(<argument>prev</argument>, <argument>LIST_PREV_OFF</argument>)</argument_list></macro>
<macro><name>GETSET</name><argument_list>(<argument>next</argument>, <argument>LIST_NEXT_OFF</argument>)</argument_list></macro>
<macro><name>GETSET</name><argument_list>(<argument>left</argument>, <argument>TREE_LEFT_OFF</argument>)</argument_list></macro>
<macro><name>GETSET</name><argument_list>(<argument>right</argument>, <argument>TREE_RIGHT_OFF</argument>)</argument_list></macro>















<function><type><specifier>static</specifier> <name>void</name></type>
<name>mask_id</name><parameter_list>(<parameter><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_hmac_key_context</name></type> <name>hkc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_hmac_context</name></type> <name>hc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hkc</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>index_key</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>index_key</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hkc</name></expr></argument>, <argument><expr><name>SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_hmac_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>find_node</name><parameter_list>(<parameter><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>addr_link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>ADDR_NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>x</name> <operator>!=</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>SESSION_ID_OFF</name></expr></argument>, <argument><expr><name>SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>TREE_LEFT_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>get_left</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr_link</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>addr_link</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>TREE_RIGHT_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>get_right</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>addr_link</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>addr_link</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ADDR_NULL</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>find_replacement_node</name><parameter_list>(<parameter><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y1</name> <operator>=</operator> <call><name>get_left</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y1</name> <operator>!=</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>TREE_LEFT_OFF</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>get_right</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>al</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
<return>return <expr><name>y1</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>TREE_RIGHT_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <call><name>get_right</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y1</name> <operator>!=</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>TREE_RIGHT_OFF</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>get_left</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>al</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
<return>return <expr><name>y1</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>TREE_LEFT_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>al</name> <operator>=</operator> <name>ADDR_NULL</name></expr>;</expr_stmt>
<return>return <expr><name>ADDR_NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>set_link</name><parameter_list>(<parameter><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>alx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alx</name> <operator>==</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>alx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_node</name><parameter_list>(<parameter><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>alx</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>aly</name></decl>;</decl_stmt>






















<expr_stmt><expr><call><name>find_node</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>SESSION_ID_OFF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>find_replacement_node</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>;</decl_stmt>





<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>get_left</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>get_right</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_link</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>aly</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>set_link</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>alx</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>set_left</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>get_left</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_right</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>get_right</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>set_link</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>alx</name></expr></argument>, <argument><expr><name>ADDR_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lru_save</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_session_cache_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>server_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_session_parameters</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>id</name><index>[<expr><name>SESSION_ID_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>alx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>br_ssl_session_cache_lru</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>store_len</name></name> <operator>&lt;</operator> <name>LRU_ENTRY_LEN</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cc</name><operator>-&gt;</operator><name>init_done</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_hmac_drbg_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server_ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>rng</name></name></expr></argument>,
<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>index_key</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>index_key</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>br_hmac_drbg_get_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server_ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>rng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>init_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mask_id</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><call><name>find_node</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>store_ptr</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>store_len</name></name> <operator>-</operator> <name>LRU_ENTRY_LEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <call><name>get_prev</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>ADDR_NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>set_next</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>, <argument><expr><name>ADDR_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>remove_node</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>store_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>store_ptr</name></name> <operator>+=</operator> <name>LRU_ENTRY_LEN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>find_node</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_link</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>alx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_left</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ADDR_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_right</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ADDR_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>set_prev</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>set_prev</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ADDR_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_next</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>SESSION_ID_OFF</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>MASTER_SECRET_OFF</name></expr></argument>,
<argument><expr><name><name>params</name><operator>-&gt;</operator><name>master_secret</name></name></expr></argument>, <argument><expr><name>MASTER_SECRET_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>VERSION_OFF</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>CIPHER_SUITE_OFF</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>cipher_suite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lru_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_session_cache_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_server_context</name> <modifier>*</modifier></type><name>server_ctx</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_session_parameters</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>id</name><index>[<expr><name>SESSION_ID_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>server_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>br_ssl_session_cache_lru</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cc</name><operator>-&gt;</operator><name>init_done</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mask_id</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find_node</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>version</name></decl>;</decl_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>br_dec16be</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>VERSION_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>cipher_suite</name></name> <operator>=</operator> <call><name>br_dec16be</name><argument_list>(
<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>CIPHER_SUITE_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>master_secret</name></name></expr></argument>,
<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>MASTER_SECRET_OFF</name></expr></argument>,
<argument><expr><name>MASTER_SECRET_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name><name>cc</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_prev</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_next</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_next</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>set_prev</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>set_prev</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_next</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_prev</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ADDR_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>br_ssl_session_cache_class</name></type> <name>lru_class</name> <init>= <expr><block>{
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_ssl_session_cache_lru</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>&amp;</operator><name>lru_save</name></expr>,
<expr><operator>&amp;</operator><name>lru_load</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type>
<name>br_ssl_session_cache_lru_init</name><parameter_list>(<parameter><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>store_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>lru_class</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>=</operator> <name>store</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>store_len</name></name> <operator>=</operator> <name>store_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>store_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>init_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>ADDR_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>ADDR_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>ADDR_NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>br_ssl_session_cache_lru_forget</name><parameter_list>(
<parameter><decl><type><name>br_ssl_session_cache_lru</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mid</name><index>[<expr><name>SESSION_ID_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cc</name><operator>-&gt;</operator><name>init_done</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>











<expr_stmt><expr><call><name>mask_id</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>find_node</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>ADDR_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>store</name></name> <operator>+</operator> <name>addr</name> <operator>+</operator> <name>VERSION_OFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
