<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ec/ec_prime_i15.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>








<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>P256_P</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0111</literal></expr>,
<expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x003F</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x1000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x4000</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>,
<expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x0001</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>P256_R2</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0111</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x6000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x7FFC</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>,
<expr><literal type="number">0x7FBF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FBF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x77FF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>,
<expr><literal type="number">0x4FFF</literal></expr>, <expr><literal type="number">0x0000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>P256_B</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0111</literal></expr>,
<expr><literal type="number">0x770C</literal></expr>, <expr><literal type="number">0x5EEF</literal></expr>, <expr><literal type="number">0x29C4</literal></expr>, <expr><literal type="number">0x3EC4</literal></expr>, <expr><literal type="number">0x6273</literal></expr>, <expr><literal type="number">0x0486</literal></expr>, <expr><literal type="number">0x4543</literal></expr>, <expr><literal type="number">0x3993</literal></expr>,
<expr><literal type="number">0x3C01</literal></expr>, <expr><literal type="number">0x6B56</literal></expr>, <expr><literal type="number">0x212E</literal></expr>, <expr><literal type="number">0x57EE</literal></expr>, <expr><literal type="number">0x4882</literal></expr>, <expr><literal type="number">0x204B</literal></expr>, <expr><literal type="number">0x7483</literal></expr>, <expr><literal type="number">0x3C16</literal></expr>,
<expr><literal type="number">0x0187</literal></expr>, <expr><literal type="number">0x0000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>P384_P</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0199</literal></expr>,
<expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x7FC0</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>,
<expr><literal type="number">0x7EFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>,
<expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>,
<expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x01FF</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>P384_R2</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0199</literal></expr>,
<expr><literal type="number">0x1000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0010</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x7F00</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x01FF</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x1000</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x2000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>P384_B</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0199</literal></expr>,
<expr><literal type="number">0x7333</literal></expr>, <expr><literal type="number">0x2096</literal></expr>, <expr><literal type="number">0x70D1</literal></expr>, <expr><literal type="number">0x2310</literal></expr>, <expr><literal type="number">0x3020</literal></expr>, <expr><literal type="number">0x6197</literal></expr>, <expr><literal type="number">0x1464</literal></expr>, <expr><literal type="number">0x35BB</literal></expr>,
<expr><literal type="number">0x70CA</literal></expr>, <expr><literal type="number">0x0117</literal></expr>, <expr><literal type="number">0x1920</literal></expr>, <expr><literal type="number">0x4136</literal></expr>, <expr><literal type="number">0x5FC8</literal></expr>, <expr><literal type="number">0x5713</literal></expr>, <expr><literal type="number">0x4938</literal></expr>, <expr><literal type="number">0x7DD2</literal></expr>,
<expr><literal type="number">0x4DD2</literal></expr>, <expr><literal type="number">0x4A71</literal></expr>, <expr><literal type="number">0x0220</literal></expr>, <expr><literal type="number">0x683E</literal></expr>, <expr><literal type="number">0x2C87</literal></expr>, <expr><literal type="number">0x4DB1</literal></expr>, <expr><literal type="number">0x7BFF</literal></expr>, <expr><literal type="number">0x6C09</literal></expr>,
<expr><literal type="number">0x0452</literal></expr>, <expr><literal type="number">0x0084</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>P521_P</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x022B</literal></expr>,
<expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>,
<expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>,
<expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>,
<expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>,
<expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x07FF</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>P521_R2</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x022B</literal></expr>,
<expr><literal type="number">0x0100</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>P521_B</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x022B</literal></expr>,
<expr><literal type="number">0x7002</literal></expr>, <expr><literal type="number">0x6A07</literal></expr>, <expr><literal type="number">0x751A</literal></expr>, <expr><literal type="number">0x228F</literal></expr>, <expr><literal type="number">0x71EF</literal></expr>, <expr><literal type="number">0x5869</literal></expr>, <expr><literal type="number">0x20F4</literal></expr>, <expr><literal type="number">0x1EFC</literal></expr>,
<expr><literal type="number">0x7357</literal></expr>, <expr><literal type="number">0x37E0</literal></expr>, <expr><literal type="number">0x4EEC</literal></expr>, <expr><literal type="number">0x605E</literal></expr>, <expr><literal type="number">0x1652</literal></expr>, <expr><literal type="number">0x26F6</literal></expr>, <expr><literal type="number">0x31FA</literal></expr>, <expr><literal type="number">0x4A8F</literal></expr>,
<expr><literal type="number">0x6193</literal></expr>, <expr><literal type="number">0x3C2A</literal></expr>, <expr><literal type="number">0x3C42</literal></expr>, <expr><literal type="number">0x48C7</literal></expr>, <expr><literal type="number">0x3489</literal></expr>, <expr><literal type="number">0x6771</literal></expr>, <expr><literal type="number">0x4C57</literal></expr>, <expr><literal type="number">0x5CCD</literal></expr>,
<expr><literal type="number">0x2725</literal></expr>, <expr><literal type="number">0x545B</literal></expr>, <expr><literal type="number">0x503B</literal></expr>, <expr><literal type="number">0x5B42</literal></expr>, <expr><literal type="number">0x21A0</literal></expr>, <expr><literal type="number">0x2534</literal></expr>, <expr><literal type="number">0x687E</literal></expr>, <expr><literal type="number">0x70E4</literal></expr>,
<expr><literal type="number">0x1618</literal></expr>, <expr><literal type="number">0x27D7</literal></expr>, <expr><literal type="number">0x0465</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>R2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>p0i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>point_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>curve_params</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>curve_params</name> <modifier>*</modifier></type>
<name>id_to_curve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>curve_params</name></type> <name><name>pp</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>P256_P</name></expr>, <expr><name>P256_B</name></expr>, <expr><name>P256_R2</name></expr>, <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">65</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>P384_P</name></expr>, <expr><name>P384_B</name></expr>, <expr><name>P384_R2</name></expr>, <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">97</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>P521_P</name></expr>, <expr><name>P521_B</name></expr>, <expr><name>P521_R2</name></expr>, <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">133</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><name>curve</name> <operator>-</operator> <name>BR_EC_secp256r1</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I15_LEN</name></cpp:macro> <cpp:value>((BR_MAX_EC_SIZE + 29) / 15)</cpp:value></cpp:define>







<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>jacobian</name>;</typedef>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSET</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0x0000 + ((d) &lt;&lt; 8) + ((a) &lt;&lt; 4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MADD</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0x1000 + ((d) &lt;&lt; 8) + ((a) &lt;&lt; 4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSUB</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0x2000 + ((d) &lt;&lt; 8) + ((a) &lt;&lt; 4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMUL</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0x3000 + ((d) &lt;&lt; 8) + ((a) &lt;&lt; 4) + (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINV</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0x4000 + ((d) &lt;&lt; 8) + ((a) &lt;&lt; 4) + (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTZ</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0x5000 + ((d) &lt;&lt; 8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENDCODE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P1x</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P1y</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P1z</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P2x</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P2y</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P2z</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Px</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pz</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t1</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t2</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t3</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t4</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t5</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t6</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t7</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t8</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t9</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t10</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>



















<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>code_double</name><index>[]</index></name> <init>= <expr><block>{



<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>Pz</name></expr></argument>, <argument><expr><name>Pz</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MSET</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>Px</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MADD</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>Px</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSET</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MADD</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MADD</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>Py</name></expr></argument>, <argument><expr><name>Py</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MADD</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>Px</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MADD</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>Px</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>Px</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>Px</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>Py</name></expr></argument>, <argument><expr><name>Pz</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSET</name><argument_list>(<argument><expr><name>Pz</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MADD</name><argument_list>(<argument><expr><name>Pz</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>,





<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>Px</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>Py</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>Py</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>Py</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>,

<expr><name>ENDCODE</name></expr>
}</block></expr></init></decl>;</decl_stmt>



















































<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>code_add</name><index>[]</index></name> <init>= <expr><block>{



<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>P2z</name></expr></argument>, <argument><expr><name>P2z</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>P1x</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>P2z</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>P1y</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>P1z</name></expr></argument>, <argument><expr><name>P1z</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>P2x</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>P1z</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>P2y</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MTZ</name><argument_list>(<argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,





<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>P1x</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>P1x</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>P1x</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>P1x</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name>P1x</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>P1y</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>P1y</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>P1z</name></expr></argument>, <argument><expr><name>P2z</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>P1z</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,

<expr><name>ENDCODE</name></expr>
}</block></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>code_check</name><index>[]</index></name> <init>= <expr><block>{


<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>P1x</name></expr></argument>, <argument><expr><name>P2x</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>P1y</name></expr></argument>, <argument><expr><name>P2x</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSET</name><argument_list>(<argument><expr><name>P1x</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSET</name><argument_list>(<argument><expr><name>P1y</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>P1x</name></expr></argument>, <argument><expr><name>P1x</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>P1x</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>P1x</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>P1x</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>P1x</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MADD</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>P2y</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>P1y</name></expr></argument>, <argument><expr><name>P1y</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MSUB</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MTZ</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>P1z</name></expr></argument>, <argument><expr><name>P2x</name></expr></argument>, <argument><expr><name>P2z</name></expr></argument>)</argument_list></call></expr>,

<expr><name>ENDCODE</name></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>code_affine</name><index>[]</index></name> <init>= <expr><block>{


<expr><call><name>MSET</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>P1z</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>P1z</name></expr></argument>, <argument><expr><name>P1z</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>P1z</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>P2z</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MINV</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MSET</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>P1y</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>P1y</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>MSET</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>P1x</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MMUL</name><argument_list>(<argument><expr><name>P1x</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>,

<expr><name>ENDCODE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>run_code</name><parameter_list>(<parameter><decl><type><name>jacobian</name> <modifier>*</modifier></type><name>P1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jacobian</name> <modifier>*</modifier></type><name>P2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>curve_params</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>t</name><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>P1x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>I15_LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>P2x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>I15_LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>code</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>op</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>op</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>op</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>&gt;&gt;=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ctl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>char</name> <name><name>tp</name><index>[<expr><operator>(</operator><name>BR_MAX_EC_SIZE</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>, <argument><expr><name>I15_LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>br_i15_add</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctl</name> <operator>|=</operator> <call><name>NOT</name><argument_list>(<argument><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>br_i15_add</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>br_i15_montymul</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p0i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><index>[<expr><name>plen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_modpow</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>,
<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p0i</name></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>~</operator><call><name>br_i15_iszero</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>P1x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>I15_LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_one</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>plen</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0001</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>point_zero</name><parameter_list>(<parameter><decl><type><name>jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>curve_params</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>P</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>P</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>point_double</name><parameter_list>(<parameter><decl><type><name>jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>curve_params</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>run_code</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><name>code_double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>point_add</name><parameter_list>(<parameter><decl><type><name>jacobian</name> <modifier>*</modifier></type><name>P1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jacobian</name> <modifier>*</modifier></type><name>P2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>curve_params</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>run_code</name><argument_list>(<argument><expr><name>P1</name></expr></argument>, <argument><expr><name>P2</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><name>code_add</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>point_mul</name><parameter_list>(<parameter><decl><type><name>jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>curve_params</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>














<decl_stmt><decl><type><name>uint32_t</name></type> <name>qz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jacobian</name></type> <name>P2</name></decl>, <decl><type ref="prev"/><name>P3</name></decl>, <decl><type ref="prev"/><name>Q</name></decl>, <decl><type ref="prev"/><name>T</name></decl>, <decl><type ref="prev"/><name>U</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P2</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><sizeof>sizeof <name>P2</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P2</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P3</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><sizeof>sizeof <name>P3</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P2</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>point_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>xlen</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bnz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>point_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><sizeof>sizeof <name>T</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><sizeof>sizeof <name>U</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&gt;&gt;</operator> <name>k</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bnz</name> <operator>=</operator> <call><name>NEQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P2</name></expr></argument>, <argument><expr><sizeof>sizeof <name>T</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P3</name></expr></argument>, <argument><expr><sizeof>sizeof <name>T</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>bnz</name> <operator>&amp;</operator> <name>qz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>bnz</name> <operator>&amp;</operator> <operator>~</operator><name>qz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qz</name> <operator>&amp;=</operator> <operator>~</operator><name>bnz</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>x</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>point_decode</name><parameter_list>(<parameter><decl><type><name>jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>curve_params</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>

















<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>, <decl><type ref="prev"/><name>zlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jacobian</name></type> <name>Q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_zero</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>plen</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>br_i15_decode_mod</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>br_i15_decode_mod</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>plen</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name>zlen</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>Q</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>R2</name></name></expr></argument>, <argument><expr><name>zlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>Q</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>zlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_one</name><argument_list>(<argument><expr><name><name>Q</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>~</operator><call><name>run_code</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><name>code_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>point_encode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>curve_params</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jacobian</name></type> <name>Q</name></decl>, <decl><type ref="prev"/><name>T</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_one</name><argument_list>(<argument><expr><name><name>T</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>run_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><name>code_affine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>Q</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>plen</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name><name>Q</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>br_ec_curve_def</name> <modifier>*</modifier></type>
<name>id_to_curve_def</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>curve</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_EC_secp256r1</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name>br_secp256r1</name></expr>;</return>
<case>case <expr><name>BR_EC_secp384r1</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name>br_secp384r1</name></expr>;</return>
<case>case <expr><name>BR_EC_secp521r1</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name>br_secp521r1</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>api_generator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_curve_def</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>id_to_curve_def</name><argument_list>(<argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>generator_len</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>cd</name><operator>-&gt;</operator><name>generator</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>api_order</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_curve_def</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>id_to_curve_def</name><argument_list>(<argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>order_len</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>cd</name><operator>-&gt;</operator><name>order</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>api_xoff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>api_generator</name><argument_list>(<argument><expr><name>curve</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>api_mul</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>G</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Glen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>curve_params</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jacobian</name></type> <name>P</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>id_to_curve</name><argument_list>(<argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>point_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>Glen</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Glen</name> <operator>==</operator> <name><name>cc</name><operator>-&gt;</operator><name>point_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>point_encode</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>api_mulgen</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>G</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Glen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>api_generator</name><argument_list>(<argument><expr><name>curve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Glen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>Glen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_mul</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>Glen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Glen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>api_muladd</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>curve_params</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jacobian</name></type> <name>P</name></decl>, <decl><type ref="prev"/><name>Q</name></decl>;</decl_stmt>







<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>id_to_curve</name><argument_list>(<argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>point_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>B</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>Glen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>api_generator</name><argument_list>(<argument><expr><name>curve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Glen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>point_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ylen</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>point_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>br_i15_iszero</name><argument_list>(<argument><expr><name><name>P</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>z</name> <operator>&amp;</operator> <operator>~</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_encode</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>z</name> <operator>&amp;</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_prime_i15</name> <init>= <expr><block>{
<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x03800000</literal></expr>,
<expr><operator>&amp;</operator><name>api_generator</name></expr>,
<expr><operator>&amp;</operator><name>api_order</name></expr>,
<expr><operator>&amp;</operator><name>api_xoff</name></expr>,
<expr><operator>&amp;</operator><name>api_mul</name></expr>,
<expr><operator>&amp;</operator><name>api_mulgen</name></expr>,
<expr><operator>&amp;</operator><name>api_muladd</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
