<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ec/ec_pubkey.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>POINT_LEN</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">43</literal></expr>,
<expr><literal type="number">43</literal></expr>,
<expr><literal type="number">43</literal></expr>,
<expr><literal type="number">51</literal></expr>,
<expr><literal type="number">51</literal></expr>,
<expr><literal type="number">61</literal></expr>,
<expr><literal type="number">61</literal></expr>,
<expr><literal type="number">61</literal></expr>,
<expr><literal type="number">73</literal></expr>,
<expr><literal type="number">73</literal></expr>,
<expr><literal type="number">105</literal></expr>,
<expr><literal type="number">105</literal></expr>,
<expr><literal type="number">145</literal></expr>,
<expr><literal type="number">145</literal></expr>,
<expr><literal type="number">41</literal></expr>,
<expr><literal type="number">41</literal></expr>,
<expr><literal type="number">41</literal></expr>,
<expr><literal type="number">49</literal></expr>,
<expr><literal type="number">49</literal></expr>,
<expr><literal type="number">57</literal></expr>,
<expr><literal type="number">57</literal></expr>,
<expr><literal type="number">65</literal></expr>,
<expr><literal type="number">65</literal></expr>,
<expr><literal type="number">97</literal></expr>,
<expr><literal type="number">133</literal></expr>,
<expr><literal type="number">65</literal></expr>,
<expr><literal type="number">97</literal></expr>,
<expr><literal type="number">129</literal></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><literal type="number">56</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>size_t</name></type>
<name>br_ec_compute_pub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>, <parameter><decl><type><name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curve</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>curve</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>curve</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curve</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>curve</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>||</operator> <name>curve</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof <name>POINT_LEN</name></sizeof><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>supported_curves</name></name> <operator>&gt;&gt;</operator> <name>curve</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>POINT_LEN</name><index>[<expr><name>curve</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>mulgen</name></name><argument_list>(<argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr></argument>, <argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>curve</name></name> <operator>=</operator> <name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <name>kbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>qlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
</unit>
