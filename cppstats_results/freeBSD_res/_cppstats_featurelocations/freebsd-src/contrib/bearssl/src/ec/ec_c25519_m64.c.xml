<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ec/ec_c25519_m64.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name> <operator>||</operator> <name>BR_UMUL128</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>GEN</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ORDER</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>api_generator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><name>GEN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>api_order</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><name>ORDER</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>api_xoff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK63</name></cpp:macro> <cpp:value>(((uint64_t)1 &lt;&lt; 63) - (uint64_t)1)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>f255_cswap</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ctl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>w</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name>w</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <name>w</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <name>w</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>f255_add</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>__int128</name></type> <name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name> <operator>&amp;</operator> <name>MASK63</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>









<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t0</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><operator>(</operator><literal type="number">19</literal> <operator>*</operator> <name>cc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t1</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>









<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">19</literal> <operator>*</operator> <name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>f255_sub</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>








<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>__int128</name></type> <name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">38</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>-</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>-</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>







<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><literal type="number">38</literal> <operator>&amp;</operator> <operator>-</operator><name>t4</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">19</literal> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t0</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t1</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>








<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><literal type="number">38</literal> <operator>&amp;</operator> <operator>-</operator><name>t4</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">19</literal> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>f255_mul</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name> <name>__int128</name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>th</name></decl>;</decl_stmt>




<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t3</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t4</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t3</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t4</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t5</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t4</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t5</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t6</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>












<expr_stmt><expr><name>th</name> <operator>=</operator> <name>t7</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t7</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>t6</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>MASK63</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <operator>(</operator><name>t6</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>t5</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <operator>(</operator><name>t5</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>t4</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>





<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t4</name> <operator>*</operator> <literal type="number">19</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t5</name> <operator>*</operator> <literal type="number">19</literal> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t6</name> <operator>*</operator> <literal type="number">19</literal> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t7</name> <operator>*</operator> <literal type="number">19</literal> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name> <operator>&amp;</operator> <name>MASK63</name></expr>;</expr_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><literal type="number">361</literal> <operator>&amp;</operator> <operator>-</operator><name>th</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">19</literal> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>








<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t0</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t4</name>
<operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>th</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t1</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t5</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t6</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t3</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t7</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name> <operator>&amp;</operator> <name>MASK63</name></expr>;</expr_stmt>
<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>






<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t0</name> <operator>+</operator> <operator>(</operator><literal type="number">19</literal> <operator>*</operator> <name>th</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t1</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h0</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>k</name></decl>;</decl_stmt>




<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<expr_stmt><expr><name>th</name> <operator>=</operator> <name>t7</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t7</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>t6</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>MASK63</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <operator>(</operator><name>t6</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>t5</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <operator>(</operator><name>t5</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>t4</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>





<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name>t7</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><literal type="number">361</literal> <operator>&amp;</operator> <operator>-</operator><name>th</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">19</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>h3</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>t7</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>








<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><name>t4</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>






<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">19</literal> <operator>*</operator> <name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>f255_mul_a24</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>__int128</name></type> <name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">121665</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">121665</literal> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">121665</literal> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">121665</literal> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name> <operator>&amp;</operator> <name>MASK63</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t0</name> <operator>+</operator> <operator>(</operator><literal type="number">19</literal> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t1</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>t3</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t0</name> <operator>+</operator> <operator>(</operator><literal type="number">19</literal> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t1</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t3</name> <operator>&amp;</operator> <name>MASK63</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>h0</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">121665</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">121665</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">121665</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">121665</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>t4</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">19</literal> <operator>*</operator> <name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">19</literal> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>f255_final_reduce</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>__int128</name></type> <name>z</name></decl>;</decl_stmt>







<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">19</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name>t0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>t1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name>t2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name>t3</name><operator>)</operator></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>k</name></decl>;</decl_stmt>







<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <name>MASK63</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name>t0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>t1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name>t2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name>t3</name><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>api_mul</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>G</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Glen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>kblen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>x1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>x2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>z2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>x3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>z3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>swap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>Glen</name> <operator>!=</operator> <literal type="number">32</literal> <operator>||</operator> <name>kblen</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>x1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>G</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>G</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>G</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>G</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>MASK63</name></expr>;</expr_stmt>






<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>x2</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>z2</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><sizeof>sizeof <name>x1</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>z3</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><sizeof>sizeof <name>x2</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof <name>k</name></sizeof><operator>)</operator> <operator>-</operator> <name>kblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>k</name> <operator>+</operator> <operator>(</operator><sizeof>sizeof <name>k</name></sizeof><operator>)</operator> <operator>-</operator> <name>kblen</name></expr></argument>, <argument><expr><name>kb</name></expr></argument>, <argument><expr><name>kblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xF8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>swap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">254</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>aa</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bb</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>e</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>da</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cb</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>kt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>kt</name> <operator>=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">31</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>swap</name> <operator>^=</operator> <name>kt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f255_cswap</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f255_cswap</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><name>z3</name></expr></argument>, <argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>swap</name> <operator>=</operator> <name>kt</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_add</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>aa</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_sub</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_sub</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_add</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>z3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_sub</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>z3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>da</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_add</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>da</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_sub</name><argument_list>(<argument><expr><name>z3</name></expr></argument>, <argument><expr><name>da</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>z3</name></expr></argument>, <argument><expr><name>z3</name></expr></argument>, <argument><expr><name>z3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>z3</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>z3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f255_mul_a24</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f255_add</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><name>aa</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>f255_cswap</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f255_cswap</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><name>z3</name></expr></argument>, <argument><expr><name>swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>, <argument><expr><sizeof>sizeof <name>z2</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><sizeof>sizeof <name>x1</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">14</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xFFEB</literal> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>f255_mul</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f255_final_reduce</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name><name>x2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>G</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>x2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>G</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>x2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>G</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name><name>x2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>api_mulgen</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>G</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Glen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>api_generator</name><argument_list>(<argument><expr><name>curve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Glen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>Glen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_mul</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>Glen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Glen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>api_muladd</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>A</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>B</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>xlen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ylen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_c25519_m64</name> <init>= <expr><block>{
<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x20000000</literal></expr>,
<expr><operator>&amp;</operator><name>api_generator</name></expr>,
<expr><operator>&amp;</operator><name>api_order</name></expr>,
<expr><operator>&amp;</operator><name>api_xoff</name></expr>,
<expr><operator>&amp;</operator><name>api_mul</name></expr>,
<expr><operator>&amp;</operator><name>api_mulgen</name></expr>,
<expr><operator>&amp;</operator><name>api_muladd</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type>
<name>br_ec_c25519_m64_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>br_ec_c25519_m64</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<function><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type>
<name>br_ec_c25519_m64_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
