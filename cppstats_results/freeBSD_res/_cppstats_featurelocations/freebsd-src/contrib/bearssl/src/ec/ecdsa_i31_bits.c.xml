<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ec/ecdsa_i31_bits.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>br_ecdsa_i31_bits2int</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ebitlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitlen</name></decl>, <decl><type ref="prev"/><name>hbitlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bitlen</name> <operator>=</operator> <name>ebitlen</name> <operator>-</operator> <operator>(</operator><name>ebitlen</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hbitlen</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hbitlen</name> <operator>&gt;</operator> <name>bitlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>bitlen</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>hbitlen</name> <operator>-</operator> <name>bitlen</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ebitlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_rshift</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ebitlen</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
