<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ec/ecdsa_i15_vrfy_raw.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I15_LEN</name></cpp:macro> <cpp:value>((BR_MAX_EC_SIZE + 29) / 15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POINT_LEN</name></cpp:macro> <cpp:value>(1 + (((BR_MAX_EC_SIZE + 7) &gt;&gt; 3) &lt;&lt; 1))</cpp:value></cpp:define>


<function><type><name>uint32_t</name></type>
<name>br_ecdsa_i15_vrfy_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_curve_def</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>n</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>r</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>s</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t1</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>char</name> <name><name>tx</name><index>[<expr><operator>(</operator><name>BR_MAX_EC_SIZE</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>char</name> <name><name>ty</name><index>[<expr><operator>(</operator><name>BR_MAX_EC_SIZE</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>eU</name><index>[<expr><name>POINT_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>, <decl><type ref="prev"/><name>rlen</name></decl>, <decl><type ref="prev"/><name>ulen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>n0i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>res</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>supported_curves</name></name> <operator>&gt;&gt;</operator> <name><name>pk</name><operator>-&gt;</operator><name>curve</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>curve</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_EC_secp256r1</name></expr>:</case>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <operator>&amp;</operator><name>br_secp256r1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BR_EC_secp384r1</name></expr>:</case>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <operator>&amp;</operator><name>br_secp384r1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BR_EC_secp521r1</name></expr>:</case>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <operator>&amp;</operator><name>br_secp521r1</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><name>sig_len</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rlen</name> <operator>=</operator> <name>sig_len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>qlen</name></name> <operator>!=</operator> <name><name>cd</name><operator>-&gt;</operator><name>generator_len</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>order_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_decode</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n0i</name> <operator>=</operator> <call><name>br_i15_ninv15</name><argument_list>(<argument><expr><name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>br_i15_decode_mod</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>br_i15_decode_mod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>sig</name> <operator>+</operator> <name>rlen</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_i15_iszero</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>










<expr_stmt><expr><call><name>br_i15_from_monty</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tx</name><index>[<expr><name>nlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_modpow</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n0i</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>br_ecdsa_i15_bits2int</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>br_i15_montymul</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>ty</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>br_i15_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>ulen</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>generator_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>eU</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>muladd</name></name><argument_list>(<argument><expr><name>eU</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>,
<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_decode</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eU</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ulen</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>&amp;=</operator> <operator>~</operator><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>&amp;=</operator> <call><name>br_i15_iszero</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
