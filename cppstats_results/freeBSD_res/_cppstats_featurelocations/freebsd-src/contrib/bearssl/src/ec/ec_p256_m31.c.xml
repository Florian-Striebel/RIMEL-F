<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ec/ec_p256_m31.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_NO_ARITH_SHIFT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARSH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint32_t)(x) &gt;&gt; (n)) | ((-((uint32_t)(x) &gt;&gt; 31)) &lt;&lt; (32 - (n))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARSHW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint64_t)(x) &gt;&gt; (n)) | ((-((uint64_t)(x) &gt;&gt; 63)) &lt;&lt; (64 - (n))))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARSH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*(int32_t *)&amp;(x)) &gt;&gt; (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARSHW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*(int64_t *)&amp;(x)) &gt;&gt; (n))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>be8_to_le30</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>acc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acc_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acc_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acc_len</name> <operator>&lt;</operator> <literal type="number">22</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acc</name> <operator>|=</operator> <name>b</name> <operator>&lt;&lt;</operator> <name>acc_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>acc_len</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>++</operator> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <name>acc_len</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <name>b</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">30</literal> <operator>-</operator> <name>acc_len</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>acc_len</name> <operator>-=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>acc</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>le30_to_be8</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>acc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acc_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acc_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>acc_len</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>*</operator><name>src</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>acc</name> <operator>|</operator> <operator>(</operator><name>w</name> <operator>&lt;&lt;</operator> <name>acc_len</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <name>w</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>acc_len</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>acc_len</name> <operator>+=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>acc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>acc</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acc_len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>mul9</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>











<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>t</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>w</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>square9</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>t</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>w</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>F256</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x3FFFFFFF</literal></expr>, <expr><literal type="number">0x3FFFFFFF</literal></expr>, <expr><literal type="number">0x3FFFFFFF</literal></expr>, <expr><literal type="number">0x0000003F</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x3FFFC000</literal></expr>, <expr><literal type="number">0x0000FFFF</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>P256_B</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x27D2604B</literal></expr>, <expr><literal type="number">0x2F38F0F8</literal></expr>, <expr><literal type="number">0x053B0F63</literal></expr>, <expr><literal type="number">0x0741AC33</literal></expr>, <expr><literal type="number">0x1886BC65</literal></expr>,
<expr><literal type="number">0x2EF555DA</literal></expr>, <expr><literal type="number">0x293E7B3E</literal></expr>, <expr><literal type="number">0x0D762A8E</literal></expr>, <expr><literal type="number">0x00005AC6</literal></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_f256</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>w</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>w</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-=</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-=</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>sub_f256</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>





<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x00002</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0x00080</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0x02000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x08000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0x20000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-=</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-=</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>mul_f256</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>t</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>s</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mul9</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




















<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">17</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name> <operator>-=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>










<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>










<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>












<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-=</operator> <name>z</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-=</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-=</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>square_f256</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>t</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>s</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>square9</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




















<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">17</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name> <operator>-=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>










<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>










<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>ARSHW</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>












<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-=</operator> <name>z</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-=</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-=</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>ARSH</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>reduce_final_f256</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>t</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>F256</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>w</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>cc</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof <name>t</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cc</name></expr>;</return>
</block_content>}</block></function>













<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>x</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>y</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>z</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>p256_jacobian</name>;</typedef>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>p256_to_affine</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>t1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
























<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>P</name><operator>-&gt;</operator><name>z</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>






<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>P</name><operator>-&gt;</operator><name>z</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">31</literal></expr>:</case>
<case>case <expr><literal type="number">190</literal></expr>:</case>
<case>case <expr><literal type="number">221</literal></expr>:</case>
<case>case <expr><literal type="number">252</literal></expr>:</case>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">63</literal></expr>:</case>
<case>case <expr><literal type="number">253</literal></expr>:</case>
<case>case <expr><literal type="number">255</literal></expr>:</case>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>




<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reduce_final_f256</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reduce_final_f256</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reduce_final_f256</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>p256_double</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>Q</name></decl></parameter>)</parameter_list>
<block>{<block_content>















<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>t1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t4</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>add_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_f256</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_f256</name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
































<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>p256_add</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>p256_jacobian</name> <modifier>*</modifier></type><name>P2</name></decl></parameter>)</parameter_list>
<block>{<block_content>













<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>t1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t4</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t5</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t6</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t7</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reduce_final_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name><name>t4</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>|</operator> <operator>-</operator><name>ret</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>p256_add_mixed</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>p256_jacobian</name> <modifier>*</modifier></type><name>P2</name></decl></parameter>)</parameter_list>
<block>{<block_content>













<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>t1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t4</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t5</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t6</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t7</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name>t1</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name>t3</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reduce_final_f256</name><argument_list>(<argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name><name>t4</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>|</operator> <operator>-</operator><name>ret</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>p256_decode</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tx</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ty</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">65</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>







<expr_stmt><expr><name>bad</name> <operator>=</operator> <call><name>NEQ</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>tx</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>be8_to_le30</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>be8_to_le30</name><argument_list>(<argument><expr><name>ty</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bad</name> <operator>|=</operator> <call><name>reduce_final_f256</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bad</name> <operator>|=</operator> <call><name>reduce_final_f256</name><argument_list>(<argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mul_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>square_f256</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>P256_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sub_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reduce_final_f256</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bad</name> <operator>|=</operator> <name><name>t1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tx</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><sizeof>sizeof <name>ty</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>P</name><operator>-&gt;</operator><name>z</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>P</name><operator>-&gt;</operator><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>EQ</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>p256_encode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>p256_jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>le30_to_be8</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>le30_to_be8</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>p256_mul</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<decl_stmt><decl><type><name>uint32_t</name></type> <name>qz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>P2</name></decl>, <decl><type ref="prev"/><name>P3</name></decl>, <decl><type ref="prev"/><name>Q</name></decl>, <decl><type ref="prev"/><name>T</name></decl>, <decl><type ref="prev"/><name>U</name></decl>;</decl_stmt>




<expr_stmt><expr><name>P2</name> <operator>=</operator> <operator>*</operator><name>P</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>P3</name> <operator>=</operator> <operator>*</operator><name>P</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>xlen</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bnz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>T</name> <operator>=</operator> <operator>*</operator><name>P</name></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>=</operator> <name>Q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&gt;&gt;</operator> <name>k</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bnz</name> <operator>=</operator> <call><name>NEQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P2</name></expr></argument>, <argument><expr><sizeof>sizeof <name>T</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P3</name></expr></argument>, <argument><expr><sizeof>sizeof <name>T</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>bnz</name> <operator>&amp;</operator> <name>qz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>bnz</name> <operator>&amp;</operator> <operator>~</operator><name>qz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qz</name> <operator>&amp;=</operator> <operator>~</operator><name>bnz</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>x</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>P</name> <operator>=</operator> <name>Q</name></expr>;</expr_stmt>
</block_content>}</block></function>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>Gwin</name><index>[<expr><literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x1898C296</literal></expr>, <expr><literal type="number">0x1284E517</literal></expr>, <expr><literal type="number">0x1EB33A0F</literal></expr>, <expr><literal type="number">0x00DF604B</literal></expr>,
<expr><literal type="number">0x2440F277</literal></expr>, <expr><literal type="number">0x339B958E</literal></expr>, <expr><literal type="number">0x04247F8B</literal></expr>, <expr><literal type="number">0x347CB84B</literal></expr>,
<expr><literal type="number">0x00006B17</literal></expr>, <expr><literal type="number">0x37BF51F5</literal></expr>, <expr><literal type="number">0x2ED901A0</literal></expr>, <expr><literal type="number">0x3315ECEC</literal></expr>,
<expr><literal type="number">0x338CD5DA</literal></expr>, <expr><literal type="number">0x0F9E162B</literal></expr>, <expr><literal type="number">0x1FAD29F0</literal></expr>, <expr><literal type="number">0x27F9B8EE</literal></expr>,
<expr><literal type="number">0x10B8BF86</literal></expr>, <expr><literal type="number">0x00004FE3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x07669978</literal></expr>, <expr><literal type="number">0x182D23F1</literal></expr>, <expr><literal type="number">0x3F21B35A</literal></expr>, <expr><literal type="number">0x225A789D</literal></expr>,
<expr><literal type="number">0x351AC3C0</literal></expr>, <expr><literal type="number">0x08E00C12</literal></expr>, <expr><literal type="number">0x34F7E8A5</literal></expr>, <expr><literal type="number">0x1EC62340</literal></expr>,
<expr><literal type="number">0x00007CF2</literal></expr>, <expr><literal type="number">0x227873D1</literal></expr>, <expr><literal type="number">0x3812DE74</literal></expr>, <expr><literal type="number">0x0E982299</literal></expr>,
<expr><literal type="number">0x1F6B798F</literal></expr>, <expr><literal type="number">0x3430DBBA</literal></expr>, <expr><literal type="number">0x366B1A7D</literal></expr>, <expr><literal type="number">0x2D040293</literal></expr>,
<expr><literal type="number">0x154436E3</literal></expr>, <expr><literal type="number">0x00000777</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x06E7FD6C</literal></expr>, <expr><literal type="number">0x2D05986F</literal></expr>, <expr><literal type="number">0x3ADA985F</literal></expr>, <expr><literal type="number">0x31ADC87B</literal></expr>,
<expr><literal type="number">0x0BF165E6</literal></expr>, <expr><literal type="number">0x1FBE5475</literal></expr>, <expr><literal type="number">0x30A44C8F</literal></expr>, <expr><literal type="number">0x3934698C</literal></expr>,
<expr><literal type="number">0x00005ECB</literal></expr>, <expr><literal type="number">0x227D5032</literal></expr>, <expr><literal type="number">0x29E6C49E</literal></expr>, <expr><literal type="number">0x04FB83D9</literal></expr>,
<expr><literal type="number">0x0AAC0D8E</literal></expr>, <expr><literal type="number">0x24A2ECD8</literal></expr>, <expr><literal type="number">0x2C1B3869</literal></expr>, <expr><literal type="number">0x0FF7E374</literal></expr>,
<expr><literal type="number">0x19031266</literal></expr>, <expr><literal type="number">0x00008734</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x2B030852</literal></expr>, <expr><literal type="number">0x024C0911</literal></expr>, <expr><literal type="number">0x05596EF5</literal></expr>, <expr><literal type="number">0x07F8B6DE</literal></expr>,
<expr><literal type="number">0x262BD003</literal></expr>, <expr><literal type="number">0x3779967B</literal></expr>, <expr><literal type="number">0x08FBBA02</literal></expr>, <expr><literal type="number">0x128D4CB4</literal></expr>,
<expr><literal type="number">0x0000E253</literal></expr>, <expr><literal type="number">0x184ED8C6</literal></expr>, <expr><literal type="number">0x310B08FC</literal></expr>, <expr><literal type="number">0x30EE0055</literal></expr>,
<expr><literal type="number">0x3F25B0FC</literal></expr>, <expr><literal type="number">0x062D764E</literal></expr>, <expr><literal type="number">0x3FB97F6A</literal></expr>, <expr><literal type="number">0x33CC719D</literal></expr>,
<expr><literal type="number">0x15D69318</literal></expr>, <expr><literal type="number">0x0000E0F1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x03D033ED</literal></expr>, <expr><literal type="number">0x05552837</literal></expr>, <expr><literal type="number">0x35BE5242</literal></expr>, <expr><literal type="number">0x2320BF47</literal></expr>,
<expr><literal type="number">0x268FDFEF</literal></expr>, <expr><literal type="number">0x13215821</literal></expr>, <expr><literal type="number">0x140D2D78</literal></expr>, <expr><literal type="number">0x02DE9454</literal></expr>,
<expr><literal type="number">0x00005159</literal></expr>, <expr><literal type="number">0x3DA16DA4</literal></expr>, <expr><literal type="number">0x0742ED13</literal></expr>, <expr><literal type="number">0x0D80888D</literal></expr>,
<expr><literal type="number">0x004BC035</literal></expr>, <expr><literal type="number">0x0A79260D</literal></expr>, <expr><literal type="number">0x06FCDAFE</literal></expr>, <expr><literal type="number">0x2727D8AE</literal></expr>,
<expr><literal type="number">0x1F6A2412</literal></expr>, <expr><literal type="number">0x0000E0C1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x3C2291A9</literal></expr>, <expr><literal type="number">0x1AC2ABA4</literal></expr>, <expr><literal type="number">0x3B215B4C</literal></expr>, <expr><literal type="number">0x131D037A</literal></expr>,
<expr><literal type="number">0x17DDE302</literal></expr>, <expr><literal type="number">0x0C90B2E2</literal></expr>, <expr><literal type="number">0x0602C92D</literal></expr>, <expr><literal type="number">0x05CA9DA9</literal></expr>,
<expr><literal type="number">0x0000B01A</literal></expr>, <expr><literal type="number">0x0FC77FE2</literal></expr>, <expr><literal type="number">0x35F1214E</literal></expr>, <expr><literal type="number">0x07E16BDF</literal></expr>,
<expr><literal type="number">0x003DDC07</literal></expr>, <expr><literal type="number">0x2703791C</literal></expr>, <expr><literal type="number">0x3038B7EE</literal></expr>, <expr><literal type="number">0x3DAD56FE</literal></expr>,
<expr><literal type="number">0x041D0C8D</literal></expr>, <expr><literal type="number">0x0000E85C</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x3187B2A3</literal></expr>, <expr><literal type="number">0x0018A1C0</literal></expr>, <expr><literal type="number">0x00FEF5B3</literal></expr>, <expr><literal type="number">0x3E7E2E2A</literal></expr>,
<expr><literal type="number">0x01FB607E</literal></expr>, <expr><literal type="number">0x2CC199F0</literal></expr>, <expr><literal type="number">0x37B4625B</literal></expr>, <expr><literal type="number">0x0EDBE82F</literal></expr>,
<expr><literal type="number">0x00008E53</literal></expr>, <expr><literal type="number">0x01F400B4</literal></expr>, <expr><literal type="number">0x15786A1B</literal></expr>, <expr><literal type="number">0x3041B21C</literal></expr>,
<expr><literal type="number">0x31CD8CF2</literal></expr>, <expr><literal type="number">0x35900053</literal></expr>, <expr><literal type="number">0x1A7E0E9B</literal></expr>, <expr><literal type="number">0x318366D0</literal></expr>,
<expr><literal type="number">0x076F780C</literal></expr>, <expr><literal type="number">0x000073EB</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x1B6FB393</literal></expr>, <expr><literal type="number">0x13767707</literal></expr>, <expr><literal type="number">0x3CE97DBB</literal></expr>, <expr><literal type="number">0x348E2603</literal></expr>,
<expr><literal type="number">0x354CADC1</literal></expr>, <expr><literal type="number">0x09D0B4EA</literal></expr>, <expr><literal type="number">0x1B053404</literal></expr>, <expr><literal type="number">0x1DE76FBA</literal></expr>,
<expr><literal type="number">0x000062D9</literal></expr>, <expr><literal type="number">0x0F09957E</literal></expr>, <expr><literal type="number">0x295029A8</literal></expr>, <expr><literal type="number">0x3E76A78D</literal></expr>,
<expr><literal type="number">0x3B547DAE</literal></expr>, <expr><literal type="number">0x27CEE0A2</literal></expr>, <expr><literal type="number">0x0575DC45</literal></expr>, <expr><literal type="number">0x1D8244FF</literal></expr>,
<expr><literal type="number">0x332F647A</literal></expr>, <expr><literal type="number">0x0000AD5A</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x10949EE0</literal></expr>, <expr><literal type="number">0x1E7A292E</literal></expr>, <expr><literal type="number">0x06DF8B3D</literal></expr>, <expr><literal type="number">0x02B2E30B</literal></expr>,
<expr><literal type="number">0x31F8729E</literal></expr>, <expr><literal type="number">0x24E35475</literal></expr>, <expr><literal type="number">0x30B71878</literal></expr>, <expr><literal type="number">0x35EDBFB7</literal></expr>,
<expr><literal type="number">0x0000EA68</literal></expr>, <expr><literal type="number">0x0DD048FA</literal></expr>, <expr><literal type="number">0x21688929</literal></expr>, <expr><literal type="number">0x0DE823FE</literal></expr>,
<expr><literal type="number">0x1C53FAA9</literal></expr>, <expr><literal type="number">0x0EA0C84D</literal></expr>, <expr><literal type="number">0x052A592A</literal></expr>, <expr><literal type="number">0x1FCE7870</literal></expr>,
<expr><literal type="number">0x11325CB2</literal></expr>, <expr><literal type="number">0x00002A27</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x04C5723F</literal></expr>, <expr><literal type="number">0x30D81A50</literal></expr>, <expr><literal type="number">0x048306E4</literal></expr>, <expr><literal type="number">0x329B11C7</literal></expr>,
<expr><literal type="number">0x223FB545</literal></expr>, <expr><literal type="number">0x085347A8</literal></expr>, <expr><literal type="number">0x2993E591</literal></expr>, <expr><literal type="number">0x1B5ACA8E</literal></expr>,
<expr><literal type="number">0x0000CEF6</literal></expr>, <expr><literal type="number">0x04AF0773</literal></expr>, <expr><literal type="number">0x28D2EEA9</literal></expr>, <expr><literal type="number">0x2751EEEC</literal></expr>,
<expr><literal type="number">0x037B4A7F</literal></expr>, <expr><literal type="number">0x3B4C1059</literal></expr>, <expr><literal type="number">0x08F37674</literal></expr>, <expr><literal type="number">0x2AE906E1</literal></expr>,
<expr><literal type="number">0x18A88A6A</literal></expr>, <expr><literal type="number">0x00008786</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x34BC21D1</literal></expr>, <expr><literal type="number">0x0CCE474D</literal></expr>, <expr><literal type="number">0x15048BF4</literal></expr>, <expr><literal type="number">0x1D0BB409</literal></expr>,
<expr><literal type="number">0x021CDA16</literal></expr>, <expr><literal type="number">0x20DE76C3</literal></expr>, <expr><literal type="number">0x34C59063</literal></expr>, <expr><literal type="number">0x04EDE20E</literal></expr>,
<expr><literal type="number">0x00003ED1</literal></expr>, <expr><literal type="number">0x282A3740</literal></expr>, <expr><literal type="number">0x0BE3BBF3</literal></expr>, <expr><literal type="number">0x29889DAE</literal></expr>,
<expr><literal type="number">0x03413697</literal></expr>, <expr><literal type="number">0x34C68A09</literal></expr>, <expr><literal type="number">0x210EBE93</literal></expr>, <expr><literal type="number">0x0C8A224C</literal></expr>,
<expr><literal type="number">0x0826B331</literal></expr>, <expr><literal type="number">0x00009099</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0624E3C4</literal></expr>, <expr><literal type="number">0x140317BA</literal></expr>, <expr><literal type="number">0x2F82C99D</literal></expr>, <expr><literal type="number">0x260C0A2C</literal></expr>,
<expr><literal type="number">0x25D55179</literal></expr>, <expr><literal type="number">0x194DCC83</literal></expr>, <expr><literal type="number">0x3D95E462</literal></expr>, <expr><literal type="number">0x356F6A05</literal></expr>,
<expr><literal type="number">0x0000741D</literal></expr>, <expr><literal type="number">0x0D4481D3</literal></expr>, <expr><literal type="number">0x2657FC8B</literal></expr>, <expr><literal type="number">0x1BA5CA71</literal></expr>,
<expr><literal type="number">0x3AE44B0D</literal></expr>, <expr><literal type="number">0x07B1548E</literal></expr>, <expr><literal type="number">0x0E0D5522</literal></expr>, <expr><literal type="number">0x05FDC567</literal></expr>,
<expr><literal type="number">0x2D1AA70E</literal></expr>, <expr><literal type="number">0x00000770</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x06072C01</literal></expr>, <expr><literal type="number">0x23857675</literal></expr>, <expr><literal type="number">0x1EAD58A9</literal></expr>, <expr><literal type="number">0x0B8A12D9</literal></expr>,
<expr><literal type="number">0x1EE2FC79</literal></expr>, <expr><literal type="number">0x0177CB61</literal></expr>, <expr><literal type="number">0x0495A618</literal></expr>, <expr><literal type="number">0x20DEB82B</literal></expr>,
<expr><literal type="number">0x0000177C</literal></expr>, <expr><literal type="number">0x2FC7BFD8</literal></expr>, <expr><literal type="number">0x310EEF8B</literal></expr>, <expr><literal type="number">0x1FB4DF39</literal></expr>,
<expr><literal type="number">0x3B8530E8</literal></expr>, <expr><literal type="number">0x0F4E7226</literal></expr>, <expr><literal type="number">0x0246B6D0</literal></expr>, <expr><literal type="number">0x2A558A24</literal></expr>,
<expr><literal type="number">0x163353AF</literal></expr>, <expr><literal type="number">0x000063BB</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x24D2920B</literal></expr>, <expr><literal type="number">0x1C249DCC</literal></expr>, <expr><literal type="number">0x2069C5E5</literal></expr>, <expr><literal type="number">0x09AB2F9E</literal></expr>,
<expr><literal type="number">0x36DF3CF1</literal></expr>, <expr><literal type="number">0x1991FD0C</literal></expr>, <expr><literal type="number">0x062B97A7</literal></expr>, <expr><literal type="number">0x1E80070E</literal></expr>,
<expr><literal type="number">0x000054E7</literal></expr>, <expr><literal type="number">0x20D0B375</literal></expr>, <expr><literal type="number">0x2E9F20BD</literal></expr>, <expr><literal type="number">0x35090081</literal></expr>,
<expr><literal type="number">0x1C7A9DDC</literal></expr>, <expr><literal type="number">0x22E7C371</literal></expr>, <expr><literal type="number">0x087E3016</literal></expr>, <expr><literal type="number">0x03175421</literal></expr>,
<expr><literal type="number">0x3C6ECA7D</literal></expr>, <expr><literal type="number">0x0000F599</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x259B9D5F</literal></expr>, <expr><literal type="number">0x0D9A318F</literal></expr>, <expr><literal type="number">0x23A0EF16</literal></expr>, <expr><literal type="number">0x00EBE4B7</literal></expr>,
<expr><literal type="number">0x088265AE</literal></expr>, <expr><literal type="number">0x2CDE2666</literal></expr>, <expr><literal type="number">0x2BAE7ADF</literal></expr>, <expr><literal type="number">0x1371A5C6</literal></expr>,
<expr><literal type="number">0x0000F045</literal></expr>, <expr><literal type="number">0x0D034F36</literal></expr>, <expr><literal type="number">0x1F967378</literal></expr>, <expr><literal type="number">0x1B5FA3F4</literal></expr>,
<expr><literal type="number">0x0EC8739D</literal></expr>, <expr><literal type="number">0x1643E62A</literal></expr>, <expr><literal type="number">0x1653947E</literal></expr>, <expr><literal type="number">0x22D1F4E6</literal></expr>,
<expr><literal type="number">0x0FB8D64B</literal></expr>, <expr><literal type="number">0x0000B5B9</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>lookup_Gwin</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>xy</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>xy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>xy</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>-</operator><call><name>EQ</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>xy</name><index>[<expr><name>u</name></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>Gwin</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>T</name><operator>-&gt;</operator><name>x</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xy</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>T</name><operator>-&gt;</operator><name>y</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>T</name><operator>-&gt;</operator><name>z</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>p256_mulgen</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>Q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>qz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>xlen</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bx</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bnz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>U</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bnz</name> <operator>=</operator> <call><name>NEQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lookup_Gwin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>=</operator> <name>Q</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_add_mixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>bnz</name> <operator>&amp;</operator> <name>qz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>bnz</name> <operator>&amp;</operator> <operator>~</operator><name>qz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qz</name> <operator>&amp;=</operator> <operator>~</operator><name>bnz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bx</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>P</name> <operator>=</operator> <name>Q</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>P256_G</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xF8</literal></expr>,
<expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x7D</literal></expr>,
<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xD8</literal></expr>,
<expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x7F</literal></expr>,
<expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x2B</literal></expr>,
<expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xF5</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>P256_N</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xAD</literal></expr>,
<expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x63</literal></expr>,
<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x51</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>api_generator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof <name>P256_G</name></sizeof></expr>;</expr_stmt>
<return>return <expr><name>P256_G</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>api_order</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof <name>P256_N</name></sizeof></expr>;</expr_stmt>
<return>return <expr><name>P256_N</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>api_xoff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>api_mul</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>G</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Glen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>P</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>p256_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>Glen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Glen</name> <operator>&gt;=</operator> <literal type="number">65</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>p256_to_affine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_encode</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>api_mulgen</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>P</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_mulgen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_to_affine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_encode</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">65</literal></expr>;</return>










</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>api_muladd</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>P</name></decl>, <decl><type ref="prev"/><name>Q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>p256_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>B</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>p256_mulgen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>p256_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>p256_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reduce_final_f256</name><argument_list>(<argument><expr><name><name>P</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>|=</operator> <name><name>P</name><operator>.</operator><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>z</name> <operator>&amp;</operator> <operator>~</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_to_affine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_encode</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>z</name> <operator>&amp;</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_p256_m31</name> <init>= <expr><block>{
<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00800000</literal></expr>,
<expr><operator>&amp;</operator><name>api_generator</name></expr>,
<expr><operator>&amp;</operator><name>api_order</name></expr>,
<expr><operator>&amp;</operator><name>api_xoff</name></expr>,
<expr><operator>&amp;</operator><name>api_mul</name></expr>,
<expr><operator>&amp;</operator><name>api_mulgen</name></expr>,
<expr><operator>&amp;</operator><name>api_muladd</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
