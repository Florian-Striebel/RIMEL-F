<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/ec/ec_p256_m64.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name> <operator>||</operator> <name>BR_UMUL128</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>P256_G</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xF8</literal></expr>,
<expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x7D</literal></expr>,
<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xD8</literal></expr>,
<expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x7F</literal></expr>,
<expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x2B</literal></expr>,
<expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xF5</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>P256_N</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xAD</literal></expr>,
<expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x63</literal></expr>,
<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x51</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>api_generator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof <name>P256_G</name></sizeof></expr>;</expr_stmt>
<return>return <expr><name>P256_G</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>api_order</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof <name>P256_N</name></sizeof></expr>;</expr_stmt>
<return>return <expr><name>P256_N</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>api_xoff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>F256_R</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0000000000000001</literal></expr>, <expr><literal type="number">0xFFFFFFFF00000000</literal></expr>,
<expr><literal type="number">0xFFFFFFFFFFFFFFFF</literal></expr>, <expr><literal type="number">0x00000000FFFFFFFE</literal></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>P256_B_MONTY</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xD89CDF6229C4BDDF</literal></expr>, <expr><literal type="number">0xACF005CD78843090</literal></expr>,
<expr><literal type="number">0xE5A220ABF7212ED6</literal></expr>, <expr><literal type="number">0xDC30061D04874834</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>f256_add</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>__int128</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>




<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <name>t</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>t</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>f256_sub</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name> <name>__int128</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name>t</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>t</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><name>t</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>t</name> <operator>-</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>f256_montymul</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>__int128</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>ff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>














<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>f</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>f</name> <operator>&lt;&lt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>f</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>ff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t3</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ff</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>t0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name>t4</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t0</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>f</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t1</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>f</name> <operator>&lt;&lt;</operator> <literal type="number">64</literal><operator>)</operator>
<operator>-</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>f</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>ff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t3</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ff</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>



















<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t0</name> <operator>+</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t1</name> <operator>-</operator> <operator>(</operator><name>t4</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name>t2</name> <operator>-</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">127</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>t3</name> <operator>-</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">127</literal><operator>)</operator> <operator>-</operator> <name>t4</name> <operator>+</operator> <operator>(</operator><name>t4</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>zl</name></decl>, <decl><type ref="prev"/><name>zh</name></decl>, <decl><type ref="prev"/><name>ffl</name></decl>, <decl><type ref="prev"/><name>ffh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>














<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>zl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>zh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>f</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>zl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>zh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>zl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>zh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>zl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>zh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>f</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>



<expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>_umul128</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>zh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>f</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>_subborrow_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>f</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ffl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_subborrow_u64</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ffh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>ffl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>ffh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



















<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>t4</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><operator>-</operator><name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><operator>(</operator><name>t4</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>t4</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>f256_montysquare</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>f256_tomonty</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>R2</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0000000000000003</literal></expr>,
<expr><literal type="number">0xFFFFFFFBFFFFFFFF</literal></expr>,
<expr><literal type="number">0xFFFFFFFFFFFFFFFE</literal></expr>,
<expr><literal type="number">0x00000004FFFFFFFD</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>f256_frommonty</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>one</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>f256_invert</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>














<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof <name>t</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof <name>t</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">224</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<case>case <expr><literal type="number">192</literal></expr>:</case>
<case>case <expr><literal type="number">224</literal></expr>:</case>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<case>case <expr><literal type="number">34</literal></expr>:</case>
<case>case <expr><literal type="number">65</literal></expr>:</case>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><sizeof>sizeof <name>r</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>f256_final_reduce</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>__int128</name></type> <name>z</name></decl>;</decl_stmt>






<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">127</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">127</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>cc</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name>t0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name>cc</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>t1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <name>cc</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name>t2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <name>cc</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name>t3</name><operator>)</operator></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_addcarry_u64</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name>t0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>t1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name>t2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <name>m</name> <operator>&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name>t3</name><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>








<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>p256_affine</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>p256_jacobian</name>;</typedef>









<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>point_decode</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>x3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">49</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">57</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_tomonty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_tomonty</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_add</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_add</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_add</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>P256_B_MONTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_final_reduce</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tt</name> <operator>|</operator> <operator>(</operator><name>tt</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><sizeof>sizeof <name>x</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><sizeof>sizeof <name>y</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>F256_R</name></expr></argument>, <argument><expr><sizeof>sizeof <name>F256_R</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>point_encode</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>p256_jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>t1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>f256_invert</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>f256_frommonty</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_frommonty</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_final_reduce</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_final_reduce</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>t1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name><name>t1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><name><name>t1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">25</literal></expr></argument>, <argument><expr><name><name>t1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>, <argument><expr><name><name>t2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">41</literal></expr></argument>, <argument><expr><name><name>t2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">49</literal></expr></argument>, <argument><expr><name><name>t2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">57</literal></expr></argument>, <argument><expr><name><name>t2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>P</name><operator>-&gt;</operator><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>P</name><operator>-&gt;</operator><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>P</name><operator>-&gt;</operator><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>P</name><operator>-&gt;</operator><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><call><name>NEQ</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>|</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type>
<name>p256_double</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>















<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>t1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_add</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_add</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_add</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_add</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_add</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_add</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_add</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


































<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>p256_add</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>p256_jacobian</name> <modifier>*</modifier></type><name>P2</name></decl></parameter>)</parameter_list>
<block>{<block_content>













<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>t1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t5</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t6</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t7</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_final_reduce</name><argument_list>(<argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <name><name>t4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>t4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>t4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>t4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tt</name> <operator>|</operator> <operator>(</operator><name>tt</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>|</operator> <operator>-</operator><name>ret</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


































<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>p256_add_mixed</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>p256_affine</name> <modifier>*</modifier></type><name>P2</name></decl></parameter>)</parameter_list>
<block>{<block_content>













<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>t1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t5</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t6</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t7</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name>t1</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name>t3</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name><name>P2</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_final_reduce</name><argument_list>(<argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tt</name> <operator>=</operator> <name><name>t4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>t4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>t4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>t4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tt</name> <operator>|</operator> <operator>(</operator><name>tt</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>|</operator> <operator>-</operator><name>ret</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_sub</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>P1</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>








static uint32_t
p256_add_complete_mixed(p256_jacobian *P1, const p256_affine *P2)
{













































uint64_t t1[4], t2[4], t3[4], t4[4], t5[4], t6[4], t7[4], tt, zz;
int i;




zz = P1-&gt;z[0] | P1-&gt;z[1] | P1-&gt;z[2] | P1-&gt;z[3];
zz = ((zz | -zz) &gt;&gt; 63) - (uint64_t)1;




memcpy(t1, P1-&gt;x, sizeof t1);
memcpy(t3, P1-&gt;y, sizeof t3);




f256_montysquare(t4, P1-&gt;z);
f256_montymul(t2, P2-&gt;x, t4);
f256_montymul(t5, P1-&gt;z, t4);
f256_montymul(t4, P2-&gt;y, t5);





f256_sub(t2, t2, t1);
f256_sub(t4, t4, t3);





f256_final_reduce(t2);
f256_final_reduce(t4);
tt = t2[0] | t2[1] | t2[2] | t2[3] | t4[0] | t4[1] | t4[2] | t4[3];
tt = ((tt | -tt) &gt;&gt; 63) - (uint64_t)1;




f256_montysquare(t7, t2);
f256_montymul(t6, t1, t7);
f256_montymul(t5, t7, t2);




f256_montysquare(P1-&gt;x, t4);
f256_sub(P1-&gt;x, P1-&gt;x, t5);
f256_sub(P1-&gt;x, P1-&gt;x, t6);
f256_sub(P1-&gt;x, P1-&gt;x, t6);




f256_sub(t6, t6, P1-&gt;x);
f256_montymul(P1-&gt;y, t4, t6);
f256_montymul(t1, t5, t3);
f256_sub(P1-&gt;y, P1-&gt;y, t1);




f256_montymul(P1-&gt;z, P1-&gt;z, t2);








f256_add(t1, P2-&gt;y, P2-&gt;y);




f256_montysquare(t2, P2-&gt;y);
f256_add(t2, t2, t2);
f256_add(t3, t2, t2);
f256_montymul(t3, P2-&gt;x, t3);




f256_montysquare(t4, P2-&gt;x);
f256_sub(t4, t4, F256_R);
f256_add(t5, t4, t4);
f256_add(t4, t4, t5);




f256_montysquare(t5, t4);
f256_sub(t5, t3);
f256_sub(t5, t3);




f256_sub(t6, t3, t5);
f256_montymul(t6, t6, t4);
f256_montysquare(t7, t2);
f256_sub(t6, t6, t7);
f256_sub(t6, t6, t7);





for (i = 0; i &lt; 4; i ++) {
P1-&gt;x[i] |= tt &amp; t5[i];
P1-&gt;y[i] |= tt &amp; t6[i];
P1-&gt;z[i] |= tt &amp; t1[i];
}






for (i = 0; i &lt; 4; i ++) {
P1-&gt;x[i] ^= zz &amp; (P1-&gt;x[i] ^ P2-&gt;x[i]);
P1-&gt;y[i] ^= zz &amp; (P1-&gt;y[i] ^ P2-&gt;y[i]);
P1-&gt;z[i] ^= zz &amp; (P1-&gt;z[i] ^ F256_R[i]);
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>point_mul_inner</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>p256_affine</name> <modifier>*</modifier></type><name>W</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>Q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>qz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>klen</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bk</name> <operator>=</operator> <operator>*</operator><name>k</name> <operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bnz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>p256_affine</name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>U</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bk</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bnz</name> <operator>=</operator> <call><name>NEQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>T</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>n</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>EQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>W</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>W</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>W</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>W</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>W</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>W</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>W</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>W</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>U</name> <operator>=</operator> <name>Q</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_add_mixed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>bnz</name> <operator>&amp;</operator> <name>qz</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>Q</name><operator>.</operator><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>T</name><operator>.</operator><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Q</name><operator>.</operator><name>y</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>T</name><operator>.</operator><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Q</name><operator>.</operator><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>F256_R</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>bnz</name> <operator>&amp;</operator> <operator>~</operator><name>qz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qz</name> <operator>&amp;=</operator> <operator>~</operator><name>bnz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bk</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>R</name> <operator>=</operator> <name>Q</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>void</name></type>
<name>window_to_affine</name><parameter_list>(<parameter><decl><type><name>p256_affine</name> <modifier>*</modifier></type><name>aff</name></decl></parameter>, <parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>jac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>























































<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>z</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zt</name></cpp:macro> <cpp:value>(z[15])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zu</name></cpp:macro> <cpp:value>(z[14])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zv</name></cpp:macro> <cpp:value>(z[13])</cpp:value></cpp:define>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zt</name></expr></argument>, <argument><expr><name><name>jac</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>, <argument><expr><sizeof>sizeof <name>zt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>jac</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>, <argument><expr><name><name>jac</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>, <argument><expr><sizeof>sizeof <name>zt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>jac</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>, <argument><expr><name>zt</name></expr></argument>, <argument><expr><sizeof>sizeof <name>zt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>jac</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>, <argument><expr><name><name>jac</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>jac</name><index>[<expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>, <argument><expr><sizeof>sizeof <name>zt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>jac</name><index>[<expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>, <argument><expr><name>F256_R</name></expr></argument>, <argument><expr><sizeof>sizeof <name>F256_R</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>s</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr><operator>,</operator> <expr><name>s</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name><name>jac</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>, <argument><expr><name><name>jac</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <name>k</name><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>num</name> <operator>+</operator> <name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <name>zt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>f256_invert</name><argument_list>(<argument><expr><name>zt</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>zv</name></expr></argument>, <argument><expr><name><name>jac</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>, <argument><expr><name>zt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montysquare</name><argument_list>(<argument><expr><name>zu</name></expr></argument>, <argument><expr><name>zv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name>zv</name></expr></argument>, <argument><expr><name>zv</name></expr></argument>, <argument><expr><name>zu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name><name>aff</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>jac</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name>zu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_montymul</name><argument_list>(<argument><expr><name><name>aff</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><name>jac</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name>zv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>p256_mul</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{
<decl_stmt><decl><type><name>p256_affine</name></type> <name><name>aff</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>p256_jacobian</name></type> <name><name>jac</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>window</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<expr_stmt><expr><name><name>window</name><operator>.</operator><name>jac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>P</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>.</operator><name>jac</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>window</name><operator>.</operator><name>jac</name><index>[<expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>.</operator><name>jac</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>p256_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>window</name><operator>.</operator><name>jac</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>window</name><operator>.</operator><name>jac</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>





<expr_stmt><expr><call><name>window_to_affine</name><argument_list>(<argument><expr><name><name>window</name><operator>.</operator><name>aff</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>.</operator><name>jac</name></name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>point_mul_inner</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name><name>window</name><operator>.</operator><name>aff</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>p256_affine</name></type> <name><name>P256_Gwin</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">0x79E730D418A9143C</literal></expr>, <expr><literal type="number">0x75BA95FC5FEDB601</literal></expr>,
<expr><literal type="number">0x79FB732B77622510</literal></expr>, <expr><literal type="number">0x18905F76A53755C6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xDDF25357CE95560A</literal></expr>, <expr><literal type="number">0x8B4AB8E4BA19E45C</literal></expr>,
<expr><literal type="number">0xD2E88688DD21F325</literal></expr>, <expr><literal type="number">0x8571FF1825885D85</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x850046D410DDD64D</literal></expr>, <expr><literal type="number">0xAA6AE3C1A433827D</literal></expr>,
<expr><literal type="number">0x732205038D1490D9</literal></expr>, <expr><literal type="number">0xF6BB32E43DCF3A3B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2F3648D361BEE1A5</literal></expr>, <expr><literal type="number">0x152CD7CBEB236FF8</literal></expr>,
<expr><literal type="number">0x19A8FB0E92042DBE</literal></expr>, <expr><literal type="number">0x78C577510A5B8A3B</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0xFFAC3F904EEBC127</literal></expr>, <expr><literal type="number">0xB027F84A087D81FB</literal></expr>,
<expr><literal type="number">0x66AD77DD87CBBC98</literal></expr>, <expr><literal type="number">0x26936A3FB6FF747E</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xB04C5C1FC983A7EB</literal></expr>, <expr><literal type="number">0x583E47AD0861FE1A</literal></expr>,
<expr><literal type="number">0x788208311A2EE98E</literal></expr>, <expr><literal type="number">0xD5F06A29E587CC07</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x74B0B50D46918DCC</literal></expr>, <expr><literal type="number">0x4650A6EDC623C173</literal></expr>,
<expr><literal type="number">0x0CDAACACE8100AF2</literal></expr>, <expr><literal type="number">0x577362F541B0176B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2D96F24CE4CBABA6</literal></expr>, <expr><literal type="number">0x17628471FAD6F447</literal></expr>,
<expr><literal type="number">0x6B6C36DEE5DDD22E</literal></expr>, <expr><literal type="number">0x84B14C394C5AB863</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0xBE1B8AAEC45C61F5</literal></expr>, <expr><literal type="number">0x90EC649A94B9537D</literal></expr>,
<expr><literal type="number">0x941CB5AAD076C20C</literal></expr>, <expr><literal type="number">0xC9079605890523C8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xEB309B4AE7BA4F10</literal></expr>, <expr><literal type="number">0x73C568EFE5EB882B</literal></expr>,
<expr><literal type="number">0x3540A9877E7A1F68</literal></expr>, <expr><literal type="number">0x73A076BB2DD1E916</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x403947373E77664A</literal></expr>, <expr><literal type="number">0x55AE744F346CEE3E</literal></expr>,
<expr><literal type="number">0xD50A961A5B17A3AD</literal></expr>, <expr><literal type="number">0x13074B5954213673</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x93D36220D377E44B</literal></expr>, <expr><literal type="number">0x299C2B53ADFF14B5</literal></expr>,
<expr><literal type="number">0xF424D44CEF639F11</literal></expr>, <expr><literal type="number">0xA4C9916D4A07F75F</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x0746354EA0173B4F</literal></expr>, <expr><literal type="number">0x2BD20213D23C00F7</literal></expr>,
<expr><literal type="number">0xF43EAAB50C23BB08</literal></expr>, <expr><literal type="number">0x13BA5119C3123E03</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2847D0303F5B9D4D</literal></expr>, <expr><literal type="number">0x6742F2F25DA67BDD</literal></expr>,
<expr><literal type="number">0xEF933BDC77C94195</literal></expr>, <expr><literal type="number">0xEAEDD9156E240867</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x27F14CD19499A78F</literal></expr>, <expr><literal type="number">0x462AB5C56F9B3455</literal></expr>,
<expr><literal type="number">0x8F90F02AF02CFC6B</literal></expr>, <expr><literal type="number">0xB763891EB265230D</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xF59DA3A9532D4977</literal></expr>, <expr><literal type="number">0x21E3327DCF9EBA15</literal></expr>,
<expr><literal type="number">0x123C7B84BE60BBF0</literal></expr>, <expr><literal type="number">0x56EC12F27706DF76</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x75C96E8F264E20E8</literal></expr>, <expr><literal type="number">0xABE6BFED59A7A841</literal></expr>,
<expr><literal type="number">0x2CC09C0444C8EB00</literal></expr>, <expr><literal type="number">0xE05B3080F0C4E16B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1EB7777AA45F3314</literal></expr>, <expr><literal type="number">0x56AF7BEDCE5D45E3</literal></expr>,
<expr><literal type="number">0x2B6E019A88B12F1A</literal></expr>, <expr><literal type="number">0x086659CDFD835F9B</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x2C18DBD19DC21EC8</literal></expr>, <expr><literal type="number">0x98F9868A0FCF8139</literal></expr>,
<expr><literal type="number">0x737D2CD648250B49</literal></expr>, <expr><literal type="number">0xCC61C94724B3428F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0C2B407880DD9E76</literal></expr>, <expr><literal type="number">0xC43A8991383FBE08</literal></expr>,
<expr><literal type="number">0x5F7D2D65779BE5D2</literal></expr>, <expr><literal type="number">0x78719A54EB3B4AB5</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0xEA7D260A6245E404</literal></expr>, <expr><literal type="number">0x9DE407956E7FDFE0</literal></expr>,
<expr><literal type="number">0x1FF3A4158DAC1AB5</literal></expr>, <expr><literal type="number">0x3E7090F1649C9073</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1A7685612B944E88</literal></expr>, <expr><literal type="number">0x250F939EE57F61C8</literal></expr>,
<expr><literal type="number">0x0C0DAA891EAD643D</literal></expr>, <expr><literal type="number">0x68930023E125B88E</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x04B71AA7D2697768</literal></expr>, <expr><literal type="number">0xABDEDEF5CA345A33</literal></expr>,
<expr><literal type="number">0x2409D29DEE37385E</literal></expr>, <expr><literal type="number">0x4EE1DF77CB83E156</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0CAC12D91CBB5B43</literal></expr>, <expr><literal type="number">0x170ED2F6CA895637</literal></expr>,
<expr><literal type="number">0x28228CFA8ADE6D66</literal></expr>, <expr><literal type="number">0x7FF57C9553238ACA</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0xCCC425634B2ED709</literal></expr>, <expr><literal type="number">0x0E356769856FD30D</literal></expr>,
<expr><literal type="number">0xBCBCD43F559E9811</literal></expr>, <expr><literal type="number">0x738477AC5395B759</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x35752B90C00EE17F</literal></expr>, <expr><literal type="number">0x68748390742ED2E3</literal></expr>,
<expr><literal type="number">0x7CD06422BD1F5BC1</literal></expr>, <expr><literal type="number">0xFBC08769C9E7B797</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0xA242A35BB0CF664A</literal></expr>, <expr><literal type="number">0x126E48F77F9707E3</literal></expr>,
<expr><literal type="number">0x1717BF54C6832660</literal></expr>, <expr><literal type="number">0xFAAE7332FD12C72E</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x27B52DB7995D586B</literal></expr>, <expr><literal type="number">0xBE29569E832237C2</literal></expr>,
<expr><literal type="number">0xE8E4193E2A65E7DB</literal></expr>, <expr><literal type="number">0x152706DC2EAA1BBB</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x72BCD8B7BC60055B</literal></expr>, <expr><literal type="number">0x03CC23EE56E27E4B</literal></expr>,
<expr><literal type="number">0xEE337424E4819370</literal></expr>, <expr><literal type="number">0xE2AA0E430AD3DA09</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x40B8524F6383C45D</literal></expr>, <expr><literal type="number">0xD766355442A41B25</literal></expr>,
<expr><literal type="number">0x64EFA6DE778A4797</literal></expr>, <expr><literal type="number">0x2042170A7079ADF4</literal></expr> }</block></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>p256_mulgen</name><parameter_list>(<parameter><decl><type><name>p256_jacobian</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>point_mul_inner</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>P256_Gwin</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>check_scalar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>klen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>|=</operator> <name><name>k</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>klen</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>klen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>|=</operator> <operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>EQ0</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>CMP</name><argument_list>(<argument><expr><name><name>k</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>P256_N</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>NEQ</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LT0</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>api_mul</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>G</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Glen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>P</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Glen</name> <operator>!=</operator> <literal type="number">65</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>check_scalar</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>point_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>G</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>point_encode</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>api_mulgen</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>P</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_mulgen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_encode</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">65</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>api_muladd</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>




























<decl_stmt><decl><type><name>p256_jacobian</name></type> <name>P</name></decl>, <decl><type ref="prev"/><name>Q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curve</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">65</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>point_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>B</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>p256_mulgen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>point_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>p256_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f256_final_reduce</name><argument_list>(<argument><expr><name><name>P</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>P</name><operator>.</operator><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>P</name><operator>.</operator><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>P</name><operator>.</operator><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>P</name><operator>.</operator><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>EQ</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>|</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>p256_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><name>s</name> <operator>&amp;</operator> <operator>~</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><sizeof>sizeof <name>Q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>point_encode</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>s</name> <operator>&amp;</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name></type> <name>br_ec_p256_m64</name> <init>= <expr><block>{
<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00800000</literal></expr>,
<expr><operator>&amp;</operator><name>api_generator</name></expr>,
<expr><operator>&amp;</operator><name>api_order</name></expr>,
<expr><operator>&amp;</operator><name>api_xoff</name></expr>,
<expr><operator>&amp;</operator><name>api_mul</name></expr>,
<expr><operator>&amp;</operator><name>api_mulgen</name></expr>,
<expr><operator>&amp;</operator><name>api_muladd</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type>
<name>br_ec_p256_m64_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>br_ec_p256_m64</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<function><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type>
<name>br_ec_p256_m64_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
