<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/codec/pemenc.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>





<function><type><specifier>static</specifier> <name>char</name></type>
<name>b64char</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">52</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">62</literal></expr>;</expr_stmt>











<return>return <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0x41</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <name>b</name> <operator>&amp;</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><literal type="number">0x61</literal> <operator>-</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>a</name> <operator>&amp;</operator> <name>b</name> <operator>&amp;</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>-</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <literal type="number">0x30</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>a</name> <operator>&amp;</operator> <operator>~</operator><name>b</name> <operator>&amp;</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">0x2B</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>a</name> <operator>|</operator> <name>b</name> <operator>|</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type>
<name>br_pem_encode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>banner</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name></decl>, <decl><type ref="prev"/><name>banner_len</name></decl>, <decl><type ref="prev"/><name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>lim</name></decl>;</decl_stmt>

<expr_stmt><expr><name>banner_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>banner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_LINE64</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">47</literal><operator>)</operator> <operator>/</operator> <literal type="number">48</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">56</literal><operator>)</operator> <operator>/</operator> <literal type="number">57</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>banner_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator>
<operator>+</operator> <name>lines</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dlen</name> <operator>+=</operator> <name>lines</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>dlen</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>







<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>d</name> <operator>+</operator> <name>dlen</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"-----BEGIN "</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>banner</name></expr></argument>, <argument><expr><name>banner_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>banner_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"-----"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0D</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_LINE64</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">19</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>u</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><name>w</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>off</name> <operator>==</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0D</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x3D</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x3D</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0D</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"-----END "</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>banner</name></expr></argument>, <argument><expr><name>banner_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>banner_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"-----"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0D</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<return>return <expr><name>dlen</name></expr>;</return>
</block_content>}</block></function>
</unit>
