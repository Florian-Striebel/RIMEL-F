<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/x509/encode_ec_rawder.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>br_get_curve_OID</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>OID_secp256r1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>OID_secp384r1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x22</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>OID_secp521r1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x23</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>curve</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_EC_secp256r1</name></expr>:</case> <return>return <expr><name>OID_secp256r1</name></expr>;</return>
<case>case <expr><name>BR_EC_secp384r1</name></expr>:</case> <return>return <expr><name>OID_secp384r1</name></expr>;</return>
<case>case <expr><name>BR_EC_secp521r1</name></expr>:</case> <return>return <expr><name>OID_secp521r1</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>size_t</name></type>
<name>br_encode_ec_raw_der_inner</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>include_curve_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>

























<decl_stmt><decl><type><name>size_t</name></type> <name>len_version</name></decl>, <decl><type ref="prev"/><name>len_privateKey</name></decl>, <decl><type ref="prev"/><name>len_parameters</name></decl>, <decl><type ref="prev"/><name>len_publicKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len_publicKey_bits</name></decl>, <decl><type ref="prev"/><name>len_seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>include_curve_oid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>br_get_curve_OID</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oid</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len_version</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len_privateKey</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>include_curve_oid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_parameters</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len_parameters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_publicKey</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len_publicKey_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len_publicKey_bits</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len_publicKey</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name>len_publicKey_bits</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name>len_publicKey_bits</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len_seq</name> <operator>=</operator> <name>len_version</name> <operator>+</operator> <name>len_privateKey</name> <operator>+</operator> <name>len_parameters</name> <operator>+</operator> <name>len_publicKey</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name>len_seq</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len_seq</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lenlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lenlen</name> <operator>=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>lenlen</name></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>include_curve_oid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0xA0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0xA1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len_publicKey_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>qlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>lenlen</name> <operator>+</operator> <name>len_seq</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>size_t</name></type>
<name>br_encode_ec_raw_der</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>br_encode_ec_raw_der_inner</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
