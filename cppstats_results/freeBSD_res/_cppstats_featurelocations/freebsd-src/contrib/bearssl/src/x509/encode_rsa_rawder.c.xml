<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/x509/encode_rsa_rawder.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>size_t</name></type>
<name>br_encode_rsa_raw_der</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>





















<decl_stmt><decl><type><name>br_asn1_uint</name></type> <name><name>num</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>;</decl_stmt>





<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_asn1_uint_prepare</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>br_asn1_uint_prepare</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>nlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>br_asn1_uint_prepare</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>elen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>br_asn1_uint_prepare</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>br_asn1_uint_prepare</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>br_asn1_uint_prepare</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>br_asn1_uint_prepare</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>br_asn1_uint_prepare</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dq</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dqlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>br_asn1_uint_prepare</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>iq</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>iqlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>slen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ilen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ilen</name> <operator>=</operator> <name><name>num</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>asn1len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name>ilen</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ilen</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name>slen</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>slen</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lenlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lenlen</name> <operator>=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>lenlen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>br_asn1_encode_uint</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>num</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>lenlen</name> <operator>+</operator> <name>slen</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
