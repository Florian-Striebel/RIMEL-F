<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/settings.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>br_config_option</name></type> <name><name>config</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"BR_64"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_64</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_AES_X86NI"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_AES_X86NI</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_amd64"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_amd64</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_ARMEL_CORTEXM_GCC"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_ARMEL_CORTEXM_GCC</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_BE_UNALIGNED"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_BE_UNALIGNED</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_CLANG"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_CLANG</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_CLANG_3_7"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_CLANG_3_7</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_CLANG_3_8"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_CLANG_3_8</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_CT_MUL15"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_CT_MUL15</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_CT_MUL31"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_CT_MUL31</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_GCC"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_GCC</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_GCC_4_4"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_GCC_4_4</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_GCC_4_5"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_GCC_4_5</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_GCC_4_6"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_GCC_4_6</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_GCC_4_7"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_GCC_4_7</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_GCC_4_8"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_GCC_4_8</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_GCC_4_9"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_GCC_4_9</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_GCC_5_0"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_GCC_5_0</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_i386"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_i386</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_INT128"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_LE_UNALIGNED"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_LE_UNALIGNED</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_LOMUL"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_LOMUL</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_MAX_EC_SIZE"</literal></expr>, <expr><name>BR_MAX_EC_SIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_MAX_RSA_SIZE"</literal></expr>, <expr><name>BR_MAX_RSA_SIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_MAX_RSA_FACTOR"</literal></expr>, <expr><name>BR_MAX_RSA_FACTOR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_MSC"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_MSC</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_MSC_2005"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_MSC_2005</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_MSC_2008"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_MSC_2008</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_MSC_2010"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_MSC_2010</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_MSC_2012"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_MSC_2012</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_MSC_2013"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_MSC_2013</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_MSC_2015"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_MSC_2015</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_POWER8"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_RDRAND"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_RDRAND</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_SLOW_MUL"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_SLOW_MUL</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_SLOW_MUL15"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_SLOW_MUL15</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_SSE2"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_SSE2</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_UMUL128"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_USE_UNIX_TIME"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_USE_UNIX_TIME</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_USE_WIN32_RAND"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_USE_WIN32_RAND</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"BR_USE_WIN32_TIME"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_USE_WIN32_TIME</name></expr></cpp:if>
<expr><literal type="number">1</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>const</specifier> <name>br_config_option</name> <modifier>*</modifier></type>
<name>br_get_config</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>
</unit>
