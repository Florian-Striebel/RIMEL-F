<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/rsa/rsa_i32_pub.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>uint32_t</name></type>
<name>br_rsa_i32_public</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>uint32_t</name> <name><name>m</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>BR_MAX_RSA_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uint32_t</name> <name><name>a</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>BR_MAX_RSA_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uint32_t</name> <name><name>t1</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>BR_MAX_RSA_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uint32_t</name> <name><name>t2</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>BR_MAX_RSA_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m0i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>





<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>nlen</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>nlen</name> <operator>&gt;</operator> <operator>(</operator><name>BR_MAX_RSA_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <name>xlen</name> <operator>!=</operator> <name>nlen</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>br_i32_decode</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m0i</name> <operator>=</operator> <call><name>br_i32_ninv32</name><argument_list>(<argument><expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>r</name> <operator>=</operator> <name>m0i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>br_i32_decode_mod</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>br_i32_modpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>elen</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>br_i32_encode</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
</unit>
