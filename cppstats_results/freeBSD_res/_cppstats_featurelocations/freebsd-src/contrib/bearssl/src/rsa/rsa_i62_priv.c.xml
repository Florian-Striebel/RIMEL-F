<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/rsa/rsa_i62_priv.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name> <operator>||</operator> <name>BR_UMUL128</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name></cpp:macro> <cpp:value>(2 + ((BR_MAX_RSA_FACTOR + 30) / 31))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLEN</name></cpp:macro> <cpp:value>(4 * U)</cpp:value></cpp:define>


<function><type><name>uint32_t</name></type>
<name>br_rsa_i62_private</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>, <decl><type ref="prev"/><name>qlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fwlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>p0i</name></decl>, <decl><type ref="prev"/><name>q0i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>xlen</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><name>TLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>mp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mq</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>






<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>plen</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>q</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qlen</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qlen</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>




<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>plen</name> <operator>&gt;</operator> <name>qlen</name></expr> ?</condition><then> <expr><name>plen</name></expr> </then><else>: <expr><name>qlen</name></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fwlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>z</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>-=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fwlen</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>




<expr_stmt><expr><name>fwlen</name> <operator>=</operator> <operator>(</operator><name>fwlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><literal type="number">6</literal> <operator>*</operator> <name>fwlen</name> <operator>&gt;</operator> <name>TLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>xlen</name> <operator>=</operator> <operator>(</operator><name><name>sk</name><operator>-&gt;</operator><name>n_bitlen</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>mq</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>mq</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <name>fwlen</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>fwlen</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>mq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_mulacc</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>mq</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>fwlen</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_encode</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name>xlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>u</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>wn</name></decl>, <decl><type ref="prev"/><name>wx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>u</name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wn</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>t3</name><operator>)</operator><index>[<expr><name>u</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>wx</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>wx</name> <operator>-</operator> <operator>(</operator><name>wn</name> <operator>+</operator> <name>r</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>




<expr_stmt><expr><name>mp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>fwlen</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>fwlen</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>q0i</name> <operator>=</operator> <call><name>br_i31_ninv31</name><argument_list>(<argument><expr><name><name>mq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <name>fwlen</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode_reduce</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>br_i62_modpow_opt</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dq</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dqlen</name></name></expr></argument>, <argument><expr><name>mq</name></expr></argument>, <argument><expr><name>q0i</name></expr></argument>,
<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>fwlen</name></expr></argument>, <argument><expr><name>TLEN</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>fwlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>p0i</name> <operator>=</operator> <call><name>br_i31_ninv31</name><argument_list>(<argument><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>fwlen</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode_reduce</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>br_i62_modpow_opt</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dplen</name></name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>p0i</name></expr></argument>,
<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>fwlen</name></expr></argument>, <argument><expr><name>TLEN</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>fwlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>














<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>fwlen</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>fwlen</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_reduce</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_add</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><call><name>br_i31_sub</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_to_monty</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode_reduce</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>iq</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>iqlen</name></name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_montymul</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>p0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_mulacc</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>mq</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>br_i31_encode</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<return>return <expr><name>p0i</name> <operator>&amp;</operator> <name>q0i</name> <operator>&amp;</operator> <name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>br_rsa_private</name></type>
<name>br_rsa_i62_private_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>br_rsa_i62_private</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<function><type><name>br_rsa_private</name></type>
<name>br_rsa_i62_private_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
