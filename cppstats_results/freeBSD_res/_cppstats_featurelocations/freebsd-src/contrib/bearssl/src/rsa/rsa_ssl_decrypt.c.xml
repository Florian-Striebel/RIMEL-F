<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/rsa/rsa_ssl_decrypt.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>uint32_t</name></type>
<name>br_rsa_ssl_decrypt</name><parameter_list>(<parameter><decl><type><name>br_rsa_private</name></type> <name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">59</literal> <operator>||</operator> <name>len</name> <operator>!=</operator> <operator>(</operator><name><name>sk</name><operator>-&gt;</operator><name>n_bitlen</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>core</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">49</literal><operator>)</operator></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>&amp;=</operator> <call><name>NEQ</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>x</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">49</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
</unit>
