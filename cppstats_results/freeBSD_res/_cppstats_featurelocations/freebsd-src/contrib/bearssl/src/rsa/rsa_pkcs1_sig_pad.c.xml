<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/rsa/rsa_pkcs1_sig_pad.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>uint32_t</name></type>
<name>br_rsa_pkcs1_sig_pad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>n_bitlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>xlen</name></decl>;</decl_stmt>


























<expr_stmt><expr><name>xlen</name> <operator>=</operator> <operator>(</operator><name>n_bitlen</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_oid</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xlen</name> <operator>&lt;</operator> <name>hash_len</name> <operator>+</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name>xlen</name> <operator>-</operator> <name>hash_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>u</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x3</name> <operator>=</operator> <name><name>hash_oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>xlen</name> <operator>&lt;</operator> <operator>(</operator><name>x3</name> <operator>+</operator> <name>hash_len</name> <operator>+</operator> <literal type="number">21</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name>xlen</name> <operator>-</operator> <name>x3</name> <operator>-</operator> <name>hash_len</name> <operator>-</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>u</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>x3</name> <operator>+</operator> <name>hash_len</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>x3</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>u</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>hash_oid</name></expr></argument>, <argument><expr><name>x3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>+=</operator> <name>x3</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x05</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name>hash_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>u</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
