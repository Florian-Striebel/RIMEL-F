<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/rsa/rsa_i31_privexp.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>size_t</name></type>
<name>br_rsa_i31_compute_privexp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>





























<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>BR_MAX_RSA_FACTOR</name> <operator>+</operator> <literal type="number">30</literal><operator>)</operator> <operator>/</operator> <literal type="number">31</literal><operator>)</operator> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>k</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>phi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>qbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>, <decl><type ref="prev"/><name>qlen</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>dlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>u0</name></decl>, <decl><type ref="prev"/><name>v0</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>he</name></decl>, <decl><type ref="prev"/><name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>pbuf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pbuf</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>plen</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name><name>plen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">5</literal> <operator>||</operator> <name>plen</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>BR_MAX_RSA_FACTOR</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name><name>pbuf</name><index>[<expr><name>plen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>qbuf</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>q</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qlen</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>qbuf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>qbuf</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qlen</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name><name>qlen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">5</literal> <operator>||</operator> <name>qlen</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>BR_MAX_RSA_FACTOR</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name><name>qbuf</name><index>[<expr><name>qlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name><name>sk</name><operator>-&gt;</operator><name>n_bitlen</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>dlen</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>plen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>qbuf</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qlen</name> <operator>=</operator> <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>








<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>phi</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>qlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>phi</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_mulacc</name><argument_list>(<argument><expr><name>phi</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>phi</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>len</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>phi</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_i31_bit_length</name><argument_list>(<argument><expr><name>phi</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>






<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>u</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>u</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>






<decl_stmt><decl><type><name>uint32_t</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>r</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>+</operator> <name><name>phi</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phi</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>br_divrem</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>phi</name></expr>;</expr_stmt>



















































































<expr_stmt><expr><name>a</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u1</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <name>e</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">62</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oa</name></decl>, <decl><type ref="prev"/><name>ob</name></decl>, <decl><type ref="prev"/><name>agtb</name></decl>, <decl><type ref="prev"/><name>bgta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sab</name></decl>, <decl><type ref="prev"/><name>sba</name></decl>, <decl><type ref="prev"/><name>da</name></decl>, <decl><type ref="prev"/><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ctl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>oa</name> <operator>=</operator> <name>a</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ob</name> <operator>=</operator> <name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>agtb</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bgta</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sab</name> <operator>=</operator> <name>oa</name> <operator>&amp;</operator> <name>ob</name> <operator>&amp;</operator> <name>agtb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sba</name> <operator>=</operator> <name>oa</name> <operator>&amp;</operator> <name>ob</name> <operator>&amp;</operator> <name>bgta</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>-=</operator> <name>b</name> <operator>&amp;</operator> <operator>-</operator><name>sab</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u0</name> <operator>-=</operator> <operator>(</operator><name>u1</name> <operator>-</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>sab</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>-=</operator> <operator>(</operator><name>v1</name> <operator>-</operator> <operator>(</operator><name>e</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>sab</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>-=</operator> <name>a</name> <operator>&amp;</operator> <operator>-</operator><name>sba</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u1</name> <operator>-=</operator> <operator>(</operator><name>u0</name> <operator>-</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>sba</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>-=</operator> <operator>(</operator><name>v0</name> <operator>-</operator> <operator>(</operator><name>e</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>sba</name></expr>;</expr_stmt>

<expr_stmt><expr><name>da</name> <operator>=</operator> <call><name>NOT</name><argument_list>(<argument><expr><name>oa</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>sab</name></expr>;</expr_stmt>
<expr_stmt><expr><name>db</name> <operator>=</operator> <operator>(</operator><name>oa</name> <operator>&amp;</operator> <call><name>NOT</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>sba</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ctl</name> <operator>=</operator> <name>v0</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>^=</operator> <operator>(</operator><name>a</name> <operator>^</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>da</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u0</name> <operator>^=</operator> <operator>(</operator><name>u0</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>u0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hr</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>da</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>^=</operator> <operator>(</operator><name>v0</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>he</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>da</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ctl</name> <operator>=</operator> <name>v1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>^=</operator> <operator>(</operator><name>b</name> <operator>^</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>db</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u1</name> <operator>^=</operator> <operator>(</operator><name>u1</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>u1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hr</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>db</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>^=</operator> <operator>(</operator><name>v1</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>he</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>db</name></expr>;</expr_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>m</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v0</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>u0</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>u0</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_mulacc</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>br_i31_encode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dlen</name></expr>;</return>
</block_content>}</block></function>
</unit>
