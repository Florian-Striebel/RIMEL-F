<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/int/i31_reduce.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>br_i31_reduce</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m_bitlen</name></decl>, <decl><type ref="prev"/><name>a_bitlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mlen</name></decl>, <decl><type ref="prev"/><name>alen</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m_bitlen</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mlen</name> <operator>=</operator> <operator>(</operator><name>m_bitlen</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>m_bitlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m_bitlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>a_bitlen</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>alen</name> <operator>=</operator> <operator>(</operator><name>a_bitlen</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a_bitlen</name> <operator>&lt;</operator> <name>m_bitlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>alen</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <name>alen</name></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>mlen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>alen</name> <operator>-</operator> <name>mlen</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>mlen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>mlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alen</name> <operator>-</operator> <name>mlen</name></expr>;</init> <condition><expr><name>u</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>u</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_muladd_small</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
