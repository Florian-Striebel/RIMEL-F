<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/int/i31_modpow2.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>uint32_t</name></type>
<name>br_i31_modpow_opt</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>m0i</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>twlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>mlen</name></decl>, <decl><type ref="prev"/><name>mwlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>t1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>acc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acc_len</name></decl>, <decl><type ref="prev"/><name>win_len</name></decl>;</decl_stmt>




<expr_stmt><expr><name>mwlen</name> <operator>=</operator> <operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mlen</name> <operator>=</operator> <name>mwlen</name> <operator>*</operator> <sizeof>sizeof <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>mwlen</name> <operator>+=</operator> <operator>(</operator><name>mwlen</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>mwlen</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>twlen</name> <operator>&lt;</operator> <operator>(</operator><name>mwlen</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>win_len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>win_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>win_len</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>win_len</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>mwlen</name> <operator>&lt;=</operator> <name>twlen</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>br_i31_to_monty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>win_len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t2</name> <operator>+</operator> <name>mwlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>mwlen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>win_len</name><operator>)</operator></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_montymul</name><argument_list>(<argument><expr><name>base</name> <operator>+</operator> <name>mwlen</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>+=</operator> <name>mwlen</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>






<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_i31_muladd_small</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acc_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>acc_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>elen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>




<expr_stmt><expr><name>k</name> <operator>=</operator> <name>win_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acc_len</name> <operator>&lt;</operator> <name>win_len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>e</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>elen</name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>acc_len</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>acc_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>acc_len</name> <operator>-</operator> <name>k</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>acc_len</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>







<if_stmt><if>if <condition>(<expr><name>win_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>mwlen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>-</operator><call><name>EQ</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>mwlen</name></expr>;</condition> <incr><expr><name>v</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>t2</name><index>[<expr><name>v</name></expr>]</index></name> <operator>|=</operator> <name>mask</name> <operator>&amp;</operator> <name><name>base</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>base</name> <operator>+=</operator> <name>mwlen</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>br_i31_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><call><name>NEQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>




<expr_stmt><expr><call><name>br_i31_from_monty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
