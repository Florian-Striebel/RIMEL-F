<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/int/i15_moddiv.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>
















<function><type><specifier>static</specifier> <name>void</name></type>
<name>cond_negate</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>xm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>ctl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xm</name> <operator>=</operator> <literal type="number">0x7FFF</literal> <operator>&amp;</operator> <operator>-</operator><name>ctl</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>aw</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aw</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>aw</name> <operator>=</operator> <operator>(</operator><name>aw</name> <operator>^</operator> <name>xm</name><operator>)</operator> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>aw</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>aw</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>void</name></type>
<name>finish_mod</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>neg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>xm</name></decl>, <decl><type ref="prev"/><name>ym</name></decl>;</decl_stmt>




<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>aw</name></decl>, <decl><type ref="prev"/><name>mw</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aw</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mw</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>aw</name> <operator>-</operator> <name>mw</name> <operator>-</operator> <name>cc</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
</block_content>}</block></for>







<expr_stmt><expr><name>xm</name> <operator>=</operator> <literal type="number">0x7FFF</literal> <operator>&amp;</operator> <operator>-</operator><name>neg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ym</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>neg</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>cc</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>neg</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>aw</name></decl>, <decl><type ref="prev"/><name>mw</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aw</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mw</name> <operator>=</operator> <operator>(</operator><name><name>m</name><index>[<expr><name>k</name></expr>]</index></name> <operator>^</operator> <name>xm</name><operator>)</operator> <operator>&amp;</operator> <name>ym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>aw</name> <operator>=</operator> <name>aw</name> <operator>-</operator> <name>mw</name> <operator>-</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>aw</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>aw</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>co_reduce</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>pa</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>qa</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>qb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cca</name></decl>, <decl><type ref="prev"/><name>ccb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nega</name></decl>, <decl><type ref="prev"/><name>negb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cca</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ccb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>wa</name></decl>, <decl><type ref="prev"/><name>wb</name></decl>, <decl><type ref="prev"/><name>za</name></decl>, <decl><type ref="prev"/><name>zb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tta</name></decl>, <decl><type ref="prev"/><name>ttb</name></decl>;</decl_stmt>














<expr_stmt><expr><name>wa</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wb</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>za</name> <operator>=</operator> <name>wa</name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>pa</name> <operator>+</operator> <name>wb</name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>pb</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cca</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zb</name> <operator>=</operator> <name>wa</name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>qa</name> <operator>+</operator> <name>wb</name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>qb</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ccb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>za</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>zb</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tta</name> <operator>=</operator> <name>za</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttb</name> <operator>=</operator> <name>zb</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cca</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ccb</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ttb</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>cca</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>ccb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nega</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cca</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>negb</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ccb</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cond_negate</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>nega</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cond_negate</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>negb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nega</name> <operator>|</operator> <operator>(</operator><name>negb</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type>
<name>co_reduce_mod</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>pa</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>qa</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>qb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>m0i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cca</name></decl>, <decl><type ref="prev"/><name>ccb</name></decl>, <decl><type ref="prev"/><name>fa</name></decl>, <decl><type ref="prev"/><name>fb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cca</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ccb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fa</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>pa</name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>pb</name><operator>)</operator> <operator>*</operator> <name>m0i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fb</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>qa</name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>qb</name><operator>)</operator> <operator>*</operator> <name>m0i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>wa</name></decl>, <decl><type ref="prev"/><name>wb</name></decl>, <decl><type ref="prev"/><name>za</name></decl>, <decl><type ref="prev"/><name>zb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tta</name></decl>, <decl><type ref="prev"/><name>ttb</name></decl>;</decl_stmt>





<expr_stmt><expr><name>wa</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wb</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>za</name> <operator>=</operator> <name>wa</name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>pa</name> <operator>+</operator> <name>wb</name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>pb</name>
<operator>+</operator> <name><name>m</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>fa</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cca</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zb</name> <operator>=</operator> <name>wa</name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>qa</name> <operator>+</operator> <name>wb</name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>qb</name>
<operator>+</operator> <name><name>m</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>fb</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ccb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>za</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>zb</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>((uint32_t)1 &lt;&lt; 16)</cpp:value></cpp:define>
<expr_stmt><expr><name>tta</name> <operator>=</operator> <name>za</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttb</name> <operator>=</operator> <name>zb</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tta</name> <operator>=</operator> <operator>(</operator><name>tta</name> <operator>^</operator> <name>M</name><operator>)</operator> <operator>-</operator> <name>M</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttb</name> <operator>=</operator> <operator>(</operator><name>ttb</name> <operator>^</operator> <name>M</name><operator>)</operator> <operator>-</operator> <name>M</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cca</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ccb</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ttb</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M</name></cpp:undef>
</block_content>}</block></for>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cca</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ccb</name></expr>;</expr_stmt>









<expr_stmt><expr><call><name>finish_mod</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>cca</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_mod</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ccb</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>uint32_t</name></type>
<name>br_i15_moddiv</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>m0i</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>

























































<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>u</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>b</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>num</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">14</literal></expr>;</init> <condition><expr><name>num</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>num</name> <operator>-=</operator> <literal type="number">14</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a_hi</name></decl>, <decl><type ref="prev"/><name>b_hi</name></decl>, <decl><type ref="prev"/><name>a_lo</name></decl>, <decl><type ref="prev"/><name>b_lo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>pa</name></decl>, <decl><type ref="prev"/><name>pb</name></decl>, <decl><type ref="prev"/><name>qa</name></decl>, <decl><type ref="prev"/><name>qb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>








<expr_stmt><expr><name>c0</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>aw</name></decl>, <decl><type ref="prev"/><name>bw</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aw</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bw</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>^=</operator> <operator>(</operator><name>a0</name> <operator>^</operator> <name>aw</name><operator>)</operator> <operator>&amp;</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>^=</operator> <operator>(</operator><name>a1</name> <operator>^</operator> <name>aw</name><operator>)</operator> <operator>&amp;</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b0</name> <operator>^=</operator> <operator>(</operator><name>b0</name> <operator>^</operator> <name>bw</name><operator>)</operator> <operator>&amp;</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>^=</operator> <operator>(</operator><name>b1</name> <operator>^</operator> <name>bw</name><operator>)</operator> <operator>&amp;</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c0</name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>aw</name> <operator>|</operator> <name>bw</name><operator>)</operator> <operator>+</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>







<expr_stmt><expr><name>a1</name> <operator>|=</operator> <name>a0</name> <operator>&amp;</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>&amp;=</operator> <operator>~</operator><name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>|=</operator> <name>b0</name> <operator>&amp;</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b0</name> <operator>&amp;=</operator> <operator>~</operator><name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a_hi</name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <name>a1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_hi</name> <operator>=</operator> <operator>(</operator><name>b0</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <name>b1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a_lo</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_lo</name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>










<expr_stmt><expr><name>pa</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qa</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>












<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>oa</name></decl>, <decl><type ref="prev"/><name>ob</name></decl>, <decl><type ref="prev"/><name>cAB</name></decl>, <decl><type ref="prev"/><name>cBA</name></decl>, <decl><type ref="prev"/><name>cA</name></decl>;</decl_stmt>











<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>a_hi</name></expr></argument>, <argument><expr><name>b_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oa</name> <operator>=</operator> <operator>(</operator><name>a_lo</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ob</name> <operator>=</operator> <operator>(</operator><name>b_lo</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cAB</name> <operator>=</operator> <name>oa</name> <operator>&amp;</operator> <name>ob</name> <operator>&amp;</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cBA</name> <operator>=</operator> <name>oa</name> <operator>&amp;</operator> <name>ob</name> <operator>&amp;</operator> <call><name>NOT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cA</name> <operator>=</operator> <name>cAB</name> <operator>|</operator> <call><name>NOT</name><argument_list>(<argument><expr><name>oa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>a_lo</name> <operator>-=</operator> <name>b_lo</name> <operator>&amp;</operator> <operator>-</operator><name>cAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a_hi</name> <operator>-=</operator> <name>b_hi</name> <operator>&amp;</operator> <operator>-</operator><name>cAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pa</name> <operator>-=</operator> <name>qa</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>cAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pb</name> <operator>-=</operator> <name>qb</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>cAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_lo</name> <operator>-=</operator> <name>a_lo</name> <operator>&amp;</operator> <operator>-</operator><name>cBA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_hi</name> <operator>-=</operator> <name>a_hi</name> <operator>&amp;</operator> <operator>-</operator><name>cBA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qa</name> <operator>-=</operator> <name>pa</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>cBA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qb</name> <operator>-=</operator> <name>pb</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>cBA</name></expr>;</expr_stmt>




<expr_stmt><expr><name>a_lo</name> <operator>+=</operator> <name>a_lo</name> <operator>&amp;</operator> <operator>(</operator><name>cA</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pa</name> <operator>+=</operator> <name>pa</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>cA</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pb</name> <operator>+=</operator> <name>pb</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>cA</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a_hi</name> <operator>^=</operator> <operator>(</operator><name>a_hi</name> <operator>^</operator> <operator>(</operator><name>a_hi</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>cA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_lo</name> <operator>+=</operator> <name>b_lo</name> <operator>&amp;</operator> <operator>-</operator><name>cA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qa</name> <operator>+=</operator> <name>qa</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>cA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qb</name> <operator>+=</operator> <name>qb</name> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>cA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_hi</name> <operator>^=</operator> <operator>(</operator><name>b_hi</name> <operator>^</operator> <operator>(</operator><name>b_hi</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>cA</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>co_reduce</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>qa</name></expr></argument>, <argument><expr><name>qb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pa</name> <operator>-=</operator> <name>pa</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pb</name> <operator>-=</operator> <name>pb</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qa</name> <operator>-=</operator> <name>qa</name> <operator>*</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qb</name> <operator>-=</operator> <name>qb</name> <operator>*</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>co_reduce_mod</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>qa</name></expr></argument>, <argument><expr><name>qb</name></expr></argument>, <argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>







<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>|=</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><index>[<expr><name>k</name></expr>]</index></name> <operator>|=</operator> <name><name>v</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>EQ0</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
