<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/int/i32_mulacc.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>br_i32_mulacc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>alen</name></decl>, <decl><type ref="prev"/><name>blen</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><name>alen</name> <operator>=</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>blen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>v</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_64</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cc</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>u</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>alen</name></expr>;</condition> <incr><expr><name>v</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>d</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>u</name> <operator>+</operator> <name>v</name></expr>]</index></name> <operator>+</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>v</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>u</name> <operator>+</operator> <name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>u</name> <operator>+</operator> <name>alen</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
