<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/hash/dig_oid.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>md5_OID</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha1_OID</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x1A</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha224_OID</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha256_OID</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha384_OID</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha512_OID</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>br_digest_OID</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>digest_id</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>digest_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>br_md5_ID</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof <name>md5_OID</name></sizeof></expr>;</expr_stmt>
<return>return <expr><name>md5_OID</name></expr>;</return>
<case>case <expr><name>br_sha1_ID</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof <name>sha1_OID</name></sizeof></expr>;</expr_stmt>
<return>return <expr><name>sha1_OID</name></expr>;</return>
<case>case <expr><name>br_sha224_ID</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof <name>sha224_OID</name></sizeof></expr>;</expr_stmt>
<return>return <expr><name>sha224_OID</name></expr>;</return>
<case>case <expr><name>br_sha256_ID</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof <name>sha256_OID</name></sizeof></expr>;</expr_stmt>
<return>return <expr><name>sha256_OID</name></expr>;</return>
<case>case <expr><name>br_sha384_ID</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof <name>sha384_OID</name></sizeof></expr>;</expr_stmt>
<return>return <expr><name>sha384_OID</name></expr>;</return>
<case>case <expr><name>br_sha512_ID</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof <name>sha512_OID</name></sizeof></expr>;</expr_stmt>
<return>return <expr><name>sha512_OID</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
