<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/hash/multihash.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>





<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_md5_context</name></type> <name>md5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sha1_context</name></type> <name>sha1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sha224_context</name></type> <name>sha224</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sha256_context</name></type> <name>sha256</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sha384_context</name></type> <name>sha384</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sha512_context</name></type> <name>sha512</name></decl>;</decl_stmt>
}</block></union></type> <name>gen_hash_context</name>;</typedef>






<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_state_offset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>




<return>return <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_multihash_context</name></expr></argument>, <argument><expr><name>val_64</name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>id</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>






<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_multihash_context</name></expr></argument>, <argument><expr><name>val_32</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name>x</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_multihash_zero</name><parameter_list>(<parameter><decl><type><name>br_multihash_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_multihash_init</name><parameter_list>(<parameter><decl><type><name>br_multihash_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>impl</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>gen_hash_context</name></type> <name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>vtable</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ctx</name> <operator>+</operator> <call><name>get_state_offset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_multihash_update</name><parameter_list>(<parameter><decl><type><name>br_multihash_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">128</literal> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>clen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>impl</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>gen_hash_context</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ctx</name>
<operator>+</operator> <call><name>get_state_offset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>set_state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>vtable</name></name></expr></argument>,
<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><name>size_t</name></type>
<name>br_multihash_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_multihash_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gen_hash_context</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>impl</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ctx</name> <operator>+</operator> <call><name>get_state_offset</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>set_state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>out</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_OUT_OFF</name><operator>)</operator> <operator>&amp;</operator> <name>BR_HASHDESC_OUT_MASK</name></expr>;</return>
</block_content>}</block></function>
</unit>
