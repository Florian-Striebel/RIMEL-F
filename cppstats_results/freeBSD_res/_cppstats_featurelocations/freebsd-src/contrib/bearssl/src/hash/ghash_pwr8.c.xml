<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/hash/ghash_pwr8.c">























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_POWER_ASM_MACROS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8</name></expr></cpp:if>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HB0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HB1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HB2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HB6</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HB7</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT0</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT1</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT2</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSW</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBSW</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT</name></cpp:macro> <cpp:value>vxor(HB0, HB0, HB0) vspltisb(HB1, 1) vspltisb(HB2, 2) vspltisb(HB6, 6) vspltisb(HB7, 7) INIT_BSW</cpp:value></cpp:define>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_BSW</name></cpp:macro> <cpp:value>lxvw4x(XBSW, 0, %[idx2be])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_ENDIAN</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vperm(xx, xx, xx, BSW)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_BSW</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_ENDIAN</name><parameter_list>(<parameter><type><name>xx</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_256</name><parameter_list>(<parameter><type><name>x0</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vsldoi(TT0, HB0, x1, 1) vsl(x0, x0, HB1) vsr(TT0, TT0, HB7) vsl(x1, x1, HB1) vxor(x0, x0, TT0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDUCE_F128</name><parameter_list>(<parameter><type><name>xd</name></type></parameter>, <parameter><type><name>x0</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vxor(x0, x0, x1) vsr(TT0, x1, HB1) vsr(TT1, x1, HB2) vsr(TT2, x1, HB7) vxor(x0, x0, TT0) vxor(TT1, TT1, TT2) vxor(x0, x0, TT1) vsldoi(x1, x1, HB0, 15) vsl(TT1, x1, HB6) vsl(TT2, x1, HB1) vxor(x1, TT1, TT2) vsr(TT0, x1, HB1) vsr(TT1, x1, HB2) vsr(TT2, x1, HB7) vxor(x0, x0, x1) vxor(x0, x0, TT0) vxor(TT1, TT1, TT2) vxor(xd, x0, TT1)</cpp:value></cpp:define>




















<function><type><name>void</name></type>
<name>br_ghash_pwr8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num4</name></decl>, <decl><type ref="prev"/><name>num1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>cc0</name></decl>, <decl><type ref="prev"/><name>cc1</name></decl>, <decl><type ref="prev"/><name>cc2</name></decl>, <decl><type ref="prev"/><name>cc3</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>idx2be</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x03020100</literal></expr>, <expr><literal type="number">0x07060504</literal></expr>, <expr><literal type="number">0x0B0A0908</literal></expr>, <expr><literal type="number">0x0F0E0D0C</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>buf1</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>













<expr_stmt><expr><name>num4</name> <operator>=</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>buf1</name> <operator>+</operator> <operator>(</operator><name>num4</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>&amp;=</operator> <literal type="number">63</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num1</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>num1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cc0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc1</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc2</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc3</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<asm>asm <specifier>volatile</specifier> (
INIT




lxvw4x(41, 0, %[h])
FIX_ENDIAN(9)




lxvw4x(60, 0, %[y])
FIX_ENDIAN(28)







xxpermdi(49, 41, 41, 2)
vsldoi(18, HB0, 9, 8)
vsldoi(19, 9, HB0, 8)




cmpldi(%[num4], 0)
beq(chunk1)




vpmsumd(10, 18, 18)
vpmsumd(11, 19, 19)
SL_256(10, 11)
REDUCE_F128(10, 10, 11)









vsldoi(11, HB0, 10, 8)
vsldoi(12, 10, HB0, 8)
vpmsumd(13, 10, 17)
vpmsumd(11, 11, 18)
vpmsumd(12, 12, 19)
vsldoi(14, HB0, 13, 8)
vsldoi(15, 13, HB0, 8)
vxor(11, 11, 14)
vxor(12, 12, 15)
SL_256(11, 12)
REDUCE_F128(11, 11, 12)




vsldoi(12, HB0, 10, 8)
vsldoi(13, 10, HB0, 8)
vpmsumd(12, 12, 12)
vpmsumd(13, 13, 13)
SL_256(12, 13)
REDUCE_F128(12, 12, 13)








xxpermdi(45, 44, 43, 0)
xxpermdi(46, 44, 43, 3)
xxpermdi(47, 42, 41, 0)
xxpermdi(48, 42, 41, 3)




mtctr(%[num4])
label(loop4)







lxvw4x(52, %[cc0], %[buf1])
lxvw4x(53, %[cc1], %[buf1])
lxvw4x(54, %[cc2], %[buf1])
lxvw4x(55, %[cc3], %[buf1])
FIX_ENDIAN(20)
FIX_ENDIAN(21)
FIX_ENDIAN(22)
FIX_ENDIAN(23)
addi(%[buf1], %[buf1], 64)
vxor(20, 20, 28)








xxpermdi(41, 52, 53, 0)
xxpermdi(42, 52, 53, 3)
xxpermdi(43, 54, 55, 0)
xxpermdi(44, 54, 55, 3)












vpmsumd(20, 13, 9)
vpmsumd(21, 13, 10)
vpmsumd(22, 14, 9)
vpmsumd(23, 14, 10)
vpmsumd(24, 15, 11)
vpmsumd(25, 15, 12)
vpmsumd(26, 16, 11)
vpmsumd(27, 16, 12)




vxor(11, 20, 24)
vxor(12, 23, 27)
vxor( 9, 21, 22)
vxor(10, 25, 26)
vxor(20, 9, 10)
vsldoi( 9, HB0, 20, 8)
vsldoi(10, 20, HB0, 8)
vxor(11, 11, 9)
vxor(12, 12, 10)




SL_256(11, 12)
REDUCE_F128(28, 11, 12)




bdnz(loop4)




label(chunk1)
cmpldi(%[num1], 0)
beq(done)

mtctr(%[num1])
label(loop1)



lxvw4x(41, 0, %[buf2])
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
FIX_ENDIAN(9)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
addi(%[buf2], %[buf2], 16)
vxor(9, 28, 9)







vsldoi(10, HB0, 9, 8)
vsldoi(11, 9, HB0, 8)







vpmsumd(14, 9, 17)
vpmsumd(12, 10, 18)
vpmsumd(13, 11, 19)




vsldoi(10, HB0, 14, 8)
vsldoi(11, 14, HB0, 8)
vxor(12, 12, 10)
vxor(13, 13, 11)




SL_256(12, 13)
REDUCE_F128(28, 12, 13)
bdnz(loop1)

label(done)



FIX_ENDIAN(28)
stxvw4x(60, 0, %[y])

: [buf1] "+b" (buf1), [buf2] "+b" (buf2)
: [y] "b" (y), [h] "b" (h), [num4] "b" (num4), [num1] "b" (num1),
[cc0] "b" (cc0), [cc1] "b" (cc1), [cc2] "b" (cc2), [cc3] "b" (cc3)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
, [idx2be] "b" (idx2be)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
: "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8", "v9",
"v10", "v11", "v12", "v13", "v14", "v15", "v16", "v17", "v18", "v19",
"v20", "v21", "v22", "v23", "v24", "v25", "v26", "v27", "v28", "v29",
"ctr", "memory"
);</asm>
</block_content>}</block></function>


<function><type><name>br_ghash</name></type>
<name>br_ghash_pwr8_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>br_ghash_pwr8</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<function><type><name>br_ghash</name></type>
<name>br_ghash_pwr8_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
