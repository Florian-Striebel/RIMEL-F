<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/symcipher/des_support.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>br_des_do_IP</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>xl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>xr</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>uint32_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>*</operator><name>xl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>*</operator><name>xr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <name>r</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x0F0F0F0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>^</operator> <name>r</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x0000FFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <name>l</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x33333333</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name>l</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00FF00FF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>r</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x55555555</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xl</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xr</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_des_do_invIP</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>xl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>xr</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>*</operator><name>xl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>*</operator><name>xr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>r</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name>l</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF00FF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <name>l</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>^</operator> <name>r</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000FFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <name>r</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>^=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xl</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xr</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_des_keysched_unit</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>xl</name></decl>, <decl><type ref="prev"/><name>xr</name></decl>, <decl><type ref="prev"/><name>kl</name></decl>, <decl><type ref="prev"/><name>kr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xl</name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>























<expr_stmt><expr><call><name>br_des_do_IP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kl</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>xr</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>xl</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>xr</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00FF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>xl</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00FF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>xr</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x000000FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>xl</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x0000FF00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>xr</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x0000FF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>xl</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x000F0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x8103</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kl</name> <operator>=</operator> <operator>(</operator><name>kl</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>kl</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <operator>(</operator><name>kr</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>kr</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>kl</name> <operator>=</operator> <operator>(</operator><name>kl</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>kl</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <operator>(</operator><name>kr</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>kr</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>kl</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x0FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kr</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x0FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>kl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>kr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_des_rev_skey</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>skey</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skey</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>skey</name><index>[<expr><literal type="number">30</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skey</name><index>[<expr><literal type="number">30</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>skey</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skey</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>skey</name><index>[<expr><literal type="number">31</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skey</name><index>[<expr><literal type="number">31</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
