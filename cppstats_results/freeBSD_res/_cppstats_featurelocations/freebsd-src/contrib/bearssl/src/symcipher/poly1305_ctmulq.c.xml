<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/symcipher/poly1305_ctmulq.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name> <operator>||</operator> <name>BR_UMUL128</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL128</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { unsigned __int128 mul128tmp; mul128tmp = (unsigned __int128)(x) * (unsigned __int128)(y); (hi) = (uint64_t)(mul128tmp &gt;&gt; 64); (lo) = (uint64_t)mul128tmp; } while (0)</cpp:value></cpp:define>






<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL128</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (lo) = _umul128((x), (y), &amp;(hi)); } while (0)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK42</name></cpp:macro> <cpp:value>((uint64_t)0x000003FFFFFFFFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK44</name></cpp:macro> <cpp:value>((uint64_t)0x00000FFFFFFFFFFF)</cpp:value></cpp:define>

























































<function><type><specifier>static</specifier> <name>void</name></type>
<name>poly1305_inner_big</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>acc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MX</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>m0</name></type></parameter>, <parameter><type><name>m1</name></type></parameter>, <parameter><type><name>m2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint64_t mxhi, mxlo; MUL128(mxhi, mxlo, a0, m0); (hi) = mxhi; (lo) = mxlo &gt;&gt; 20; MUL128(mxhi, mxlo, a1, m1); (hi) += mxhi; (lo) += mxlo &gt;&gt; 20; MUL128(mxhi, mxlo, a2, m2); (hi) += mxhi; (lo) += mxlo &gt;&gt; 20; } while (0)</cpp:value></cpp:define>












<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r0</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u2</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <name>v2</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <name>c0</name> <operator>+</operator> <literal type="number">20</literal> <operator>*</operator> <name>d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <name>d0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>c2</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <name>v2</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <name>c0</name> <operator>+</operator> <literal type="number">20</literal> <operator>*</operator> <name>d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <name>d0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>c2</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <name>v2</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <name>c0</name> <operator>+</operator> <literal type="number">20</literal> <operator>*</operator> <name>d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <name>d0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>c2</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <name>v2</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <name>c0</name> <operator>+</operator> <literal type="number">20</literal> <operator>*</operator> <name>d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <name>d0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>c2</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>a0</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <name>a1</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <literal type="number">20</literal> <operator>*</operator> <operator>(</operator><name>a2</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>a2</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MX</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>poly1305_inner_small</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>acc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r0</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u2</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof <name>tmp</name></sizeof><operator>)</operator> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <name>v2</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MX</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>m0</name></type></parameter>, <parameter><type><name>m1</name></type></parameter>, <parameter><type><name>m2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint64_t mxhi, mxlo; MUL128(mxhi, mxlo, a0, m0); (hi) = mxhi; (lo) = mxlo &gt;&gt; 20; MUL128(mxhi, mxlo, a1, m1); (hi) += mxhi; (lo) += mxlo &gt;&gt; 20; MUL128(mxhi, mxlo, a2, m2); (hi) += mxhi; (lo) += mxlo &gt;&gt; 20; } while (0)</cpp:value></cpp:define>












<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MX</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MX</name></cpp:undef>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <name>c0</name> <operator>+</operator> <literal type="number">20</literal> <operator>*</operator> <name>d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <name>d0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>c2</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>a0</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <name>a1</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <literal type="number">20</literal> <operator>*</operator> <operator>(</operator><name>a2</name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>a2</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>poly1305_inner</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>acc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">63</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poly1305_inner_big</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>len2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>len2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>poly1305_inner_small</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_poly1305_ctmulq_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>aad</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>aad_len</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>br_chacha20_run</name></type> <name>ichacha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pkey</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>foot</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>acc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>, <decl><type ref="prev"/><name>v4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>w0</name></decl>, <decl><type ref="prev"/><name>w1</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>w3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ctl</name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>pkey</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pkey</name></expr></argument>, <argument><expr><sizeof>sizeof <name>pkey</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>











<expr_stmt><expr><name><name>pkey</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkey</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFC</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkey</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkey</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFC</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkey</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkey</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFC</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkey</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>r0</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>br_dec64le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r0</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0xFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>r1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0xFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <literal type="number">20</literal> <operator>*</operator> <operator>(</operator><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">20</literal> <operator>*</operator> <name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>r1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0xFFFFF</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>foot</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>foot</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poly1305_inner_small</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>foot</name></expr></argument>, <argument><expr><sizeof>sizeof <name>foot</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">42</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;=</operator> <name>MASK42</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <name>MASK44</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">42</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;=</operator> <name>MASK42</name></expr>;</expr_stmt>







<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v4</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctl</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctl</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctl</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctl</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">0x00000003</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>v0</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>w0</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>v0</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w1</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>v1</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>w0</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>v2</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>w1</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>w3</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>v3</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>w2</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w3</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encrypt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>br_poly1305_run</name></type>
<name>br_poly1305_ctmulq_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>br_poly1305_ctmulq_run</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<function><type><name>br_poly1305_run</name></type>
<name>br_poly1305_ctmulq_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
