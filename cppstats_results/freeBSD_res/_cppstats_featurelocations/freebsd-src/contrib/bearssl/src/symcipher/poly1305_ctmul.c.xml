<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/symcipher/poly1305_ctmul.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>poly1305_inner</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>acc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>











<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>a4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>r3</name></decl>, <decl><type ref="prev"/><name>r4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>, <decl><type ref="prev"/><name>u3</name></decl>, <decl><type ref="prev"/><name>u4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r0</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r3</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r4</name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u1</name> <operator>=</operator> <name>r1</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u2</name> <operator>=</operator> <name>r2</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u3</name> <operator>=</operator> <name>r3</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u4</name> <operator>=</operator> <name>r4</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a4</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>w0</name></decl>, <decl><type ref="prev"/><name>w1</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>w3</name></decl>, <decl><type ref="prev"/><name>w4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>a0</name> <operator>+=</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x03FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>+=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a4</name> <operator>+=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x01000000</literal></expr>;</expr_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)(x) * (uint64_t)(y))</cpp:value></cpp:define>

<expr_stmt><expr><name>w0</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>u4</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>u3</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a4</name></expr></argument>, <argument><expr><name>u1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w1</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>u4</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>u3</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a4</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>u4</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a4</name></expr></argument>, <argument><expr><name>u3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w3</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a4</name></expr></argument>, <argument><expr><name>u4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w4</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>a4</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M</name></cpp:undef>








<expr_stmt><expr><name>c</name> <operator>=</operator> <name>w0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w0</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w1</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>w1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w1</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>w2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w2</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w3</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>w3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w3</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w4</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>w4</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a4</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>w4</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>c</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>a0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>a2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>a4</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_poly1305_ctmul_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>aad</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>aad_len</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>br_chacha20_run</name></type> <name>ichacha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pkey</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>foot</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>acc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>cc</name></decl>, <decl><type ref="prev"/><name>ctl</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>pkey</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pkey</name></expr></argument>, <argument><expr><sizeof>sizeof <name>pkey</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>












<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x03FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03FFFF03</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03FFC0FF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03F03FFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x000FFFFF</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>acc</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>foot</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>foot</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>foot</name></expr></argument>, <argument><expr><sizeof>sizeof <name>foot</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>acc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x03FFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>






<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x03FFFFFA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ctl</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x03FFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>cc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>t</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>&amp;=</operator> <literal type="number">0x03FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>






<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>acc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encrypt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
