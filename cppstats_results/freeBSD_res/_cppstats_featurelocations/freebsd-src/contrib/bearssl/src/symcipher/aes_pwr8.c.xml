<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/symcipher/aes_pwr8.c">























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_POWER_ASM_MACROS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>key_schedule_128</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>fmod</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x11B</literal></expr>, <expr><literal type="number">0x11B</literal></expr>, <expr><literal type="number">0x11B</literal></expr>, <expr><literal type="number">0x11B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>idx2be</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x03020100</literal></expr>, <expr><literal type="number">0x07060504</literal></expr>, <expr><literal type="number">0x0B0A0908</literal></expr>, <expr><literal type="number">0x0F0E0D0C</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<asm>asm <specifier>volatile</specifier> (










vspltisw(0, 0)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
vspltisw(1, -8)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
vspltisw(1, 8)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
lxvw4x(34, 0, %[key])
vspltisw(3, 1)
vspltisw(6, 8)
lxvw4x(39, 0, %[fmod])
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
lxvw4x(40, 0, %[idx2be])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
vperm(4, 2, 2, 8)
stxvw4x(36, 0, %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
stxvw4x(34, 0, %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




li(%[cc], 10)
mtctr(%[cc])
label(loop)

addi(%[sk], %[sk], 16)


vrlw(4, 2, 1)
vsbox(4, 4)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
vxor(4, 4, 3)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
vsldoi(5, 3, 0, 3)
vxor(4, 4, 5)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
vspltw(4, 4, 3)


vsldoi(5, 0, 2, 12)
vxor(2, 2, 5)
vsldoi(5, 0, 2, 12)
vxor(2, 2, 5)
vsldoi(5, 0, 2, 12)
vxor(2, 2, 5)
vxor(2, 2, 4)


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
vperm(4, 2, 2, 8)
stxvw4x(36, 0, %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
stxvw4x(34, 0, %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


vadduwm(3, 3, 3)
vsrw(4, 3, 6)
vsubuwm(4, 0, 4)
vand(4, 4, 7)
vxor(3, 3, 4)

bdnz(loop)

: [sk] "+b" (sk), [cc] "+b" (cc)
: [key] "b" (key), [fmod] "b" (fmod)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
, [idx2be] "b" (idx2be)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
: "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "ctr", "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>key_schedule_192</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>cc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>idx2be</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x03020100</literal></expr>, <expr><literal type="number">0x07060504</literal></expr>, <expr><literal type="number">0x0B0A0908</literal></expr>, <expr><literal type="number">0x0F0E0D0C</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<asm>asm <specifier>volatile</specifier> (











vspltisw(0, 0)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
vspltisw(1, -8)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
vspltisw(1, 8)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
li(%[cc], 8)
lxvw4x(34, 0, %[key])
lxvw4x(35, %[cc], %[key])
vsldoi(3, 3, 0, 8)
vspltisw(5, 1)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BR_POWER8_LE</name></expr></cpp:if>
vsldoi(5, 5, 0, 3)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
vspltisw(6, 8)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
lxvw4x(40, 0, %[idx2be])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





li(%[cc], 8)
mtctr(%[cc])
li(%[cc], 16)
label(loop)





vrlw(10, 3, 1)
vsbox(10, 10)
vxor(10, 10, 5)
vspltw(10, 10, 1)
vsldoi(11, 0, 10, 8)

vsldoi(12, 0, 2, 12)
vxor(12, 2, 12)
vsldoi(13, 0, 12, 12)
vxor(12, 12, 13)
vsldoi(13, 0, 12, 12)
vxor(12, 12, 13)

vspltw(13, 12, 3)
vxor(13, 13, 3)
vsldoi(14, 0, 3, 12)
vxor(13, 13, 14)

vsldoi(4, 12, 13, 8)
vsldoi(14, 0, 3, 8)
vsldoi(3, 14, 12, 8)

vxor(3, 3, 11)
vxor(4, 4, 10)






vadduwm(5, 5, 5)




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
vperm(10, 2, 2, 8)
vperm(11, 3, 3, 8)
stxvw4x(42, 0, %[sk])
stxvw4x(43, %[cc], %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
stxvw4x(34, 0, %[sk])
stxvw4x(35, %[cc], %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
addi(%[sk], %[sk], 24)




vsldoi(2, 3, 4, 8)
vsldoi(3, 4, 0, 8)

bdnz(loop)





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
vperm(10, 2, 2, 8)
stxvw4x(42, 0, %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
stxvw4x(34, 0, %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

: [sk] "+b" (sk), [cc] "+b" (cc)
: [key] "b" (key)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
, [idx2be] "b" (idx2be)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
: "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7",
"v8", "v9", "v10", "v11", "v12", "v13", "v14", "ctr", "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>key_schedule_256</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>cc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>idx2be</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x03020100</literal></expr>, <expr><literal type="number">0x07060504</literal></expr>, <expr><literal type="number">0x0B0A0908</literal></expr>, <expr><literal type="number">0x0F0E0D0C</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<asm>asm <specifier>volatile</specifier> (











vspltisw(0, 0)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
vspltisw(1, -8)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
vspltisw(1, 8)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
li(%[cc], 16)
lxvw4x(34, 0, %[key])
lxvw4x(35, %[cc], %[key])
vspltisw(6, 1)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BR_POWER8_LE</name></expr></cpp:if>
vsldoi(6, 6, 0, 3)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
vspltisw(7, 8)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
lxvw4x(40, 0, %[idx2be])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





li(%[cc], 7)
mtctr(%[cc])
li(%[cc], 16)
label(loop)




vrlw(10, 3, 1)
vsbox(10, 10)
vxor(10, 10, 6)
vspltw(10, 10, 3)

vsldoi(4, 0, 2, 12)
vxor(4, 2, 4)
vsldoi(5, 0, 4, 12)
vxor(4, 4, 5)
vsldoi(5, 0, 4, 12)
vxor(4, 4, 5)
vxor(4, 4, 10)




vsbox(10, 4)
vspltw(10, 10, 3)

vsldoi(5, 0, 3, 12)
vxor(5, 3, 5)
vsldoi(11, 0, 5, 12)
vxor(5, 5, 11)
vsldoi(11, 0, 5, 12)
vxor(5, 5, 11)
vxor(5, 5, 10)






vadduwm(6, 6, 6)




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
vperm(10, 2, 2, 8)
vperm(11, 3, 3, 8)
stxvw4x(42, 0, %[sk])
stxvw4x(43, %[cc], %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
stxvw4x(34, 0, %[sk])
stxvw4x(35, %[cc], %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
addi(%[sk], %[sk], 32)




vxor(2, 0, 4)
vxor(3, 0, 5)

bdnz(loop)





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
vperm(10, 2, 2, 8)
stxvw4x(42, 0, %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
stxvw4x(34, 0, %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

: [sk] "+b" (sk), [cc] "+b" (cc)
: [key] "b" (key)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
, [idx2be] "b" (idx2be)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
: "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7",
"v8", "v9", "v10", "v11", "v12", "v13", "v14", "ctr", "memory"
);</asm>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>br_aes_pwr8_supported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name></type>
<name>br_aes_pwr8_keysched</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><call><name>key_schedule_128</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">10</literal></expr>;</return>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><call><name>key_schedule_192</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">12</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>key_schedule_256</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">14</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
