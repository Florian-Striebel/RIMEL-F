<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/src/symcipher/aes_ct64_cbcenc.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>br_aes_ct64_cbcenc_init</name><parameter_list>(<parameter><decl><type><name>br_aes_ct64_cbcenc_keys</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_aes_ct64_cbcenc_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_rounds</name></name> <operator>=</operator> <call><name>br_aes_ct64_keysched</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>br_aes_ct64_cbcenc_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aes_ct64_cbcenc_keys</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>sk_exp</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>ivw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>br_aes_ct64_skey_expand</name><argument_list>(<argument><expr><name>sk_exp</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_rounds</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_range_dec32le</name><argument_list>(<argument><expr><name>ivw</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>q</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ivw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ivw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ivw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ivw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_aes_ct64_interleave_in</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_aes_ct64_ortho</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_aes_ct64_bitslice_encrypt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_rounds</name></name></expr></argument>, <argument><expr><name>sk_exp</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_aes_ct64_ortho</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_aes_ct64_interleave_out</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ivw</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><sizeof>sizeof <name>w</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_enc32le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>br_range_enc32le</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivw</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>br_block_cbcenc_class</name></type> <name>br_aes_ct64_cbcenc_vtable</name> <init>= <expr><block>{
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_aes_ct64_cbcenc_keys</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_block_cbcenc_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;</operator><name>br_aes_ct64_cbcenc_init</name></expr>,
<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_block_cbcenc_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;</operator><name>br_aes_ct64_cbcenc_run</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
