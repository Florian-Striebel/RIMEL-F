<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/tools/brssl.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BRSSL_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRSSL_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAND_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stand.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl.h"</cpp:file></cpp:include>







<function_decl><type><name>void</name> <modifier>*</modifier></type><name>xmalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>xfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>char</name> <modifier>*</modifier></type><name>xstrdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name> <modifier>*</modifier></type><name>xblobdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>br_x509_pkey</name> <modifier>*</modifier></type><name>xpkeydup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>xfreepkey</name><parameter_list>(<parameter><decl><type><name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>;</function_decl>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VECTOR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { type *buf; size_t ptr, len; }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_INIT</name></cpp:macro> <cpp:value>{ 0, 0, 0 }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_CLEAR</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { xfree((vec).buf); (vec).buf = NULL; (vec).ptr = 0; (vec).len = 0; } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_CLEAREXT</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>fun</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { size_t vec_tmp; for (vec_tmp = 0; vec_tmp &lt; (vec).ptr; vec_tmp ++) { (fun)(&amp;(vec).buf[vec_tmp]); } VEC_CLEAR(vec); } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_ADD</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (vec).buf = vector_expand((vec).buf, sizeof *((vec).buf), &amp;(vec).ptr, &amp;(vec).len, 1); (vec).buf[(vec).ptr ++] = (x); } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_ADDMANY</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>xp</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { size_t vec_num = (num); (vec).buf = vector_expand((vec).buf, sizeof *((vec).buf), &amp;(vec).ptr, &amp;(vec).len, vec_num); memcpy((vec).buf + (vec).ptr, (xp), vec_num * sizeof *((vec).buf)); (vec).ptr += vec_num; } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_ELT</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vec).buf[idx])</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_LEN</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vec).ptr)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_TOARRAY</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xblobdup((vec).buf, sizeof *((vec).buf) * (vec).ptr)</cpp:value></cpp:define>




<function_decl><type><name>void</name> <modifier>*</modifier></type><name>vector_expand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>esize</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>extra</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <macro><name>VECTOR</name><argument_list>(<argument>unsigned char</argument>)</argument_list></macro> <expr_stmt><expr><name>bvector</name></expr>;</expr_stmt></typedef>








<function_decl><type><name>int</name></type> <name>eqstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>size_t</name></type> <name>parse_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>
}</block></struct></type> <name>protocol_version</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>protocol_version</name></type> <name><name>protocol_versions</name><index>[]</index></name></decl>;</decl_stmt>





<function_decl><type><name>unsigned</name></type> <name>parse_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>
}</block></struct></type> <name>hash_function</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hash_function</name></type> <name><name>hash_functions</name><index>[]</index></name></decl>;</decl_stmt>







<function_decl><type><name>unsigned</name></type> <name>parse_hash_functions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_curve_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>get_curve_name_ext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>suite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>
}</block></struct></type> <name>cipher_suite</name>;</typedef>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>cipher_suite</name></type> <name><name>cipher_suites</name><index>[]</index></name></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_TLS12</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_SHA1</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_SHA256</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_SHA384</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_AESCBC</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_AESGCM</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_AESCCM</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_CHAPOL</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_3DESCBC</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RSAKEYX</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_ECDHE_RSA</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_ECDHE_ECDSA</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_ECDH</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>










<function_decl><type><name>cipher_suite</name> <modifier>*</modifier></type><name>parse_suites</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_suite_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>suite</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>get_suite_name_ext</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>suite</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>uses_ecdhe</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>suite</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>list_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>list_curves</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ec_curve_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>get_curve_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hash_function_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>read_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>write_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>looks_like_DER</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>pem_object</name>;</typedef>




<function_decl><type><name>void</name></type> <name>free_pem_object_contents</name><parameter_list>(<parameter><decl><type><name>pem_object</name> <modifier>*</modifier></type><name>po</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>pem_object</name> <modifier>*</modifier></type><name>decode_pem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>read_certificates</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>free_certificates</name><parameter_list>(<parameter><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>certs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>certificate_to_trust_anchor</name><parameter_list>(<parameter><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>xc</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <macro><name>VECTOR</name><argument_list>(<argument>br_x509_trust_anchor</argument>)</argument_list></macro> <expr_stmt><expr><name>anchor_list</name></expr>;</expr_stmt></typedef>





<function_decl><type><name>void</name></type> <name>free_ta_contents</name><parameter_list>(<parameter><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>ta</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>size_t</name></type> <name>read_trust_anchors</name><parameter_list>(<parameter><decl><type><name>anchor_list</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>get_cert_signer_algo</name><parameter_list>(<parameter><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>xc</name></decl></parameter>)</parameter_list>;</function_decl>






<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>inner</name></decl>;</decl_stmt>
}</block></struct></type> <name>x509_noanchor_context</name>;</typedef>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>br_x509_class</name></type> <name>x509_noanchor_vtable</name></decl>;</decl_stmt>




<function_decl><type><name>void</name></type> <name>x509_noanchor_init</name><parameter_list>(<parameter><decl><type><name>x509_noanchor_context</name> <modifier>*</modifier></type><name>xwc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>inner</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>key_type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>br_rsa_private_key</name></type> <name>rsa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ec_private_key</name></type> <name>ec</name></decl>;</decl_stmt>
}</block> <decl><name>key</name></decl>;</union>
}</block></struct></type> <name>private_key</name>;</typedef>





<function_decl><type><name>private_key</name> <modifier>*</modifier></type><name>read_private_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>free_private_key</name><parameter_list>(<parameter><decl><type><name>private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>get_hash_oid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>get_hash_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_error_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>comment</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_algo_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>algo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>long_name</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>int</name></type> <name>run_ssl_engine</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>eng</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_ENGINE_VERBOSE</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_ENGINE_TRACE</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>





<function_decl><type><name>int</name></type> <name>do_client</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>do_server</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>do_verify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>do_skey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>do_ta</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>do_chain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>do_twrch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>do_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
