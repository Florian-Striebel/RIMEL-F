<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/tools/server.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_SOCKET</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKADDR_STORAGE</name></cpp:macro> <cpp:value>struct sockaddr_storage</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"brssl.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>SOCKET</name></type>
<name>host_bind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>si</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>hints</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: getaddrinfo(): %s\n"</literal></expr></argument>,
<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>si</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sa4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sa6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sa_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa4</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><sizeof>sizeof <name>sa4</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sa_len</name> <operator>=</operator> <sizeof>sizeof <name>sa4</name></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><name><name>sa4</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sa4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa6</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><sizeof>sizeof <name>sa6</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sa_len</name> <operator>=</operator> <sizeof>sizeof <name>sa6</name></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><name><name>sa6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sa6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sa_len</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><name>INET6_ADDRSTRLEN</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"&lt;invalid&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown family: %d&gt;"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"binding to: %s\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"socket()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>opt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof <name>opt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_V6ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><name>opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_V6ONLY</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof <name>opt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>sa_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"bind()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: failed to bind\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"listen()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bound.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SOCKET</name></type>
<name>accept_client</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>server_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKADDR_STORAGE</name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>sa_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sa_len</name> <operator>=</operator> <sizeof>sizeof <name>sa</name></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>server_fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"accept()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><name>INET6_ADDRSTRLEN</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sa_family</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown: %lu&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator>
<operator>(</operator><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sa_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"accepting connection from: %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>nonblock</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u_long</name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage_server</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"usage: brssl server [ options ]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -q suppress verbose messages\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -trace activate extra debug messages (dump of all packets)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -b name bind to a specific address or host name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -p port bind to a specific port (default: 4433)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -mono use monodirectional buffering\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -buf length set the I/O buffer length (in bytes)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -cache length set the session cache storage length (in bytes)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -cert fname read certificate chain from file 'fname'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -key fname read private key from file 'fname'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -CA file add trust anchors from 'file' (for client auth)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -anon_ok request but do not require a client certificate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -list list supported names (protocols, algorithms...)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -vmin name set minimum supported version (default: TLS-1.0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -vmax name set maximum supported version (default: TLS-1.2)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -cs names set list of supported cipher suites (comma-separated)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -hf names add support for some hash functions (comma-separated)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -cbhash test hashing in policy callback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -serverpref enforce server's preferences for cipher suites\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -noreneg prohibit renegotiations\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -alpn name add protocol name to list of protocols (ALPN extension)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">" -strictalpn fail on ALPN mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chain_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cert_signer_algo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>private_key</name> <modifier>*</modifier></type><name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbhash</name></decl>;</decl_stmt>
}</block></struct></type> <name>policy_context</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_hashes</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>chashes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chashes</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">224</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">384</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" sha%d"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>choose_hash</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>chashes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hash_id</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>hash_id</name> <operator>=</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>hash_id</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>hash_id</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>chashes</name> <operator>&gt;&gt;</operator> <name>hash_id</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>hash_id</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sp_choose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
<parameter><decl><type><name>br_ssl_server_choices</name> <modifier>*</modifier></type><name>choices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>policy_context</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_suite_translated</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>st_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>chashes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>(</operator><name>policy_context</name> <operator>*</operator><operator>)</operator><name>pctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>br_ssl_server_get_client_suites</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chashes</name> <operator>=</operator> <call><name>br_ssl_server_get_client_hashes</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Client parameters:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" Maximum version: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>client_max_version</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_SSL30</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SSL 3.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BR_TLS10</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BR_TLS11</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BR_TLS12</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown (0x%04X)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>cc</name><operator>-&gt;</operator><name>client_max_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" Compatible cipher suites:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>st_num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>csn</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_suite_name_ext</name><argument_list>(<argument><expr><name><name>st</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><sizeof>sizeof <name>csn</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" Common sign+hash functions:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chashes</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" with RSA:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hashes</name><argument_list>(<argument><expr><name>chashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chashes</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" with ECDSA:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hashes</name><argument_list>(<argument><expr><name>chashes</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>st_num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tt</name> <operator>=</operator> <name><name>st</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>tt</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_SSLKEYX_RSA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>BR_KEYTYPE_RSA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>cipher_suite</name></name> <operator>=</operator> <name><name>st</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>choose_ok</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BR_SSLKEYX_ECDHE_RSA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>BR_KEYTYPE_RSA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>cipher_suite</name></name> <operator>=</operator> <name><name>st</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_get_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>eng</name></name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <name>BR_TLS12</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>cbhash</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>algo_id</name></name> <operator>=</operator> <literal type="number">0x0001</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>algo_id</name></name> <operator>=</operator> <literal type="number">0xFF00</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>choose_hash</name><argument_list>(<argument><expr><name>chashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>cbhash</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>algo_id</name></name> <operator>=</operator>
<operator>(</operator><name>id</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>algo_id</name></name> <operator>=</operator> <literal type="number">0xFF00</literal> <operator>+</operator> <name>id</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>choose_ok</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BR_SSLKEYX_ECDHE_ECDSA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>BR_KEYTYPE_EC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>cipher_suite</name></name> <operator>=</operator> <name><name>st</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_get_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>eng</name></name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <name>BR_TLS12</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>cbhash</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>algo_id</name></name> <operator>=</operator> <literal type="number">0x0203</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>algo_id</name></name> <operator>=</operator>
<literal type="number">0xFF00</literal> <operator>+</operator> <name>br_sha1_ID</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>choose_hash</name><argument_list>(<argument><expr><name>chashes</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>cbhash</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>algo_id</name></name> <operator>=</operator>
<operator>(</operator><name>id</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>algo_id</name></name> <operator>=</operator>
<literal type="number">0xFF00</literal> <operator>+</operator> <name>id</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>choose_ok</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BR_SSLKEYX_ECDH_RSA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>BR_KEYTYPE_EC</name>
<operator>&amp;&amp;</operator> <name><name>pc</name><operator>-&gt;</operator><name>cert_signer_algo</name></name> <operator>==</operator> <name>BR_KEYTYPE_RSA</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>cipher_suite</name></name> <operator>=</operator> <name><name>st</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>choose_ok</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BR_SSLKEYX_ECDH_ECDSA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>BR_KEYTYPE_EC</name>
<operator>&amp;&amp;</operator> <name><name>pc</name><operator>-&gt;</operator><name>cert_signer_algo</name></name> <operator>==</operator> <name>BR_KEYTYPE_EC</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>cipher_suite</name></name> <operator>=</operator> <name><name>st</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>choose_ok</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>choose_ok</name>:</label>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>chain_len</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>chain_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>csn</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_suite_name_ext</name><argument_list>(<argument><expr><name><name>choices</name><operator>-&gt;</operator><name>cipher_suite</name></name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><sizeof>sizeof <name>csn</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Using: %s\n"</literal></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>sp_do_keyx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>policy_context</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>xoff</name></decl>, <decl><type ref="prev"/><name>xlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>(</operator><name>policy_context</name> <operator>*</operator><operator>)</operator><name>pctx</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>iec</name></decl>;</decl_stmt>

<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
<return>return <expr><call><name>br_rsa_ssl_decrypt</name><argument_list>(
<argument><expr><call><name>br_rsa_private_get_default</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
<expr_stmt><expr><name>iec</name> <operator>=</operator> <call><name>br_ec_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>iec</name><operator>-&gt;</operator><name>mul</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>x</name></name></expr></argument>,
<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>xlen</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xoff</name> <operator>=</operator> <call><name><name>iec</name><operator>-&gt;</operator><name>xoff</name></name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>xoff</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>xlen</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unknown private key type (%d)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>sp_do_sign</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_server_policy_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>algo_id</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hv_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>policy_context</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hv</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>(</operator><name>policy_context</name> <operator>*</operator><operator>)</operator><name>pctx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>algo_id</name> <operator>&gt;=</operator> <literal type="number">0xFF00</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>algo_id</name> <operator>&amp;=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hv</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>hv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_hash_compat_context</name></type> <name>zc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Callback hashing, algo = 0x%04X,"</literal>
<literal type="string">" data_len = %lu\n"</literal></expr></argument>,
<argument><expr><name>algo_id</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>hv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>algo_id</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>get_hash_impl</name><argument_list>(<argument><expr><name>algo_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: unsupported hash function %u\n"</literal></expr></argument>,
<argument><expr><name>algo_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>hv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>hc</name><operator>-&gt;</operator><name>out</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>hv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hv_len</name> <operator>=</operator> <operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_OUT_OFF</name><operator>)</operator>
<operator>&amp;</operator> <name>BR_HASHDESC_OUT_MASK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<switch>switch <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>sig_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>

<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
<expr_stmt><expr><name>hash_oid</name> <operator>=</operator> <call><name>get_hash_oid</name><argument_list>(<argument><expr><name>algo_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_oid</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>algo_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot RSA-sign with"</literal>
<literal type="string">" unknown hash function: %u\n"</literal></expr></argument>,
<argument><expr><name>algo_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sig_len</name> <operator>=</operator> <operator>(</operator><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n_bitlen</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>sig_len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot RSA-sign,"</literal>
<literal type="string">" buffer is too small"</literal>
<literal type="string">" (sig=%lu, buf=%lu)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>sig_len</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><call><name>br_rsa_pkcs1_sign_get_default</name><argument_list>()</argument_list></call><argument_list>(
<argument><expr><name>hash_oid</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><name>hv_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: RSA-sign failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sig_len</name></expr>;</return>

<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>get_hash_impl</name><argument_list>(<argument><expr><name>algo_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot ECDSA-sign with"</literal>
<literal type="string">" unknown hash function: %u\n"</literal></expr></argument>,
<argument><expr><name>algo_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">139</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot ECDSA-sign"</literal>
<literal type="string">" (output buffer = %lu)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sig_len</name> <operator>=</operator> <call><call><name>br_ecdsa_sign_asn1_get_default</name><argument_list>()</argument_list></call><argument_list>(
<argument><expr><call><name>br_ec_get_default</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sig_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: ECDSA-sign failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sig_len</name></expr>;</return>

<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>br_ssl_server_policy_class</name></type> <name>policy_vtable</name> <init>= <expr><block>{
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>policy_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><name>sp_choose</name></expr>,
<expr><name>sp_do_keyx</name></expr>,
<expr><name>sp_do_sign</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>free_alpn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alpn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>alpn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>do_server</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bidi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bind_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>vmin</name></decl>, <decl><type ref="prev"/><name>vmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cipher_suite</name> <modifier>*</modifier></type><name>suites</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>num_suites</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>suite_ids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hfuns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chain_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cert_signer_algo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>private_key</name> <modifier>*</modifier></type><name>sk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>anchor_list</name></type> <name>anchors</name> <init>= <expr><name>VEC_INIT</name></expr></init></decl>;</decl_stmt>
<macro><name>VECTOR</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>alpn_names</name> <operator>=</operator> <name>VEC_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>br_x509_minimal_context</name></type> <name>xc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dnhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ssl_server_context</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>policy_context</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ssl_session_cache_lru</name></type> <name>lru</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iobuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>iobuf_len</name></decl>, <decl><type ref="prev"/><name>cache_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>server_fd</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>trace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bind_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bidi</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vmin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>suites</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_suites</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hfuns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbhash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>suite_ids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iobuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iobuf_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>server_fd</name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-verbose"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-quiet"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-trace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-b'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bind_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: duplicate bind host\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bind_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-p'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: duplicate bind port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-mono"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bidi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-buf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-buf'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iobuf_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: duplicate I/O buffer length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>iobuf_len</name> <operator>=</operator> <call><name>parse_size</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iobuf_len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-cache"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-cache'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cache_len</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: duplicate session"</literal>
<literal type="string">" cache length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cache_len</name> <operator>=</operator> <call><name>parse_size</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cache_len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-cert"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-cert'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: duplicate certificate chain\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <call><name>read_certificates</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chain_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>chain_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-key"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-key'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: duplicate private key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sk</name> <operator>=</operator> <call><name>read_private_key</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-CA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-CA'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read_trust_anchors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>anchors</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-anon_ok"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>BR_OPT_TOLERATE_NO_CLIENT_AUTH</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-list"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>list_names</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-vmin"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-vmin'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vmin</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: duplicate minimum version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vmin</name> <operator>=</operator> <call><name>parse_version</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vmin</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: unrecognised version '%s'\n"</literal></expr></argument>,
<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-vmax"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-vmax'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: duplicate maximum version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <call><name>parse_version</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: unrecognised version '%s'\n"</literal></expr></argument>,
<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-cs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-cs'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>suites</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: duplicate list"</literal>
<literal type="string">" of cipher suites\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>suites</name> <operator>=</operator> <call><name>parse_suites</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>suites</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-hf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-hf'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>parse_hash_functions</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hfuns</name> <operator>|=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-cbhash"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cbhash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-serverpref"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>BR_OPT_ENFORCE_SERVER_PREFERENCES</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-noreneg"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>BR_OPT_NO_RENEGOTIATION</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-alpn"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: no argument for '-alpn'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>VEC_ADD</name><argument_list>(<argument><expr><name>alpn_names</name></expr></argument>, <argument><expr><call><name>xstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-strictalpn"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>BR_OPT_FAIL_ON_ALPN_MISMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unknown option: '%s'\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="string">"4433"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vmin</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vmin</name> <operator>=</operator> <name>BR_TLS10</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <name>BR_TLS12</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>&lt;</operator> <name>vmin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: impossible minimum/maximum protocol"</literal>
<literal type="string">" version combination\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>suites</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_suites</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>req</name> <operator>&amp;</operator> <name>REQ_TLS12</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name>vmax</name> <operator>&gt;=</operator> <name>BR_TLS12</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>num_suites</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>suites</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>num_suites</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_suites</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>req</name> <operator>&amp;</operator> <name>REQ_TLS12</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name>vmax</name> <operator>&gt;=</operator> <name>BR_TLS12</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>suites</name><index>[<expr><name>num_suites</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hfuns</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hfuns</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>chain_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no certificate chain provided\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no private key provided\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curve</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>supp</name></decl>;</decl_stmt>

<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
<expr_stmt><expr><name>curve</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>supp</name> <operator>=</operator> <call><name>br_ec_get_default</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>supported_curves</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curve</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>supp</name> <operator>&gt;&gt;</operator> <name>curve</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: private key curve (%d)"</literal>
<literal type="string">" is not supported\n"</literal></expr></argument>, <argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unsupported private key type (%d)\n"</literal></expr></argument>,
<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>cert_signer_algo</name> <operator>=</operator> <call><name>get_cert_signer_algo</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cert_signer_algo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>csas</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cert_signer_algo</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case> <expr_stmt><expr><name>csas</name> <operator>=</operator> <literal type="string">"RSA"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case> <expr_stmt><expr><name>csas</name> <operator>=</operator> <literal type="string">"EC"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>csas</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Issuing CA key type: %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>cert_signer_algo</name></expr></argument>, <argument><expr><name>csas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iobuf_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bidi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iobuf_len</name> <operator>=</operator> <name>BR_SSL_BUFSIZE_BIDI</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>iobuf_len</name> <operator>=</operator> <name>BR_SSL_BUFSIZE_MONO</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>iobuf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>iobuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cache_len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cache_len</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>cache_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>suite_ids</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>num_suites</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>suite_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_server_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_engine_set_versions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>vmin</name></expr></argument>, <argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_engine_set_all_flags</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vmin</name> <operator>&lt;=</operator> <name>BR_TLS11</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_md5_ID</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: TLS 1.0 and 1.1 need MD5\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha1_ID</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: TLS 1.0 and 1.1 need SHA-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num_suites</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>suite_ids</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>suite</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_TLS12</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vmax</name> <operator>&lt;</operator> <name>BR_TLS12</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: cipher suite %s requires TLS 1.2\n"</literal></expr></argument>,
<argument><expr><name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_SHA1</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha1_ID</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: cipher suite %s requires SHA-1\n"</literal></expr></argument>,
<argument><expr><name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_SHA256</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha256_ID</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: cipher suite %s requires SHA-256\n"</literal></expr></argument>,
<argument><expr><name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_SHA384</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha384_ID</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ERROR: cipher suite %s requires SHA-384\n"</literal></expr></argument>,
<argument><expr><name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_AESCBC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_default_aes_cbc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_AESCCM</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_default_aes_ccm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_AESGCM</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_default_aes_gcm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_CHAPOL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_default_chapol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_3DESCBC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_default_des_cbc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <operator>(</operator><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_ECDHE_ECDSA</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_default_ec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>br_ssl_engine_set_suites</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>suite_ids</name></expr></argument>, <argument><expr><name>num_suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnhash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>hclass</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_ID_OFF</name><operator>)</operator> <operator>&amp;</operator> <name>BR_HASHDESC_ID_MASK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>id</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dnhash</name> <operator>=</operator> <name>hc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_engine_set_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>vmin</name> <operator>&lt;=</operator> <name>BR_TLS11</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_prf10</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_tls10_prf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>&gt;=</operator> <name>BR_TLS12</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha256_ID</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_prf_sha256</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_tls12_sha256_prf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha384_ID</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_prf_sha384</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>br_tls12_sha384_prf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>br_ssl_session_cache_lru_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lru</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>cache_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_server_set_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lru</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>alpn_names</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_ssl_engine_set_protocol_names</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><call><name>VEC_ELT</name><argument_list>(<argument><expr><name>alpn_names</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>alpn_names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>policy_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <name>verbose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>chain_len</name></name> <operator>=</operator> <name>chain_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>cert_signer_algo</name></name> <operator>=</operator> <name>cert_signer_algo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>sk</name></name> <operator>=</operator> <name>sk</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>cbhash</name></name> <operator>=</operator> <name>cbhash</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_server_set_policy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_x509_minimal_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xc</name></expr></argument>, <argument><expr><name>dnhash</name></expr></argument>,
<argument><expr><operator>&amp;</operator><call><name>VEC_ELT</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>hclass</name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_ID_OFF</name><operator>)</operator>
<operator>&amp;</operator> <name>BR_HASHDESC_ID_MASK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>id</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>br_x509_minimal_set_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>br_ssl_engine_set_default_rsavrfy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_engine_set_default_ecdsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_x509_minimal_set_rsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xc</name></expr></argument>, <argument><expr><call><name>br_rsa_pkcs1_vrfy_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_x509_minimal_set_ecdsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xc</name></expr></argument>,
<argument><expr><call><name>br_ec_get_default</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>br_ecdsa_vrfy_asn1_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_engine_set_x509</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_ssl_server_set_trust_anchor_names_alt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><call><name>VEC_ELT</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_set_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>iobuf</name></expr></argument>, <argument><expr><name>iobuf_len</name></expr></argument>, <argument><expr><name>bidi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name>server_fd</name> <operator>=</operator> <call><name>host_bind</name><argument_list>(<argument><expr><name>bind_name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>server_fd</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>








<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>run_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>accept_client</name><argument_list>(<argument><expr><name>server_fd</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>br_ssl_server_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>run_flags</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>verbose</name></expr> ?</condition><then> <expr><name>RUN_ENGINE_VERBOSE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>trace</name></expr> ?</condition><then> <expr><name>RUN_ENGINE_TRACE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>run_ssl_engine</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>run_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>server_exit_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<label><name>server_exit</name>:</label>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>suite_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_certificates</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>chain_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_private_key</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_CLEAREXT</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free_ta_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_CLEAREXT</name><argument_list>(<argument><expr><name>alpn_names</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free_alpn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>iobuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>server_fd</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>server_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>server_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>retcode</name></expr>;</return>

<label><name>server_exit_error</name>:</label>
<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>server_exit</name>;</goto>
</block_content>}</block></function>
</unit>
