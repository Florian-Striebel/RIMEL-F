<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/samples/server_basic.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl.h"</cpp:file></cpp:include>



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>SERVER_RSA</name> <operator>||</operator> <name>SERVER_EC</name> <operator>||</operator> <name>SERVER_MIXED</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_RSA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_EC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_MIXED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SERVER_RSA</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chain-rsa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"key-rsa.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKEY</name></cpp:macro> <cpp:value>RSA</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SERVER_EC</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chain-ec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"key-ec.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKEY</name></cpp:macro> <cpp:value>EC</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SERVER_MIXED</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chain-ec+rsa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"key-ec.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKEY</name></cpp:macro> <cpp:value>EC</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> Must use one of RSA, EC or MIXED chains.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>host_bind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>si</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>hints</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: getaddrinfo(): %s\n"</literal></expr></argument>,
<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>si</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sa4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sa6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sa_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><name>INET6_ADDRSTRLEN</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sa4</name> <operator>=</operator> <operator>*</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sa_len</name> <operator>=</operator> <sizeof>sizeof <name>sa4</name></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><name><name>sa4</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sa4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sa6</name> <operator>=</operator> <operator>*</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sa_len</name> <operator>=</operator> <sizeof>sizeof <name>sa6</name></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><name><name>sa6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sa6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sa_len</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown family: %d&gt;"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"binding to: %s\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"socket()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>opt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof <name>opt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_V6ONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><sizeof>sizeof <name>opt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>sa_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"bind()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: failed to bind\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"listen()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bound.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>accept_client</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>server_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>sa_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><name>INET6_ADDRSTRLEN</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sa_len</name> <operator>=</operator> <sizeof>sizeof <name>sa</name></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>server_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"accept()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown: %lu&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"accepting connection from: %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>sock_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>rlen</name></expr>;</return>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>sock_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>wlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>wlen</name></expr>;</return>
</block_content>}</block></for>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>HTTP_RES</name> <init>=
<expr><literal type="string">"HTTP/1.0 200 OK\r\n"</literal>
<literal type="string">"Content-Length: 46\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"Content-Type: text/html; charset=iso-8859-1\r\n"</literal>
<literal type="string">"\r\n"</literal>
<literal type="string">"&lt;html&gt;\r\n"</literal>
<literal type="string">"&lt;body&gt;\r\n"</literal>
<literal type="string">"&lt;p&gt;Test!&lt;/p&gt;\r\n"</literal>
<literal type="string">"&lt;/body&gt;\r\n"</literal>
<literal type="string">"&lt;/html&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>













<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>host_bind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ssl_server_context</name></type> <name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iobuf</name><index>[<expr><name>BR_SSL_BUFSIZE_BIDI</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslio_context</name></type> <name>ioc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lcwn</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cfd</name> <operator>=</operator> <call><name>accept_client</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></if></if_stmt>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SERVER_RSA</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SERVER_PROFILE_MIN_FS</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SERVER_CHACHA20</name></expr></cpp:if>
<expr_stmt><expr><call><name>br_ssl_server_init_mine2c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>br_ssl_server_init_mine2g</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SERVER_PROFILE_MIN_NOFS</name></expr></cpp:elif>
<expr_stmt><expr><call><name>br_ssl_server_init_minr2g</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>br_ssl_server_init_full_rsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SERVER_EC</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SERVER_PROFILE_MIN_FS</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SERVER_CHACHA20</name></expr></cpp:if>
<expr_stmt><expr><call><name>br_ssl_server_init_minf2c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>br_ssl_server_init_minf2g</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SERVER_PROFILE_MIN_NOFS</name></expr></cpp:elif>
<expr_stmt><expr><call><name>br_ssl_server_init_minv2g</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>br_ssl_server_init_full_ec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>,
<argument><expr><name>BR_KEYTYPE_EC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SERVER_PROFILE_MIN_FS</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SERVER_CHACHA20</name></expr></cpp:if>
<expr_stmt><expr><call><name>br_ssl_server_init_minf2c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>br_ssl_server_init_minf2g</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SERVER_PROFILE_MIN_NOFS</name></expr></cpp:elif>
<expr_stmt><expr><call><name>br_ssl_server_init_minu2g</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>br_ssl_server_init_full_ec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>CHAIN</name></expr></argument>, <argument><expr><name>CHAIN_LEN</name></expr></argument>,
<argument><expr><name>BR_KEYTYPE_RSA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<expr_stmt><expr><call><name>br_ssl_engine_set_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>iobuf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>iobuf</name></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>br_ssl_server_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>br_sslio_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>sock_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfd</name></expr></argument>, <argument><expr><name>sock_write</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>lcwn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>br_sslio_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>client_drop</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0x0D</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0x0A</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lcwn</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lcwn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lcwn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><name>HTTP_RES</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_RES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_sslio_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>client_drop</name>:</label>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>br_ssl_engine_last_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SSL closed (correctly).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SSL error: %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>cfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
