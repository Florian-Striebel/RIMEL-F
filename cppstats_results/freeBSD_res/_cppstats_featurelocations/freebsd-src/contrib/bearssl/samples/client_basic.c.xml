<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bearssl/samples/client_basic.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl.h"</cpp:file></cpp:include>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>host_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>si</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>hints</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: getaddrinfo(): %s\n"</literal></expr></argument>,
<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>si</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><name>INET6_ADDRSTRLEN</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown family: %d&gt;"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"connecting to: %s\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"socket()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"connect()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: failed to connect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"connected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>sock_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>rlen</name></expr>;</return>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>sock_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>wlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>wlen</name></expr>;</return>
</block_content>}</block></for>
</block_content>}</block></function>










<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>TA0_DN</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x74</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>TA0_RSA_N</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xCE</literal></expr>,
<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x63</literal></expr>,
<expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x19</literal></expr>,
<expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xDB</literal></expr>,
<expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x35</literal></expr>,
<expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xED</literal></expr>,
<expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
<expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xFB</literal></expr>,
<expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xDA</literal></expr>,
<expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x46</literal></expr>,
<expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xBC</literal></expr>,
<expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x1D</literal></expr>,
<expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
<expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x32</literal></expr>,
<expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x7F</literal></expr>,
<expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
<expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xF6</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC9</literal></expr>,
<expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xB5</literal></expr>,
<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
<expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x15</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>TA0_RSA_E</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>TA1_DN</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x74</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>TA1_EC_Q</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x57</literal></expr>,
<expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
<expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xDB</literal></expr>,
<expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xE5</literal></expr>,
<expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x8D</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>br_x509_trust_anchor</name></type> <name><name>TAs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>TA0_DN</name></expr>, <expr><sizeof>sizeof <name>TA0_DN</name></sizeof></expr> }</block></expr>,
<expr><name>BR_X509_TA_CA</name></expr>,
<expr><block>{
<expr><name>BR_KEYTYPE_RSA</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>rsa</name> <operator>=</operator> <block>{
<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>TA0_RSA_N</name></expr>, <expr><sizeof>sizeof <name>TA0_RSA_N</name></sizeof></expr>,
<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>TA0_RSA_E</name></expr>, <expr><sizeof>sizeof <name>TA0_RSA_E</name></sizeof></expr>,
}</block></expr> }</block></expr>
}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>TA1_DN</name></expr>, <expr><sizeof>sizeof <name>TA1_DN</name></sizeof></expr> }</block></expr>,
<expr><name>BR_X509_TA_CA</name></expr>,
<expr><block>{
<expr><name>BR_KEYTYPE_EC</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>ec</name> <operator>=</operator> <block>{
<expr><name>BR_EC_secp256r1</name></expr>,
<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>TA1_EC_Q</name></expr>, <expr><sizeof>sizeof <name>TA1_EC_Q</name></sizeof></expr>,
}</block></expr> }</block></expr>
}</block></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAs_NUM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>










<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_ssl_client_context</name></type> <name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_x509_minimal_context</name></type> <name>xc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iobuf</name><index>[<expr><name>BR_SSL_BUFSIZE_BIDI</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>br_sslio_context</name></type> <name>ioc</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>argc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>argc</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>host</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>host_connect</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><call><name>br_ssl_client_init_full</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xc</name></expr></argument>, <argument><expr><name>TAs</name></expr></argument>, <argument><expr><name>TAs_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>br_ssl_engine_set_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>iobuf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>iobuf</name></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>br_ssl_client_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>br_sslio_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>sock_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>, <argument><expr><name>sock_write</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><literal type="string">"GET "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><literal type="string">" HTTP/1.0\r\nHost: "</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><literal type="string">"\r\n\r\n"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>br_sslio_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>br_sslio_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rlen</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>br_ssl_engine_last_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"closed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SSL error %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"socket closed without proper SSL termination\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
