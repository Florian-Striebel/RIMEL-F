<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/blacklist/bin/support.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: support.c,v 1.9 2018/09/18 22:12:19 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"support.h"</cpp:file></cpp:include>

<expr_stmt><expr><specifier>static</specifier> <macro><name>__attribute__</name><argument_list>(<argument>(__format_arg__(<literal type="number">3</literal>))</argument>)</argument_list></macro> <specifier>const</specifier> <name>char</name> <operator>*</operator>
<macro><name>expandm</name><argument_list>(<argument>char *buf</argument>, <argument>size_t len</argument>, <argument>const char *fmt</argument>)</argument_list></macro>
<block>{
<expr><name>char</name> <operator>*</operator><name>p</name></expr>;
<expr><name>size_t</name> <name>r</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"%m"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>fmt</name></expr>;</return></block_content></block></if></if_stmt>

<name>r</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>fmt</name><operator>)</operator></block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>fmt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fmt</name> <operator>+</operator> <name>r</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>
}

void
<macro><name>vdlog</name><argument_list>(<argument>int level __unused</argument>, <argument>const char *fmt</argument>, <argument>va_list ap</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>expandm</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type>
<name>dlog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vdlog</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fmttime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"*%jd*"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"%Y/%m/%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fmtydhms</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>t</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>t</name> <operator>%</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>t</name> <operator>%</operator> <literal type="number">365</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">365</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (a) { z = snprintf(b + o, l - o, "%jd%s", (intmax_t)a, __STRING(a)); if (z == -1) return b; o += (size_t)z; if (o &gt;= l) return b; }</cpp:value></cpp:define>








<macro><name>APPEND</name><argument_list>(<argument>y</argument>)</argument_list></macro>
<macro><name>APPEND</name><argument_list>(<argument>d</argument>)</argument_list></macro>
<macro><name>APPEND</name><argument_list>(<argument>h</argument>)</argument_list></macro>
<macro><name>APPEND</name><argument_list>(<argument>m</argument>)</argument_list></macro>
<macro><name>APPEND</name><argument_list>(<argument>s</argument>)</argument_list></macro>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>blhexdump</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>cz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>p</name> <operator>+</operator> <name>l</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cz</name> <operator>=</operator> <name>z</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>r</name><operator>)</operator> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cz</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>cz</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>cz</name></expr></argument>, <argument><expr><literal type="string">"%.2x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cz</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>r</name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cz</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>z</name></expr>;</return>
</block_content>}</block></function>
</unit>
