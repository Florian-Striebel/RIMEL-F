<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/blacklist/bin/conf.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_CONF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CONF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<struct>struct <name>conf</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>c_ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_lmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_nfail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c_name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_rmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_duration</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>confset</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type><name>cs_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cs_n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cs_m</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFNAMESZ</name></cpp:macro> <cpp:value>sizeof(((struct conf *)0)-&gt;c_name)</cpp:value></cpp:define>

<function_decl><type><name>__BEGIN_DECLS</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conf_print</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>conf_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type><name>conf_find</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uid_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<expr><name>__END_DECLS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
