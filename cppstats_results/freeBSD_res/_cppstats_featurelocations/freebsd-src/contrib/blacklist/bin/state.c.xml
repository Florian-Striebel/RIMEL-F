<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/blacklist/bin/state.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: state.c,v 1.19 2016/09/26 19:43:43 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"support.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"state.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>HASHINFO</name></type> <name>openinfo</name> <init>= <expr><block>{
<expr><literal type="number">4096</literal></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><literal type="number">256</literal></expr>,
<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>state_close</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>db</name><operator>-&gt;</operator><name>close</name></name>)<argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: can't close db (%m)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>DB</name> <modifier>*</modifier></type>
<name>state_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>perm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DB</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <name>O_CREAT</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_EXLOCK</name><operator>|</operator><name>O_NONBLOCK</name><operator>|</operator><name>O_RDONLY</name><operator>|</operator>
<name>O_RDWR</name><operator>|</operator><name>O_SHLOCK</name><operator>|</operator><name>O_TRUNC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>DB_HASH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>openinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_CREAT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: can't open `%s' (%m)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>db</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>state_sizecheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DBT</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>conf</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Key size mismatch %zu != %zu"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dumpkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">10240</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>blhexdump</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>conf_print</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>state_del</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>__UNCONST</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>rv</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>db</name><operator>-&gt;</operator><name>del</name></name>)<argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: returns %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>db</name><operator>-&gt;</operator><name>sync</name></name>)<argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: failed (%m)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>state_get</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dbinfo</name></name> <modifier>*</modifier></type><name>dbi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>__UNCONST</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>rv</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>db</name><operator>-&gt;</operator><name>get</name></name>)<argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dbi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dbi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dbi</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dbi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: returns %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: failed (%m)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>state_put</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dbinfo</name></name> <modifier>*</modifier></type><name>dbi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>__UNCONST</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>__UNCONST</name><argument_list>(<argument><expr><name>dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dbi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>rv</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>db</name><operator>-&gt;</operator><name>put</name></name>)<argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: returns %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>db</name><operator>-&gt;</operator><name>sync</name></name>)<argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EEXIST</name></expr>;</expr_stmt>

<default>default:</default>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: failed (%m)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>state_iterate</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dbinfo</name></name> <modifier>*</modifier></type><name>dbi</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: called with no database file"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><name>R_FIRST</name></expr> </then><else>: <expr><name>R_NEXT</name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>rv</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>db</name><operator>-&gt;</operator><name>seq</name></name>)<argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>state_sizecheck</name><argument_list>(<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dumpkey</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dbi</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dbi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: returns %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: returns %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: failed (%m)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>state_sync</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call>(<modifier>*</modifier><name><name>db</name><operator>-&gt;</operator><name>sync</name></name>)<argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
