<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/blacklist/bin/blacklistd.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: blacklistd.c,v 1.38 2019/02/27 02:20:18 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ifaddrs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"support.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>configfile</name> <init>= <expr><name>_PATH_BLCONF</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>DB</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbfile</name> <init>= <expr><name>_PATH_BLSTATE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sig_atomic_t</name></type> <name>readconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sig_atomic_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>vflag</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sigusr1</name><parameter_list>(<parameter><decl><type><name>int</name> <name>n</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>debug</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sigusr2</name><parameter_list>(<parameter><decl><type><name>int</name> <name>n</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>debug</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sighup</name><parameter_list>(<parameter><decl><type><name>int</name> <name>n</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>readconf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sigdone</name><parameter_list>(<parameter><decl><type><name>int</name> <name>n</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>done</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__dead</name> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"Unknown option `%c'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s [-vdfr] [-c &lt;config&gt;] [-R &lt;rulename&gt;] "</literal>
<literal type="string">"[-P &lt;sockpathsfile&gt;] [-C &lt;controlprog&gt;] [-D &lt;dbfile&gt;] "</literal>
<literal type="string">"[-s &lt;sockpath&gt;] [-t &lt;timeout&gt;]\n"</literal></expr></argument>, <argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getremoteaddress</name><parameter_list>(<parameter><decl><type><name>bl_info_t</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>rss</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>rsl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rsl</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rss</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>*</operator><name>rsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>rss</name></expr></argument>, <argument><expr><name>rsl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOTCONN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"getpeername failed (%m)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bi</name><operator>-&gt;</operator><name>bi_slen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"unconnected socket with no peer in message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>bi</name><operator>-&gt;</operator><name>bi_ss</name><operator>.</operator><name>ss_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>rsl</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>rsl</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"bad client passed socket family %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>bi</name><operator>-&gt;</operator><name>bi_ss</name><operator>.</operator><name>ss_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rsl</name> <operator>!=</operator> <name><name>bi</name><operator>-&gt;</operator><name>bi_slen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"bad client passed socket length %u != %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>rsl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>bi</name><operator>-&gt;</operator><name>bi_slen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bi</name><operator>-&gt;</operator><name>bi_ss</name></name></expr></argument>, <argument><expr><operator>*</operator><name>rsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_SOCKADDR_SA_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rsl</name> <operator>!=</operator> <name><name>rss</name><operator>-&gt;</operator><name>ss_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>,
<argument><expr><literal type="string">"bad client passed socket internal length %u != %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>rsl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>rss</name><operator>-&gt;</operator><name>ss_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type> <name>bl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>rss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>rsl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>rbuf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bl_info_t</name> <modifier>*</modifier></type><name>bi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>conf</name></name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbinfo</name></name></type> <name>dbi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"clock_gettime failed (%m)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bi</name> <operator>=</operator> <call><name>bl_recv</name><argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"no message (%m)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getremoteaddress</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsl</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sockaddr_snprintf</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%a:%p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"processing type=%d fd=%d remote=%s msg=%s"</literal>
<literal type="string">" uid=%lu gid=%lu"</literal></expr></argument>, <argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_type</name></name></expr></argument>, <argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fd</name></name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>,
<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_msg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>bi</name><operator>-&gt;</operator><name>bi_uid</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>bi</name><operator>-&gt;</operator><name>bi_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>conf_find</name><argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fd</name></name></expr></argument>, <argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"no rule matched"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>state_get</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>b1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b2</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: initial db state for %s: count=%d/%d "</literal>
<literal type="string">"last=%s now=%s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>c_nfail</name></name></expr></argument>,
<argument><expr><call><name>fmttime</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fmttime</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>bi</name><operator>-&gt;</operator><name>bi_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BL_ABUSE</name></expr>:</case>







<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>c_nfail</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dbi</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>c_nfail</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><name>BL_ADD</name></expr>:</case>
<expr_stmt><expr><name><name>dbi</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbi</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbi</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"rule exists %s"</literal></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>run_change</name><argument_list>(<argument><expr><literal type="string">"rem"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbi</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>c_nfail</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>dbi</name><operator>.</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>.</operator><name>c_nfail</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>run_change</name><argument_list>(<argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dbi</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sockaddr_snprintf</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%a"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"blocked %s/%d:%d for %d seconds"</literal></expr></argument>,
<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>c_lmask</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>c_port</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>c_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BL_DELETE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dbi</name><operator>.</operator><name>last</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dbi</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbi</name><operator>.</operator><name>last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BL_BADUSER</name></expr>:</case>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"unknown message %d"</literal></expr></argument>, <argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>state_put</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>b1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b2</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: final db state for %s: count=%d/%d "</literal>
<literal type="string">"last=%s now=%s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>c_nfail</name></name></expr></argument>,
<argument><expr><call><name>fmttime</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fmttime</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_interfaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>oifas</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nifas</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nifas</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oifas</name> <operator>=</operator> <name>ifas</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifas</name> <operator>=</operator> <name>nifas</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oifas</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>oifas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>conf</name></name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbinfo</name></name></type> <name>dbi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>.</operator><name>c_ss</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"clock_gettime failed (%m)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<label><name>again</name>:</label>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><call><name>state_iterate</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</condition>
<incr><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>when</name> <init>= <expr><name><name>c</name><operator>.</operator><name>c_duration</name></name> <operator>+</operator> <name><name>dbi</name><operator>.</operator><name>last</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>b1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sockaddr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%a:%p"</literal></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s:[%u] %s count=%d duration=%d "</literal>
<literal type="string">"last=%s "</literal> <literal type="string">"now=%s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>count</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>.</operator><name>c_duration</name></name></expr></argument>, <argument><expr><call><name>fmttime</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fmttime</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>c_duration</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>when</name> <operator>&gt;=</operator> <name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbi</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>run_change</name><argument_list>(<argument><expr><literal type="string">"rem"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sockaddr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%a"</literal></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"released %s/%d:%d after %d seconds"</literal></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>c_lmask</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>c_port</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>c_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>state_del</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>addfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pfdp</name></decl></parameter>, <parameter><decl><type><name>bl_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>blp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nfd</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>maxfd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bl_t</name></type> <name>bl</name> <init>= <expr><call><name>bl_create</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><ternary><condition><expr><name>vflag</name></expr> ?</condition><then> <expr><name>vdlog</name></expr> </then><else>: <expr><name>vsyslog</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>bl_isconnected</name><argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nfd</name> <operator>&gt;=</operator> <operator>*</operator><name>maxfd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>maxfd</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>blp</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>blp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>blp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>blp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pfdp</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>pfdp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pfdp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pfdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pfdp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nfd</name></expr>]</index><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>bl_getfd</name><argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pfdp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nfd</name></expr>]</index><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>blp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nfd</name></expr>]</index> <operator>=</operator> <name>bl</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nfd</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>uniqueadd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conf</name></name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>listp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mlist</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>conf</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>conf</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><operator>*</operator><name>listp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>c_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>nlist</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>c_name</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>c_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nlist</name> <operator>==</operator> <operator>*</operator><name>mlist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mlist</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>listp</name></expr></argument>, <argument><expr><operator>*</operator><name>mlist</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate for rule list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>*</operator><name>listp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><operator>(</operator><operator>*</operator><name>nlist</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rules_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>conf</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlist</name></decl>, <decl><type ref="prev"/><name>mlist</name></decl>;</decl_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mlist</name> <operator>=</operator> <name>nlist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rconf</name><operator>.</operator><name>cs_n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>uniqueadd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rconf</name><operator>.</operator><name>cs_c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lconf</name><operator>.</operator><name>cs_n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>uniqueadd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lconf</name><operator>.</operator><name>cs_c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlist</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>run_flush</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rules_restore</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>conf</name></name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbinfo</name></name></type> <name>dbi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>f</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><call><name>state_iterate</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dbi</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>run_change</name><argument_list>(<argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dbi</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>tout</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>flush</name></decl>, <decl><type ref="prev"/><name>restore</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spath</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>blsock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nblsock</name></decl>, <decl><type ref="prev"/><name>maxblsock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setprogname</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blsock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxblsock</name> <operator>=</operator> <name>nblsock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>restore</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_RDWR</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_CLOEXEC</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"C:c:D:dfP:rR:s:t:v"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name>controlprog</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>configfile</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>dbfile</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>debug</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>flush</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><name>spath</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><name>rulename</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>restore</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nblsock</name> <operator>&gt;=</operator> <name>maxblsock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>maxblsock</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>blsock</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>blsock</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxblsock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>,
<argument><expr><literal type="string">"Can't allocate memory for %zu sockets"</literal></expr></argument>,
<argument><expr><name>maxblsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>blsock</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>blsock</name><index>[<expr><name>nblsock</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>tout</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>vflag</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>sighup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>sigdone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>sigdone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>sigdone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>sigusr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>sigusr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>openlog</name><argument_list>(<argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>LOG_PID</name></expr></argument>, <argument><expr><name>LOG_DAEMON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lfun</name> <operator>=</operator> <name>dlog</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tout</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tout</name> <operator>=</operator> <literal type="number">15000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>update_interfaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conf_parse</name><argument_list>(<argument><expr><name>configfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rules_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>restore</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_TRUNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pfd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bl_t</name> <modifier>*</modifier></type><name>bl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nfd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>maxfd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblsock</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxfd</name></expr></argument>, <argument><expr><name><name>blsock</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>blsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spath</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>spath</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Can't open `%s'"</literal></expr></argument>, <argument><expr><name>spath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>fparseln</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxfd</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nfd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxfd</name></expr></argument>, <argument><expr><name>_PATH_BLSOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>state_open</name><argument_list>(<argument><expr><name>dbfile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>state_open</name><argument_list>(<argument><expr><name>dbfile</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>restore</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flush</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rules_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rules_restore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>daemon</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"daemon failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pidfile</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Can't create pidfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><name>done</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>readconf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>readconf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conf_parse</name><argument_list>(<argument><expr><name>configfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><operator>(</operator><name>nfds_t</name><operator>)</operator><name>nfd</name></expr></argument>, <argument><expr><name>tout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"received %d from poll()"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>lfun</name>)<argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"poll (%m)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>state_sync</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><name><name>bl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>%</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state_sync</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_interfaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>state_close</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
