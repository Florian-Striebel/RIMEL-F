<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/blacklist/lib/bl.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: bl.c,v 1.28 2016/07/29 17:13:09 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_REENTRANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bl.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bl_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bl_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bl_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bl_salen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>bl_ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>bl_data</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>bl_message_t</name>;</typedef>

<struct>struct <name>blacklist</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_REENTRANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>b_mutex</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL_INIT</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_init(&amp;b-&gt;b_mutex, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL_LOCK</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_lock(&amp;b-&gt;b_mutex)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL_UNLOCK</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_mutex_unlock(&amp;b-&gt;b_mutex)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL_INIT</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL_LOCK</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BL_INIT(b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL_UNLOCK</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BL_INIT(b)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>b_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_connected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>b_sun</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>b_fun</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bl_info_t</name></type> <name>b_info</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><name>bool</name></type>
<name>bl_isconnected</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>b_connected</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bl_getfd</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bl_reset</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>locked</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>serrno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BL_LOCK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>serrno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>b_connected</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BL_UNLOCK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bl_log</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fun</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serrno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>fun</name>)<argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>serrno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bl_init</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>srv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mode_t</name></type> <name>om</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>serrno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sun</name> <init>= <expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>b_sun</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOCK_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_NONBLOCK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOCK_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_CLOEXEC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOCK_NOSIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_NOSIGPIPE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BL_LOCK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_LOCAL</name></expr></argument>,
<argument><expr><name>SOCK_DGRAM</name><operator>|</operator><name>SOCK_CLOEXEC</name><operator>|</operator><name>SOCK_NONBLOCK</name><operator>|</operator><name>SOCK_NOSIGPIPE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: socket failed (%s)"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BL_UNLOCK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SOCK_CLOEXEC</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SOCK_NONBLOCK</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SOCK_NOSIGPIPE</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_NOSIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_NOSIGPIPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bl_isconnected</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BL_UNLOCK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>sun</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sun</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>srv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>,
<argument><expr><literal type="string">"%s: another daemon is handling `%s'"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>srv</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>b_connected</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"%s: connect failed for `%s' (%s)"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>b_connected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>BL_UNLOCK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Connected to blacklist server"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>srv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>unlink</name><argument_list>(<argument><expr><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>om</name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>sun</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sun</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>serrno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>umask</name><argument_list>(<argument><expr><name>om</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>serrno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>,
<argument><expr><literal type="string">"%s: bind failed for `%s' (%s)"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>b_connected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOT_FD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOCAL_CREDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_LEVEL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_NAME</name></cpp:macro> <cpp:value>LOCAL_CREDS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_SC_UID</name></cpp:macro> <cpp:value>sc_euid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_SC_GID</name></cpp:macro> <cpp:value>sc_egid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_MESSAGE</name></cpp:macro> <cpp:value>SCM_CREDS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_SIZE</name></cpp:macro> <cpp:value>SOCKCREDSIZE(NGROUPS_MAX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_TYPE</name></cpp:macro> <cpp:value>struct sockcred</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOT_CRED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_PASSCRED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_LEVEL</name></cpp:macro> <cpp:value>SOL_SOCKET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_NAME</name></cpp:macro> <cpp:value>SO_PASSCRED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_SC_UID</name></cpp:macro> <cpp:value>uid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_SC_GID</name></cpp:macro> <cpp:value>gid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_MESSAGE</name></cpp:macro> <cpp:value>SCM_CREDENTIALS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_SIZE</name></cpp:macro> <cpp:value>sizeof(struct ucred)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_TYPE</name></cpp:macro> <cpp:value>struct ucred</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOT_CRED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOT_CRED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_TYPE</name></cpp:macro> <cpp:value>void * __unused</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRED_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr></argument>, <argument><expr><name>CRED_LEVEL</name></expr></argument>, <argument><expr><name>CRED_NAME</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: setsockopt %s "</literal>
<literal type="string">"failed (%s)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>__STRING</name><argument_list>(<argument><expr><name>CRED_NAME</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BL_UNLOCK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>bl_reset</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BL_UNLOCK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bl_t</name></type>
<name>bl_create</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>srv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fun</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bl_t</name></type> <name>b</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name> <operator>=</operator> <ternary><condition><expr><name>fun</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>vsyslog</name></expr> </then><else>: <expr><name>fun</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>b_connected</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BL_INIT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>b_sun</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_sun</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>b_sun</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_SOCKADDR_SA_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>b_sun</name><operator>.</operator><name>sun_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_sun</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_sun</name><operator>.</operator><name>sun_path</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>path</name></expr> ?</condition><then> <expr><name>path</name></expr> </then><else>: <expr><name>_PATH_BLSOCK</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_sun</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bl_init</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name>fun</name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: malloc failed (%s)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bl_destroy</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bl_reset</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bl_getsock</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>,
<parameter><decl><type><name>socklen_t</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>family</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ss</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>slen</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: invalid socket len %u (%s)"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>slen</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>!=</operator> <name>family</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"%s: correcting socket family %d to %d (%s)"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_SOCKADDR_SA_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>ss_len</name></name> <operator>!=</operator> <name>slen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"%s: correcting socket len %u to %u (%s)"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ss_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>slen</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>ss_len</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>slen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bl_send</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bl_type_t</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>,
<parameter><decl><type><name>socklen_t</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>ctrl</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fd</name></decl>;</decl_stmt>
}</block> <decl><name>ua</name></decl>;</union>
<decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmsg</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>bl_message_t</name></type> <name>bl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>ub</name></decl>;</union>
<decl_stmt><decl><type><name>size_t</name></type> <name>ctxlen</name></decl>, <decl><type ref="prev"/><name>tried</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTRIES</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<expr_stmt><expr><name>ctxlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctxlen</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ctxlen</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name><name>ub</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bl_message_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>ctxlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_len</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>iov</name><operator>.</operator><name>iov_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_version</name></name> <operator>=</operator> <name>BL_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_type</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>e</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bl_getsock</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_ss</name></name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_salen</name></name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_data</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ctxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name>iov</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name><name>ua</name><operator>.</operator><name>ctrl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ua</name><operator>.</operator><name>ctrl</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>=</operator> <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>=</operator> <name>SOL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>=</operator> <name>SCM_RIGHTS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tried</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>bl_init</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>sendmsg</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>tried</name><operator>++</operator> <operator>&lt;</operator> <name>NTRIES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_reset</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>tried</name> <operator>&gt;=</operator> <name>NTRIES</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>bl_info_t</name> <modifier>*</modifier></type>
<name>bl_recv</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>ctrl</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>CMSG_SPACE</name><argument_list>(<argument><expr><name>CRED_SIZE</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CRED_TYPE</name></type> <name>sc</name></decl>;</decl_stmt>
}</block> <decl><name>ua</name></decl>;</union>
<decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CRED_TYPE</name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>bl_message_t</name></type> <name>bl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>ub</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>got</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bl_info_t</name> <modifier>*</modifier></type><name>bi</name> <init>= <expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>b_info</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>got</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name><name>ub</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ub</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name>iov</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name><name>ua</name><operator>.</operator><name>ctrl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ua</name><operator>.</operator><name>ctrl</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>recvmsg</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s: recvmsg failed (%s)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmsg</name></expr>;</condition> <incr><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>!=</operator> <name>SOL_SOCKET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>,
<argument><expr><literal type="string">"%s: unexpected cmsg_level %d"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SCM_RIGHTS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>!=</operator> <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>,
<argument><expr><literal type="string">"%s: unexpected cmsg_len %d != %zu"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_len</name></name></expr></argument>,
<argument><expr><call><name>CMSG_LEN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bi</name><operator>-&gt;</operator><name>bi_fd</name></name></expr></argument>, <argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got</name> <operator>|=</operator> <name>GOT_FD</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRED_MESSAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CRED_MESSAGE</name></expr>:</case>
<expr_stmt><expr><name>sc</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_uid</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>CRED_SC_UID</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_gid</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>CRED_SC_GID</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>got</name> <operator>|=</operator> <name>GOT_CRED</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>,
<argument><expr><literal type="string">"%s: unexpected cmsg_type %d"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>got</name> <operator>!=</operator> <operator>(</operator><name>GOT_CRED</name><operator>|</operator><name>GOT_FD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"message missing %s %s"</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><name>GOT_CRED</name> <operator>!=</operator> <literal type="number">0</literal></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><operator>(</operator><name>got</name> <operator>&amp;</operator> <name>GOT_CRED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"cred"</literal></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>got</name> <operator>&amp;</operator> <name>GOT_FD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"fd"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>rlen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ub</name><operator>.</operator><name>bl</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"message too short %zd"</literal></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_version</name></name> <operator>!=</operator> <name>BL_VERSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bl_log</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>b_fun</name></name></expr></argument>, <argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"bad version %d"</literal></expr></argument>, <argument><expr><name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_type</name></name> <operator>=</operator> <name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_slen</name></name> <operator>=</operator> <name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_salen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_ss</name></name> <operator>=</operator> <name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_ss</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CRED_MESSAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_uid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_gid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_msg</name></name></expr></argument>, <argument><expr><name><name>ub</name><operator>.</operator><name>bl</name><operator>.</operator><name>bl_data</name></name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_msg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>rlen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ub</name><operator>.</operator><name>bl</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bi</name></expr>;</return>
</block_content>}</block></function>
</unit>
