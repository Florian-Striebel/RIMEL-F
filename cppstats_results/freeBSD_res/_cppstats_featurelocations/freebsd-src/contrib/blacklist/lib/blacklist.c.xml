<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/blacklist/lib/blacklist.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: blacklist.c,v 1.5 2015/01/22 16:19:53 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>blacklist_sa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>salen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>blacklist</name></name> <modifier>*</modifier></type><name>bl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bl</name> <operator>=</operator> <call><name>blacklist_open</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>blacklist_sa_r</name><argument_list>(<argument><expr><name>bl</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>rfd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>blacklist_close</name><argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>blacklist_sa_r</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blacklist</name></name> <modifier>*</modifier></type><name>bl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rfd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>internal_action</name></decl>;</decl_stmt>


<switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BLACKLIST_AUTH_FAIL</name></expr>:</case>
<expr_stmt><expr><name>internal_action</name> <operator>=</operator> <name>BL_ADD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BLACKLIST_AUTH_OK</name></expr>:</case>
<expr_stmt><expr><name>internal_action</name> <operator>=</operator> <name>BL_DELETE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BLACKLIST_ABUSIVE_BEHAVIOR</name></expr>:</case>
<expr_stmt><expr><name>internal_action</name> <operator>=</operator> <name>BL_ABUSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BLACKLIST_BAD_USER</name></expr>:</case>
<expr_stmt><expr><name>internal_action</name> <operator>=</operator> <name>BL_BADUSER</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>internal_action</name> <operator>=</operator> <name>BL_INVALID</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>bl_send</name><argument_list>(<argument><expr><name>bl</name></expr></argument>, <argument><expr><name>internal_action</name></expr></argument>, <argument><expr><name>rfd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>blacklist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>blacklist_sa</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><name>rfd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>blacklist_r</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blacklist</name></name> <modifier>*</modifier></type><name>bl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>blacklist_sa_r</name><argument_list>(<argument><expr><name>bl</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>rfd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>blacklist</name></name> <modifier>*</modifier></type>
<name>blacklist_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>bl_create</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vsyslog</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>blacklist_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blacklist</name></name> <modifier>*</modifier></type><name>bl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bl_destroy</name><argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
