<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/blacklist/port/sockaddr_snprintf.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: sockaddr_snprintf.c,v 1.11 2016/06/01 22:57:51 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_NETATALK_AT_H</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETATALK_AT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netatalk/at.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_DL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_dl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_SOCKADDR_SA_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLEN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a)-&gt;a ##_len</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>socklen_t</name></type>
<name>socklen</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>af</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>af</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<case>case <expr><name>AF_LOCAL</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_DL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_LINK</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETATALK_AT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_APPLETALK</name></expr>:</case>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_at</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLEN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>socklen((a)-&gt;a ##_family)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETATALK_AT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>debug_at</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_at</name></name> <modifier>*</modifier></type><name>sat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"sat_len=%u, sat_family=%u, sat_port=%u, "</literal>
<literal type="string">"sat_addr.s_net=%u, sat_addr.s_node=%u, "</literal>
<literal type="string">"sat_range.r_netrange.nr_phase=%u, "</literal>
<literal type="string">"sat_range.r_netrange.nr_firstnet=%u, "</literal>
<literal type="string">"sat_range.r_netrange.nr_lastnet=%u"</literal></expr></argument>,
<argument><expr><call><name>SLEN</name><argument_list>(<argument><expr><name>sat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_family</name></name></expr></argument>, <argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_port</name></name></expr></argument>,
<argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_addr</name><operator>.</operator><name>s_net</name></name></expr></argument>, <argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_addr</name><operator>.</operator><name>s_node</name></name></expr></argument>,
<argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_range</name><operator>.</operator><name>r_netrange</name><operator>.</operator><name>nr_phase</name></name></expr></argument>,
<argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_range</name><operator>.</operator><name>r_netrange</name><operator>.</operator><name>nr_firstnet</name></name></expr></argument>,
<argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_range</name><operator>.</operator><name>r_netrange</name><operator>.</operator><name>nr_lastnet</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>debug_in</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"sin_len=%u, sin_family=%u, sin_port=%u, "</literal>
<literal type="string">"sin_addr.s_addr=%08x"</literal></expr></argument>,
<argument><expr><call><name>SLEN</name><argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_family</name></name></expr></argument>, <argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>,
<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>debug_in6</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin6</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"sin6_len=%u, sin6_family=%u, sin6_port=%u, "</literal>
<literal type="string">"sin6_flowinfo=%u, "</literal>
<literal type="string">"sin6_addr=%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:"</literal>
<literal type="string">"%02x:%02x:%02x:%02x:%02x:%02x, sin6_scope_id=%u"</literal></expr></argument>,
<argument><expr><call><name>SLEN</name><argument_list>(<argument><expr><name>sin6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_family</name></name></expr></argument>, <argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>,
<argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_flowinfo</name></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><index>[<expr><literal type="number">0x6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0xa</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0xb</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0xc</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0xd</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><index>[<expr><literal type="number">0xe</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0xf</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>debug_un</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"sun_len=%u, sun_family=%u, sun_path=%*s"</literal></expr></argument>,
<argument><expr><call><name>SLEN</name><argument_list>(<argument><expr><name>sun</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sun</name><operator>-&gt;</operator><name>sun_family</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_DL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>debug_dl</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>sdl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>sdl</name><operator>-&gt;</operator><name>sdl_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"sdl_len=%u, sdl_family=%u, sdl_index=%u, "</literal>
<literal type="string">"sdl_type=%u, sdl_nlen=%u, sdl_alen=%u, sdl_slen=%u, sdl_data="</literal>
<literal type="string">"%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x"</literal></expr></argument>,
<argument><expr><call><name>SLEN</name><argument_list>(<argument><expr><name>sdl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_family</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_index</name></name></expr></argument>,
<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_type</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_nlen</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_slen</name></name></expr></argument>,
<argument><expr><name><name>s</name><index>[<expr><literal type="number">0x0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><index>[<expr><literal type="number">0x6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0x9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0xa</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">0xb</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>sockaddr_snprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>sbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>sa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>abuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>Abuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name> <init>= <expr><operator>&amp;</operator><name><name>sbuf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>sbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETATALK_AT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_at</name></name> <modifier>*</modifier></type><name>sat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin4</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sin6</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sun</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_DL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>na</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDC</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (buf &lt; ebuf) *buf++ = c; else buf++; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for (s = p; *s; s++) ADDC(*s); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDNA</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (na) ADDS("N/A"); } while (0)</cpp:value></cpp:define>


<switch>switch <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_UNSPEC</name></expr>:</case>
<goto>goto <name>done</name>;</goto>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETATALK_AT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_APPLETALK</name></expr>:</case>
<expr_stmt><expr><name>sat</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_at</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>addr</name> <operator>=</operator> <name>abuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>abuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u.%u"</literal></expr></argument>,
<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_addr</name><operator>.</operator><name>s_net</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_addr</name><operator>.</operator><name>s_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>port</name> <operator>=</operator> <name>pbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>AF_LOCAL</name></expr>:</case>
<expr_stmt><expr><name>sun</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_un</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strlcpy</name><argument_list>(<argument><expr><name>addr</name> <operator>=</operator> <name>abuf</name></expr></argument>, <argument><expr><name><name>sun</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>abuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>sin4</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin4</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>sin4</name><operator>-&gt;</operator><name>sin_addr</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>sin6</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>sin6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_DL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_LINK</name></expr>:</case>
<expr_stmt><expr><name>sdl</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_dl</name> <operator>*</operator><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strlcpy</name><argument_list>(<argument><expr><name>addr</name> <operator>=</operator> <name>abuf</name></expr></argument>, <argument><expr><call><name>link_ntoa</name><argument_list>(<argument><expr><name>sdl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>abuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>w</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>abuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><call><name>SLEN</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name> <operator>=</operator> <name>abuf</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>abuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NI_NUMERICHOST</name><operator>|</operator><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>fmt</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADDC</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<label><name>next_char</name>:</label>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<expr_stmt><expr><name>na</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>next_char</name>;</goto>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADDNA</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>SLEN</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADDNA</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>getnameinfo</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><call><name>SLEN</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name> <operator>=</operator> <name>Abuf</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>p</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADDNA</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>getnameinfo</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><call><name>SLEN</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>port</name> <operator>=</operator> <name>pbuf</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_DL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>sdl</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>abuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>abuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>ADDNA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>sin6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,
<argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_flowinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ADDNA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>sin6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,
<argument><expr><name><name>sin6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ADDNA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETATALK_AT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>sat</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>netrange</name></name> <modifier>*</modifier></type><name>n</name> <init>=
<expr><operator>&amp;</operator><name><name>sat</name><operator>-&gt;</operator><name>sat_range</name><operator>.</operator><name>r_netrange</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%d:[%d,%d]"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>nr_phase</name></name></expr></argument> , <argument><expr><name><name>n</name><operator>-&gt;</operator><name>nr_firstnet</name></name></expr></argument>,
<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nr_lastnet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>ADDNA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<switch>switch <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETATALK_AT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_APPLETALK</name></expr>:</case>
<expr_stmt><expr><call><name>debug_at</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>AF_LOCAL</name></expr>:</case>
<expr_stmt><expr><call><name>debug_un</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><call><name>debug_in</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sin4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><call><name>debug_in6</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sin6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_DL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_LINK</name></expr>:</case>
<expr_stmt><expr><call><name>debug_dl</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sdl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ADDS</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ADDC</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>na</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADDC</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<expr_stmt><expr><call><name>ADDC</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>na</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>ebuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sbuf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>buf</name> <operator>-</operator> <name>sbuf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
