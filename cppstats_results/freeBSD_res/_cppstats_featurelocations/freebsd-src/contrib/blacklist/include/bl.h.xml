<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/blacklist/include/bl.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_BL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blacklist.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
<decl><name>BL_INVALID</name></decl>,
<decl><name>BL_ADD</name></decl>,
<decl><name>BL_DELETE</name></decl>,
<decl><name>BL_ABUSE</name></decl>,
<decl><name>BL_BADUSER</name></decl>
}</block></enum></type> <name>bl_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>bl_type_t</name></type> <name>bi_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bi_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>bi_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>bi_gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>bi_slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>bi_ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>bi_msg</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>bl_info_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bi_cred</name></cpp:macro> <cpp:value>bi_u._bi_cred</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_PATH_BLSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PATH_BLSOCK</name></cpp:macro> <cpp:value>"/var/run/blacklistd.sock"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>__BEGIN_DECLS</name></macro>

<typedef>typedef <type><name><name>struct</name> <name>blacklist</name></name> <modifier>*</modifier></type><name>bl_t</name>;</typedef>

<function_decl><type><name>bl_t</name></type> <name>bl_create</name><parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bl_destroy</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bl_send</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type></decl></parameter>, <parameter><decl><type><name>bl_type_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bl_getfd</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bl_info_t</name> <modifier>*</modifier></type><name>bl_recv</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>bl_isconnected</name><parameter_list>(<parameter><decl><type><name>bl_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr><name>__END_DECLS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
