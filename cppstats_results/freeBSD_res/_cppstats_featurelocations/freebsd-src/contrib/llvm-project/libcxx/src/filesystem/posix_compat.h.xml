<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/src/filesystem/posix_compat.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>POSIX_COMPAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSIX_COMPAT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filesystem"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filesystem_common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WIN32API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMINMAX</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winioctl.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/statvfs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WIN32API</name></expr></argument>)</argument_list></call></expr></cpp:if>


<struct>struct <name>LIBCPP_REPARSE_DATA_BUFFER</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ReparseTag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ReparseDataLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>Reserved</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>SubstituteNameOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>SubstituteNameLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>PrintNameOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>PrintNameLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>PathBuffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>SymbolicLinkReparseBuffer</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>SubstituteNameOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>SubstituteNameLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>PrintNameOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>PrintNameLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>PathBuffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>MountPointReparseBuffer</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>DataBuffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>GenericReparseBuffer</name></decl>;</struct>
}</block>;</union>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_FILESYSTEM</name>

<name>namespace</name></type> <name>detail</name> <block>{<block_content>
<macro><name>namespace</name></macro> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WIN32API</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_S_IFMT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_S_IFDIR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_S_IFCHR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_S_IFIFO</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_S_IFREG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_S_IFBLK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_S_IFLNK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_S_IFSOCK</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFMT</name></cpp:macro> <cpp:value>0xF000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFDIR</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFCHR</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFIFO</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFREG</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFBLK</name></cpp:macro> <cpp:value>0x6000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFLNK</name></cpp:macro> <cpp:value>0xA000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFSOCK</name></cpp:macro> <cpp:value>0xC000</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S_ISDIR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S_ISFIFO</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S_ISCHR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S_ISREG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S_ISLNK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S_ISBLK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S_ISSOCK</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISDIR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; _S_IFMT) == _S_IFDIR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISCHR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; _S_IFMT) == _S_IFCHR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISFIFO</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; _S_IFMT) == _S_IFIFO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISREG</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; _S_IFMT) == _S_IFREG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISBLK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; _S_IFMT) == _S_IFBLK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISLNK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; _S_IFMT) == _S_IFLNK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISSOCK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; _S_IFMT) == _S_IFSOCK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_NONBLOCK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_TIME_OFFSET_SECS</name></cpp:macro> <cpp:value>(uint64_t(369 * 365 + 89) * (24 * 60 * 60))</cpp:value></cpp:define>

<function><type><name>TimeSpec</name></type> <name>filetime_to_timespec</name><parameter_list>(<parameter><decl><type><name>LARGE_INTEGER</name></type> <name>li</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TimeSpec</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <literal type="number">10000000</literal> <operator>-</operator> <name>FILE_TIME_OFFSET_SECS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TimeSpec</name></type> <name>filetime_to_timespec</name><parameter_list>(<parameter><decl><type><name>FILETIME</name></type> <name>ft</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>li</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>li</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>filetime_to_timespec</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FILETIME</name></type> <name>timespec_to_filetime</name><parameter_list>(<parameter><decl><type><name>TimeSpec</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>li</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator>
<name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <operator>(</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name>FILE_TIME_OFFSET_SECS</name><operator>)</operator> <operator>*</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name> <operator>=</operator> <name><name>li</name><operator>.</operator><name>LowPart</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>=</operator> <name><name>li</name><operator>.</operator><name>HighPart</name></name></expr>;</expr_stmt>
<return>return <expr><name>ft</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>set_errno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>__win_err_to_errc</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>class</name></type> <name>WinHandle</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>WinHandle</name><argument_list>(<argument>const wchar_t *p</argument>, <argument>DWORD access</argument>, <argument>DWORD flags</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name> <operator>|</operator> <name>FILE_SHARE_DELETE</name></expr></argument>,
<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><name>FILE_FLAG_BACKUP_SEMANTICS</name> <operator>|</operator> <name>flags</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><operator>~</operator><macro><name>WinHandle</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>operator</name> <macro><name>HANDLE</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>h</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>h</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name>int</name></type> <name>stat_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>StatT</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE_BASIC_INFO</name></type> <name>basic</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandleEx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>FileBasicInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>basic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>basic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mtim</name></name> <operator>=</operator> <call><name>filetime_to_timespec</name><argument_list>(<argument><expr><name><name>basic</name><operator>.</operator><name>LastWriteTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_atim</name></name> <operator>=</operator> <call><name>filetime_to_timespec</name><argument_list>(<argument><expr><name><name>basic</name><operator>.</operator><name>LastAccessTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <literal type="number">0555</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>basic</name><operator>.</operator><name>FileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>|=</operator> <literal type="number">0222</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>basic</name><operator>.</operator><name>FileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>|=</operator> <name>_S_IFDIR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>|=</operator> <name>_S_IFREG</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>basic</name><operator>.</operator><name>FileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FILE_ATTRIBUTE_TAG_INFO</name></type> <name>tag</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandleEx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>FileAttributeTagInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tag</name><operator>.</operator><name>ReparseTag</name></name> <operator>==</operator> <name>IO_REPARSE_TAG_SYMLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>_S_IFMT</name><operator>)</operator> <operator>|</operator> <name>_S_IFLNK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>FILE_STANDARD_INFO</name></type> <name>standard</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandleEx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>FileStandardInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>standard</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>standard</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>=</operator> <name><name>standard</name><operator>.</operator><name>NumberOfLinks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <name><name>standard</name><operator>.</operator><name>EndOfFile</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>info</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>dwVolumeSerialNumber</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>st_ino</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>nFileIndexHigh</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>st_ino</name><operator>.</operator><name>id</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>nFileIndexLow</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stat_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>StatT</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>WinHandle</name></type> <name>h</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FILE_READ_ATTRIBUTES</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>stat_handle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>StatT</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>stat_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>lstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>StatT</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>stat_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FILE_FLAG_OPEN_REPARSE_POINT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>StatT</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>HANDLE</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>stat_handle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>permissions</name></expr>;</expr_stmt>
<return>return <expr><call><name>_wmkdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>symlink_file_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>oldname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>newname</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>path</name></type> <name>dest</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>make_preferred</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oldname</name> <operator>=</operator> <call><name><name>dest</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>is_dir</name></expr> ?</condition><then> <expr><name>SYMBOLIC_LINK_FLAG_DIRECTORY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CreateSymbolicLinkW</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><name>oldname</name></expr></argument>,
<argument><expr><name>flags</name> <operator>|</operator> <name>SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>ERROR_INVALID_PARAMETER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CreateSymbolicLinkW</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><name>oldname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>symlink_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>oldname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>newname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>symlink_file_dir</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>symlink_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>oldname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>newname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>symlink_file_dir</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>link</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>oldname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>newname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CreateHardLinkW</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><name>oldname</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>detail</name><operator>::</operator><name>WinHandle</name> <call><name>h</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>DELETE</name></expr></argument>, <argument><expr><name>FILE_FLAG_OPEN_REPARSE_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>FILE_DISPOSITION_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>DeleteFile</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetFileInformationByHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>FileDispositionInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>truncate_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>size_param</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>size_param</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetFilePointerEx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>size_param</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FILE_BEGIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetEndOfFile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ftruncate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>HANDLE</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>truncate_handle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>truncate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>detail</name><operator>::</operator><name>WinHandle</name> <call><name>h</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>truncate_handle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>MoveFileExW</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name>MOVEFILE_COPY_ALLOWED</name> <operator>|</operator> <name>MOVEFILE_REPLACE_EXISTING</name> <operator>|</operator>
<name>MOVEFILE_WRITE_THROUGH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name> <name>int</name></type> <name>open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_wopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>chdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_wchdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<struct>struct <name>StatVFS</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>f_frsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>f_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>f_bfree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>f_bavail</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>statvfs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>StatVFS</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>path</name></type> <name>dir</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>error_code</name></type> <name>local_ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>file_status</name></type> <name>st</name> <init>= <expr><call><name>status</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>local_ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>exists</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_directory</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>path</name></type> <name>parent</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>parent_path</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>free_bytes_available_to_caller</name></decl>, <decl><type ref="prev"/><name>total_number_of_bytes</name></decl>,
<decl><type ref="prev"/><name>total_number_of_free_bytes</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetDiskFreeSpaceExW</name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>free_bytes_available_to_caller</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>total_number_of_bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total_number_of_free_bytes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>f_frsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>f_blocks</name></name> <operator>=</operator> <name><name>total_number_of_bytes</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>f_bfree</name></name> <operator>=</operator> <name><name>total_number_of_free_bytes</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>f_bavail</name></name> <operator>=</operator> <name><name>free_bytes_available_to_caller</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>wchar_t</name> <modifier>*</modifier></type><name>getcwd</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_wgetcwd</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>wchar_t</name> <modifier>*</modifier></type><name>realpath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>resolved_name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>resolved_name</name> <operator>==</operator> <name>nullptr</name></expr></argument>,
<argument><expr><literal type="string">"Windows realpath() assumes a null resolved_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WinHandle</name></type> <name>h</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FILE_READ_ATTRIBUTES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buff_size</name> <init>= <expr><name>MAX_PATH</name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name></expr></argument>, <argument><expr><name>decltype</name><operator>(</operator><operator>&amp;</operator><operator>::</operator><name>free</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <call><name>buff</name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>malloc</name><argument_list>(<argument><expr><name>buff_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><operator>::</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>retval</name> <init>= <expr><call><name>GetFinalPathNameByHandleW</name><argument_list>(
<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buff_size</name></expr></argument>, <argument><expr><name>FILE_NAME_NORMALIZED</name> <operator>|</operator> <name>VOLUME_NAME_DOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&gt;</operator> <name>buff_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buff_size</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>malloc</name><argument_list>(<argument><expr><name>buff_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>GetFinalPathNameByHandleW</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buff_size</name></expr></argument>,
<argument><expr><name>FILE_NAME_NORMALIZED</name> <operator>|</operator> <name>VOLUME_NAME_DOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>retval</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wcsncmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">L"\\\\?\\"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><call><name>wcslen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>wcsncmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">L"UNC\\"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">L"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><call><name>wcslen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>buff</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_FDCWD</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_SYMLINK_NOFOLLOW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>using</name></type> <name>ModeT</name> <init>= <expr><name>int</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>fchmod_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE_BASIC_INFO</name></type> <name>basic</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandleEx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>FileBasicInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>basic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>basic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>orig_attributes</name> <init>= <expr><name><name>basic</name><operator>.</operator><name>FileAttributes</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>basic</name><operator>.</operator><name>FileAttributes</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FILE_ATTRIBUTE_READONLY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>perms</name> <operator>&amp;</operator> <literal type="number">0222</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>basic</name><operator>.</operator><name>FileAttributes</name></name> <operator>|=</operator> <name>FILE_ATTRIBUTE_READONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>basic</name><operator>.</operator><name>FileAttributes</name></name> <operator>!=</operator> <name>orig_attributes</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>SetFileInformationByHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>FileBasicInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>basic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>basic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fchmodat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>attributes</name> <init>= <expr><call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attributes</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attributes</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>AT_SYMLINK_NOFOLLOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>detail</name><operator>::</operator><name>WinHandle</name> <call><name>h</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FILE_READ_ATTRIBUTES</name> <operator>|</operator> <name>FILE_WRITE_ATTRIBUTES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>fchmod_handle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>


<decl_stmt><decl><type><name>DWORD</name></type> <name>orig_attributes</name> <init>= <expr><name>attributes</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>attributes</name> <operator>&amp;=</operator> <operator>~</operator><name>FILE_ATTRIBUTE_READONLY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>perms</name> <operator>&amp;</operator> <literal type="number">0222</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attributes</name> <operator>|=</operator> <name>FILE_ATTRIBUTE_READONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attributes</name> <operator>!=</operator> <name>orig_attributes</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fchmod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>HANDLE</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>fchmod_handle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SYMLINK_SIZE</name></cpp:macro> <cpp:value>MAXIMUM_REPARSE_DATA_BUFFER_SIZE</cpp:value></cpp:define>
<decl_stmt><decl><type><name>using</name></type> <name>SSizeT</name> <init>= <expr><operator>::</operator><name>int64_t</name></expr></init></decl>;</decl_stmt>

<function><type><name>SSizeT</name></type> <name>readlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ret_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>MAXIMUM_REPARSE_DATA_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>detail</name><operator>::</operator><name>WinHandle</name> <call><name>h</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FILE_READ_ATTRIBUTES</name></expr></argument>, <argument><expr><name>FILE_FLAG_OPEN_REPARSE_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>out</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DeviceIoControl</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>FSCTL_GET_REPARSE_POINT</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_errno</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>reparse</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>LIBCPP_REPARSE_DATA_BUFFER</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>path_buf_offset</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>LIBCPP_REPARSE_DATA_BUFFER</name></expr></argument>,
<argument><expr><name><name>SymbolicLinkReparseBuffer</name><operator>.</operator><name>PathBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>&lt;</operator> <name>path_buf_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reparse</name><operator>-&gt;</operator><name>ReparseTag</name></name> <operator>!=</operator> <name>IO_REPARSE_TAG_SYMLINK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>symlink</name> <init>= <expr><name><name>reparse</name><operator>-&gt;</operator><name>SymbolicLinkReparseBuffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>name_offset</name></decl>, <decl><type ref="prev"/><name>name_length</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>symlink</name><operator>.</operator><name>PrintNameLength</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_offset</name> <operator>=</operator> <name><name>symlink</name><operator>.</operator><name>SubstituteNameOffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name_length</name> <operator>=</operator> <name><name>symlink</name><operator>.</operator><name>SubstituteNameLength</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>name_offset</name> <operator>=</operator> <name><name>symlink</name><operator>.</operator><name>PrintNameOffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name_length</name> <operator>=</operator> <name><name>symlink</name><operator>.</operator><name>PrintNameLength</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>path_buf_offset</name> <operator>+</operator> <name>name_offset</name> <operator>+</operator> <name>name_length</name> <operator>&gt;</operator> <name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name_length</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>bufsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>symlink</name><operator>.</operator><name>PathBuffer</name><index>[<expr><name>name_offset</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>,
<argument><expr><name>name_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>name_length</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>symlink_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>symlink</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>symlink_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>symlink</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>chdir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>close</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fchmod</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fchmodat</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fstat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>ftruncate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>getcwd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>link</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>lstat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>mkdir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>open</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>readlink</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>realpath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>remove</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>rename</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>stat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>statvfs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>truncate</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<decl_stmt><decl><type><name>using</name></type> <name>StatVFS</name> <init>= struct <expr><name>statvfs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ModeT</name> <init>= <expr><operator>::</operator><name>mode_t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SSizeT</name> <init>= <expr><operator>::</operator><name>ssize_t</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>
</block_content>}</block></decl></decl_stmt>

<expr><name>_LIBCPP_END_NAMESPACE_FILESYSTEM</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
