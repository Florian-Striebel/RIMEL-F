<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/src/include/sso_allocator.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_SSO_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_SSO_ALLOCATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;new&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name> <name>_Np</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_LIBCPP_HIDDEN</name></type> <name>__sso_allocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>_Np</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_HIDDEN</name></type> <name><name>__sso_allocator</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_Np</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>const_pointer</name>;</typedef>
<typedef>typedef <type><name>void</name></type> <name>value_type</name>;</typedef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name> <name>_Np</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_HIDDEN</name></type> <name>__sso_allocator</name>
<block>{<block_content>
<expr_stmt><expr><name>typename</name> <name>aligned_storage</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>_Np</name><operator>&gt;</operator><operator>::</operator><name>type</name> <name>buf_</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>__allocated_</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<typedef>typedef <type><name>size_t</name></type> <name>size_type</name>;</typedef>
<typedef>typedef <type><name>_Tp</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
<typedef>typedef <type><name>_Tp</name></type> <name>value_type</name>;</typedef>

<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>__sso_allocator</name><argument_list>()</argument_list></macro> <expr_stmt><expr><call><name>throw</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>__allocated_</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <macro><name>__sso_allocator</name><argument_list>(<argument>const __sso_allocator&amp;</argument>)</argument_list></macro> <call><name>throw</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>__allocated_</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name> <macro><name>__sso_allocator</name><argument_list>(<argument>const __sso_allocator&lt;_Up</argument>, <argument>_Np&gt;&amp;</argument>)</argument_list></macro> <call><name>throw</name><argument_list>()</argument_list></call>
<operator>:</operator> <macro><name>__allocated_</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{}</block>
<name>private</name><operator>:</operator>
<name>__sso_allocator</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>__sso_allocator</name><operator>&amp;</operator><operator>)</operator></expr>;</expr_stmt>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>pointer</name></type> <name>allocate</name><argument_list>(<argument><expr><name>size_type</name> <name>__n</name></expr></argument>, <argument><expr><name>typename</name> <name><name>__sso_allocator</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_Np</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_pointer</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>__allocated_</name> <operator>&amp;&amp;</operator> <name>__n</name> <operator>&lt;=</operator> <name>_Np</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__allocated_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>pointer</name><operator>)</operator><operator>&amp;</operator><name>buf_</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>allocate</name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>void</name></type> <name>deallocate</name><parameter_list>(<parameter><decl><type><name>pointer</name></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name>size_type</name></type> <name>__n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__p</name> <operator>==</operator> <operator>(</operator><name>pointer</name><operator>)</operator><operator>&amp;</operator><name>buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__allocated_</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deallocate</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>size_type</name> <macro><name>max_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <macro><name>throw</name><argument_list>()</argument_list></macro> <block>{<return>return <expr><call><name>size_type</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>__sso_allocator</name><operator>&amp;</operator> <name>__a</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><operator>&amp;</operator><name>buf_</name> <operator>==</operator> <operator>&amp;</operator><name><name>__a</name><operator>.</operator><name>buf_</name></name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>__sso_allocator</name><operator>&amp;</operator> <name>__a</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><operator>&amp;</operator><name>buf_</name> <operator>!=</operator> <operator>&amp;</operator><name><name>__a</name><operator>.</operator><name>buf_</name></name></expr>;</return>}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
