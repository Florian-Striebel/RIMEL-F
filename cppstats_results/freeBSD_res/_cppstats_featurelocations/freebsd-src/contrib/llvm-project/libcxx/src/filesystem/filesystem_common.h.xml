<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/src/filesystem/filesystem_common.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FILESYSTEM_COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILESYSTEM_COMMON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"__config"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filesystem"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"array"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrono"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"climits"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cstdlib"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctime"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WIN32API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/statvfs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../include/apple_availability.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTIME_OMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_USE_UTIMENSAT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wunused-function"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WIN32API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(L##x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_CSTR_FMT</name></cpp:macro> <cpp:value>"\"%ls\""</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_CSTR_FMT</name></cpp:macro> <cpp:value>"\"%s\""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_FILESYSTEM</name>

<name>namespace</name></type> <name>detail</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WIN32API</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>errc</name></type> <name>__win_err_to_errc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>namespace</name></macro> <block>{<block_content>

<expr_stmt><expr><specifier>static</specifier> <macro><name>_LIBCPP_FORMAT_PRINTF</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <name>string</name>
<macro><name>format_string_impl</name><argument_list>(<argument>const char* msg</argument>, <argument>va_list ap</argument>)</argument_list></macro> <block>{
<expr><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name> <name>buf</name></expr>;

<expr><name>va_list</name> <name>apcopy</name></expr>;
<expr><call><name>va_copy</name><argument_list>(<argument><expr><name>apcopy</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;
<expr><name>int</name> <name>ret</name> <operator>=</operator> <operator>::</operator><call><name>vsnprintf</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>apcopy</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>va_end</name><argument_list>(<argument><expr><name>apcopy</name></expr></argument>)</argument_list></call></expr>;

<expr><name>string</name> <name>result</name></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>buf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>buf</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>



<decl_stmt><decl><type><name>size_t</name></type> <name>size_with_null</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>__resize_default_init</name></name><argument_list>(<argument><expr><name>size_with_null</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>::</operator><call><name>vsnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size_with_null</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>size_with_null</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"TODO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return result</block></block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>_LIBCPP_FORMAT_PRINTF</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <name>string</name>
<macro><name>format_string</name><argument_list>(<argument>const char* msg</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<expr><name>string</name> <name>ret</name></expr>;
<expr><name>va_list</name> <name>ap</name></expr>;
<expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>try</name> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>ret</name> <operator>=</operator> <call><name>format_string_impl</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block> <macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro> <block>{
<expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;
<expr><name>throw</name></expr>;
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>ret</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>error_code</name></type> <name>capture_errno</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Expected errno to be non-zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>error_code</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>generic_category</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WIN32API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>error_code</name></type> <name>make_windows_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>make_error_code</name><argument_list>(<argument><expr><call><name>__win_err_to_errc</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name></type> <name>error_value</name><parameter_list>()</parameter_list>;</function_decl>
<function><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>void</name></type> <name><name>error_value</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>bool</name></type> <name><name>error_value</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SIZEOF_SIZE_T__</name> <operator>!=</operator> <name>__SIZEOF_LONG_LONG__</name></expr></cpp:if>
<function><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>size_t</name></type> <name><name>error_value</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>size_t</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>uintmax_t</name></type> <name><name>error_value</name><argument_list type="generic">&lt;<argument><expr><name>uintmax_t</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>uintmax_t</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>file_time_type</name></type> <name><name>error_value</name><argument_list type="generic">&lt;<argument><expr><name>file_time_type</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>file_time_type</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>path</name></type> <name><name>error_value</name><argument_list type="generic">&lt;<argument><expr><name>path</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><block>{}</block></expr>;</return>
</block_content>}</block></function>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name><operator>&gt;</operator>
struct <name>ErrorHandler</name> <block>{
<expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>func_name_</name></expr>;
<expr><name>error_code</name><operator>*</operator> <name>ec_</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><specifier>const</specifier> <name>path</name><operator>*</operator> <name>p1_</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><specifier>const</specifier> <name>path</name><operator>*</operator> <name>p2_</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><call><name>ErrorHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>fname</name></expr></argument>, <argument><expr><name>error_code</name><operator>*</operator> <name>ec</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>path</name><operator>*</operator> <name>p1</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>path</name><operator>*</operator> <name>p2</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>func_name_</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ec_</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>p1_</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>, <macro><name>p2_</name><argument_list>(<argument>p2</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>ec_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ec_</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>T</name> <macro><name>report</name><argument_list>(<argument>const error_code&amp; ec</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>ec_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ec_</name> <operator>=</operator> <name>ec</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>error_value</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
string what = string("in "</block></if></if_stmt>) <operator>+</operator> <name>func_name_</name></block></expr>;
<switch>switch <condition>(<expr><call><name>bool</name><argument_list>(<argument><expr><name>p1_</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>bool</name><argument_list>(<argument><expr><name>p2_</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>__throw_filesystem_error</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>__throw_filesystem_error</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><operator>*</operator><name>p1_</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>__throw_filesystem_error</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><operator>*</operator><name>p1_</name></expr></argument>, <argument><expr><operator>*</operator><name>p2_</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
_LIBCPP_UNREACHABLE(</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>_LIBCPP_FORMAT_PRINTF</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><name>void</name></type> <name>report_impl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>error_code</name><operator>&amp;</operator> <name>ec</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>msg</name></expr></argument>, <argument><expr><name>va_list</name> <name>ap</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ec_</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ec_</name> <operator>=</operator> <name>ec</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>what</name> <init>=
<expr><call><name>string</name><argument_list>(<argument><expr><literal type="string">"in "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>func_name_</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name>format_string_impl</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>bool</name><argument_list>(<argument><expr><name>p1_</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>bool</name><argument_list>(<argument><expr><name>p2_</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>__throw_filesystem_error</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>__throw_filesystem_error</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><operator>*</operator><name>p1_</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>__throw_filesystem_error</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><operator>*</operator><name>p1_</name></expr></argument>, <argument><expr><operator>*</operator><name>p2_</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>_LIBCPP_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<macro><name>_LIBCPP_FORMAT_PRINTF</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><name>T</name></type> <name>report</name><argument_list>(<argument><expr><specifier>const</specifier> <name>error_code</name><operator>&amp;</operator> <name>ec</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>msg</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>try</name></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>report_impl</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>error_value</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>T</name></type> <name>report</name><argument_list>(<argument><expr><name>errc</name> <specifier>const</specifier><operator>&amp;</operator> <name>err</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>report</name><argument_list>(<argument><expr><call><name>make_error_code</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<macro><name>_LIBCPP_FORMAT_PRINTF</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><name>T</name></type> <name>report</name><argument_list>(<argument><expr><name>errc</name> <specifier>const</specifier><operator>&amp;</operator> <name>err</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>msg</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>try</name></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>report_impl</name><argument_list>(<argument><expr><call><name>make_error_code</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>error_value</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>ErrorHandler</name><argument_list>(<argument><expr><name>ErrorHandler</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ErrorHandler</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>ErrorHandler</name> <specifier>const</specifier><operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>using</name> <name>chrono</name><operator>::</operator><name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>chrono</name><operator>::</operator><name>duration_cast</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WIN32API</name></expr></argument>)</argument_list></call></expr></cpp:if>







<struct>struct <name>TimeSpec</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>tv_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tv_nsec</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>StatT</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>st_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeSpec</name></type> <name>st_atim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeSpec</name></type> <name>st_mtim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>st_dev</name></decl>;</decl_stmt>
<struct>struct <name>FileIdStruct</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>id</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FileIdStruct</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block></expr></expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
}</block>
<decl/></struct>}</block> <decl><name>st_ino</name></decl>;</struct>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>st_nlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>st_size</name></decl>;</decl_stmt>
};

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>using</name></type> <name>TimeSpec</name> <init>= struct <expr><name>timespec</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>TimeVal</name> <init>= struct <expr><name>timeval</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>StatT</name> <init>= struct <expr><name>stat</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>FileTimeT</name></expr><operator>,</operator> <expr><name>class</name> <name>TimeT</name></expr><operator>,</operator>
<expr><name>bool</name> <name>IsFloat</name> <operator>=</operator> <name><name>is_floating_point</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FileTimeT</name><operator>::</operator><name>rep</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>time_util_base</name> <block>{
<expr><name>using</name> <name>rep</name> <operator>=</operator> <name>typename</name> <name>FileTimeT</name><operator>::</operator><name>rep</name></expr>;
<expr><name>using</name> <name>fs_duration</name> <operator>=</operator> <name>typename</name> <name>FileTimeT</name><operator>::</operator><name>duration</name></expr>;
<expr><name>using</name> <name>fs_seconds</name> <operator>=</operator> <name><name>duration</name><argument_list type="generic">&lt;<argument><expr><name>rep</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>fs_nanoseconds</name> <operator>=</operator> <name><name>duration</name><argument_list type="generic">&lt;<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>nano</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>fs_microseconds</name> <operator>=</operator> <name><name>duration</name><argument_list type="generic">&lt;<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>micro</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <name>constexpr</name> <name>rep</name> <name>max_seconds</name> <operator>=</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_seconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>FileTimeT</name><operator>::</operator><name>duration</name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>constexpr</name> <name>rep</name> <name>max_nsec</name> <operator>=</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_nanoseconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>FileTimeT</name><operator>::</operator><name>duration</name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>-</operator>
<call><name>fs_seconds</name><argument_list>(<argument><expr><name>max_seconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>constexpr</name> <name>rep</name> <name>min_seconds</name> <operator>=</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_seconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>FileTimeT</name><operator>::</operator><name>duration</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>constexpr</name> <name>rep</name> <name>min_nsec_timespec</name> <operator>=</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_nanoseconds</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>(</operator><name>FileTimeT</name><operator>::</operator><name>duration</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>fs_seconds</name><argument_list>(<argument><expr><name>min_seconds</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator>
<call><name>fs_seconds</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<specifier>static</specifier> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>fs_duration</name> <macro><name>get_min_nsecs</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_duration</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>fs_nanoseconds</name><argument_list>(<argument><expr><name>min_nsec_timespec</name></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_nanoseconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>fs_seconds</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
}</block>

<call><name>static_assert</name><argument_list>(<argument><expr><call><name>fs_seconds</name><argument_list>(<argument><expr><name>min_seconds</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>get_min_nsecs</name><argument_list>()</argument_list></call> <operator>==</operator>
<name>FileTimeT</name><operator>::</operator><name>duration</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"value doesn't roundtrip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>bool</name></type> <name>check_range</name><parameter_list>()</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimeT</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<typedef>typedef <type><name><name>duration</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name><name>ratio</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3600</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">365</literal></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>Years</name>;</typedef>
<return>return <expr><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>Years</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>fs_seconds</name><argument_list>(<argument><expr><name>max_seconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>Years</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>Years</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>fs_seconds</name><argument_list>(<argument><expr><name>min_seconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>Years</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>max_seconds</name> <operator>&gt;=</operator> <name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>TimeT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<name>min_seconds</name> <operator>&lt;=</operator> <name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>TimeT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>check_range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"the representable range is unacceptable small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>FileTimeT</name></expr><operator>,</operator> <expr><name>class</name> <name>TimeT</name><operator>&gt;</operator>
struct <name><name>time_util_base</name><argument_list type="generic">&lt;<argument><expr><name>FileTimeT</name></expr></argument>, <argument><expr><name>TimeT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>rep</name> <operator>=</operator> <name>typename</name> <name>FileTimeT</name><operator>::</operator><name>rep</name></expr>;
<expr><name>using</name> <name>fs_duration</name> <operator>=</operator> <name>typename</name> <name>FileTimeT</name><operator>::</operator><name>duration</name></expr>;
<expr><name>using</name> <name>fs_seconds</name> <operator>=</operator> <name><name>duration</name><argument_list type="generic">&lt;<argument><expr><name>rep</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>fs_nanoseconds</name> <operator>=</operator> <name><name>duration</name><argument_list type="generic">&lt;<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>nano</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>fs_microseconds</name> <operator>=</operator> <name><name>duration</name><argument_list type="generic">&lt;<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>micro</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>rep</name> <name>max_seconds</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>rep</name> <name>max_nsec</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>rep</name> <name>min_seconds</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>rep</name> <name>min_nsec_timespec</name></expr>;
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>FileTimeT</name></expr></argument>, <argument><expr><name>class</name> <name>TimeT</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>typename</name> <name>FileTimeT</name><operator>::</operator><name>rep</name>
<name><name>time_util_base</name><argument_list type="generic">&lt;<argument><expr><name>FileTimeT</name></expr></argument>, <argument><expr><name>TimeT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max_seconds</name> <operator>=</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_seconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>FileTimeT</name><operator>::</operator><name>duration</name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>FileTimeT</name></expr></argument>, <argument><expr><name>class</name> <name>TimeT</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>typename</name> <name>FileTimeT</name><operator>::</operator><name>rep</name> <name><name>time_util_base</name><argument_list type="generic">&lt;<argument><expr><name>FileTimeT</name></expr></argument>, <argument><expr><name>TimeT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max_nsec</name> <operator>=</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_nanoseconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>FileTimeT</name><operator>::</operator><name>duration</name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>-</operator>
<call><name>fs_seconds</name><argument_list>(<argument><expr><name>max_seconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>FileTimeT</name></expr></argument>, <argument><expr><name>class</name> <name>TimeT</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>typename</name> <name>FileTimeT</name><operator>::</operator><name>rep</name>
<name><name>time_util_base</name><argument_list type="generic">&lt;<argument><expr><name>FileTimeT</name></expr></argument>, <argument><expr><name>TimeT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>min_seconds</name> <operator>=</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_seconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>FileTimeT</name><operator>::</operator><name>duration</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>FileTimeT</name></expr></argument>, <argument><expr><name>class</name> <name>TimeT</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>typename</name> <name>FileTimeT</name><operator>::</operator><name>rep</name>
<name><name>time_util_base</name><argument_list type="generic">&lt;<argument><expr><name>FileTimeT</name></expr></argument>, <argument><expr><name>TimeT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>min_nsec_timespec</name> <operator>=</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_nanoseconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>FileTimeT</name><operator>::</operator><name>duration</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call> <operator>-</operator>
<call><name>fs_seconds</name><argument_list>(<argument><expr><name>min_seconds</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator>
<call><name>fs_seconds</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>FileTimeT</name></expr></argument>, <argument><expr><name>class</name> <name>TimeT</name></expr></argument>, <argument><expr><name>class</name> <name>TimeSpecT</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>time_util</name> <range>: <expr><name><name>time_util_base</name><argument_list type="generic">&lt;<argument><expr><name>FileTimeT</name></expr></argument>, <argument><expr><name>TimeT</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>Base</name> <operator>=</operator> <name><name>time_util_base</name><argument_list type="generic">&lt;<argument><expr><name>FileTimeT</name></expr></argument>, <argument><expr><name>TimeT</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>Base</name><operator>::</operator><name>max_nsec</name></expr>;
<expr><name>using</name> <name>Base</name><operator>::</operator><name>max_seconds</name></expr>;
<expr><name>using</name> <name>Base</name><operator>::</operator><name>min_nsec_timespec</name></expr>;
<expr><name>using</name> <name>Base</name><operator>::</operator><name>min_seconds</name></expr>;

<expr><name>using</name> <name>typename</name> <name>Base</name><operator>::</operator><name>fs_duration</name></expr>;
<expr><name>using</name> <name>typename</name> <name>Base</name><operator>::</operator><name>fs_microseconds</name></expr>;
<expr><name>using</name> <name>typename</name> <name>Base</name><operator>::</operator><name>fs_nanoseconds</name></expr>;
<expr><name>using</name> <name>typename</name> <name>Base</name><operator>::</operator><name>fs_seconds</name></expr>;

<expr><name>public</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>CType</name></expr></argument>, <argument><expr><name>class</name> <name>ChronoType</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>bool</name> <macro><name>checked_set</name><argument_list>(<argument>CType* out</argument>,
<argument>ChronoType time</argument>)</argument_list></macro> <block>{
<expr><name>using</name> <name>Lim</name> <operator>=</operator> <name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>CType</name></expr></argument>&gt;</argument_list></name></expr>;
<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&gt;</operator> <name>Lim</name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>||</operator> <name>time</name> <operator>&lt;</operator> <name>Lim</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<operator>*</operator><name>out</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></block></expr>;
<return>return <expr><name>true</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>bool</name></type> <name>is_representable</name><parameter_list>(<parameter><decl><type><name>TimeSpecT</name></type> <name>tm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>tm</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name>max_seconds</name> <operator>||</operator>
<operator>(</operator><name><name>tm</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <name>max_seconds</name> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>.</operator><name>tv_nsec</name></name> <operator>&lt;=</operator> <name>max_nsec</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <operator>(</operator><name>min_seconds</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>tm</name><operator>.</operator><name>tv_nsec</name></name> <operator>&gt;=</operator> <name>min_nsec_timespec</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name><name>tm</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;=</operator> <name>min_seconds</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>bool</name></type> <name>is_representable</name><parameter_list>(<parameter><decl><type><name>FileTimeT</name></type> <name>tm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>secs</name> <init>= <expr><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_seconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tm</name><operator>.</operator><name>time_since_epoch</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>nsecs</name> <init>= <expr><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_nanoseconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tm</name><operator>.</operator><name>time_since_epoch</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>secs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>nsecs</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>secs</name> <operator>=</operator> <name>secs</name> <operator>+</operator> <call><name>fs_seconds</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsecs</name> <operator>=</operator> <name>nsecs</name> <operator>+</operator> <call><name>fs_seconds</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>TLim</name> <init>= <expr><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>TimeT</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>secs</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>secs</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>TLim</name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>secs</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>TLim</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>FileTimeT</name></type>
<name>convert_from_timespec</name><parameter_list>(<parameter><decl><type><name>TimeSpecT</name></type> <name>tm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tv_nsec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>FileTimeT</name><argument_list>(<argument><expr><call><name>fs_seconds</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_duration</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>fs_nanoseconds</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>adj_subsec</name> <init>= <expr><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_duration</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>fs_seconds</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>fs_nanoseconds</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>Dur</name> <init>= <expr><call><name>fs_seconds</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>adj_subsec</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>FileTimeT</name><argument_list>(<argument><expr><name>Dur</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>SubSecT</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>bool</name></type>
<name>set_times_checked</name><parameter_list>(<parameter><decl><type><name>TimeT</name><modifier>*</modifier></type> <name>sec_out</name></decl></parameter>, <parameter><decl><type><name>SubSecT</name><modifier>*</modifier></type> <name>subsec_out</name></decl></parameter>, <parameter><decl><type><name>FileTimeT</name></type> <name>tp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>dur</name> <init>= <expr><call><name><name>tp</name><operator>.</operator><name>time_since_epoch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>sec_dur</name> <init>= <expr><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_seconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>subsec_dur</name> <init>= <expr><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>fs_nanoseconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dur</name> <operator>-</operator> <name>sec_dur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>subsec_dur</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>sec_dur</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>min_seconds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sec_dur</name> <operator>=</operator> <name>sec_dur</name> <operator>-</operator> <call><name>fs_seconds</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subsec_dur</name> <operator>=</operator> <name>subsec_dur</name> <operator>+</operator> <call><name>fs_seconds</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>subsec_dur</name> <operator>=</operator> <name>fs_nanoseconds</name><operator>::</operator><call><name>zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>checked_set</name><argument_list>(<argument><expr><name>sec_out</name></expr></argument>, <argument><expr><call><name><name>sec_dur</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>checked_set</name><argument_list>(<argument><expr><name>subsec_out</name></expr></argument>, <argument><expr><call><name><name>subsec_dur</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>bool</name></type> <name>convert_to_timespec</name><parameter_list>(<parameter><decl><type><name>TimeSpecT</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>,
<parameter><decl><type><name>FileTimeT</name></type> <name>tp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_representable</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>set_times_checked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WIN32API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>using</name></type> <name>fs_time</name> <init>= <expr><name><name>time_util</name><argument_list type="generic">&lt;<argument><expr><name>file_time_type</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>TimeSpec</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>using</name></type> <name>fs_time</name> <init>= <expr><name><name>time_util</name><argument_list type="generic">&lt;<argument><expr><name>file_time_type</name></expr></argument>, <argument><expr><name>time_t</name></expr></argument>, <argument><expr><name>TimeSpec</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>TimeSpec</name></type> <name>extract_mtime</name><parameter_list>(<parameter><decl><type><name>StatT</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>st</name><operator>.</operator><name>st_mtimespec</name></name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>TimeSpec</name></type> <name>extract_atime</name><parameter_list>(<parameter><decl><type><name>StatT</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>st</name><operator>.</operator><name>st_atimespec</name></name></expr>;</return> </block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>inline</specifier> <name>TimeSpec</name></type> <name>extract_mtime</name><parameter_list>(<parameter><decl><type><name>StatT</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TimeSpec</name></type> <name>TS</name> <init>= <expr><block>{<expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>TS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>TimeSpec</name></type> <name>extract_atime</name><parameter_list>(<parameter><decl><type><name>StatT</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TimeSpec</name></type> <name>TS</name> <init>= <expr><block>{<expr><name><name>st</name><operator>.</operator><name>st_atime</name></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>TS</name></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>inline</specifier> <name>TimeSpec</name></type> <name>extract_mtime</name><parameter_list>(<parameter><decl><type><name>StatT</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TimeSpec</name></type> <name>TS</name> <init>= <expr><block>{<expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr>, <expr><name><name>st</name><operator>.</operator><name>st_mtime_n</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>TS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>TimeSpec</name></type> <name>extract_atime</name><parameter_list>(<parameter><decl><type><name>StatT</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TimeSpec</name></type> <name>TS</name> <init>= <expr><block>{<expr><name><name>st</name><operator>.</operator><name>st_atime</name></name></expr>, <expr><name><name>st</name><operator>.</operator><name>st_atime_n</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>TS</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>inline</specifier> <name>TimeSpec</name></type> <name>extract_mtime</name><parameter_list>(<parameter><decl><type><name>StatT</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>st</name><operator>.</operator><name>st_mtim</name></name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>TimeSpec</name></type> <name>extract_atime</name><parameter_list>(<parameter><decl><type><name>StatT</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>st</name><operator>.</operator><name>st_atim</name></name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WIN32API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>TimeVal</name></type> <name>make_timeval</name><parameter_list>(<parameter><decl><type><name>TimeSpec</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>chrono</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>Convert</name> <init>= <expr><index>[]</index><operator>(</operator><name>long</name> <name>nsec</name><operator>)</operator> <block>{
<expr><name>using</name> <name>int_type</name> <operator>=</operator> <call><name>decltype</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>TimeVal</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><name>tv_usec</name></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>dur</name> <operator>=</operator> <call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>microseconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>nanoseconds</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dur</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>TimeVal</name></type> <name>TV</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>TV</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TV</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <call><name>Convert</name><argument_list>(<argument><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TV</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type> <name>posix_utimes</name><argument_list>(<argument><expr><specifier>const</specifier> <name>path</name><operator>&amp;</operator> <name>p</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>TimeSpec</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>TS</name></expr></argument>,
<argument><expr><name>error_code</name><operator>&amp;</operator> <name>ec</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>TimeVal</name></type> <name><name>ConvertedTS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><call><name>make_timeval</name><argument_list>(<argument><expr><name><name>TS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <macro><name>make_timeval</name><argument_list>(<argument>TS[<literal type="number">1</literal>]</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>::</operator><call><name>utimes</name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ConvertedTS</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>capture_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_USE_UTIMENSAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>posix_utimensat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>path</name><operator>&amp;</operator> <name>p</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>TimeSpec</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>TS</name></expr></argument>,
<argument><expr><name>error_code</name><operator>&amp;</operator> <name>ec</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>::</operator><call><name>utimensat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><call><name><name>p</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>TS</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>capture_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>bool</name></type> <name>set_file_times</name><argument_list>(<argument><expr><specifier>const</specifier> <name>path</name><operator>&amp;</operator> <name>p</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>TimeSpec</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>TS</name></expr></argument>,
<argument><expr><name>error_code</name><operator>&amp;</operator> <name>ec</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_USE_UTIMENSAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>posix_utimes</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>posix_utimensat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}
}

<expr><name>_LIBCPP_END_NAMESPACE_FILESYSTEM</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
