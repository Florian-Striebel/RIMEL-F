<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/src/include/refstring.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_REFSTRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_REFSTRING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomic_support.h"</cpp:file></cpp:include>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_CHECK_FOR_GCC_EMPTY_STRING_STORAGE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach-o/dyld.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name>namespace</name></type> <name>__refstring_imp</name> <block>{<block_content> <macro><name>namespace</name></macro> <block>{<block_content>
<typedef>typedef <type><name>int</name></type> <name>count_t</name>;</typedef>

<struct>struct <name>_Rep_base</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>size_t</name> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>size_t</name> <name>cap</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>count_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>inline</specifier> <name>_Rep_base</name><modifier>*</modifier></type> <name>rep_from_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_</name></decl></parameter>)</parameter_list> noexcept <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>data_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Rep_base</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>data</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Rep_base</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type> <name>data_from_rep</name><parameter_list>(<parameter><decl><type><name>_Rep_base</name> <modifier>*</modifier></type><name>rep</name></decl></parameter>)</parameter_list> noexcept <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>data</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rep</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CHECK_FOR_GCC_EMPTY_STRING_STORAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier>
<specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>compute_gcc_empty_string_storage</name><parameter_list>()</parameter_list> noexcept
<block>{<block_content>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name> <init>= <expr><call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"/usr/lib/libstdc++.6.dylib"</literal></expr></argument>, <argument><expr><name>RTLD_NOLOAD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>sym</name> <init>= <expr><call><name>dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"_ZNSs4_Rep20_S_empty_rep_storageE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>data_from_rep</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Rep_base</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier>
<specifier>const</specifier> <name>char</name><modifier>*</modifier></type>
<name>get_gcc_empty_string_storage</name><parameter_list>()</parameter_list> noexcept
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>compute_gcc_empty_string_storage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>__refstring_imp</name></decl>;</decl_stmt>

<expr_stmt><expr><specifier>inline</specifier>
<name>__libcpp_refstring</name><operator>::</operator><macro><name>__libcpp_refstring</name><argument_list>(<argument>const char* msg</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name>size_t</name> <name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
<expr><name>_Rep_base</name><operator>*</operator> <name>rep</name> <operator>=</operator> <macro><name>static_cast</name></macro><operator>&lt;</operator><name>_Rep_base</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>::</operator><name>operator</name> <call><name>new</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rep</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;
<expr><name><name>rep</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;
<expr><name><name>rep</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>len</name></expr>;
<expr><name><name>rep</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>char</name> <operator>*</operator><name>data</name> <operator>=</operator> <call><name>data_from_rep</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>__imp_</name> <operator>=</operator> <name>data</name></expr>;
}</block>

<specifier>inline</specifier>
<name>__libcpp_refstring</name><operator>::</operator><macro><name>__libcpp_refstring</name><argument_list>(<argument>const __libcpp_refstring &amp;s</argument>)</argument_list></macro> <name>noexcept</name>
<operator>:</operator> <macro><name>__imp_</name><argument_list>(<argument>s.__imp_</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><call><name>__uses_refcount</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__libcpp_atomic_add</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>rep_from_data</name><argument_list>(<argument><expr><name>__imp_</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier>
<name>__libcpp_refstring</name><operator>&amp;</operator> <name>__libcpp_refstring</name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>__libcpp_refstring</name> <specifier>const</specifier><operator>&amp;</operator> <name>s</name><operator>)</operator> <name>noexcept</name> <block>{
<expr><name>bool</name> <name>adjust_old_count</name> <operator>=</operator> <call><name>__uses_refcount</name><argument_list>()</argument_list></call></expr>;
struct <expr><name>_Rep_base</name> <operator>*</operator><name>old_rep</name> <operator>=</operator> <call><name>rep_from_data</name><argument_list>(<argument><expr><name>__imp_</name></expr></argument>)</argument_list></call></expr>;
<expr><name>__imp_</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>__imp_</name></name></expr>;
<if_stmt><if>if <condition>(<expr><call><name>__uses_refcount</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__libcpp_atomic_add</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>rep_from_data</name><argument_list>(<argument><expr><name>__imp_</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adjust_old_count</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__libcpp_atomic_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_rep</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><call><name>count_t</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>::</operator><name>operator</name> <call><name>delete</name><argument_list>(<argument><expr><name>old_rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

inline
<expr_stmt><expr><name>__libcpp_refstring</name><operator>::</operator><operator>~</operator><macro><name>__libcpp_refstring</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name>__uses_refcount</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>_Rep_base</name><modifier>*</modifier></type> <name>rep</name> <init>= <expr><call><name>rep_from_data</name><argument_list>(<argument><expr><name>__imp_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__libcpp_atomic_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><call><name>count_t</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>::</operator><name>operator</name> <call><name>delete</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
}
}

<expr_stmt><expr><specifier>inline</specifier>
<name>bool</name> <name>__libcpp_refstring</name><operator>::</operator><macro><name>__uses_refcount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CHECK_FOR_GCC_EMPTY_STRING_STORAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>__imp_</name> <operator>!=</operator> <call><name>get_gcc_empty_string_storage</name><argument_list>()</argument_list></call></expr>;</return></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

_LIBCPP_END_NAMESPACE_STD

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
