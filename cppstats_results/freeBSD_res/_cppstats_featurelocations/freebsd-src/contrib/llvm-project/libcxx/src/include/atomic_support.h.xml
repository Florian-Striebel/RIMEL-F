<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/src/include/atomic_support.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_SUPPORT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SUPPORT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"__config"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_builtin</name><argument_list>(<argument><expr><name>__atomic_load_n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_builtin</name><argument_list>(<argument><expr><name>__atomic_store_n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_builtin</name><argument_list>(<argument><expr><name>__atomic_add_fetch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_builtin</name><argument_list>(<argument><expr><name>__atomic_exchange_n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_builtin</name><argument_list>(<argument><expr><name>__atomic_compare_exchange_n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_CONSUME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_RELEASE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_ACQ_REL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr></cpp:if>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_HAS_ATOMIC_BUILTINS</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_GNUC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_GNUC_VER</name> <operator>&gt;=</operator> <literal type="number">407</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_HAS_ATOMIC_BUILTINS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_ATOMIC_BUILTINS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_WARNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>_LIBCPP_WARNING</name><argument_list>(<argument><literal type="string">"Building libc++ without __atomic builtins is unsupported"</literal></argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> Building libc++ without __atomic builtins is unsupported</cpp:warning>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name></type>

<name>namespace</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_ATOMIC_BUILTINS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<enum>enum <name>__libcpp_atomic_order</name> <block>{
<decl><name>_AO_Relaxed</name> <init>= <expr><name>__ATOMIC_RELAXED</name></expr></init></decl>,
<decl><name>_AO_Consume</name> <init>= <expr><name>__ATOMIC_CONSUME</name></expr></init></decl>,
<decl><name>_AO_Acquire</name> <init>= <expr><name>__ATOMIC_ACQUIRE</name></expr></init></decl>,
<decl><name>_AO_Release</name> <init>= <expr><name>__ATOMIC_RELEASE</name></expr></init></decl>,
<decl><name>_AO_Acq_Rel</name> <init>= <expr><name>__ATOMIC_ACQ_REL</name></expr></init></decl>,
<decl><name>_AO_Seq</name> <init>= <expr><name>__ATOMIC_SEQ_CST</name></expr></init></decl>
}</block>;</enum>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>, <argument><expr><name>class</name> <name>_FromType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>__libcpp_atomic_store</name><parameter_list>(<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__dest</name></decl></parameter>, <parameter><decl><type><name>_FromType</name></type> <name>__val</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__order</name> <init>= <expr><name>_AO_Seq</name></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__atomic_store_n</name><argument_list>(<argument><expr><name>__dest</name></expr></argument>, <argument><expr><name>__val</name></expr></argument>, <argument><expr><name>__order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>, <argument><expr><name>class</name> <name>_FromType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>__libcpp_relaxed_store</name><parameter_list>(<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__dest</name></decl></parameter>, <parameter><decl><type><name>_FromType</name></type> <name>__val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__atomic_store_n</name><argument_list>(<argument><expr><name>__dest</name></expr></argument>, <argument><expr><name>__val</name></expr></argument>, <argument><expr><name>_AO_Relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ValueType</name></type> <name>__libcpp_atomic_load</name><parameter_list>(<parameter><decl><type><name>_ValueType</name> <specifier>const</specifier><modifier>*</modifier></type> <name>__val</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__order</name> <init>= <expr><name>_AO_Seq</name></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__atomic_load_n</name><argument_list>(<argument><expr><name>__val</name></expr></argument>, <argument><expr><name>__order</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>, <argument><expr><name>class</name> <name>_AddType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ValueType</name></type> <name>__libcpp_atomic_add</name><parameter_list>(<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__val</name></decl></parameter>, <parameter><decl><type><name>_AddType</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__order</name> <init>= <expr><name>_AO_Seq</name></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__atomic_add_fetch</name><argument_list>(<argument><expr><name>__val</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__order</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ValueType</name></type> <name>__libcpp_atomic_exchange</name><parameter_list>(<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__target</name></decl></parameter>,
<parameter><decl><type><name>_ValueType</name></type> <name>__value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__order</name> <init>= <expr><name>_AO_Seq</name></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__atomic_exchange_n</name><argument_list>(<argument><expr><name>__target</name></expr></argument>, <argument><expr><name>__value</name></expr></argument>, <argument><expr><name>__order</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>__libcpp_atomic_compare_exchange</name><parameter_list>(<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__val</name></decl></parameter>,
<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__expected</name></decl></parameter>, <parameter><decl><type><name>_ValueType</name></type> <name>__after</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__success_order</name> <init>= <expr><name>_AO_Seq</name></expr></init></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__fail_order</name> <init>= <expr><name>_AO_Seq</name></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__atomic_compare_exchange_n</name><argument_list>(<argument><expr><name>__val</name></expr></argument>, <argument><expr><name>__expected</name></expr></argument>, <argument><expr><name>__after</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>__success_order</name></expr></argument>, <argument><expr><name>__fail_order</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<enum>enum <name>__libcpp_atomic_order</name> <block>{
<decl><name>_AO_Relaxed</name></decl>,
<decl><name>_AO_Consume</name></decl>,
<decl><name>_AO_Acquire</name></decl>,
<decl><name>_AO_Release</name></decl>,
<decl><name>_AO_Acq_Rel</name></decl>,
<decl><name>_AO_Seq</name></decl>
}</block>;</enum>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>, <argument><expr><name>class</name> <name>_FromType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>__libcpp_atomic_store</name><parameter_list>(<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__dest</name></decl></parameter>, <parameter><decl><type><name>_FromType</name></type> <name>__val</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__dest</name> <operator>=</operator> <name>__val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>, <argument><expr><name>class</name> <name>_FromType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>__libcpp_relaxed_store</name><parameter_list>(<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__dest</name></decl></parameter>, <parameter><decl><type><name>_FromType</name></type> <name>__val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__dest</name> <operator>=</operator> <name>__val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ValueType</name></type> <name>__libcpp_atomic_load</name><parameter_list>(<parameter><decl><type><name>_ValueType</name> <specifier>const</specifier><modifier>*</modifier></type> <name>__val</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><name>__val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>, <argument><expr><name>class</name> <name>_AddType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ValueType</name></type> <name>__libcpp_atomic_add</name><parameter_list>(<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__val</name></decl></parameter>, <parameter><decl><type><name>_AddType</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><name>__val</name> <operator>+=</operator> <name>__a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ValueType</name></type> <name>__libcpp_atomic_exchange</name><parameter_list>(<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__target</name></decl></parameter>,
<parameter><decl><type><name>_ValueType</name></type> <name>__value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__order</name> <init>= <expr><name>_AO_Seq</name></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_ValueType</name></type> <name>old</name> <init>= <expr><operator>*</operator><name>__target</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>__target</name> <operator>=</operator> <name>__value</name></expr>;</expr_stmt>
<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>__libcpp_atomic_compare_exchange</name><parameter_list>(<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__val</name></decl></parameter>,
<parameter><decl><type><name>_ValueType</name><modifier>*</modifier></type> <name>__expected</name></decl></parameter>, <parameter><decl><type><name>_ValueType</name></type> <name>__after</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>__val</name> <operator>==</operator> <operator>*</operator><name>__expected</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__val</name> <operator>=</operator> <name>__after</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>__expected</name> <operator>=</operator> <operator>*</operator><name>__val</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
