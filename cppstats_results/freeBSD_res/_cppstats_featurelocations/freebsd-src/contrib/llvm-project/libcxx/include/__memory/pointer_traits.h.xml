<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/pointer_traits.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_POINTER_TRAITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_POINTER_TRAITS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/addressof.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct <name>__has_element_type</name> <operator>:</operator> <name>false_type</name> <block>{}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__has_element_type</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>__void_t</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name><operator>::</operator><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ptr</name></expr><operator>,</operator> <expr><name>bool</name> <operator>=</operator> <name><name>__has_element_type</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__pointer_traits_element_type</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ptr</name><operator>&gt;</operator>
struct <name><name>__pointer_traits_element_type</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name>_Ptr</name><operator>::</operator><name>element_type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_Sp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Args</name><operator>&gt;</operator>
struct <name><name>__pointer_traits_element_type</name><argument_list type="generic">&lt;<argument><expr><name><name>_Sp</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name><name>_Sp</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_Sp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Args</name><operator>&gt;</operator>
struct <name><name>__pointer_traits_element_type</name><argument_list type="generic">&lt;<argument><expr><name><name>_Sp</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name>_Tp</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__has_difference_type</name> <range>: <expr><name>false_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__has_difference_type</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>__void_t</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name><operator>::</operator><name>difference_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ptr</name></expr><operator>,</operator> <expr><name>bool</name> <operator>=</operator> <name><name>__has_difference_type</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__pointer_traits_difference_type</name>
<block>{
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name>ptrdiff_t</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ptr</name><operator>&gt;</operator>
struct <name><name>__pointer_traits_difference_type</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name>_Ptr</name><operator>::</operator><name>difference_type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Up</name><operator>&gt;</operator>
struct <name>__has_rebind</name>
<block>{
<expr><name>private</name><operator>:</operator>
struct <name>__two</name> <block>{<expr><name>char</name> <name>__lx</name></expr>; <expr><name>char</name> <name>__lxx</name></expr>;}</block></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Xp</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>__two</name> <call><name>__test</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Xp</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>char</name> <macro><name>__test</name><argument_list>(<argument>typename _Xp::template rebind&lt;_Up&gt;* = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name><name>__test</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">1</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Up</name></expr><operator>,</operator> <expr><name>bool</name> <operator>=</operator> <name><name>__has_rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__pointer_traits_rebind</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name>_Tp</name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name>_Tp</name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name> <name>type</name></expr>;</expr_stmt></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_Sp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Args</name></expr><operator>,</operator> <expr><name>class</name> <name>_Up</name><operator>&gt;</operator>
struct <name><name>__pointer_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name><name>_Sp</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name><name>_Sp</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name><name>_Sp</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name> <name>type</name></expr>;</expr_stmt></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_Sp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Args</name></expr><operator>,</operator> <expr><name>class</name> <name>_Up</name><operator>&gt;</operator>
struct <name><name>__pointer_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name><name>_Sp</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name><name>_Sp</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ptr</name><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>pointer_traits</name>
<block>{
<typedef>typedef <type><name>_Ptr</name></type> <name>pointer</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__pointer_traits_element_type</name><argument_list type="generic">&lt;<argument><expr><name>pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>element_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__pointer_traits_difference_type</name><argument_list type="generic">&lt;<argument><expr><name>pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>using</name></type> <name>rebind</name> <init>= <expr><name>typename</name> <name><name>__pointer_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name>pointer</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Up</name><operator>&gt;</operator> struct <name>rebind</name>
<block>{<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__pointer_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name>pointer</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>other</name></expr>;</expr_stmt></typedef>}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<struct>struct <name>__nat</name> <block>{}</block>;</struct>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<specifier>static</specifier> <name>pointer</name></type> <name>pointer_to</name><argument_list>(<argument><expr><name>typename</name> <name><name>conditional</name><argument_list type="generic">&lt;<argument><expr><name><name>is_void</name><argument_list type="generic">&lt;<argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>__nat</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;</operator> <name>__r</name></expr></argument>)</argument_list>
<block>{<block_content><return>return <expr><name>pointer</name><operator>::</operator><call><name>pointer_to</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></decl></decl_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_Tp</name><modifier>*</modifier></type> <name>pointer</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>_Tp</name></type> <name>element_type</name>;</typedef>
<typedef>typedef <type><name>ptrdiff_t</name></type> <name>difference_type</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>using</name></type> <name>rebind</name> <init>= <expr><name>_Up</name><operator>*</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Up</name><operator>&gt;</operator> struct <name>rebind</name> <block>{<typedef>typedef <type><name>_Up</name><modifier>*</modifier></type> <name>other</name>;</typedef>}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<struct>struct <name>__nat</name> <block>{}</block>;</struct>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>pointer</name></type> <name>pointer_to</name><argument_list>(<argument><expr><name>typename</name> <name><name>conditional</name><argument_list type="generic">&lt;<argument><expr><name><name>is_void</name><argument_list type="generic">&lt;<argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>__nat</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;</operator> <name>__r</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name>
<block>{<block_content><return>return <expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></decl></decl_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_From</name></expr><operator>,</operator> <expr><name>class</name> <name>_To</name><operator>&gt;</operator>
struct <name>__rebind_pointer</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_From</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>_To</name></expr></argument>&gt;</argument_list></name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_From</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>_To</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name> <name>type</name></expr>;</expr_stmt></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Pointer</name></expr><operator>,</operator> <expr><name>class</name> <operator>=</operator> <name>void</name><operator>&gt;</operator>
struct <name>__to_address_helper</name></expr>;</expr_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<name>_Tp</name><modifier>*</modifier></type> <name>__to_address</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>*</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>is_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><literal type="string">"_Tp is a function type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__p</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Pointer</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<name>typename</name> <name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name><name>__to_address_helper</name><argument_list type="generic">&lt;<argument><expr><name>_Pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>__call</name><operator>(</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Pointer</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__to_address</name><argument_list>(<argument>const _Pointer&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<return>return <expr><name><name>__to_address_helper</name><argument_list type="generic">&lt;<argument><expr><name>_Pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Pointer</name></expr><operator>,</operator> <expr><name>class</name><operator>&gt;</operator>
struct <name>__to_address_helper</name> <block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<specifier>static</specifier> <macro><name>decltype</name><argument_list>(<argument>_VSTD::__to_address(declval&lt;const _Pointer&amp;&gt;().operator-&gt;())</argument>)</argument_list></macro>
<macro><name>__call</name><argument_list>(<argument>const _Pointer&amp;__p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__to_address</name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></argument>)</argument_list></call></expr></return>)</block></expr>;
}</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Pointer</name><operator>&gt;</operator>
struct <name><name>__to_address_helper</name><argument_list type="generic">&lt;<argument><expr><name>_Pointer</name></expr></argument>, <argument><expr><name>decltype</name><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>to_address</name><operator>(</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Pointer</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<specifier>static</specifier> <macro><name>decltype</name><argument_list>(<argument>pointer_traits&lt;_Pointer&gt;::to_address(declval&lt;const _Pointer&amp;&gt;())</argument>)</argument_list></macro>
<macro><name>__call</name><argument_list>(<argument>const _Pointer&amp;__p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<return>return <expr><name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>to_address</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Pointer</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name>
<specifier>auto</specifier></type> <name>to_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_Pointer</name><modifier>&amp;</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> noexcept <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__to_address</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
