<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/allocation_guard.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_ALLOCATION_GUARD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_ALLOCATION_GUARD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/allocator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>


<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>




















<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
struct <name>__allocation_guard</name> <block>{
<expr><name>using</name> <name>_Pointer</name> <operator>=</operator> <name>typename</name> <name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name></expr>;
<expr><name>using</name> <name>_Size</name> <operator>=</operator> <name>typename</name> <name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>size_type</name></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_AllocT</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>explicit</name> <macro><name>__allocation_guard</name><argument_list>(<argument>_AllocT __alloc</argument>, <argument>_Size __n</argument>)</argument_list></macro>
<operator>:</operator> <call><name>__alloc_</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__alloc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
, <expr><call><name>__n_</name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>
, <macro><name>__ptr_</name><argument_list>(<argument>allocator_traits&lt;_Alloc&gt;::allocate(__alloc_, __n_)</argument>)</argument_list></macro>
<expr><block>{ }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<operator>~</operator><macro><name>__allocation_guard</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<if_stmt><if>if <condition>(<expr><name>__ptr_</name> <operator>!=</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deallocate</name><argument_list>(<argument><expr><name>__alloc_</name></expr></argument>, <argument><expr><name>__ptr_</name></expr></argument>, <argument><expr><name>__n_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>_Pointer</name> <macro><name>__release_ptr</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<expr><name>_Pointer</name> <name>__tmp</name> <operator>=</operator> <name>__ptr_</name></expr>;
<expr><name>__ptr_</name> <operator>=</operator> <name>nullptr</name></expr>;
<return>return <expr><name>__tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>_Pointer</name> <macro><name>__get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{
<return>return <expr><name>__ptr_</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>_Alloc</name></type> <name>__alloc_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__n_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Pointer</name></type> <name>__ptr_</name></decl>;</decl_stmt>
};

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
