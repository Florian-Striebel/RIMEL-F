<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/inplace_merge.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_INPLACE_MERGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_INPLACE_MERGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/comp_ref_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/comp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/lower_bound.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/min.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/rotate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/upper_bound.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/swap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Predicate</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>__invert</name>
<block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>_Predicate</name></type> <name>__p_</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name></type> <name>__invert</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro>
<macro><name>explicit</name></macro> <macro><name>__invert</name><argument_list>(<argument>_Predicate __p</argument>)</argument_list></macro> : <macro><name>__p_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>)</operator> <block>{<return>return <expr><operator>!</operator><call><name>__p_</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T2</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <block>{<return>return <expr><call><name>__p_</name><argument_list>(<argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_InputIterator1</name></expr></argument>, <argument><expr><name>class</name> <name>_InputIterator2</name></expr></argument>,
<argument><expr><name>class</name> <name>_OutputIterator</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>__half_inplace_merge</name><parameter_list>(<parameter><decl><type><name>_InputIterator1</name></type> <name>__first1</name></decl></parameter>, <parameter><decl><type><name>_InputIterator1</name></type> <name>__last1</name></decl></parameter>,
<parameter><decl><type><name>_InputIterator2</name></type> <name>__first2</name></decl></parameter>, <parameter><decl><type><name>_InputIterator2</name></type> <name>__last2</name></decl></parameter>,
<parameter><decl><type><name>_OutputIterator</name></type> <name>__result</name></decl></parameter>, <parameter><decl><type><name>_Compare</name></type> <name>__comp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__first1</name> <operator>!=</operator> <name>__last1</name></expr>;</condition> <incr><expr><operator>++</operator><name>__result</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__first2</name> <operator>==</operator> <name>__last2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__first1</name></expr></argument>, <argument><expr><name>__last1</name></expr></argument>, <argument><expr><name>__result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__first2</name></expr></argument>, <argument><expr><operator>*</operator><name>__first1</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__result</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__first2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__first2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__result</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__first1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__first1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type>
<name>__buffered_inplace_merge</name><argument_list>(<argument><expr><name>_BidirectionalIterator</name> <name>__first</name></expr></argument>, <argument><expr><name>_BidirectionalIterator</name> <name>__middle</name></expr></argument>, <argument><expr><name>_BidirectionalIterator</name> <name>__last</name></expr></argument>,
<argument><expr><name>_Compare</name> <name>__comp</name></expr></argument>, <argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>__len1</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>__len2</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name><operator>*</operator> <name>__buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>__destruct_n</name></type> <name>__d</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>__destruct_n</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></type> <name>__h2</name><parameter_list>(<parameter><decl><type><name>__buff</name></type></decl></parameter>, <parameter><decl><type><name>__d</name></type></decl></parameter>)</parameter_list>;</function_decl>
<if_stmt><if>if <condition>(<expr><name>__len1</name> <operator>&lt;=</operator> <name>__len2</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>value_type</name><modifier>*</modifier></type> <name>__p</name> <init>= <expr><name>__buff</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>_BidirectionalIterator</name></type> <name>__i</name> <init>= <expr><name>__first</name></expr></init></decl>;</init> <condition><expr><name>__i</name> <operator>!=</operator> <name>__middle</name></expr>;</condition> <incr><expr><name><name>__d</name><operator>.</operator><name>template</name></name> <call><name><name>__incr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__i</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__p</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__half_inplace_merge</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__buff</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>value_type</name><modifier>*</modifier></type> <name>__p</name> <init>= <expr><name>__buff</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>_BidirectionalIterator</name></type> <name>__i</name> <init>= <expr><name>__middle</name></expr></init></decl>;</init> <condition><expr><name>__i</name> <operator>!=</operator> <name>__last</name></expr>;</condition> <incr><expr><name><name>__d</name><operator>.</operator><name>template</name></name> <call><name><name>__incr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__i</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__p</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<typedef>typedef <type><name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name></type> <name>_RBi</name>;</typedef>
<typedef>typedef <type><name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>_Rv</name>;</typedef>
<typedef>typedef <type><name><name>__invert</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name></type> <name>_Inverted</name>;</typedef>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__half_inplace_merge</name><argument_list type="generic">&lt;<argument><expr><name>_Inverted</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Rv</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Rv</name><argument_list>(<argument><expr><name>__buff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_RBi</name><argument_list>(<argument><expr><name>__middle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_RBi</name><argument_list>(<argument><expr><name>__first</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_RBi</name><argument_list>(<argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Inverted</name><argument_list>(<argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type>
<name>__inplace_merge</name><argument_list>(<argument><expr><name>_BidirectionalIterator</name> <name>__first</name></expr></argument>, <argument><expr><name>_BidirectionalIterator</name> <name>__middle</name></expr></argument>, <argument><expr><name>_BidirectionalIterator</name> <name>__last</name></expr></argument>,
<argument><expr><name>_Compare</name> <name>__comp</name></expr></argument>, <argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>__len1</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>__len2</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name><operator>*</operator> <name>__buff</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>__buff_size</name></expr></argument>)</argument_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<while>while <condition>(<expr><name>true</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>__len2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__len1</name> <operator>&lt;=</operator> <name>__buff_size</name> <operator>||</operator> <name>__len2</name> <operator>&lt;=</operator> <name>__buff_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__buffered_inplace_merge</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name>
<argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>, <argument><expr><name>__len1</name></expr></argument>, <argument><expr><name>__len2</name></expr></argument>, <argument><expr><name>__buff</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>true</name></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>--</operator><name>__len1</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__len1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__middle</name></expr></argument>, <argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>








<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__m1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__m2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__len11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__len21</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__len1</name> <operator>&lt;</operator> <name>__len2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__len21</name> <operator>=</operator> <name>__len2</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__m2</name> <operator>=</operator> <name>__middle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>advance</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>, <argument><expr><name>__len21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__m1</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__upper_bound</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><operator>*</operator><name>__m2</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__len11</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__len1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__middle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>__len11</name> <operator>=</operator> <name>__len1</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__m1</name> <operator>=</operator> <name>__first</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>advance</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__len11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__m2</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__lower_bound</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><operator>*</operator><name>__m1</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__len21</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__len12</name> <init>= <expr><name>__len1</name> <operator>-</operator> <name>__len11</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__len22</name> <init>= <expr><name>__len2</name> <operator>-</operator> <name>__len21</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>__middle</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>rotate</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>__len11</name> <operator>+</operator> <name>__len21</name> <operator>&lt;</operator> <name>__len12</name> <operator>+</operator> <name>__len22</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__inplace_merge</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>, <argument><expr><name>__len11</name></expr></argument>, <argument><expr><name>__len21</name></expr></argument>, <argument><expr><name>__buff</name></expr></argument>, <argument><expr><name>__buff_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>__first</name> <operator>=</operator> <name>__middle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__middle</name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__len1</name> <operator>=</operator> <name>__len12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__len2</name> <operator>=</operator> <name>__len22</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__inplace_merge</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>, <argument><expr><name>__len12</name></expr></argument>, <argument><expr><name>__len22</name></expr></argument>, <argument><expr><name>__buff</name></expr></argument>, <argument><expr><name>__buff_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>__last</name> <operator>=</operator> <name>__middle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__middle</name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__len1</name> <operator>=</operator> <name>__len11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__len2</name> <operator>=</operator> <name>__len21</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Compare</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type>
<name>inplace_merge</name><parameter_list>(<parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__middle</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__last</name></decl></parameter>,
<parameter><decl><type><name>_Compare</name></type> <name>__comp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__len1</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__len2</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__buf_size</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><name>__len1</name></expr></argument>, <argument><expr><name>__len2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name><modifier>*</modifier></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>&gt;</argument_list></name></type> <name>__buf</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name><name>get_temporary_buffer</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>__return_temporary_buffer</name></expr></argument>&gt;</argument_list></name></type> <name>__h</name><argument_list>(<argument><expr><name><name>__buf</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__comp_ref_type</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Comp_ref</name></expr>;</expr_stmt></typedef>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__inplace_merge</name><argument_list type="generic">&lt;<argument><expr><name>_Comp_ref</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>, <argument><expr><name>__len1</name></expr></argument>, <argument><expr><name>__len2</name></expr></argument>,
<argument><expr><name><name>__buf</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>__buf</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type>
<name>inplace_merge</name><parameter_list>(<parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__middle</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><macro><name>inplace_merge</name><argument_list>(<argument>__first</argument>, <argument>__middle</argument>, <argument>__last</argument>,
<argument>__less&lt;typename iterator_traits&lt;_BidirectionalIterator&gt;::value_type&gt;()</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></function>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
