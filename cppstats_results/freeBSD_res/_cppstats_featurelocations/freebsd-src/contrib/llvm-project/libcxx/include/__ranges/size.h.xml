<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__ranges/size.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___RANGES_SIZE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___RANGES_SIZE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/__decay_copy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>


<name>namespace</name></type> <name>ranges</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>constexpr</name> <name>bool</name></type> <name>disable_sized_range</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>__size</name> <block>{<block_content>
<decl_stmt><decl><type><name>void</name></type> <name>size</name><argument_list>(<argument><expr><name>auto</name><operator>&amp;</operator></expr></argument>)</argument_list> <init>= <expr><name>delete</name></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>delete</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__size_enabled</name> <init>= <expr><operator>!</operator><name><name>disable_sized_range</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__member_size</name> <init>= <expr><name><name>__size_enabled</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <macro><name>requires</name><argument_list>(<argument>_Tp&amp;&amp; __t</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><name>_VSTD</name><operator>::</operator><macro><name>__decay_copy</name><argument_list>(<argument>_VSTD::forward&lt;_Tp&gt;(__t).size()</argument>)</argument_list></macro></expr> }</block> <operator>-&gt;</operator> <name>__integer_like</name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__unqualified_size</name> <init>=
<expr><name><name>__size_enabled</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>__member_size</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>__class_or_enum</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Tp&amp;&amp; __t</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><name>_VSTD</name><operator>::</operator><macro><name>__decay_copy</name><argument_list>(<argument>size(_VSTD::forward&lt;_Tp&gt;(__t))</argument>)</argument_list></macro></expr> }</block> <operator>-&gt;</operator> <name>__integer_like</name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__difference</name> <init>=
<expr><operator>!</operator><name><name>__member_size</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>__unqualified_size</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>__class_or_enum</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Tp&amp;&amp; __t</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><name>ranges</name><operator>::</operator><macro><name>begin</name><argument_list>(<argument>__t</argument>)</argument_list></macro></expr> }</block> <operator>-&gt;</operator> <name>forward_iterator</name></expr>;
<expr><block>{ <expr><name>ranges</name><operator>::</operator><macro><name>end</name><argument_list>(<argument>__t</argument>)</argument_list></macro></expr> }</block> <operator>-&gt;</operator> <name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name>ranges</name><operator>::</operator><name>begin</name><operator>(</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>__fn</name> <block>{
<expr_stmt><expr><name><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name> <name>_Sz</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><call><name>_Tp</name> <argument_list>(<argument><expr><operator>&amp;&amp;</operator></expr></argument>)</argument_list></call><index>[<expr><name>_Sz</name></expr>]</index><operator>)</operator> <specifier>const</specifier> <name>noexcept</name> <block>{
<return>return <expr><name>_Sz</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name> <name>_Sz</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><call><name>_Tp</name> <argument_list>(<argument><expr><operator>&amp;</operator></expr></argument>)</argument_list></call><index>[<expr><name>_Sz</name></expr>]</index><operator>)</operator> <specifier>const</specifier> <name>noexcept</name> <block>{
<return>return <expr><name>_Sz</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>__member_size</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>__integer_like</name> <name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;&amp;</operator> <name>__t</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(_VSTD::forward&lt;_Tp&gt;(__t).size())</argument>)</argument_list></macro> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>__unqualified_size</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>__integer_like</name> <name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;&amp;</operator> <name>__t</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(size(_VSTD::forward&lt;_Tp&gt;(__t)))</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>size</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__difference</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>__integer_like</name> <name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;&amp;</operator> <name>__t</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(ranges::end(__t) - ranges::begin(__t))</argument>)</argument_list></macro> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__to_unsigned_like</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>namespace</name></type> <name>__cpo</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>inline</specifier> <name>constexpr</name> <specifier>auto</specifier></type> <name>size</name> <init>= <expr><name>__size</name><operator>::</operator><name>__fn</name><block>{}</block></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>__ssize</name> <block>{<block_content>
<struct>struct <name>__fn</name> <block>{
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>requires</name></type> <name>requires</name> <argument_list>(<argument><expr><name>_Tp</name><operator>&amp;&amp;</operator> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>integral</name> <name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;&amp;</operator> <name>__t</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(ranges::size(__t))</argument>)</argument_list></macro> <block>{
<expr><name>using</name> <name>_Signed</name> <operator>=</operator> <name><name>make_signed_t</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name>ranges</name><operator>::</operator><name>size</name><operator>(</operator><name>__t</name><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;
<if_stmt><if>if constexpr <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptrdiff_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Signed</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ptrdiff_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Signed</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>
}</block>;</struct>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>namespace</name></type> <name>__cpo</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>inline</specifier> <name>constexpr</name> <specifier>const</specifier> <specifier>auto</specifier></type> <name>ssize</name> <init>= <expr><name>__ssize</name><operator>::</operator><name>__fn</name><block>{}</block></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
