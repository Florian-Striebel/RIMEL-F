<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/stdlib.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__need_malloc_and_calloc</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:empty>#include_next &lt;stdlib.h&gt;</cpp:empty>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_STDLIB_H</name></cpp:macro></cpp:define>



































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:empty>#include_next &lt;stdlib.h&gt;</cpp:empty>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C++"</literal> <block>{<block_content>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>abs</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>labs</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>llabs</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_MSVCRT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><call><name>__builtin_labs</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>long</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><call><name>__builtin_llabs</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><call><name>__builtin_fabsf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>double</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><call><name>__builtin_fabs</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type>
<name>abs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><call><name>__builtin_fabsl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>div</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ldiv</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lldiv</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_MSVCRT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>ldiv_t</name></type> <name>div</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>ldiv</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>lldiv_t</name></type> <name>div</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__x</name></decl></parameter>,
<parameter><decl><type><name>long</name> <name>long</name></type> <name>__y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>lldiv</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
