<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__ranges/view_interface.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___RANGES_VIEW_INTERFACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___RANGES_VIEW_INTERFACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/prev.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/pointer_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/empty.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/enable_view.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>namespace</name></type> <name>ranges</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__can_empty</name> <init>= <macro><name>requires</name><argument_list>(<argument>_Tp __t</argument>)</argument_list></macro> <expr><block>{ <expr><name>ranges</name><operator>::</operator><call><name>empty</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>; }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>__implicitly_convert_to</name><argument_list>(<argument><expr><name><name>type_identity_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> <name>noexcept</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>is_class_v</name><argument_list type="generic">&lt;<argument><expr><name>_Derived</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Derived</name></expr></argument>, <argument><expr><name><name>remove_cv_t</name><argument_list type="generic">&lt;<argument><expr><name>_Derived</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>view_interface</name> <operator>:</operator> <name>public</name> <name>view_base</name> <block>{
<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_Derived</name><operator>&amp;</operator> <macro><name>__derived</name><argument_list>()</argument_list></macro> <name>noexcept</name> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Derived</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_Derived</name> <specifier>const</specifier><operator>&amp;</operator> <macro><name>__derived</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Derived</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<name><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(__implicitly_convert_to&lt;bool&gt;(ranges::begin(__derived()) == ranges::end(__derived())))</argument>)</argument_list></macro>
<name>requires</name> <name><name>forward_range</name><argument_list type="generic">&lt;<argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(__implicitly_convert_to&lt;bool&gt;(ranges::begin(__derived()) == ranges::end(__derived())))</argument>)</argument_list></macro>
<name>requires</name> <name><name>forward_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_D2</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(ranges::empty(declval&lt;_D2&gt;()))</argument>)</argument_list></macro>
<name>requires</name> <name><name>__can_empty</name><argument_list type="generic">&lt;<argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><operator>!</operator><name>ranges</name><operator>::</operator><call><name>empty</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(ranges::empty(declval&lt;const _D2&gt;()))</argument>)</argument_list></macro>
<name>requires</name> <name><name>__can_empty</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_D2</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><operator>!</operator><name>ranges</name><operator>::</operator><call><name>empty</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>data</name><argument_list>()</argument_list></macro>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(_VSTD::to_address(ranges::begin(__derived())))</argument>)</argument_list></macro>
<name>requires</name> <name><name>contiguous_iterator</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>to_address</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(_VSTD::to_address(ranges::begin(__derived())))</argument>)</argument_list></macro>
<name>requires</name> <name><name>range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_D2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>contiguous_iterator</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_D2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>to_address</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>size</name><argument_list>()</argument_list></macro>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(ranges::end(__derived()) - ranges::begin(__derived()))</argument>)</argument_list></macro>
<name>requires</name> <name><name>forward_range</name><argument_list type="generic">&lt;<argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name>
<operator>&amp;&amp;</operator> <name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(ranges::end(__derived()) - ranges::begin(__derived()))</argument>)</argument_list></macro>
<name>requires</name> <name><name>forward_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_D2</name></expr></argument>&gt;</argument_list></name>
<operator>&amp;&amp;</operator> <name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_D2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_D2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <macro><name>front</name><argument_list>()</argument_list></macro>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(*ranges::begin(__derived()))</argument>)</argument_list></macro>
<name>requires</name> <name><name>forward_range</name><argument_list type="generic">&lt;<argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Precondition `!empty()` not satisfied. `.front()` called on an empty view."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <macro><name>front</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(*ranges::begin(__derived()))</argument>)</argument_list></macro>
<name>requires</name> <name><name>forward_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_D2</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Precondition `!empty()` not satisfied. `.front()` called on an empty view."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <macro><name>back</name><argument_list>()</argument_list></macro>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(*ranges::prev(ranges::end(__derived())))</argument>)</argument_list></macro>
<name>requires</name> <name><name>bidirectional_range</name><argument_list type="generic">&lt;<argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>common_range</name><argument_list type="generic">&lt;<argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Precondition `!empty()` not satisfied. `.back()` called on an empty view."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>ranges</name><operator>::</operator><call><name>prev</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_D2</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <macro><name>back</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(*ranges::prev(ranges::end(__derived())))</argument>)</argument_list></macro>
<name>requires</name> <name><name>bidirectional_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_D2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>common_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_D2</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Precondition `!empty()` not satisfied. `.back()` called on an empty view."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>ranges</name><operator>::</operator><call><name>prev</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>random_access_range</name> <name>_RARange</name> <operator>=</operator> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <name><name>operator</name><index>[]</index></name><operator>(</operator><name><name>range_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_RARange</name></expr></argument>&gt;</argument_list></name> <name>__index</name><operator>)</operator>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(ranges::begin(__derived())[__index])</argument>)</argument_list></macro>
<block>{
<return>return <expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><name>__index</name></expr>]</index></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>random_access_range</name> <name>_RARange</name> <operator>=</operator> <specifier>const</specifier> <name>_Derived</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <name><name>operator</name><index>[]</index></name><operator>(</operator><name><name>range_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_RARange</name></expr></argument>&gt;</argument_list></name> <name>__index</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(ranges::begin(__derived())[__index])</argument>)</argument_list></macro>
<block>{
<return>return <expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><call><name>__derived</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><name>__index</name></expr>]</index></expr>;</return>
}</block>
}</expr>;

}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>_LIBCPP_END_NAMESPACE_STD</name>

<name>_LIBCPP_POP_MACROS</name></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
