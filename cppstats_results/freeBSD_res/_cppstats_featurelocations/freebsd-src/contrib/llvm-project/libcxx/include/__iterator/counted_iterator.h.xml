<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/counted_iterator.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_COUNTED_ITERATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_COUNTED_ITERATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__debug&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/default_sentinel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iter_move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iter_swap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/incrementable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/readable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/pointer_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
struct <name>__counted_iterator_concept</name> <block>{}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>requires</name></type> <name>requires</name> <block>{<block_content> <expr_stmt><expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>iterator_concept</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<struct>struct <name><name>__counted_iterator_concept</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>iterator_concept</name> <init>= <expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>iterator_concept</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name><operator>&gt;</operator>
struct <name>__counted_iterator_category</name> <block>{}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>requires</name></type> <name>requires</name> <block>{<block_content> <expr_stmt><expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>iterator_category</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<struct>struct <name><name>__counted_iterator_category</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>iterator_category</name> <init>= <expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>iterator_category</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name><operator>&gt;</operator>
struct <name>__counted_iterator_value_type</name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>indirectly_readable</name> <name>_Iter</name><operator>&gt;</operator>
struct <name><name>__counted_iterator_value_type</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>input_or_output_iterator</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>counted_iterator</name>
<range>: <expr><name>public</name> <name><name>__counted_iterator_concept</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></range></decl>
, <decl><type ref="prev"/><name>public</name> <name><name>__counted_iterator_category</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></decl>
, <decl><type ref="prev"/><name>public</name> <name><name>__counted_iterator_value_type</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><index>[<expr><index>[<expr><name>no_unique_address</name></expr>]</index></expr>]</index> <name>_Iter</name> <name>__current_</name> <operator>=</operator> <call><name>_Iter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></type> <name>__count_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>iterator_type</name> <init>= <expr><name>_Iter</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>difference_type</name> <init>= <expr><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>counted_iterator</name><argument_list>()</argument_list></macro> <name>requires</name> <name><name>default_initializable</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>_LIBCPP_HIDE_FROM_ABI</name></macro>
<macro><name>constexpr</name></macro> <macro><name>counted_iterator</name><argument_list>(<argument>_Iter __iter</argument>, <argument>iter_difference_t&lt;_Iter&gt; __n</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>__current_</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>__count_</name><argument_list>(<argument>__n</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"__n must not be negative."</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_I2</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <call><name>counted_iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>counted_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>__current_</name><argument_list>(<argument><expr><name><name>__other</name><operator>.</operator><name>__current_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>__count_</name><argument_list>(<argument>__other.__count_</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>assignable_from</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>_I2</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>counted_iterator</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name><name>counted_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__other</name><operator>)</operator> <block>{
<expr><name>__current_</name> <operator>=</operator> <name><name>__other</name><operator>.</operator><name>__current_</name></name></expr>;
<expr><name>__count_</name> <operator>=</operator> <name><name>__other</name><operator>.</operator><name>__count_</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <specifier>const</specifier> <name>_Iter</name><operator>&amp;</operator> <macro><name>base</name><argument_list>()</argument_list></macro> <specifier>const</specifier><operator>&amp;</operator> <block>{ <return>return <expr><name>__current_</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_Iter</name> <call><name>base</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__current_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <macro><name>count</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>__count_</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name></type> <name>decltype</name><argument_list>(<argument><expr><name>auto</name></expr></argument>)</argument_list> <name>operator</name><modifier>*</modifier><argument_list>()</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__count_</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Iterator is equal to or past end."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>__current_</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name></type> <name>decltype</name><argument_list>(<argument><expr><name>auto</name></expr></argument>)</argument_list> <name>operator</name><modifier>*</modifier><argument_list>()</argument_list> const
<name>requires</name> <name><name>__dereferenceable</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__count_</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Iterator is equal to or past end."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>__current_</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const noexcept
requires contiguous_iterator&lt;_Iter&gt;
<block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>to_address</name><argument_list>(<argument><expr><name>__current_</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

_LIBCPP_HIDE_FROM_ABI
constexpr counted_iterator&amp; operator++(</block></decl>) <block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__count_</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Iterator already at or past end."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__current_</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>__count_</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl_stmt>

<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name></type>
<name>decltype</name><argument_list>(<argument><expr><name>auto</name></expr></argument>)</argument_list> <name>operator</name>++<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__count_</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Iterator already at or past end."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>__count_</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>try</name></macro> <block>{<block_content> <return>return <expr><name>__current_</name><operator>++</operator></expr>;</return> </block_content>}</block>
<macro><name>catch</name><argument_list>(<argument>...</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><operator>++</operator><name>__count_</name></expr>;</expr_stmt> <expr_stmt><expr><name>throw</name></expr>;</expr_stmt> </block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>__current_</name><operator>++</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>counted_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator>
<name>requires</name> <name><name>forward_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__count_</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Iterator already at or past end."</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>counted_iterator</name> <name>__tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><operator>++</operator><operator>*</operator><name>this</name></expr>;
<return>return <expr><name>__tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>counted_iterator</name><operator>&amp;</operator> <name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator>
<name>requires</name> <name><name>bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><operator>--</operator><name>__current_</name></expr>;
<expr><operator>++</operator><name>__count_</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>counted_iterator</name> <name>operator</name><operator>--</operator><operator>(</operator><name>int</name><operator>)</operator>
<name>requires</name> <name><name>bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>counted_iterator</name> <name>__tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><operator>--</operator><operator>*</operator><name>this</name></expr>;
<return>return <expr><name>__tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>counted_iterator</name> <name>operator</name><operator>+</operator><operator>(</operator><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>__n</name><operator>)</operator> <specifier>const</specifier>
<name>requires</name> <name><name>random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><call><name>counted_iterator</name><argument_list>(<argument><expr><name>__current_</name> <operator>+</operator> <name>__n</name></expr></argument>, <argument><expr><name>__count_</name> <operator>-</operator> <name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>counted_iterator</name> <name>operator</name><operator>+</operator><operator>(</operator>
<name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>__n</name><operator>,</operator> <specifier>const</specifier> <name>counted_iterator</name><operator>&amp;</operator> <name>__x</name><operator>)</operator>
<name>requires</name> <name><name>random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>__x</name> <operator>+</operator> <name>__n</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>counted_iterator</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>__n</name><operator>)</operator>
<name>requires</name> <name><name>random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__n</name> <operator>&lt;=</operator> <name>__count_</name></expr></argument>, <argument><expr><literal type="string">"Cannot advance iterator past end."</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>__current_</name> <operator>+=</operator> <name>__n</name></expr>;
<expr><name>__count_</name> <operator>-=</operator> <name>__n</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>counted_iterator</name> <name>operator</name><operator>-</operator><operator>(</operator><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>__n</name><operator>)</operator> <specifier>const</specifier>
<name>requires</name> <name><name>random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><call><name>counted_iterator</name><argument_list>(<argument><expr><name>__current_</name> <operator>-</operator> <name>__n</name></expr></argument>, <argument><expr><name>__count_</name> <operator>+</operator> <name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>common_with</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name> <name>operator</name><operator>-</operator><operator>(</operator>
<specifier>const</specifier> <name>counted_iterator</name><operator>&amp;</operator> <name>__lhs</name><operator>,</operator> <specifier>const</specifier> <name><name>counted_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__rhs</name><operator>)</operator>
<block>{
<return>return <expr><name><name>__rhs</name><operator>.</operator><name>__count_</name></name> <operator>-</operator> <name><name>__lhs</name><operator>.</operator><name>__count_</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>operator</name><operator>-</operator><operator>(</operator>
<specifier>const</specifier> <name>counted_iterator</name><operator>&amp;</operator> <name>__lhs</name><operator>,</operator> <name>default_sentinel_t</name><operator>)</operator>
<block>{
<return>return <expr><operator>-</operator><name><name>__lhs</name><operator>.</operator><name>__count_</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>operator</name><operator>-</operator><operator>(</operator>
<name>default_sentinel_t</name><operator>,</operator> <specifier>const</specifier> <name>counted_iterator</name><operator>&amp;</operator> <name>__rhs</name><operator>)</operator>
<block>{
<return>return <expr><name><name>__rhs</name><operator>.</operator><name>__count_</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>counted_iterator</name><operator>&amp;</operator> <name>operator</name><operator>-=</operator><operator>(</operator><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>__n</name><operator>)</operator>
<name>requires</name> <name><name>random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>-</operator><name>__n</name> <operator>&lt;=</operator> <name>__count_</name></expr></argument>, <argument><expr><literal type="string">"Attempt to subtract too large of a size: "</literal>
<literal type="string">"counted_iterator would be decremented before the "</literal>
<literal type="string">"first element of its range."</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>__current_</name> <operator>-=</operator> <name>__n</name></expr>;
<expr><name>__count_</name> <operator>+=</operator> <name>__n</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name></type> <name>decltype</name><argument_list>(<argument><expr><name>auto</name></expr></argument>)</argument_list> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>__n</name></expr></argument>)</argument_list> const
<name>requires</name> <name><name>random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__n</name> <operator>&lt;</operator> <name>__count_</name></expr></argument>, <argument><expr><literal type="string">"Subscript argument must be less than size."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>__current_</name><index>[<expr><name>__n</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>common_with</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator>
<specifier>const</specifier> <name>counted_iterator</name><operator>&amp;</operator> <name>__lhs</name><operator>,</operator> <specifier>const</specifier> <name><name>counted_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__rhs</name><operator>)</operator>
<block>{
<return>return <expr><name><name>__lhs</name><operator>.</operator><name>__count_</name></name> <operator>==</operator> <name><name>__rhs</name><operator>.</operator><name>__count_</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator>
<specifier>const</specifier> <name>counted_iterator</name><operator>&amp;</operator> <name>__lhs</name><operator>,</operator> <name>default_sentinel_t</name><operator>)</operator>
<block>{
<return>return <expr><name><name>__lhs</name><operator>.</operator><name>__count_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>common_with</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>constexpr</name> <name>strong_ordering</name> <name>operator</name><operator>&lt;=</operator><operator>&gt;</operator><operator>(</operator>
<specifier>const</specifier> <name>counted_iterator</name><operator>&amp;</operator> <name>__lhs</name><operator>,</operator> <specifier>const</specifier> <name><name>counted_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__rhs</name><operator>)</operator>
<block>{
<return>return <expr><name><name>__rhs</name><operator>.</operator><name>__count_</name></name> <operator>&lt;=</operator><operator>&gt;</operator> <name><name>__lhs</name><operator>.</operator><name>__count_</name></name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name><name>iter_rvalue_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></type> <name>iter_move</name><argument_list>(<argument><expr><specifier>const</specifier> <name>counted_iterator</name><operator>&amp;</operator> <name>__i</name></expr></argument>)</argument_list>
<name>noexcept</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>iter_move</name><argument_list>(<argument><expr><name><name>__i</name><operator>.</operator><name>__current_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>requires</name> <name><name>input_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name><name>__i</name><operator>.</operator><name>__count_</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Iterator must not be past end of range."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ranges</name><operator>::</operator><call><name>iter_move</name><argument_list>(<argument><expr><name><name>__i</name><operator>.</operator><name>__current_</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>indirectly_swappable</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>void</name></type> <name>iter_swap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>counted_iterator</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>counted_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__y</name></decl></parameter>)</parameter_list>
noexcept<parameter_list>(<parameter><decl/></parameter></parameter_list>noexcept<parameter_list>(<parameter><decl/></parameter></parameter_list>ranges::iter_swap<parameter_list>(<parameter><decl><type><name><name>__x</name><operator>.</operator><name>__current_</name></name></type></decl></parameter>, <parameter><decl><type><name><name>__y</name><operator>.</operator><name>__current_</name></name></type></decl></parameter>)</parameter_list></function>))
<block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__count_</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>__y</name><operator>.</operator><name>__count_</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Iterators must not be past end of range."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ranges</name><operator>::</operator><call><name>iter_swap</name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__current_</name></name></expr></argument>, <argument><expr><name><name>__y</name><operator>.</operator><name>__current_</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
};

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>input_iterator</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>_ITER_TRAITS</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
struct <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name><name>counted_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>pointer</name> <operator>=</operator> <name><name>conditional_t</name><argument_list type="generic">&lt;<argument><expr><name><name>contiguous_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>add_pointer_t</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
