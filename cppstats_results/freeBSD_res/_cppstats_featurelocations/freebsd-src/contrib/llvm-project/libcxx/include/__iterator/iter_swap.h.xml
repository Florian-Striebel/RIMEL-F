<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/iter_swap.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_ITER_SWAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_ITER_SWAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iter_move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/readable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>namespace</name></type> <name>ranges</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>__iter_swap</name> <block>{<block_content>
<function_decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_I1</name></expr></argument>, <argument><expr><name>class</name> <name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>iter_swap</name><parameter_list>(<parameter><decl><type><name>_I1</name></type></decl></parameter>, <parameter><decl><type><name>_I2</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>delete</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__unqualified_iter_swap</name> <init>= <macro><name>requires</name><argument_list>(<argument>_T1&amp;&amp; __x</argument>, <argument>_T2&amp;&amp; __y</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>iter_swap</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__readable_swappable</name> <init>=
<expr><name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>swappable_with</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<struct>struct <name>__fn</name> <block>{
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>__unqualified_iter_swap</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__x</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(iter_swap(_VSTD::forward&lt;_T1&gt;(__x), _VSTD::forward&lt;_T2&gt;(__y)))</argument>)</argument_list></macro>
<block>{
<expr><operator>(</operator><name>void</name><operator>)</operator><call><name>iter_swap</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<call><name>requires</name> <argument_list>(<argument><expr><operator>!</operator><name><name>__unqualified_iter_swap</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>__readable_swappable</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__x</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(ranges::swap(*_VSTD::forward&lt;_T1&gt;(__x), *_VSTD::forward&lt;_T2&gt;(__y)))</argument>)</argument_list></macro>
<block>{
<expr><name>ranges</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<call><name>requires</name> <argument_list>(<argument><expr><operator>!</operator><name><name>__unqualified_iter_swap</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>__readable_swappable</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>indirectly_movable_storable</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>indirectly_movable_storable</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__x</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(iter_value_t&lt;_T2&gt;(ranges::iter_move(__y))) &amp;&amp;
noexcept(*__y = ranges::iter_move(__x)) &amp;&amp;
noexcept(*_VSTD::forward&lt;_T1&gt;(__x) = declval&lt;iter_value_t&lt;_T2&gt;&gt;())</argument>)</argument_list></macro>
<block>{
<expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name> <call><name>__old</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>iter_move</name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>*</operator><name>__y</name> <operator>=</operator> <name>ranges</name><operator>::</operator><call><name>iter_move</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__old</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
}</block>;</struct>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>namespace</name></type> <name>__cpo</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>inline</specifier> <name>constexpr</name> <specifier>auto</specifier></type> <name>iter_swap</name> <init>= <expr><name>__iter_swap</name><operator>::</operator><name>__fn</name><block>{}</block></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_I1</name></expr></argument>, <argument><expr><name>class</name> <name>_I2</name> <operator>=</operator> <name>_I1</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirectly_swappable</name> <init>=
<expr><name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_I1</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>const _I1 __i1</argument>, <argument>const _I2 __i2</argument>)</argument_list></macro> <block>{
<expr><name>ranges</name><operator>::</operator><call><name>iter_swap</name><argument_list>(<argument><expr><name>__i1</name></expr></argument>, <argument><expr><name>__i1</name></expr></argument>)</argument_list></call></expr>;
<expr><name>ranges</name><operator>::</operator><call><name>iter_swap</name><argument_list>(<argument><expr><name>__i2</name></expr></argument>, <argument><expr><name>__i2</name></expr></argument>)</argument_list></call></expr>;
<expr><name>ranges</name><operator>::</operator><call><name>iter_swap</name><argument_list>(<argument><expr><name>__i1</name></expr></argument>, <argument><expr><name>__i2</name></expr></argument>)</argument_list></call></expr>;
<expr><name>ranges</name><operator>::</operator><call><name>iter_swap</name><argument_list>(<argument><expr><name>__i2</name></expr></argument>, <argument><expr><name>__i1</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
