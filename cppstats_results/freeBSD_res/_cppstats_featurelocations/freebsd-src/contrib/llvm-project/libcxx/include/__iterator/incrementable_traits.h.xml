<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/incrementable_traits.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_INCREMENTABLE_TRAITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_INCREMENTABLE_TRAITS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>


<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>&gt;</argument_list></name> struct <name>incrementable_traits</name> <block>{}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>is_object_v</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name>ptrdiff_t</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Ip</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__has_member_difference_type</name> <init>= <expr><name>requires</name> <block>{ <expr><name>typename</name> <name>_Tp</name><operator>::</operator><name>difference_type</name></expr>; }</block></expr></init></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__has_member_difference_type</name> <name>_Tp</name><operator>&gt;</operator>
struct <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name>typename</name> <name>_Tp</name><operator>::</operator><name>difference_type</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__has_integral_minus</name> <init>=
<macro><name>requires</name><argument_list>(<argument>const _Tp&amp; __x</argument>, <argument>const _Tp&amp; __y</argument>)</argument_list></macro> <expr><block>{
<expr><block>{ <expr><name>__x</name> <operator>-</operator> <name>__y</name></expr> }</block> <operator>-&gt;</operator> <name>integral</name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__has_integral_minus</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>requires</name> <argument_list>(<argument><expr><operator>!</operator><name><name>__has_member_difference_type</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list>
struct <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>difference_type</name> <init>= <expr><name><name>make_signed_t</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator> <operator>-</operator> <name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name><operator>&gt;</operator>
struct <name>iterator_traits</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>iter_difference_t</name> <init>= <expr><name>typename</name> <name><name>conditional_t</name><argument_list type="generic">&lt;<argument><expr><name><name>__is_primary_template</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>difference_type</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
