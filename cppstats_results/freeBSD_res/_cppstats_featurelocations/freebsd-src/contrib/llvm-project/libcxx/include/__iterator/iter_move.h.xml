<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/iter_move.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_ITER_MOVE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_ITER_MOVE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>namespace</name> <name>ranges</name><operator>::</operator><name>__iter_move</name> <block>{
<expr><name>void</name> <call><name>iter_move</name><argument_list>()</argument_list></call></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name> <name>__unqualified_iter_move</name> <operator>=</operator> <macro><name>requires</name><argument_list>(<argument>_Ip&amp;&amp; __i</argument>)</argument_list></macro> <block>{
<expr><call><name>iter_move</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr>;





struct <expr><name>__fn</name> <block>{



<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>__class_or_enum</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name><name>__unqualified_iter_move</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Ip</name><operator>&amp;&amp;</operator> <name>__i</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(iter_move(_VSTD::forward&lt;_Ip&gt;(__i)))</argument>)</argument_list></macro>
<block>{
<return>return <expr><call><name>iter_move</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
}</block>





<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<call><name>requires</name> <argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>__class_or_enum</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>__unqualified_iter_move</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Ip&amp;&amp; __i</argument>)</argument_list></macro> <block>{ <expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>; }</block>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Ip</name><operator>&amp;&amp;</operator> <name>__i</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(*_VSTD::forward&lt;_Ip&gt;(__i))</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if constexpr <condition>(<expr><name><name>is_lvalue_reference_v</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><operator>*</operator><name>_VSTD</name><operator>::</operator><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>(</operator><name>__i</name><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr> <if_stmt><else>else <block>{<block_content>
<return>return <expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></else></if_stmt>}</block></expr></expr_stmt>
}



}<empty_stmt>;</empty_stmt>
}

namespace <expr_stmt><expr><name>ranges</name><operator>::</operator><specifier>inline</specifier> <name>__cpo</name> <block>{
<expr><specifier>inline</specifier> <name>constexpr</name> <name>auto</name> <name>iter_move</name> <operator>=</operator> <name>__iter_move</name><operator>::</operator><name>__fn</name><block>{}</block></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__dereferenceable</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <macro><name>requires</name><argument_list>(<argument>_Tp&amp; __t</argument>)</argument_list></macro> <block>{ <expr><block>{ <expr><name>ranges</name><operator>::</operator><macro><name>iter_move</name><argument_list>(<argument>__t</argument>)</argument_list></macro></expr> }</block> <operator>-&gt;</operator> <name>__referenceable</name></expr>; }</block>
<name>using</name> <name>iter_rvalue_reference_t</name> <operator>=</operator> <call><name>decltype</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>iter_move</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
