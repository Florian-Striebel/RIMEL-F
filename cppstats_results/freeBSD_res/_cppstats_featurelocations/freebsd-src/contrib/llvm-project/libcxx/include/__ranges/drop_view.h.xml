<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__ranges/drop_view.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___RANGES_DROP_VIEW_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___RANGES_DROP_VIEW_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/next.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/all.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/enable_borrowed_range.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/non_propagating_cache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/size.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/view_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>namespace</name></type> <name>ranges</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>view</name> <name>_View</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>drop_view</name>
<range>: <expr><name>public</name> <name><name>view_interface</name><argument_list type="generic">&lt;<argument><expr><name><name>drop_view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{





<expr><specifier>static</specifier> <name>constexpr</name> <name>bool</name> <name>_UseCache</name> <operator>=</operator> <name><name>forward_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name><operator>)</operator></expr>;
<expr><name>using</name> <name>_Cache</name> <operator>=</operator> <name><name>_If</name><argument_list type="generic">&lt;<argument><expr><name>_UseCache</name></expr></argument>, <argument><expr><name><name>__non_propagating_cache</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>__empty_cache</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><index>[<expr><index>[<expr><name>no_unique_address</name></expr>]</index></expr>]</index> <name>_Cache</name> <name>__cached_begin_</name> <operator>=</operator> <call><name>_Cache</name><argument_list>()</argument_list></call></expr>;
<expr><name><name>range_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <name>__count_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>_View</name> <name>__base_</name> <operator>=</operator> <call><name>_View</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>drop_view</name><argument_list>()</argument_list></macro> <name>requires</name> <name><name>default_initializable</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <operator>=</operator> default</expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>drop_view</name><argument_list>(<argument>_View __base</argument>, <argument>range_difference_t&lt;_View&gt; __count</argument>)</argument_list></macro>
<operator>:</operator> <call><name>__count_</name><argument_list>(<argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>
, <macro><name>__base_</name><argument_list>(<argument>_VSTD::move(__base)</argument>)</argument_list></macro>
<expr><block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__count_</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"count must be greater than or equal to zero."</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>_View</name> <macro><name>base</name><argument_list>()</argument_list></macro> <specifier>const</specifier><operator>&amp;</operator> <name>requires</name> <name><name>copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <block>{ <return>return <expr><name>__base_</name></expr>;</return> }</block>
<name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>_View</name> <call><name>base</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>begin</name><argument_list>()</argument_list></macro>
<macro><name>requires</name> <argument_list>(<argument>!(__simple_view&lt;_View&gt; &amp;&amp;
random_access_range&lt;const _View&gt; &amp;&amp; sized_range&lt;const _View&gt;)</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if constexpr <condition>(<expr><name>_UseCache</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>__cached_begin_</name><operator>.</operator><name>__has_value</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>__cached_begin_</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<name>auto</name> <name>__tmp</name> <operator>=</operator> <name>ranges</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__count_</name></expr></argument>, <argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
<if_stmt><if>if constexpr <condition>(<expr><name>_UseCache</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__cached_begin_</name><operator>.</operator><name>__set</name></name><argument_list>(<argument><expr><name>__tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
<return>return <expr><name>__tmp</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>ranges</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__count_</name></expr></argument>, <argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <specifier>auto</specifier></type> <name>end</name><parameter_list>()</parameter_list>
requires <parameter_list>(</parameter_list>!__simple_view&lt;_View&gt;</function>)
<block>{<block_content> <return>return <expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<name>requires</name> <name><name>range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name>
<block>{ <return>return <expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<specifier>static</specifier> <name>constexpr</name> <specifier>auto</specifier></type> <name>__size</name><argument_list>(<argument><expr><name>auto</name><operator>&amp;</operator> <name>__self</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>__s</name> <init>= <expr><name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name><name>__self</name><operator>.</operator><name>__base_</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>__c</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name>__s</name><operator>)</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__self</name><operator>.</operator><name>__count_</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>__s</name> <operator>&lt;</operator> <name>__c</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>__s</name> <operator>-</operator> <name>__c</name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>size</name><argument_list>()</argument_list></macro>
<name>requires</name> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name>
<block>{ <return>return <expr><call><name>__size</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<name>requires</name> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name>
<block>{ <return>return <expr><call><name>__size</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
};

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Range</name></expr></argument>&gt;</argument_list></name></type>
<name>drop_view</name><argument_list>(<argument><expr><name>_Range</name><operator>&amp;&amp;</operator></expr></argument>, <argument><expr><name><name>range_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> -&gt; <name><name>drop_view</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name><name>all_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>constexpr</name> <name>bool</name></type> <name><name>enable_borrowed_range</name><argument_list type="generic">&lt;<argument><expr><name><name>drop_view</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <init>= <expr><name><name>enable_borrowed_range</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

_LIBCPP_END_NAMESPACE_STD

<expr><name>_LIBCPP_POP_MACROS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
