<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/ranges_operations.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_RANGES_OPERATIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_RANGES_OPERATIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>namespace</name></type> <name>ranges</name> <block>{<block_content>

<struct>struct <name>equal_to</name> <block>{
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name><name>equality_comparable_with</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>constexpr</name> <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <operator>&amp;&amp;</operator><name>__t</name><operator>,</operator> <name>_Up</name> <operator>&amp;&amp;</operator><name>__u</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(bool(_VSTD::forward&lt;_Tp&gt;(__t) == _VSTD::forward&lt;_Up&gt;(__u)))</argument>)</argument_list></macro> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>is_transparent</name> <init>= <expr><name>void</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>not_equal_to</name> <block>{
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name><name>equality_comparable_with</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>constexpr</name> <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <operator>&amp;&amp;</operator><name>__t</name><operator>,</operator> <name>_Up</name> <operator>&amp;&amp;</operator><name>__u</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(bool(!(_VSTD::forward&lt;_Tp&gt;(__t) == _VSTD::forward&lt;_Up&gt;(__u))))</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>is_transparent</name> <init>= <expr><name>void</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>less</name> <block>{
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name><name>totally_ordered_with</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>constexpr</name> <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <operator>&amp;&amp;</operator><name>__t</name><operator>,</operator> <name>_Up</name> <operator>&amp;&amp;</operator><name>__u</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(bool(_VSTD::forward&lt;_Tp&gt;(__t) &lt; _VSTD::forward&lt;_Up&gt;(__u)))</argument>)</argument_list></macro> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>is_transparent</name> <init>= <expr><name>void</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>less_equal</name> <block>{
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name><name>totally_ordered_with</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>constexpr</name> <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <operator>&amp;&amp;</operator><name>__t</name><operator>,</operator> <name>_Up</name> <operator>&amp;&amp;</operator><name>__u</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(bool(!(_VSTD::forward&lt;_Up&gt;(__u) &lt; _VSTD::forward&lt;_Tp&gt;(__t))))</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>is_transparent</name> <init>= <expr><name>void</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>greater</name> <block>{
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name><name>totally_ordered_with</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>constexpr</name> <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <operator>&amp;&amp;</operator><name>__t</name><operator>,</operator> <name>_Up</name> <operator>&amp;&amp;</operator><name>__u</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(bool(_VSTD::forward&lt;_Up&gt;(__u) &lt; _VSTD::forward&lt;_Tp&gt;(__t)))</argument>)</argument_list></macro> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>is_transparent</name> <init>= <expr><name>void</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>greater_equal</name> <block>{
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name><name>totally_ordered_with</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name>
<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index></name> <name>constexpr</name> <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <operator>&amp;&amp;</operator><name>__t</name><operator>,</operator> <name>_Up</name> <operator>&amp;&amp;</operator><name>__u</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(bool(!(_VSTD::forward&lt;_Tp&gt;(__t) &lt; _VSTD::forward&lt;_Up&gt;(__u))))</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>is_transparent</name> <init>= <expr><name>void</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
