<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/shared_ptr.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_SHARED_PTR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_SHARED_PTR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__availability&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional_base&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/binary_function.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/operations.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/reference_wrapper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/addressof.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/allocation_guard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/allocator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/allocator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/compressed_pair.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/pointer_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/unique_ptr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iosfwd&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;typeinfo&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_ATOMIC_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/auto_ptr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>__allocator_destructor</name>
<block>{<block_content>
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name>__alloc_traits</name><operator>::</operator><name>pointer</name> <name>pointer</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name>__alloc_traits</name><operator>::</operator><name>size_type</name> <name>size_type</name></expr>;</expr_stmt></typedef>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>_Alloc</name><modifier>&amp;</modifier></type> <name>__alloc_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_type</name></type> <name>__s_</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name></type> <name>__allocator_destructor</name><argument_list>(<argument><expr><name>_Alloc</name><operator>&amp;</operator> <name>__a</name></expr></argument>, <argument><expr><name>size_type</name> <name>__s</name></expr></argument>)</argument_list>
<name>_NOEXCEPT</name>
<range>: <expr><call><name>__alloc_</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></range></decl>, <decl><type ref="prev"/><name>__s_</name><argument_list>(<argument><expr><name>__s</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>pointer</name> <name>__p</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{<expr><name>__alloc_traits</name><operator>::</operator><call><name>deallocate</name><argument_list>(<argument><expr><name>__alloc_</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__s_</name></expr></argument>)</argument_list></call></expr>;}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_builtin</name><argument_list>(<argument><expr><name>__atomic_add_fetch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_ACQ_REL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_COMPILER_GCC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ValueType</name></type> <name>__libcpp_relaxed_load</name><parameter_list>(<parameter><decl><type><name>_ValueType</name> <specifier>const</specifier><modifier>*</modifier></type> <name>__value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_THREADS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__atomic_load_n</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_COMPILER_GCC</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>


<return>return <expr><call><name>__atomic_load_n</name><argument_list>(<argument><expr><name>__value</name></expr></argument>, <argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>*</operator><name>__value</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ValueType</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ValueType</name></type> <name>__libcpp_acquire_load</name><parameter_list>(<parameter><decl><type><name>_ValueType</name> <specifier>const</specifier><modifier>*</modifier></type> <name>__value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_THREADS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__atomic_load_n</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_COMPILER_GCC</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>


<return>return <expr><call><name>__atomic_load_n</name><argument_list>(<argument><expr><name>__value</name></expr></argument>, <argument><expr><name>__ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>*</operator><name>__value</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Tp</name></type>
<name>__libcpp_atomic_refcount_increment</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>&amp;</modifier></type> <name>__t</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__atomic_add_fetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>__t</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Tp</name></type>
<name>__libcpp_atomic_refcount_decrement</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>&amp;</modifier></type> <name>__t</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__atomic_add_fetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>__ATOMIC_ACQ_REL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>__t</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><name>class</name> <name>_LIBCPP_EXCEPTION_ABI</name></type> <name>bad_weak_ptr</name>
<range>: <expr><name>public</name> <name>std</name><operator>::</operator><name>exception</name>
<block>{
<expr><name>public</name><operator>:</operator>
<macro><name>bad_weak_ptr</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <operator>=</operator> default</expr>;
<macro><name>bad_weak_ptr</name><argument_list>(<argument>const bad_weak_ptr&amp;</argument>)</argument_list></macro> <expr><name>_NOEXCEPT</name> <operator>=</operator> default</expr>;
<expr><name>virtual</name> <operator>~</operator><macro><name>bad_weak_ptr</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;
<expr><name>virtual</name> <specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>what</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function><type><name>_LIBCPP_NORETURN</name> <specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>__throw_bad_weak_ptr</name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>throw</name></type> <name>bad_weak_ptr</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>weak_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>_LIBCPP_TYPE_VIS</name></type> <name>__shared_count</name>
<block>{<block_content>
<expr_stmt><expr><call><name>__shared_count</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__shared_count</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__shared_count</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>__shared_count</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>long</name></type> <name>__shared_owners_</name></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>__shared_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>private</name>:</label>
<expr_stmt><expr><name>virtual</name> <name>void</name> <macro><name>__on_zero_shared</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name></type> <name>__shared_count</name><argument_list>(<argument><expr><name>long</name> <name>__refs</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> <name>_NOEXCEPT</name>
<range>: <macro><name>__shared_owners_</name><argument_list>(<argument>__refs</argument>)</argument_list></macro> <expr><block>{}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_BUILDING_LIBRARY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>void</name> <macro><name>__add_shared</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr></range></decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>__release_shared</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>__add_shared</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content>
<expr_stmt><expr><call><name>__libcpp_atomic_refcount_increment</name><argument_list>(<argument><expr><name>__shared_owners_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>__release_shared</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__libcpp_atomic_refcount_decrement</name><argument_list>(<argument><expr><name>__shared_owners_</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__on_zero_shared</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>long</name> <macro><name>use_count</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{
<return>return <expr><call><name>__libcpp_relaxed_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__shared_owners_</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name> <name>_LIBCPP_TYPE_VIS</name></type> <name>__shared_weak_count</name>
<range>: <expr><name>private</name> <name>__shared_count</name>
<block>{
<expr><name>long</name> <name>__shared_weak_owners_</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <macro><name>__shared_weak_count</name><argument_list>(<argument>long __refs = <literal type="number">0</literal></argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__shared_count</name><argument_list>(<argument><expr><name>__refs</name></expr></argument>)</argument_list></call></expr>,
<macro><name>__shared_weak_owners_</name><argument_list>(<argument>__refs</argument>)</argument_list></macro> <expr><block>{}</block>
<name>protected</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>__shared_weak_count</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_BUILDING_LIBRARY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>void</name> <macro><name>__add_shared</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;
<expr><name>void</name> <macro><name>__add_weak</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;
<expr><name>void</name> <macro><name>__release_shared</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name> <macro><name>__add_shared</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<expr><name>__shared_count</name><operator>::</operator><call><name>__add_shared</name><argument_list>()</argument_list></call></expr>;
}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name> <macro><name>__add_weak</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<expr><call><name>__libcpp_atomic_refcount_increment</name><argument_list>(<argument><expr><name>__shared_weak_owners_</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name> <macro><name>__release_shared</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<if_stmt><if>if <condition>(<expr><name>__shared_count</name><operator>::</operator><call><name>__release_shared</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__release_weak</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>void</name> <macro><name>__release_weak</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;
<expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>long</name> <macro><name>use_count</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><name>__shared_count</name><operator>::</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr>;</return>}</block>
<name>__shared_weak_count</name><operator>*</operator> <macro><name>lock</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>void</name><operator>*</operator> <macro><name>__get_deleter</name><argument_list>(<argument>const type_info&amp;</argument>)</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name></expr>;
<expr><name>private</name><operator>:</operator>
<name>virtual</name> <name>void</name> <macro><name>__on_zero_shared_weak</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>__shared_ptr_pointer</name>
<range>: <expr><name>public</name> <name>__shared_weak_count</name>
<block>{
<expr><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name> <name>__data_</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<macro><name>__shared_ptr_pointer</name><argument_list>(<argument>_Tp __p</argument>, <argument>_Dp __d</argument>, <argument>_Alloc __a</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__data_</name><argument_list>(<argument>__compressed_pair&lt;_Tp</argument>, <argument>_Dp&gt;(__p, _VSTD::move(__d))</argument>, <argument>_VSTD::move(__a)</argument>)</argument_list></macro> <block>{}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>virtual</name> <specifier>const</specifier> <name>void</name><operator>*</operator> <macro><name>__get_deleter</name><argument_list>(<argument>const type_info&amp;</argument>)</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>private</name><operator>:</operator>
<name>virtual</name> <name>void</name> <macro><name>__on_zero_shared</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>__on_zero_shared_weak</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>void</name><operator>*</operator>
<name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__get_deleter</name><argument_list>(<argument>const type_info&amp; __t</argument>)</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name>__t</name> <operator>==</operator> <call><name>typeid</name><argument_list>(<argument><expr><name>_Dp</name></expr></argument>)</argument_list></call> <operator>?</operator> <name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><call><name><name>__data_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>second</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__on_zero_shared</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<expr><call><name><name>__data_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call><operator>.</operator><call><call><name>second</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><call><name><name>__data_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>first</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>__data_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>second</name><argument_list>()</argument_list></call><operator>.</operator><operator>~</operator><call><name>_Dp</name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__on_zero_shared_weak</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__allocator_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>__shared_ptr_pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Al</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Al</name></expr></argument>&gt;</argument_list></name></type> <name>_ATraits</name>;</typedef>
<typedef>typedef <type><name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_ATraits</name><operator>::</operator><name>pointer</name></expr></argument>&gt;</argument_list></name></type> <name>_PTraits</name>;</typedef>

<decl_stmt><decl><type><name>_Al</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__data_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__data_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call><operator>.</operator><operator>~</operator><call><name>_Alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__a</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>_PTraits</name><operator>::</operator><call><name>pointer_to</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
struct <name>__shared_ptr_emplace</name>
<operator>:</operator> <name>__shared_weak_count</name>
<block>{
<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>explicit</name> <macro><name>__shared_ptr_emplace</name><argument_list>(<argument>_Alloc __a</argument>, <argument>_Args&amp;&amp; ...__args</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__storage_</name><argument_list>(<argument>_VSTD::move(__a)</argument>)</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<expr><name>using</name> <name>_TpAlloc</name> <operator>=</operator> <name>typename</name> <name><name>__allocator_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>_TpAlloc</name> <call><name>__tmp</name><argument_list>(<argument><expr><operator>*</operator><call><name>__get_alloc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_TpAlloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>construct</name><argument_list>(<argument><expr><name>__tmp</name></expr></argument>, <argument><expr><call><name>__get_elem</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__get_elem()</argument>)</argument_list></macro> <call><name>_Tp</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>_Alloc</name><operator>*</operator> <macro><name>__get_alloc</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{ <return>return <expr><call><name><name>__storage_</name><operator>.</operator><name>__get_alloc</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>_Tp</name><operator>*</operator> <macro><name>__get_elem</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{ <return>return <expr><call><name><name>__storage_</name><operator>.</operator><name>__get_elem</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<function><type><name>virtual</name> <name>void</name></type> <name>__on_zero_shared</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<decl_stmt><decl><type><name>using</name></type> <name>_TpAlloc</name> <init>= <expr><name>typename</name> <name><name>__allocator_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_TpAlloc</name></type> <name>__tmp</name><argument_list>(<argument><expr><operator>*</operator><call><name>__get_alloc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_TpAlloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>destroy</name><argument_list>(<argument><expr><name>__tmp</name></expr></argument>, <argument><expr><call><name>__get_elem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__get_elem</name><argument_list>()</argument_list></call><operator>-&gt;</operator><operator>~</operator><call><name>_Tp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>__on_zero_shared_weak</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>_ControlBlockAlloc</name> <init>= <expr><name>typename</name> <name><name>__allocator_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>__shared_ptr_emplace</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>_ControlBlockPointer</name> <init>= <expr><name>typename</name> <name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ControlBlockAlloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_ControlBlockAlloc</name></type> <name>__tmp</name><argument_list>(<argument><expr><operator>*</operator><call><name>__get_alloc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__storage_</name><operator>.</operator><name/></name>~<call><name>_Storage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ControlBlockAlloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deallocate</name><argument_list>(<argument><expr><name>__tmp</name></expr></argument>,
<argument><expr><name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ControlBlockPointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>pointer_to</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<decl_stmt><decl><type><name>using</name></type> <name>_CompressedPair</name> <init>= <expr><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<struct>struct <macro><name>_ALIGNAS_TYPE</name><argument_list>(<argument>_CompressedPair</argument>)</argument_list></macro> <name>_Storage</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>__blob_</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_CompressedPair</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name> <name>explicit</name></type> <name>_Storage</name><argument_list>(<argument><expr><name>_Alloc</name><operator>&amp;&amp;</operator> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__get_alloc()</argument>)</argument_list></macro> <call><name>_Alloc</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name> <operator>~</operator><macro><name>_Storage</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>__get_alloc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><operator>~</operator><call><name>_Alloc</name><argument_list>()</argument_list></call></expr>;
}</block>
<name>_Alloc</name><operator>*</operator> <macro><name>__get_alloc</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<expr><name>_CompressedPair</name> <operator>*</operator><name>__as_pair</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>_CompressedPair</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__blob_</name></expr></argument>)</argument_list></call></expr>;
<expr><name>typename</name> <name>_CompressedPair</name><operator>::</operator><name>_Base1</name><operator>*</operator> <name>__first</name> <operator>=</operator> <name>_CompressedPair</name><operator>::</operator><call><name>__get_first_base</name><argument_list>(<argument><expr><name>__as_pair</name></expr></argument>)</argument_list></call></expr>;
<expr><name>_Alloc</name> <operator>*</operator><name>__alloc</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>__alloc</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>_LIBCPP_NO_CFI</name> <name>_Tp</name><modifier>*</modifier></type> <name>__get_elem</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content>
<decl_stmt><decl><type><name>_CompressedPair</name> <modifier>*</modifier></type><name>__as_pair</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>_CompressedPair</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__blob_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>typename</name> <name>_CompressedPair</name><operator>::</operator><name>_Base2</name><operator>*</operator> <name>__second</name> <operator>=</operator> <name>_CompressedPair</name><operator>::</operator><call><name>__get_second_base</name><argument_list>(<argument><expr><name>__as_pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Tp</name> <modifier>*</modifier></type><name>__elem</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__elem</name></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>_Storage</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>_CompressedPair</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_Storage</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_CompressedPair</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Storage</name></type> <name>__storage_</name></decl>;</decl_stmt>
};

<struct_decl>struct <name>__shared_ptr_dummy_rebind_allocator_type</name>;</struct_decl>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>__shared_ptr_dummy_rebind_allocator_type</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<label><name>public</name>:</label>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Other</name><operator>&gt;</operator>
struct <name>rebind</name>
<block>{
<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Other</name></expr></argument>&gt;</argument_list></name></type> <name>other</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>enable_shared_from_this</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__compatible_with</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<range>: <expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_extent_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>*</operator></expr></argument>, <argument><expr><name><name>remove_extent_t</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
: <macro><name>is_convertible</name></macro><expr_stmt><expr><operator>&lt;</operator><name>_Tp</name><operator>*</operator></expr><operator>,</operator> <expr><name>_Up</name><operator>*</operator><operator>&gt;</operator> <block>{}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ptr</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_deletable</name> <range>: <expr><name>false_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ptr</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_deletable</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>, <argument><expr><name>decltype</name><operator>(</operator><name>delete</name> <name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>true_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ptr</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_array_deletable</name> <range>: <expr><name>false_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ptr</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_array_deletable</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>, <argument><expr><name>decltype</name><operator>(</operator><name><name>delete</name><index>[]</index></name> <name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <range>: <expr><name>true_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Pt</name></expr></argument>,
<argument><expr><name>class</name> <operator>=</operator> <name>decltype</name><operator>(</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>(</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Pt</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>true_type</name></type> <name>__well_formed_deleter_test</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>false_type</name></type> <name>__well_formed_deleter_test</name><parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Pt</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__well_formed_deleter</name> <range>: <macro><name>decltype</name><argument_list>(<argument>__well_formed_deleter_test&lt;_Dp</argument>, <argument>_Pt&gt;(<literal type="number">0</literal>)</argument>)</argument_list></macro> <expr><block>{}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Dp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Yp</name><operator>&gt;</operator>
struct <name>__shared_ptr_deleter_ctor_reqs</name>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_move_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>__well_formed_deleter</name><argument_list type="generic">&lt;<argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;
}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_ENABLE_SHARED_PTR_TRIVIAL_ABI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_SHARED_PTR_TRIVIAL_ABI</name></cpp:macro> <cpp:value>__attribute__((trivial_abi))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_SHARED_PTR_TRIVIAL_ABI</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_SHARED_PTR_TRIVIAL_ABI</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>shared_ptr</name>
<block>{<block_content>
<label><name>public</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<typedef>typedef <type><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>weak_type</name>;</typedef>
<typedef>typedef <type><name><name>remove_extent_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>element_type</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>_Tp</name></type> <name>element_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>element_type</name><modifier>*</modifier></type> <name>__ptr_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__shared_weak_count</name><modifier>*</modifier></type> <name>__cntrl_</name></decl>;</decl_stmt>

<struct>struct <name>__nat</name> <block>{<decl_stmt><decl><type><name>int</name></type> <name>__for_bool_</name></decl>;</decl_stmt>}</block>;</struct>
<label><name>public</name>:</label>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR</name> <macro><name>shared_ptr</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR</name></type> <name>shared_ptr</name><argument_list>(<argument><expr><name>nullptr_t</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Yp</name></expr><operator>,</operator> <expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;
<argument><expr><name><name>_And</name><argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_COMPILER_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <argument><expr><name><name>_If</name><argument_list type="generic">&lt;<argument><expr><name><name>is_array</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name><name>__is_array_deletable</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>__is_deletable</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name> <operator>&gt;</operator>
<name>explicit</name> <call><name>shared_ptr</name><argument_list>(<argument><expr><name>_Yp</name><operator>*</operator> <name>__p</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__ptr_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{
<expr><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name> <call><name>__hold</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__shared_ptr_default_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_AllocT</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <type><name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><modifier>*</modifier></expr></argument>, <argument><expr><name><name>__shared_ptr_default_delete</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_AllocT</name></expr></argument> &gt;</argument_list></name></type> <name>_CntrlBlk</name>;</typedef>
<expr_stmt><expr><name>__cntrl_</name> <operator>=</operator> <name>new</name> <call><name>_CntrlBlk</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><call><name><name>__shared_ptr_default_delete</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_AllocT</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__enable_weak_this</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name></type>
<name>shared_ptr</name><argument_list>(<argument><expr><name>_Yp</name><operator>*</operator> <name>__p</name></expr></argument>, <argument><expr><name>_Dp</name> <name>__d</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>__shared_ptr_deleter_ctor_reqs</name><argument_list type="generic">&lt;<argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>__nat</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <call><name>__nat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name></type>
<name>shared_ptr</name><argument_list>(<argument><expr><name>_Yp</name><operator>*</operator> <name>__p</name></expr></argument>, <argument><expr><name>_Dp</name> <name>__d</name></expr></argument>, <argument><expr><name>_Alloc</name> <name>__a</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>__shared_ptr_deleter_ctor_reqs</name><argument_list type="generic">&lt;<argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>__nat</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <call><name>__nat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>shared_ptr</name><parameter_list>(<parameter><decl><type><name>nullptr_t</name></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name>_Dp</name></type> <name>__d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>shared_ptr</name><parameter_list>(<parameter><decl><type><name>nullptr_t</name></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name>_Dp</name></type> <name>__d</name></decl></parameter>, <parameter><decl><type><name>_Alloc</name></type> <name>__a</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name></type> <name>shared_ptr</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__r</name></expr></argument>, <argument><expr><name>element_type</name><operator>*</operator> <name>__p</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>shared_ptr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>shared_ptr</name><operator>&amp;</operator> <name>__r</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>shared_ptr</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__r</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>__nat</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <call><name>__nat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list>
<name>_NOEXCEPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>shared_ptr</name><argument_list>(<argument><expr><name>shared_ptr</name><operator>&amp;&amp;</operator> <name>__r</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name></type> <name>shared_ptr</name><argument_list>(<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>__nat</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <call><name>__nat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list>
<name>_NOEXCEPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name> <name>explicit</name></type> <name>shared_ptr</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__r</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>__nat</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>=</operator> <call><name>__nat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name></type>
<name>shared_ptr</name><argument_list>(<argument><expr><name><name>auto_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>__nat</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <call><name>__nat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name></type>
<name>shared_ptr</name><argument_list>(<argument><expr><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name></expr></argument>, <argument><expr><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>__nat</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <call><name>__nat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name></type>
<name>shared_ptr</name><argument_list>(<argument><expr><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name></expr></argument>, <argument><expr><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>__nat</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <call><name>__nat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><call><name>shared_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>shared_ptr</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>shared_ptr</name><operator>&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>shared_ptr</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>shared_ptr</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>shared_ptr</name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>shared_ptr</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>operator</name><operator>=</operator><operator>(</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_array</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>shared_ptr</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;</operator>
<name>operator</name><operator>=</operator><operator>(</operator><name><name>auto_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name></expr></argument>, <argument><expr><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>shared_ptr</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>operator</name><operator>=</operator><operator>(</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>swap</name><argument_list>(<argument><expr><name>shared_ptr</name><operator>&amp;</operator> <name>__r</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name> <macro><name>reset</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>void</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>reset</name><argument_list>(<argument><expr><name>_Yp</name><operator>*</operator> <name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>void</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<macro><name>reset</name><argument_list>(<argument>_Yp* __p</argument>, <argument>_Dp __d</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>void</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<macro><name>reset</name><argument_list>(<argument>_Yp* __p</argument>, <argument>_Dp __d</argument>, <argument>_Alloc __a</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>element_type</name><operator>*</operator> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><name>__ptr_</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><operator>*</operator><name>__ptr_</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>element_type</name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>) <expr_stmt><expr><specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>is_array</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"std::shared_ptr&lt;T&gt;::operator-&gt; is only valid when T is not an array type."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>__ptr_</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>long</name> <macro><name>use_count</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><name>__cntrl_</name> <operator>?</operator> <call><name><name>__cntrl_</name><operator>-&gt;</operator><name>use_count</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="number">0</literal></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>unique</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name>use_count</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name>get</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>}</block></expr></expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>owner_before</name><argument_list>(<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__p</name></expr></argument>)</argument_list> const <name>_NOEXCEPT</name>
<block>{<block_content><return>return <expr><name>__cntrl_</name> <operator>&lt;</operator> <name><name>__p</name><operator>.</operator><name>__cntrl_</name></name></expr>;</return></block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>owner_before</name><argument_list>(<argument><expr><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__p</name></expr></argument>)</argument_list> const <name>_NOEXCEPT</name>
<block>{<block_content><return>return <expr><name>__cntrl_</name> <operator>&lt;</operator> <name><name>__p</name><operator>.</operator><name>__cntrl_</name></name></expr>;</return></block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>__owner_equivalent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>shared_ptr</name><operator>&amp;</operator> <name>__p</name></expr></argument>)</argument_list> const
<block>{<block_content><return>return <expr><name>__cntrl_</name> <operator>==</operator> <name><name>__p</name><operator>.</operator><name>__cntrl_</name></name></expr>;</return></block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<expr_stmt><expr><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>operator</name><index>[]</index></name><operator>(</operator><name>ptrdiff_t</name> <name>__i</name><operator>)</operator> <specifier>const</specifier>
<block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name><name>is_array</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"std::shared_ptr&lt;T&gt;::operator[] is only valid when T is an array type."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>__ptr_</name><index>[<expr><name>__i</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Dp</name><operator>*</operator> <macro><name>__get_deleter</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Dp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__cntrl_</name>
<operator>?</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__cntrl_</name><operator>-&gt;</operator><name>__get_deleter</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Dp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>:</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_CntrlBlk</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>__create_with_control_block</name><parameter_list>(<parameter><decl><type><name>_Yp</name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name>_CntrlBlk</name><modifier>*</modifier></type> <name>__cntrl</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<decl_stmt><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name> <operator>=</operator> <name>__p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__r</name><operator>.</operator><name>__cntrl_</name></name> <operator>=</operator> <name>__cntrl</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__r</name><operator>.</operator><name>__enable_weak_this</name></name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>, <argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Yp</name></expr><operator>,</operator> <expr><name>bool</name> <operator>=</operator> <name><name>is_function</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__shared_ptr_default_allocator</name>
<block>{
<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Yp</name><operator>&gt;</operator>
struct <name><name>__shared_ptr_default_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>__shared_ptr_dummy_rebind_allocator_type</name></expr></argument>&gt;</argument_list></name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_OrigPtr</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_OrigPtr</name><operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>enable_shared_from_this</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>*</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__enable_weak_this</name><argument_list>(<argument>const enable_shared_from_this&lt;_Yp&gt;* __e</argument>,
<argument>_OrigPtr* __ptr</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>remove_cv</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_RawYp</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__e</name> <operator>&amp;&amp;</operator> <call><name><name>__e</name><operator>-&gt;</operator><name>__weak_this_</name><operator>.</operator><name>expired</name></name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>__e</name><operator>-&gt;</operator><name>__weak_this_</name></name> <operator>=</operator> <call><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_RawYp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>,
<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>_RawYp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Yp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
}

_LIBCPP_INLINE_VISIBILITY <function><type><name>void</name></type> <name>__enable_weak_this</name><parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content/>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__shared_ptr_default_delete</name>
<range>: <expr><name><name>default_delete</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Un</name></expr></argument>, <argument><expr><name>size_t</name> <name>_Sz</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__shared_ptr_default_delete</name><argument_list type="generic">&lt;<argument><expr><name><name>_Yp</name><index>[<expr><name>_Sz</name></expr>]</index></name></expr></argument>, <argument><expr><name>_Un</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>default_delete</name><argument_list type="generic">&lt;<argument><expr><name><name>_Yp</name><index>[]</index></name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Un</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__shared_ptr_default_delete</name><argument_list type="generic">&lt;<argument><expr><name><name>_Yp</name><index>[]</index></name></expr></argument>, <argument><expr><name>_Un</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>default_delete</name><argument_list type="generic">&lt;<argument><expr><name><name>_Yp</name><index>[]</index></name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>shared_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>weak_ptr</name></decl>;</decl_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_DEDUCTION_GUIDES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>shared_ptr</name><argument_list>(<argument><expr><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> -&gt; <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name></type>
<name>shared_ptr</name><argument_list>(<argument><expr><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> -&gt; <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>_LIBCPP_CONSTEXPR</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro>
<expr><block>{
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>_LIBCPP_CONSTEXPR</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>nullptr_t</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro>
<expr><block>{
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>_Yp* __p</argument>, <argument>_Dp __d</argument>,
<argument>typename enable_if&lt;__shared_ptr_deleter_ctor_reqs&lt;_Dp</argument>, <argument>_Yp</argument>, <argument>element_type&gt;::value</argument>, <argument>__nat&gt;::type</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__ptr_</name><argument_list>(<argument>__p</argument>)</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>try</name>
<block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__shared_ptr_default_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_AllocT</name></expr>;</expr_stmt></typedef></block></expr>
<typedef>typedef <type><name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_AllocT</name></expr></argument> &gt;</argument_list></name></type> <name>_CntrlBlk</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>__cntrl_</name> <operator>=</operator> <name>new</name> <call><name>_CntrlBlk</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_AllocT</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__cntrl_</name> <operator>=</operator> <name>new</name> <call><name>_CntrlBlk</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>, <argument><expr><call><name>_AllocT</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>__enable_weak_this</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
catch <expr_stmt><expr><operator>(</operator><operator>...</operator><operator>)</operator>
<block>{
<expr><call><name>__d</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;
<expr><name>throw</name></expr>;
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>nullptr_t __p</argument>, <argument>_Dp __d</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__ptr_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>try</name>
<block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__shared_ptr_default_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_AllocT</name></expr>;</expr_stmt></typedef></block></expr>
<typedef>typedef <type><name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>nullptr_t</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_AllocT</name></expr></argument> &gt;</argument_list></name></type> <name>_CntrlBlk</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>__cntrl_</name> <operator>=</operator> <name>new</name> <call><name>_CntrlBlk</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_AllocT</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__cntrl_</name> <operator>=</operator> <name>new</name> <call><name>_CntrlBlk</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>, <argument><expr><call><name>_AllocT</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
catch <expr_stmt><expr><operator>(</operator><operator>...</operator><operator>)</operator>
<block>{
<expr><call><name>__d</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;
<expr><name>throw</name></expr>;
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>_Yp* __p</argument>, <argument>_Dp __d</argument>, <argument>_Alloc __a</argument>,
<argument>typename enable_if&lt;__shared_ptr_deleter_ctor_reqs&lt;_Dp</argument>, <argument>_Yp</argument>, <argument>element_type&gt;::value</argument>, <argument>__nat&gt;::type</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__ptr_</name><argument_list>(<argument>__p</argument>)</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>try</name>
<block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>_CntrlBlk</name>;</typedef></block></expr>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__allocator_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_CntrlBlk</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_A2</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></type> <name>_D2</name>;</typedef>
<function_decl><type><name>_A2</name></type> <name>__a2</name><parameter_list>(<parameter><decl><type><name>__a</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_CntrlBlk</name></expr></argument>, <argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name></type> <name>__hold2</name><argument_list>(<argument><expr><call><name><name>__a2</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_D2</name><argument_list>(<argument><expr><name>__a2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__hold2.get())</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<call><name>_CntrlBlk</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>_CntrlBlk</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>__cntrl_</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>__hold2</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__enable_weak_this</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
catch <expr_stmt><expr><operator>(</operator><operator>...</operator><operator>)</operator>
<block>{
<expr><call><name>__d</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;
<expr><name>throw</name></expr>;
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>nullptr_t __p</argument>, <argument>_Dp __d</argument>, <argument>_Alloc __a</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__ptr_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>try</name>
<block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>nullptr_t</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>_CntrlBlk</name>;</typedef></block></expr>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__allocator_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_CntrlBlk</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_A2</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></type> <name>_D2</name>;</typedef>
<function_decl><type><name>_A2</name></type> <name>__a2</name><parameter_list>(<parameter><decl><type><name>__a</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_CntrlBlk</name></expr></argument>, <argument><expr><name>_D2</name></expr></argument>&gt;</argument_list></name></type> <name>__hold2</name><argument_list>(<argument><expr><call><name><name>__a2</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_D2</name><argument_list>(<argument><expr><name>__a2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__hold2.get())</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<call><name>_CntrlBlk</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>_CntrlBlk</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>__cntrl_</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>__hold2</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
catch <expr_stmt><expr><operator>(</operator><operator>...</operator><operator>)</operator>
<block>{
<expr><call><name>__d</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;
<expr><name>throw</name></expr>;
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>const shared_ptr&lt;_Yp&gt;&amp; __r</argument>, <argument>element_type *__p</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<if_stmt><if>if <condition>(<expr><name>__cntrl_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__cntrl_</name><operator>-&gt;</operator><name>__add_shared</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>const shared_ptr&amp; __r</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<if_stmt><if>if <condition>(<expr><name>__cntrl_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__cntrl_</name><operator>-&gt;</operator><name>__add_shared</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>const shared_ptr&lt;_Yp&gt;&amp; __r</argument>,
<argument>typename enable_if&lt;__compatible_with&lt;_Yp</argument>, <argument>element_type&gt;::value</argument>, <argument>__nat&gt;::type</argument>)</argument_list></macro>
<name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<if_stmt><if>if <condition>(<expr><name>__cntrl_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__cntrl_</name><operator>-&gt;</operator><name>__add_shared</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>shared_ptr&amp;&amp; __r</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name><name>__r</name><operator>.</operator><name>__cntrl_</name></name> <operator>=</operator> <name>nullptr</name></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>shared_ptr&lt;_Yp&gt;&amp;&amp; __r</argument>,
<argument>typename enable_if&lt;__compatible_with&lt;_Yp</argument>, <argument>element_type&gt;::value</argument>, <argument>__nat&gt;::type</argument>)</argument_list></macro>
<name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name><name>__r</name><operator>.</operator><name>__cntrl_</name></name> <operator>=</operator> <name>nullptr</name></expr>;
}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>auto_ptr&lt;_Yp&gt;&amp;&amp; __r</argument>,
<argument>typename enable_if&lt;is_convertible&lt;_Yp*</argument>, <argument>element_type*&gt;::value</argument>, <argument>__nat&gt;::type</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__ptr_</name><argument_list>(<argument>__r.get()</argument>)</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name><name>default_delete</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>_CntrlBlk</name>;</typedef>
<name>__cntrl_</name> <operator>=</operator> <name>new</name> <call><name>_CntrlBlk</name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>default_delete</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__enable_weak_this</name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__r</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>unique_ptr&lt;_Yp</argument>, <argument>_Dp&gt;&amp;&amp; __r</argument>,
<argument>typename enable_if
&lt;
!is_lvalue_reference&lt;_Dp&gt;::value &amp;&amp;
is_convertible&lt;typename unique_ptr&lt;_Yp</argument>, <argument>_Dp&gt;::pointer</argument>, <argument>element_type*&gt;::value</argument>,
<argument>__nat
&gt;::type</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__ptr_</name><argument_list>(<argument>__r.get()</argument>)</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>__ptr_</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__cntrl_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__shared_ptr_default_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_AllocT</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>, <argument><expr><name>_AllocT</name></expr></argument> &gt;</argument_list></name></type> <name>_CntrlBlk</name>;</typedef>
<expr_stmt><expr><name>__cntrl_</name> <operator>=</operator> <name>new</name> <call><name>_CntrlBlk</name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__r</name><operator>.</operator><name>get_deleter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_AllocT</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__enable_weak_this</name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></else></if_stmt>}</block>
<call><name><name>__r</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>unique_ptr&lt;_Yp</argument>, <argument>_Dp&gt;&amp;&amp; __r</argument>,
<argument>typename enable_if
&lt;
is_lvalue_reference&lt;_Dp&gt;::value &amp;&amp;
is_convertible&lt;typename unique_ptr&lt;_Yp</argument>, <argument>_Dp&gt;::pointer</argument>, <argument>element_type*&gt;::value</argument>,
<argument>__nat
&gt;::type</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__ptr_</name><argument_list>(<argument>__r.get()</argument>)</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>__ptr_</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__cntrl_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__shared_ptr_default_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_AllocT</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name><name>__shared_ptr_pointer</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name></expr></argument>,
<argument><expr><name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>remove_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>_AllocT</name></expr></argument> &gt;</argument_list></name></type> <name>_CntrlBlk</name>;</typedef>
<expr_stmt><expr><name>__cntrl_</name> <operator>=</operator> <name>new</name> <call><name>_CntrlBlk</name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name>ref</name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get_deleter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_AllocT</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__enable_weak_this</name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></else></if_stmt>}</block>
<call><name><name>__r</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><operator>~</operator><macro><name>shared_ptr</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__cntrl_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__cntrl_</name><operator>-&gt;</operator><name>__release_shared</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>shared_ptr</name><operator>&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>shared_ptr</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>shared_ptr</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>shared_ptr</name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>shared_ptr</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator>
<block>{
<expr><call><name>shared_ptr</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_array</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;</operator>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name><name>auto_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator>
<block>{
<expr><call><name>shared_ptr</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator>
<block>{
<expr><call><name>shared_ptr</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>void</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>swap</name><argument_list>(<argument>shared_ptr&amp; __r</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__ptr_</name></expr></argument>, <argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__cntrl_</name></expr></argument>, <argument><expr><name><name>__r</name><operator>.</operator><name>__cntrl_</name></name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>void</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>reset</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>shared_ptr</name><argument_list>()</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>void</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>reset</name><argument_list>(<argument>_Yp* __p</argument>)</argument_list></macro>
<block>{
<expr><call><name>shared_ptr</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>void</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>reset</name><argument_list>(<argument>_Yp* __p</argument>, <argument>_Dp __d</argument>)</argument_list></macro>
<block>{
<expr><call><name>shared_ptr</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>, <argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__compatible_with</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>, <argument><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>void</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>reset</name><argument_list>(<argument>_Yp* __p</argument>, <argument>_Dp __d</argument>, <argument>_Alloc __a</argument>)</argument_list></macro>
<block>{
<expr><call><name>shared_ptr</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>




<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_array</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>allocate_shared</name><argument_list>(<argument>const _Alloc&amp; __a</argument>, <argument>_Args&amp;&amp; ...__args</argument>)</argument_list></macro>
<block>{
<expr><name>using</name> <name>_ControlBlock</name> <operator>=</operator> <name><name>__shared_ptr_emplace</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>_ControlBlockAllocator</name> <operator>=</operator> <name>typename</name> <name><name>__allocator_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_ControlBlock</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name><name>__allocation_guard</name><argument_list type="generic">&lt;<argument><expr><name>_ControlBlockAllocator</name></expr></argument>&gt;</argument_list></name> <call><name>__guard</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
<expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__guard.__get())</argument>)</argument_list></macro> <call><name>_ControlBlock</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>__control_block</name> <operator>=</operator> <call><name><name>__guard</name><operator>.</operator><name>__release_ptr</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>__create_with_control_block</name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name>__control_block</name><operator>)</operator><operator>.</operator><name>__get_elem</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><operator>*</operator><name>__control_block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_array</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>make_shared</name><argument_list>(<argument><expr><name>_Args</name><operator>&amp;&amp;</operator> <operator>...</operator><name>__args</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>allocate_shared</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>__y</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>==</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">11</literal></expr></cpp:if>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>common_type</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Up</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Vp</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<return>return <expr><call><call><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>_Vp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__y</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><call><name><name>less</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__y</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Up</name><operator>&gt;</operator>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name>__y</name> <operator>&lt;</operator> <name>__x</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__y</name> <operator>&lt;</operator> <name>__x</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>&lt;</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name>nullptr_t</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><name>__x</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><name>nullptr_t</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><name>__x</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name>nullptr_t</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><name>nullptr_t</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name>nullptr_t</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><call><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&lt;</operator><operator>(</operator><name>nullptr_t</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><call><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name>nullptr_t</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name>nullptr</name> <operator>&lt;</operator> <name>__x</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&gt;</operator><operator>(</operator><name>nullptr_t</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name>__x</name> <operator>&lt;</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name>nullptr_t</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>nullptr</name> <operator>&lt;</operator> <name>__x</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&lt;=</operator><operator>(</operator><name>nullptr_t</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>&lt;</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name>nullptr_t</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>&lt;</operator> <name>nullptr</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&gt;=</operator><operator>(</operator><name>nullptr_t</name><operator>,</operator> <specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>nullptr</name> <operator>&lt;</operator> <name>__x</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type>
<name>swap</name><parameter_list>(<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__y</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<expr_stmt><expr><call><name><name>__x</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>static_pointer_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__r</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <macro><name>shared_ptr</name></macro><expr><operator>&lt;</operator><name>_Tp</name><operator>&gt;</operator><operator>(</operator><name>__r</name><operator>,</operator>
<call><name><name>static_cast</name><argument_list type="generic">&lt;
<argument><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>dynamic_pointer_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__r</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name> <name>_ET</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_ET</name><modifier>*</modifier></type> <name>__p</name> <init>= <expr><call><name><name>dynamic_cast</name><argument_list type="generic">&lt;<argument><expr><name>_ET</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>__p</name></expr> ?</condition><then> <expr><call><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__r</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>const_pointer_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__r</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name> <name>_RTp</name></expr>;</expr_stmt></typedef>
<return>return <expr><call><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__r</name></expr></argument>, <argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>_RTp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>reinterpret_pointer_cast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__r</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <macro><name>shared_ptr</name></macro><expr><operator>&lt;</operator><name>_Tp</name><operator>&gt;</operator><operator>(</operator><name>__r</name><operator>,</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;
<argument><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__r</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Dp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Dp</name><modifier>*</modifier></type>
<name>get_deleter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><name><name>__p</name><operator>.</operator><name>template</name></name> <call><name><name>__get_deleter</name><argument_list type="generic">&lt;<argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_SHARED_PTR_TRIVIAL_ABI</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>weak_ptr</name>
<block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>_Tp</name></type> <name>element_type</name>;</typedef>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>element_type</name><modifier>*</modifier></type> <name>__ptr_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__shared_weak_count</name><modifier>*</modifier></type> <name>__cntrl_</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR</name> <macro><name>weak_ptr</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name></type> <name>weak_ptr</name><argument_list>(<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__r</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>__nat</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list>
<name>_NOEXCEPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>weak_ptr</name><argument_list>(<argument><expr><name>weak_ptr</name> <specifier>const</specifier><operator>&amp;</operator> <name>__r</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name></type> <name>weak_ptr</name><argument_list>(<argument><expr><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__r</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>__nat</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list>
<name>_NOEXCEPT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>weak_ptr</name><argument_list>(<argument><expr><name>weak_ptr</name><operator>&amp;&amp;</operator> <name>__r</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name></type> <name>weak_ptr</name><argument_list>(<argument><expr><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>__nat</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list>
<name>_NOEXCEPT</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><call><name>weak_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>weak_ptr</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>weak_ptr</name> <specifier>const</specifier><operator>&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>weak_ptr</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>operator</name><operator>=</operator><operator>(</operator><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>weak_ptr</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>weak_ptr</name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>weak_ptr</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>operator</name><operator>=</operator><operator>(</operator><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>weak_ptr</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>operator</name><operator>=</operator><operator>(</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>swap</name><argument_list>(<argument><expr><name>weak_ptr</name><operator>&amp;</operator> <name>__r</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name> <macro><name>reset</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>long</name> <macro><name>use_count</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><name>__cntrl_</name> <operator>?</operator> <call><name><name>__cntrl_</name><operator>-&gt;</operator><name>use_count</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="number">0</literal></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>expired</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><name>__cntrl_</name> <operator>==</operator> <name>nullptr</name> <operator>||</operator> <call><name><name>__cntrl_</name><operator>-&gt;</operator><name>use_count</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>lock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>owner_before</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__r</name></expr></argument>)</argument_list> const <name>_NOEXCEPT</name>
<block>{<block_content><return>return <expr><name>__cntrl_</name> <operator>&lt;</operator> <name><name>__r</name><operator>.</operator><name>__cntrl_</name></name></expr>;</return></block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>owner_before</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__r</name></expr></argument>)</argument_list> const <name>_NOEXCEPT</name>
<block>{<block_content><return>return <expr><name>__cntrl_</name> <operator>&lt;</operator> <name><name>__r</name><operator>.</operator><name>__cntrl_</name></name></expr>;</return></block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>weak_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>shared_ptr</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_DEDUCTION_GUIDES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>weak_ptr</name><argument_list>(<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> -&gt; <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>_LIBCPP_CONSTEXPR</name>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>weak_ptr</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro>
<expr><block>{
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>weak_ptr</name><argument_list>(<argument>weak_ptr const&amp; __r</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<if_stmt><if>if <condition>(<expr><name>__cntrl_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__cntrl_</name><operator>-&gt;</operator><name>__add_weak</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>weak_ptr</name><argument_list>(<argument>shared_ptr&lt;_Yp&gt; const&amp; __r</argument>,
<argument>typename enable_if&lt;is_convertible&lt;_Yp*</argument>, <argument>_Tp*&gt;::value</argument>, <argument>__nat*&gt;::type</argument>)</argument_list></macro>
<name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<if_stmt><if>if <condition>(<expr><name>__cntrl_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__cntrl_</name><operator>-&gt;</operator><name>__add_weak</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>weak_ptr</name><argument_list>(<argument>weak_ptr&lt;_Yp&gt; const&amp; __r</argument>,
<argument>typename enable_if&lt;is_convertible&lt;_Yp*</argument>, <argument>_Tp*&gt;::value</argument>, <argument>__nat*&gt;::type</argument>)</argument_list></macro>
<name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<if_stmt><if>if <condition>(<expr><name>__cntrl_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__cntrl_</name><operator>-&gt;</operator><name>__add_weak</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>weak_ptr</name><argument_list>(<argument>weak_ptr&amp;&amp; __r</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name><name>__r</name><operator>.</operator><name>__cntrl_</name></name> <operator>=</operator> <name>nullptr</name></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>weak_ptr</name><argument_list>(<argument>weak_ptr&lt;_Yp&gt;&amp;&amp; __r</argument>,
<argument>typename enable_if&lt;is_convertible&lt;_Yp*</argument>, <argument>_Tp*&gt;::value</argument>, <argument>__nat*&gt;::type</argument>)</argument_list></macro>
<name>_NOEXCEPT</name>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name><name>__r</name><operator>.</operator><name>__cntrl_</name></name> <operator>=</operator> <name>nullptr</name></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><operator>~</operator><macro><name>weak_ptr</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__cntrl_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__cntrl_</name><operator>-&gt;</operator><name>__release_weak</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>weak_ptr</name> <specifier>const</specifier><operator>&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>weak_ptr</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>weak_ptr</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>weak_ptr</name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>weak_ptr</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>weak_ptr</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__r</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>weak_ptr</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>void</name>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>swap</name><argument_list>(<argument>weak_ptr&amp; __r</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__ptr_</name></expr></argument>, <argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__cntrl_</name></expr></argument>, <argument><expr><name><name>__r</name><operator>.</operator><name>__cntrl_</name></name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name>
<macro><name>swap</name><argument_list>(<argument>weak_ptr&lt;_Tp&gt;&amp; __x</argument>, <argument>weak_ptr&lt;_Tp&gt;&amp; __y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<expr><call><name><name>__x</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier>
<name>void</name>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>reset</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<expr><call><name>weak_ptr</name><argument_list>()</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>shared_ptr</name><argument_list>(<argument>const weak_ptr&lt;_Yp&gt;&amp; __r</argument>,
<argument>typename enable_if&lt;is_convertible&lt;_Yp*</argument>, <argument>element_type*&gt;::value</argument>, <argument>__nat&gt;::type</argument>)</argument_list></macro>
<operator>:</operator> <call><name>__ptr_</name><argument_list>(<argument><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__cntrl_</name><argument_list>(<argument>__r.__cntrl_ ? __r.__cntrl_-&gt;lock() : __r.__cntrl_</argument>)</argument_list></macro>
<expr><block>{
<if_stmt><if>if <condition>(<expr><name>__cntrl_</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_bad_weak_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>lock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__r</name></expr>;
<expr><name><name>__r</name><operator>.</operator><name>__cntrl_</name></name> <operator>=</operator> <ternary><condition><expr><name>__cntrl_</name></expr> ?</condition><then> <expr><call><name><name>__cntrl_</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>__cntrl_</name></expr></else></ternary></expr>;
<if_stmt><if>if <condition>(<expr><name><name>__r</name><operator>.</operator><name>__cntrl_</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>__r</name><operator>.</operator><name>__ptr_</name></name> <operator>=</operator> <name>__ptr_</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>__r</name></expr>;</return>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name><operator>&gt;</operator> struct <name>owner_less</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator> struct <name>owner_less</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>owner_less</name><argument_list type="generic">&lt;<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>__x</name><operator>.</operator><name>owner_before</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>__x</name><operator>.</operator><name>owner_before</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>__x</name><operator>.</operator><name>owner_before</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>owner_less</name><argument_list type="generic">&lt;<argument><expr><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>__x</name><operator>.</operator><name>owner_before</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>__x</name><operator>.</operator><name>owner_before</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>__x</name><operator>.</operator><name>owner_before</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>owner_less</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>__x</name><operator>.</operator><name>owner_before</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>__x</name><operator>.</operator><name>owner_before</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>__x</name><operator>.</operator><name>owner_before</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><call><name><name>__x</name><operator>.</operator><name>owner_before</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>enable_shared_from_this</name>
<block>{<block_content>
<decl_stmt><decl><type><name>mutable</name> <name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__weak_this_</name></decl>;</decl_stmt>
<label><name>protected</name>:</label>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name></type>
<name>enable_shared_from_this</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content/>}</block></function>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>enable_shared_from_this</name><parameter_list>(<parameter><decl><type><name>enable_shared_from_this</name> <specifier>const</specifier><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content/>}</block></function>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>enable_shared_from_this</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>enable_shared_from_this</name> <specifier>const</specifier><operator>&amp;</operator><operator>)</operator> <name>_NOEXCEPT</name>
<block>{<return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></init></decl></decl_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<operator>~</operator><macro><name>enable_shared_from_this</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>shared_from_this</name><argument_list>()</argument_list></macro>
<block>{<return>return <expr><call><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__weak_this_</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name> <specifier>const</specifier></expr></argument>&gt;</argument_list></name> <macro><name>shared_from_this</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{<return>return <expr><call><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__weak_this_</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>weak_from_this</name><parameter_list>()</parameter_list> _NOEXCEPT
<block>{<block_content> <return>return <expr><name>__weak_this_</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>weak_from_this</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>__weak_this_</name></expr>;</return> }</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name></type> <name>shared_ptr</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>hash</name></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>argument_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__ptr</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><call><name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>element_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><call><name><name>__ptr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
};

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_CharT</name></expr></argument>, <argument><expr><name>class</name> <name>_Traits</name></expr></argument>, <argument><expr><name>class</name> <name>_Yp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>basic_ostream</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>basic_ostream</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__os</name><operator>,</operator> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Yp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><operator>&amp;</operator> <name>__p</name><operator>)</operator></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_ATOMIC_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name> <name>_LIBCPP_TYPE_VIS</name></type> <name>__sp_mut</name>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>__lx</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><name>void</name> <macro><name>lock</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>void</name> <macro><name>unlock</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>_LIBCPP_CONSTEXPR</name></type> <name>__sp_mut</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__sp_mut</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__sp_mut</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__sp_mut</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>__sp_mut</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<function_decl><type><name>friend</name> <name>_LIBCPP_FUNC_VIS</name> <name>__sp_mut</name><modifier>&amp;</modifier></type> <name>__get_sp_mut</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>_LIBCPP_FUNC_VIS</name> <name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name>__sp_mut</name><modifier>&amp;</modifier></type> <name>__get_sp_mut</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>atomic_is_lock_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>atomic_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__sp_mut</name><modifier>&amp;</modifier></type> <name>__m</name> <init>= <expr><call><name>__get_sp_mut</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__m</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__q</name> <init>= <expr><operator>*</operator><name>__p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__m</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__q</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>atomic_load_explicit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atomic_load</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name>void</name></type>
<name>atomic_store</name><parameter_list>(<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__sp_mut</name><modifier>&amp;</modifier></type> <name>__m</name> <init>= <expr><call><name>__get_sp_mut</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__m</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__p</name><operator>-&gt;</operator><name>swap</name></name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__m</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name>void</name></type>
<name>atomic_store_explicit</name><parameter_list>(<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__r</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>atomic_exchange</name><parameter_list>(<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__sp_mut</name><modifier>&amp;</modifier></type> <name>__m</name> <init>= <expr><call><name>__get_sp_mut</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__m</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__p</name><operator>-&gt;</operator><name>swap</name></name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__m</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>atomic_exchange_explicit</name><parameter_list>(<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__r</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atomic_exchange</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name>bool</name></type>
<name>atomic_compare_exchange_strong</name><parameter_list>(<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__v</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__sp_mut</name><modifier>&amp;</modifier></type> <name>__m</name> <init>= <expr><call><name>__get_sp_mut</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__m</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>__p</name><operator>-&gt;</operator><name>__owner_equivalent</name></name><argument_list>(<argument><expr><operator>*</operator><name>__v</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__temp</name></expr></argument>, <argument><expr><operator>*</operator><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>__p</name> <operator>=</operator> <name>__w</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__m</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__temp</name></expr></argument>, <argument><expr><operator>*</operator><name>__v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>__v</name> <operator>=</operator> <operator>*</operator><name>__p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__m</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name>bool</name></type>
<name>atomic_compare_exchange_weak</name><parameter_list>(<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__v</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__v</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name>bool</name></type>
<name>atomic_compare_exchange_strong_explicit</name><parameter_list>(<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__v</name></decl></parameter>,
<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__w</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type></decl></parameter>, <parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__v</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR</name>
<name>bool</name></type>
<name>atomic_compare_exchange_weak_explicit</name><parameter_list>(<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>__v</name></decl></parameter>,
<parameter><decl><type><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__w</name></decl></parameter>, <parameter><decl><type><name>memory_order</name></type></decl></parameter>, <parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atomic_compare_exchange_weak</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__v</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
