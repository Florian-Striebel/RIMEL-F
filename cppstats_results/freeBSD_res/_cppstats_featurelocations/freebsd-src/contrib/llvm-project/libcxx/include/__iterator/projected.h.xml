<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/projected.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_PROJECTED_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_PROJECTED_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/incrementable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>indirectly_readable</name> <name>_It</name></expr></argument>, <argument><expr><name><name>indirectly_regular_unary_invocable</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name> <name>_Proj</name></expr></argument>&gt;</argument_list></name>
struct <name>projected</name> <block>{
<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name><name>indirect_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Proj</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name><name>indirect_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Proj</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>weakly_incrementable</name> <name>_It</name></expr><operator>,</operator> <expr><name>class</name> <name>_Proj</name><operator>&gt;</operator>
struct <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name><name>projected</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>, <argument><expr><name>_Proj</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
