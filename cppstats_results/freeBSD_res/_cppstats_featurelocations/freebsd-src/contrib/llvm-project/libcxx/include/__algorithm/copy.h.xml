<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/copy.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_COPY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_COPY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/unwrap_iter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>



<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_OutputIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>_OutputIterator</name></type>
<name>__copy_constexpr</name><parameter_list>(<parameter><decl><type><name>_InputIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_InputIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_OutputIterator</name></type> <name>__result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__first</name> <operator>!=</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__result</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>__result</name> <operator>=</operator> <operator>*</operator><name>__first</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>__result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_OutputIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_OutputIterator</name></type>
<name>__copy</name><parameter_list>(<parameter><decl><type><name>_InputIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_InputIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_OutputIterator</name></type> <name>__result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__copy_constexpr</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>remove_const</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_trivially_copy_assignable</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>_Up</name><operator>*</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__copy</name><argument_list>(<argument>_Tp* __first</argument>, <argument>_Tp* __last</argument>, <argument>_Up* __result</argument>)</argument_list></macro>
<block>{
<expr><specifier>const</specifier> <name>size_t</name> <name>__n</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__last</name> <operator>-</operator> <name>__first</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>memmove</name><argument_list>(<argument><expr><name>__result</name></expr></argument>, <argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Up</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>__result</name> <operator>+</operator> <name>__n</name></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_InputIterator</name></expr><operator>,</operator> <expr><name>class</name> <name>_OutputIterator</name><operator>&gt;</operator>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>_OutputIterator</name>
<macro><name>copy</name><argument_list>(<argument>_InputIterator __first</argument>, <argument>_InputIterator __last</argument>, <argument>_OutputIterator __result</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><call><name>__libcpp_is_constant_evaluated</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__copy_constexpr</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__result</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__rewrap_iter</name><argument_list>(<argument><expr><name>__result</name></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><call><name>__copy</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>__unwrap_iter</name><argument_list>(<argument><expr><name>__first</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><call><name>__unwrap_iter</name><argument_list>(<argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><call><name>__unwrap_iter</name><argument_list>(<argument><expr><name>__result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
}

_LIBCPP_END_NAMESPACE_STD

<expr><name>_LIBCPP_POP_MACROS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
