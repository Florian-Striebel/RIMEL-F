<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/stable_partition.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_STABLE_PARTITION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_STABLE_PARTITION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/rotate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/swap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Predicate</name></expr></argument>, <argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name></expr></argument>, <argument><expr><name>class</name> <name>_Pair</name></expr></argument>&gt;</argument_list></name>
<name>_ForwardIterator</name></type>
<name>__stable_partition</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Predicate</name></type> <name>__pred</name></decl></parameter>,
<parameter><decl><type><name>_Distance</name></type> <name>__len</name></decl></parameter>, <parameter><decl><type><name>_Pair</name></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name>forward_iterator_tag</name></type> <name>__fit</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__first</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__m</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>__m</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__m</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>__first</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&lt;=</operator> <name><name>__p</name><operator>.</operator><name>second</name></name></expr>)</condition>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>__destruct_n</name></type> <name>__d</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>__destruct_n</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></type> <name>__h</name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>value_type</name><modifier>*</modifier></type> <name>__t</name> <init>= <expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__t</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name><name>__d</name><operator>.</operator><name>template</name></name></type> <name><name>__incr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><operator>++</operator><name>__t</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__i</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>++</operator><name>__i</name> <operator>!=</operator> <name>__last</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__first</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__first</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__t</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name><name>__d</name><operator>.</operator><name>template</name></name></type> <name><name>__incr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><operator>++</operator><name>__t</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>__i</name> <operator>=</operator> <name>__first</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>value_type</name><modifier>*</modifier></type> <name>__t2</name> <init>= <expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>__t2</name> <operator>&lt;</operator> <name>__t</name></expr>;</condition> <incr><expr><operator>++</operator><name>__t2</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>__i</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>__first</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__m</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Distance</name></type> <name>__len2</name> <init>= <expr><name>__len</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>advance</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Predicate</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_PredRef</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__first_false</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name><name>__stable_partition</name><argument_list type="generic">&lt;<argument><expr><name>_PredRef</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__pred</name></expr></argument>, <argument><expr><name>__len2</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__fit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__m1</name> <init>= <expr><name>__m</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__second_false</name> <init>= <expr><name>__last</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Distance</name></type> <name>__len_half</name> <init>= <expr><name>__len</name> <operator>-</operator> <name>__len2</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><name>__m1</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>__m1</name> <operator>==</operator> <name>__last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>__second_half_done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>__len_half</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>__second_false</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__stable_partition</name><argument_list type="generic">&lt;<argument><expr><name>_PredRef</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__pred</name></expr></argument>, <argument><expr><name>__len_half</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__fit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>__second_half_done</name>:</label>


<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>rotate</name><argument_list>(<argument><expr><name>__first_false</name></expr></argument>, <argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__second_false</name></expr></argument>)</argument_list></call></expr>;</return>


</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Predicate</name></expr></argument>, <argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<name>_ForwardIterator</name></type>
<name>__stable_partition</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Predicate</name></type> <name>__pred</name></decl></parameter>,
<parameter><decl><type><name>forward_iterator_tag</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>__alloc_limit</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__first</name> <operator>==</operator> <name>__last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__first</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>__first</name></expr>;</expr_stmt>
</block_content>}</block></while>


<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__len</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name><modifier>*</modifier></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>&gt;</argument_list></name></type> <name>__p</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>__return_temporary_buffer</name></expr></argument>&gt;</argument_list></name></type> <name>__h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&gt;=</operator> <name>__alloc_limit</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__p</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>get_temporary_buffer</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__h</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__stable_partition</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Predicate</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__pred</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>, <argument><expr><call><name>forward_iterator_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Predicate</name></expr></argument>, <argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name></expr></argument>, <argument><expr><name>class</name> <name>_Pair</name></expr></argument>&gt;</argument_list></name>
<name>_BidirectionalIterator</name></type>
<name>__stable_partition</name><parameter_list>(<parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Predicate</name></type> <name>__pred</name></decl></parameter>,
<parameter><decl><type><name>_Distance</name></type> <name>__len</name></decl></parameter>, <parameter><decl><type><name>_Pair</name></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name>bidirectional_iterator_tag</name></type> <name>__bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__last</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__m</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>__m</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__m</name></expr></argument>, <argument><expr><operator>*</operator><name>__last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__last</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__m</name></expr></argument>, <argument><expr><operator>*</operator><name>__last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__m</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&lt;=</operator> <name><name>__p</name><operator>.</operator><name>second</name></name></expr>)</condition>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>__destruct_n</name></type> <name>__d</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>__destruct_n</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></type> <name>__h</name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>value_type</name><modifier>*</modifier></type> <name>__t</name> <init>= <expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__t</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name><name>__d</name><operator>.</operator><name>template</name></name></type> <name><name>__incr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><operator>++</operator><name>__t</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__i</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>++</operator><name>__i</name> <operator>!=</operator> <name>__last</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__first</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__first</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__t</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name><name>__d</name><operator>.</operator><name>template</name></name></type> <name><name>__incr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><operator>++</operator><name>__t</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>__first</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__i</name> <operator>=</operator> <operator>++</operator><name>__first</name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>value_type</name><modifier>*</modifier></type> <name>__t2</name> <init>= <expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>__t2</name> <operator>&lt;</operator> <name>__t</name></expr>;</condition> <incr><expr><operator>++</operator><name>__t2</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>__i</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>__first</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__m</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Distance</name></type> <name>__len2</name> <init>= <expr><name>__len</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>advance</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__m1</name> <init>= <expr><name>__m</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__first_false</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Distance</name></type> <name>__len_half</name> <init>= <expr><name>__len2</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>__m1</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__m1</name> <operator>==</operator> <name>__first</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>__first_half_done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>__len_half</name></expr>;</expr_stmt>
</block_content>}</block></while>


<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Predicate</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_PredRef</name></expr>;</expr_stmt></typedef>
<expr_stmt><expr><name>__first_false</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__stable_partition</name><argument_list type="generic">&lt;<argument><expr><name>_PredRef</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__pred</name></expr></argument>, <argument><expr><name>__len_half</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>__first_half_done</name>:</label>



<expr_stmt><expr><name>__m1</name> <operator>=</operator> <name>__m</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__second_false</name> <init>= <expr><name>__last</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>__second_false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__len_half</name> <operator>=</operator> <name>__len</name> <operator>-</operator> <name>__len2</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><name>__m1</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>__m1</name> <operator>==</operator> <name>__last</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>__second_half_done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>__len_half</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>__second_false</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__stable_partition</name><argument_list type="generic">&lt;<argument><expr><name>_PredRef</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__pred</name></expr></argument>, <argument><expr><name>__len_half</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>__second_half_done</name>:</label>


<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>rotate</name><argument_list>(<argument><expr><name>__first_false</name></expr></argument>, <argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__second_false</name></expr></argument>)</argument_list></call></expr>;</return>


</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Predicate</name></expr></argument>, <argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name>
<name>_BidirectionalIterator</name></type>
<name>__stable_partition</name><parameter_list>(<parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Predicate</name></type> <name>__pred</name></decl></parameter>,
<parameter><decl><type><name>bidirectional_iterator_tag</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>difference_type</name></type> <name>__alloc_limit</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__first</name> <operator>==</operator> <name>__last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__first</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>__first</name></expr>;</expr_stmt>
</block_content>}</block></while>


<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__first</name> <operator>==</operator> <operator>--</operator><name>__last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__first</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><name>__last</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>




<decl_stmt><decl><type><name>difference_type</name></type> <name>__len</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name><modifier>*</modifier></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>&gt;</argument_list></name></type> <name>__p</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>__return_temporary_buffer</name></expr></argument>&gt;</argument_list></name></type> <name>__h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&gt;=</operator> <name>__alloc_limit</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__p</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>get_temporary_buffer</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__h</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__stable_partition</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Predicate</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__pred</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>, <argument><expr><call><name>bidirectional_iterator_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Predicate</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ForwardIterator</name></type>
<name>stable_partition</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Predicate</name></type> <name>__pred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><macro><name>__stable_partition</name></macro><operator>&lt;</operator><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Predicate</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>&gt;</operator>
<operator>(</operator><name>__first</name><operator>,</operator> <name>__last</name><operator>,</operator> <name>__pred</name><operator>,</operator> <name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>iterator_category</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
