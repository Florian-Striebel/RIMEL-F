<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/comp_ref_type.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_COMP_REF_TYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_COMP_REF_TYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>&gt;</argument_list></name>
struct <name>__debug_less</name>
<block>{
<expr><name>_Compare</name> <operator>&amp;</operator><name>__comp_</name></expr>;
<expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<call><name>__debug_less</name><argument_list>(<argument><expr><name>_Compare</name><operator>&amp;</operator> <name>__c</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__comp_</name><argument_list>(<argument>__c</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Up</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<expr><name>bool</name> <name>__r</name> <operator>=</operator> <call><name>__comp_</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>__r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__do_compare_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>__r</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <name>_Up</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<expr><name>bool</name> <name>__r</name> <operator>=</operator> <call><name>__comp_</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>__r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__do_compare_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>__r</name></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_LHS</name></expr><operator>,</operator> <expr><name>class</name> <name>_RHS</name><operator>&gt;</operator>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<macro><name>decltype</name><argument_list>(<argument>(void)declval&lt;_Compare&amp;&gt;()(
declval&lt;_LHS &amp;&gt;(), declval&lt;_RHS &amp;&gt;())</argument>)</argument_list></macro>
<macro><name>__do_compare_assert</name><argument_list>(<argument>int</argument>, <argument>_LHS &amp; __l</argument>, <argument>_RHS &amp; __r</argument>)</argument_list></macro> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>__comp_</name><argument_list>(<argument><expr><name>__l</name></expr></argument>, <argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Comparator does not induce a strict weak ordering"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_LHS</name></expr></argument>, <argument><expr><name>class</name> <name>_RHS</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name> <macro><name>__do_compare_assert</name><argument_list>(<argument>long</argument>, <argument>_LHS &amp;</argument>, <argument>_RHS &amp;</argument>)</argument_list></macro> <block>{}</block></expr></expr_stmt>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Comp</name><operator>&gt;</operator>
struct <name>__comp_ref_type</name> <block>{


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Comp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name><name>__debug_less</name><argument_list type="generic">&lt;<argument><expr><name>_Comp</name></expr></argument>&gt;</argument_list></name></type> <name>type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};


<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
