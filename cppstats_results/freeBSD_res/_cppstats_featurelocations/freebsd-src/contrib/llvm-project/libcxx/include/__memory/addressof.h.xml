<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/addressof.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_ADDRESSOF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_ADDRESSOF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_BUILTIN_ADDRESSOF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>_LIBCPP_NO_CFI</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name><modifier>*</modifier></type>
<name>addressof</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><call><name>__builtin_addressof</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_NO_CFI</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name><modifier>*</modifier></type>
<name>addressof</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <specifier>volatile</specifier> <name>char</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_OBJC_ARC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_PREDEFINED_OBJC_ARC_ADDRESSOF</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<specifier>__strong</specifier> <name>_Tp</name><modifier>*</modifier></type>
<name>addressof</name><parameter_list>(<parameter><decl><type><specifier>__strong</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>__x</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_OBJC_ARC_WEAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<specifier>__weak</specifier> <name>_Tp</name><modifier>*</modifier></type>
<name>addressof</name><parameter_list>(<parameter><decl><type><specifier>__weak</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>__x</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>__autoreleasing</name> <name>_Tp</name><modifier>*</modifier></type>
<name>addressof</name><parameter_list>(<parameter><decl><type><name>__autoreleasing</name> <name>_Tp</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>__x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>__unsafe_unretained</name> <name>_Tp</name><modifier>*</modifier></type>
<name>addressof</name><parameter_list>(<parameter><decl><type><name>__unsafe_unretained</name> <name>_Tp</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>__x</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>_Tp</name><modifier>*</modifier></type> <name>addressof</name><argument_list>(<argument><expr><specifier>const</specifier> <name>_Tp</name><operator>&amp;&amp;</operator></expr></argument>)</argument_list> <name>noexcept</name> <init>= <expr><name>delete</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
