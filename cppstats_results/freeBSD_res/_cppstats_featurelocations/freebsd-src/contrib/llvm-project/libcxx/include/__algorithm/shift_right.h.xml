<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/shift_right.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_SHIFT_RIGHT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_SHIFT_RIGHT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/move_backward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/swap_ranges.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name>
<name>_ForwardIterator</name></type>
<name>shift_right</name><argument_list>(<argument><expr><name>_ForwardIterator</name> <name>__first</name></expr></argument>, <argument><expr><name>_ForwardIterator</name> <name>__last</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>__n</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>__first</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if constexpr <condition>(<expr><name><name>__is_cpp17_random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition> <block>{<block_content>
<macro><name>decltype</name><argument_list>(<argument>__n</argument>)</argument_list></macro> <expr_stmt><expr><name>__d</name> <operator>=</operator> <name>__last</name> <operator>-</operator> <name>__first</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>&gt;=</operator> <name>__d</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>__last</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__m</name> <init>= <expr><name>__first</name> <operator>+</operator> <operator>(</operator><name>__d</name> <operator>-</operator> <name>__n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move_backward</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if constexpr <condition>(<expr><name><name>__is_cpp17_bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__m</name> <init>= <expr><name>__last</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>__n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__m</name> <operator>==</operator> <name>__first</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>__last</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>__m</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move_backward</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__ret</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>__n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__ret</name> <operator>==</operator> <name>__last</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>__last</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>__ret</name></expr>;</expr_stmt>
</block_content>}</block></for>







<decl_stmt><decl><type><name>auto</name></type> <name>__trail</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>__lead</name> <init>= <expr><name>__ret</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>__trail</name> <operator>!=</operator> <name>__ret</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__lead</name> <operator>==</operator> <name>__last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__trail</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>__trail</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__lead</name></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__mid</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__lead</name> <operator>==</operator> <name>__last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__trail</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__mid</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__trail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__mid</name></expr></argument>, <argument><expr><name>__trail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__mid</name></expr></argument>, <argument><expr><operator>*</operator><name>__trail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__mid</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__trail</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__lead</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__mid</name> <operator>==</operator> <name>__ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__mid</name> <operator>=</operator> <name>__first</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
