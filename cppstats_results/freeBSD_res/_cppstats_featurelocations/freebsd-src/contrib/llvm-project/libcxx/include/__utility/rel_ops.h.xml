<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__utility/rel_ops.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___UTILITY_REL_OPS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___UTILITY_REL_OPS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name>namespace</name></type> <name>rel_ops</name>
<block>{<block_content>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>==</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&gt;</operator> <operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><name>__y</name> <operator>&lt;</operator> <name>__x</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__y</name> <operator>&lt;</operator> <name>__x</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>&lt;</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
