<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/uses_allocator.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_USES_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_USES_ALLOCATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name>__has_allocator_type</name>
<block>{
<expr><name>private</name><operator>:</operator>
struct <name>__two</name> <block>{<expr><name>char</name> <name>__lx</name></expr>; <expr><name>char</name> <name>__lxx</name></expr>;}</block></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>__two</name> <call><name>__test</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>char</name> <macro><name>__test</name><argument_list>(<argument>typename _Up::allocator_type* = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name><name>__test</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">1</literal></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__has_allocator_type</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__uses_allocator</name>
<range>: <expr><name>public</name> <name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>typename</name> <name>_Tp</name><operator>::</operator><name>allocator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__uses_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name>false_type</name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>uses_allocator</name>
<range>: <expr><name>public</name> <name><name>__uses_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VAR</name> <name>constexpr</name> <name>size_t</name></type> <name>uses_allocator_v</name> <init>= <expr><name><name>uses_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
