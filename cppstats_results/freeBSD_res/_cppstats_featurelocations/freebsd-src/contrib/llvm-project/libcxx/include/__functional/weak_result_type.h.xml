<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/weak_result_type.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_WEAK_RESULT_TYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_WEAK_RESULT_TYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/binary_function.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/unary_function.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name>__has_result_type</name>
<block>{
<expr><name>private</name><operator>:</operator>
struct <name>__two</name> <block>{<expr><name>char</name> <name>__lx</name></expr>; <expr><name>char</name> <name>__lxx</name></expr>;}</block></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>__two</name> <call><name>__test</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>char</name> <macro><name>__test</name><argument_list>(<argument>typename _Up::result_type* = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name><name>__test</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">1</literal></expr>;
}</block></expr>;</expr_stmt>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name>__derives_from_unary_function</name>
<block>{
<expr><name>private</name><operator>:</operator>
struct <name>__two</name> <block>{<expr><name>char</name> <name>__lx</name></expr>; <expr><name>char</name> <name>__lxx</name></expr>;}</block></expr>;
<expr><specifier>static</specifier> <name>__two</name> <call><name>__test</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ap</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<call><name>__test</name><argument_list>(<argument><expr><specifier>const</specifier> <specifier>volatile</specifier> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name><operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name>__test</name><operator>(</operator><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>__two</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;
<typedef>typedef <macro><name>decltype</name><argument_list>(<argument>__test((_Tp*)<literal type="number">0</literal>)</argument>)</argument_list></macro> <expr_stmt><expr><name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name>__derives_from_binary_function</name>
<block>{
<expr><name>private</name><operator>:</operator>
struct <name>__two</name> <block>{<expr><name>char</name> <name>__lx</name></expr>; <expr><name>char</name> <name>__lxx</name></expr>;}</block></expr>;
<expr><specifier>static</specifier> <name>__two</name> <call><name>__test</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<call><name>__test</name><argument_list>(<argument><expr><specifier>const</specifier> <specifier>volatile</specifier> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name><operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name>__test</name><operator>(</operator><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>__two</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;
<typedef>typedef <macro><name>decltype</name><argument_list>(<argument>__test((_Tp*)<literal type="number">0</literal>)</argument>)</argument_list></macro> <expr_stmt><expr><name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__derives_from_unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__maybe_derive_from_unary_function</name>
<range>: <expr><name>public</name> <name><name>__derives_from_unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name><name>__maybe_derive_from_unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__derives_from_binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__maybe_derive_from_binary_function</name>
<range>: <expr><name>public</name> <name><name>__derives_from_binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name><name>__maybe_derive_from_binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__has_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__weak_result_type_imp</name>
<range>: <expr><name>public</name> <name><name>__maybe_derive_from_unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>__maybe_derive_from_binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name>_Tp</name><operator>::</operator><name>result_type</name> <name>result_type</name></expr>;</expr_stmt></typedef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__maybe_derive_from_unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>__maybe_derive_from_binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__weak_result_type</name>
<range>: <expr><name>public</name> <name><name>__weak_result_type_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
struct <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name>_Rp</name></type> <name>result_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
struct <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><operator>&amp;</operator><operator>)</operator><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name>_Rp</name></type> <name>result_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
struct <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name>_Rp</name></type> <name>result_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><operator>&amp;</operator><operator>)</operator><operator>(</operator><name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Cp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Cp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Cp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Cp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Cp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>)</operator> <specifier>volatile</specifier></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><specifier>volatile</specifier> <name>_Cp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Cp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <specifier>volatile</specifier></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <specifier>volatile</specifier> <name>_Cp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><operator>&amp;</operator><operator>)</operator><operator>(</operator><name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Cp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Cp</name><operator>*</operator></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Cp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name><operator>)</operator> <specifier>const</specifier></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Cp</name><operator>*</operator></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Cp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name><operator>)</operator> <specifier>volatile</specifier></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><specifier>volatile</specifier> <name>_Cp</name><operator>*</operator></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Cp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name><operator>)</operator> <specifier>const</specifier> <specifier>volatile</specifier></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <specifier>volatile</specifier> <name>_Cp</name><operator>*</operator></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name></expr><operator>,</operator> <expr><name>class</name> <name>_A3</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_A4</name><operator>&gt;</operator>
struct <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_A1</name>, <name>_A2</name>, <name>_A3</name>, <name>_A4</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name></expr><operator>,</operator> <expr><name>class</name> <name>_A3</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_A4</name><operator>&gt;</operator>
struct <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><operator>&amp;</operator><operator>)</operator><operator>(</operator><name>_A1</name>, <name>_A2</name>, <name>_A3</name>, <name>_A4</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name></expr><operator>,</operator> <expr><name>class</name> <name>_A3</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_A4</name><operator>&gt;</operator>
struct <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name>, <name>_A2</name>, <name>_A3</name>, <name>_A4</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Cp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_A3</name><operator>&gt;</operator>
struct <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name>, <name>_A2</name>, <name>_A3</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Cp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_A3</name><operator>&gt;</operator>
struct <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name>, <name>_A2</name>, <name>_A3</name><operator>...</operator><operator>)</operator> <specifier>const</specifier></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Cp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_A3</name><operator>&gt;</operator>
struct <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name>, <name>_A2</name>, <name>_A3</name><operator>...</operator><operator>)</operator> <specifier>volatile</specifier></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Cp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_A3</name><operator>&gt;</operator>
struct <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Cp</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>_A1</name>, <name>_A2</name>, <name>_A3</name><operator>...</operator><operator>)</operator> <specifier>const</specifier> <specifier>volatile</specifier></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Args</name><operator>&gt;</operator>
struct <name>__invoke_return</name>
<block>{
<typedef>typedef <macro><name>decltype</name><argument_list>(<argument>_VSTD::__invoke(declval&lt;_Tp&gt;(), declval&lt;_Args&gt;()...)</argument>)</argument_list></macro> <expr_stmt><expr><name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ret</name></expr><operator>,</operator> <expr><name>class</name> <name>_T1</name></expr><operator>,</operator> <expr><name>bool</name> <name>_IsFunc</name></expr><operator>,</operator> <expr><name>bool</name> <name>_IsBase</name><operator>&gt;</operator>
struct <name>__enable_invoke_imp</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ret</name></expr><operator>,</operator> <expr><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__enable_invoke_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Ret</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>_Ret</name></type> <name>_Bullet1</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>_Bullet1</name></type> <name>type</name>;</typedef>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ret</name></expr><operator>,</operator> <expr><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__enable_invoke_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Ret</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>_Ret</name></type> <name>_Bullet2</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>_Bullet2</name></type> <name>type</name>;</typedef>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ret</name></expr><operator>,</operator> <expr><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__enable_invoke_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Ret</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;
<argument><expr><name>typename</name> <name><name>__apply_cv</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_Ret</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Bullet3</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>_Bullet3</name></type> <name>type</name>;</typedef>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ret</name></expr><operator>,</operator> <expr><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__enable_invoke_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Ret</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;
<argument><expr><name>typename</name> <name><name>__apply_cv</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><operator>*</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>_Ret</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Bullet4</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>_Bullet4</name></type> <name>type</name>;</typedef>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ret</name></expr><operator>,</operator> <expr><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__enable_invoke_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Ret</name></expr></argument>, <argument><expr><name>_T1</name><operator>*</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;
<argument><expr><name>typename</name> <name><name>__apply_cv</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_Ret</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Bullet4</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>_Bullet4</name></type> <name>type</name>;</typedef>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>,
<argument><expr><name>class</name> <name>_Traits</name> <operator>=</operator> <name><name>__member_pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>class</name> <name>_Ret</name> <operator>=</operator> <name>typename</name> <name>_Traits</name><operator>::</operator><name>_ReturnType</name></expr></argument>,
<argument><expr><name>class</name> <name>_Class</name> <operator>=</operator> <name>typename</name> <name>_Traits</name><operator>::</operator><name>_ClassType</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__enable_invoke</name> <range>: <expr><name><name>__enable_invoke_imp</name><argument_list type="generic">&lt;
<argument><expr><name>_Ret</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>,
<argument><expr><name><name>is_member_function_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>_Class</name></expr></argument>, <argument><expr><name>typename</name> <name><name>remove_reference</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name>__nat</name></type> <name>__invoke</name><parameter_list>(<parameter><decl><type><name>__any</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>_Bullet1</name>
<macro><name>__invoke</name><argument_list>(<argument>_Fn __f</argument>, <argument>_T1&amp; __t1</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>__t1</name><operator>.*</operator><name>__f</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>_Bullet1</name>
<macro><name>__invoke</name><argument_list>(<argument>_Fn __f</argument>, <argument>_T1&amp; __t1</argument>, <argument>_A0&amp; __a0</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>__t1</name><operator>.*</operator><name>__f</name><operator>)</operator><operator>(</operator><name>__a0</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>_Bullet1</name>
<macro><name>__invoke</name><argument_list>(<argument>_Fn __f</argument>, <argument>_T1&amp; __t1</argument>, <argument>_A0&amp; __a0</argument>, <argument>_A1&amp; __a1</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>__t1</name><operator>.*</operator><name>__f</name><operator>)</operator><operator>(</operator><name>__a0</name><operator>,</operator> <name>__a1</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>_Bullet1</name>
<macro><name>__invoke</name><argument_list>(<argument>_Fn __f</argument>, <argument>_T1&amp; __t1</argument>, <argument>_A0&amp; __a0</argument>, <argument>_A1&amp; __a1</argument>, <argument>_A2&amp; __a2</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>__t1</name><operator>.*</operator><name>__f</name><operator>)</operator><operator>(</operator><name>__a0</name><operator>,</operator> <name>__a1</name><operator>,</operator> <name>__a2</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>_Bullet2</name>
<macro><name>__invoke</name><argument_list>(<argument>_Fn __f</argument>, <argument>_T1&amp; __t1</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>__t1</name><operator>)</operator><operator>.*</operator><name>__f</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>_Bullet2</name>
<macro><name>__invoke</name><argument_list>(<argument>_Fn __f</argument>, <argument>_T1&amp; __t1</argument>, <argument>_A0&amp; __a0</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>__t1</name><operator>)</operator><operator>.*</operator><name>__f</name><operator>)</operator><operator>(</operator><name>__a0</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>_Bullet2</name>
<macro><name>__invoke</name><argument_list>(<argument>_Fn __f</argument>, <argument>_T1&amp; __t1</argument>, <argument>_A0&amp; __a0</argument>, <argument>_A1&amp; __a1</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>__t1</name><operator>)</operator><operator>.*</operator><name>__f</name><operator>)</operator><operator>(</operator><name>__a0</name><operator>,</operator> <name>__a1</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>_Bullet2</name>
<macro><name>__invoke</name><argument_list>(<argument>_Fn __f</argument>, <argument>_T1&amp; __t1</argument>, <argument>_A0&amp; __a0</argument>, <argument>_A1&amp; __a1</argument>, <argument>_A2&amp; __a2</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>__t1</name><operator>)</operator><operator>.*</operator><name>__f</name><operator>)</operator><operator>(</operator><name>__a0</name><operator>,</operator> <name>__a1</name><operator>,</operator> <name>__a2</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>_Bullet3</name>
<macro><name>__invoke</name><argument_list>(<argument>_Fn __f</argument>, <argument>_T1&amp; __t1</argument>)</argument_list></macro> <block>{
<return>return <expr><name>__t1</name><operator>.*</operator><name>__f</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>_Bullet4</name>
<macro><name>__invoke</name><argument_list>(<argument>_Fn __f</argument>, <argument>_T1&amp; __t1</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><operator>*</operator><name>__t1</name><operator>)</operator><operator>.*</operator><name>__f</name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>decltype</name><argument_list>(<argument><expr><call><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr></argument>)</argument_list>
<name>__invoke</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;</operator> <name>__f</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__f</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>decltype</name><argument_list>(<argument><expr><call><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_A0</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>__invoke</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_A0</name><operator>&amp;</operator> <name>__a0</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__f</name><argument_list>(<argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>decltype</name><argument_list>(<argument><expr><call><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_A0</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>__invoke</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_A0</name><operator>&amp;</operator> <name>__a0</name></expr></argument>, <argument><expr><name>_A1</name><operator>&amp;</operator> <name>__a1</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__f</name><argument_list>(<argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>decltype</name><argument_list>(<argument><expr><call><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_A0</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>__invoke</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_A0</name><operator>&amp;</operator> <name>__a0</name></expr></argument>, <argument><expr><name>_A1</name><operator>&amp;</operator> <name>__a1</name></expr></argument>, <argument><expr><name>_A2</name><operator>&amp;</operator> <name>__a2</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__f</name><argument_list>(<argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>bool</name> <operator>=</operator> <name><name>__has_result_type</name><argument_list type="generic">&lt;<argument><expr><name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__invoke_return</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>result_type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name><operator>&gt;</operator>
struct <name><name>__invoke_return</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <macro><name>decltype</name><argument_list>(<argument>_VSTD::__invoke(declval&lt;_Fp&amp;&gt;())</argument>)</argument_list></macro> <expr_stmt><expr><name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
struct <name>__invoke_return0</name>
<block>{
<typedef>typedef <macro><name>decltype</name><argument_list>(<argument>_VSTD::__invoke(declval&lt;_Tp&amp;&gt;(), declval&lt;_A0&amp;&gt;())</argument>)</argument_list></macro> <expr_stmt><expr><name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
struct <name><name>__invoke_return0</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <name>_Tp</name><operator>::</operator><operator>*</operator></expr></argument>, <argument><expr><name>_A0</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <name>_Tp</name><operator>::</operator><operator>*</operator></expr></argument>, <argument><expr><name>_A0</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
struct <name>__invoke_return1</name>
<block>{
<typedef>typedef <macro><name>decltype</name><argument_list>(<argument>_VSTD::__invoke(declval&lt;_Tp&amp;&gt;(), declval&lt;_A0&amp;&gt;(),
declval&lt;_A1&amp;&gt;())</argument>)</argument_list></macro> <expr_stmt><expr><name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Class</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
struct <name><name>__invoke_return1</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <name>_Class</name><operator>::</operator><operator>*</operator></expr></argument>, <argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <name>_Class</name><operator>::</operator><operator>*</operator></expr></argument>, <argument><expr><name>_A0</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
struct <name>__invoke_return2</name>
<block>{
<typedef>typedef <macro><name>decltype</name><argument_list>(<argument>_VSTD::__invoke(declval&lt;_Tp&amp;&gt;(), declval&lt;_A0&amp;&gt;(),
declval&lt;_A1&amp;&gt;(),
declval&lt;_A2&amp;&gt;())</argument>)</argument_list></macro> <expr_stmt><expr><name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ret</name></expr><operator>,</operator> <expr><name>class</name> <name>_Class</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
struct <name><name>__invoke_return2</name><argument_list type="generic">&lt;<argument><expr><name>_Ret</name> <name>_Class</name><operator>::</operator><operator>*</operator></expr></argument>, <argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__enable_invoke</name><argument_list type="generic">&lt;<argument><expr><name>_Ret</name> <name>_Class</name><operator>::</operator><operator>*</operator></expr></argument>, <argument><expr><name>_A0</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
