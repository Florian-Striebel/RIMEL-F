<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/function.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_FUNCTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_FUNCTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/binary_function.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/invoke.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/unary_function.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/allocator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/compressed_pair.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/shared_ptr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;exception&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>



<name>class</name> <name>_LIBCPP_EXCEPTION_ABI</name></type> <name>bad_function_call</name>
<range>: <expr><name>public</name> <name>exception</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_BAD_FUNCTION_CALL_KEY_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><macro><name>bad_function_call</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;

<expr><name>virtual</name> <specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>what</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></range></decl>;</decl_stmt>

<function><type><name>_LIBCPP_NORETURN</name> <specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>__throw_bad_function_call</name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>throw</name></type> <name>bad_function_call</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_DISABLE_DEPRECATION_WARNINGS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_attribute</name><argument_list>(<argument><expr><name>deprecated</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_DEPRECATED_CXX03_FUNCTION</name></cpp:macro> <cpp:value>__attribute__((deprecated("Using std::function in C++03 is not supported anymore. Please upgrade to C++11 or later, or use a different type")))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_DEPRECATED_CXX03_FUNCTION</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_LIBCPP_DEPRECATED_CXX03_FUNCTION</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>function</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>__function</name>
<block>{<block_content>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
struct <name>__maybe_derive_from_unary_function</name>
<block>{
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__maybe_derive_from_unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
struct <name>__maybe_derive_from_binary_function</name>
<block>{
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__maybe_derive_from_binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>__not_null</name><parameter_list>(<parameter><decl><type><name>_Fp</name> <specifier>const</specifier><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>__not_null</name><parameter_list>(<parameter><decl><type><name>_Fp</name><modifier>*</modifier></type> <name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__ptr</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ret</name></expr></argument>, <argument><expr><name>class</name> <name>_Class</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>__not_null</name><argument_list>(<argument><expr><name>_Ret</name> <name>_Class</name><operator>::</operator><operator>*</operator><name>__ptr</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name>__ptr</name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>__not_null</name><parameter_list>(<parameter><decl><type><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>__f</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>!</operator><operator>!</operator><name>__f</name></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_EXTENSION_BLOCKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type> <name>__not_null</name><parameter_list>(<parameter><function_decl><type><name>_Rp</name></type> (<modifier>^</modifier><name>__p</name>)<parameter_list>(<parameter><decl><type><name>_Args</name><modifier>...</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__p</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>namespace</name></type> <name>__function</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ap</name></expr></argument>, <argument><expr><name>class</name> <name>_FB</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>__alloc_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_FB</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>__default_alloc_func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ap</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__alloc_func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Ap</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<decl_stmt><decl><type><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>__f_</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name>_Fp</name></type> <name>_Target</name>;</typedef>
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name>_Ap</name></type> <name>_Alloc</name>;</typedef>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<specifier>const</specifier> <name>_Target</name><operator>&amp;</operator> <macro><name>__target</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator> <macro><name>__get_allocator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name></type> <name>__alloc_func</name><argument_list>(<argument><expr><name>_Target</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>)</argument_list>
<range>: <macro><name>__f_</name><argument_list>(<argument>piecewise_construct</argument>, <argument>_VSTD::forward_as_tuple(_VSTD::move(__f))</argument>,
<argument>_VSTD::forward_as_tuple()</argument>)</argument_list></macro>
<expr><block>{
}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <call><name>__alloc_func</name><argument_list>(<argument><expr><specifier>const</specifier> <name>_Target</name><operator>&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator> <name>__a</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>piecewise_construct</argument>, <argument>_VSTD::forward_as_tuple(__f)</argument>,
<argument>_VSTD::forward_as_tuple(__a)</argument>)</argument_list></macro>
<block>{
}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <call><name>__alloc_func</name><argument_list>(<argument><expr><specifier>const</specifier> <name>_Target</name><operator>&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_Alloc</name><operator>&amp;&amp;</operator> <name>__a</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>piecewise_construct</argument>, <argument>_VSTD::forward_as_tuple(__f)</argument>,
<argument>_VSTD::forward_as_tuple(_VSTD::move(__a))</argument>)</argument_list></macro>
<block>{
}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <call><name>__alloc_func</name><argument_list>(<argument><expr><name>_Target</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_Alloc</name><operator>&amp;&amp;</operator> <name>__a</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>piecewise_construct</argument>, <argument>_VSTD::forward_as_tuple(_VSTD::move(__f))</argument>,
<argument>_VSTD::forward_as_tuple(_VSTD::move(__a))</argument>)</argument_list></macro>
<block>{
}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Rp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_ArgTypes</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__arg</name><operator>)</operator>
<block>{
<typedef>typedef <type><name><name>__invoke_void_return_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name></type> <name>_Invoker</name>;</typedef></block></expr></range></decl></decl_stmt>
<return>return <expr><name>_Invoker</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__arg</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>__alloc_func</name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef
<expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__alloc_func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_AA</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_AA</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_AA</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_func</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>__alloc_func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content> <expr_stmt><expr><name><name>__f_</name><operator>.</operator><name/></name>~<call><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Target</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__destroy_and_delete</name><parameter_list>(<parameter><decl><type><name>__alloc_func</name><modifier>*</modifier></type> <name>__f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__alloc_func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_FunAlloc</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_FunAlloc</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f</name><operator>-&gt;</operator><name>__get_allocator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__a</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__default_alloc_func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<decl_stmt><decl><type><name>_Fp</name></type> <name>__f_</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name>_Fp</name></type> <name>_Target</name>;</typedef>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<specifier>const</specifier> <name>_Target</name><operator>&amp;</operator> <macro><name>__target</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>__f_</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name></type> <name>__default_alloc_func</name><argument_list>(<argument><expr><name>_Target</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>)</argument_list> <range>: <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <call><name>__default_alloc_func</name><argument_list>(<argument><expr><specifier>const</specifier> <name>_Target</name><operator>&amp;</operator> <name>__f</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>__f</argument>)</argument_list></macro> <block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Rp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_ArgTypes</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__arg</name><operator>)</operator> <block>{
<typedef>typedef <type><name><name>__invoke_void_return_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name></type> <name>_Invoker</name>;</typedef></block></expr></range></decl></decl_stmt>
<return>return <expr><name>_Invoker</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__arg</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>__default_alloc_func</name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>__builtin_new_allocator</name><operator>::</operator><name>__holder_t</name> <name>__hold</name> <operator>=</operator>
<name>__builtin_new_allocator</name><operator>::</operator><call><name><name>__allocate_type</name><argument_list type="generic">&lt;<argument><expr><name>__default_alloc_func</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>__default_alloc_func</name><operator>*</operator> <name>__res</name> <operator>=</operator>
<operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>__default_alloc_func</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>__res</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content> <expr_stmt><expr><name><name>__f_</name><operator>.</operator><name/></name>~<call><name>_Target</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__destroy_and_delete</name><parameter_list>(<parameter><decl><type><name>__default_alloc_func</name><modifier>*</modifier></type> <name>__f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>__f</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__builtin_new_allocator</name><operator>::</operator><call><name><name>__deallocate_type</name><argument_list type="generic">&lt;<argument><expr><name>__default_alloc_func</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
};



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>__base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<expr_stmt><expr><call><name>__base</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__base</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>__base</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<label><name>public</name>:</label>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name></type> <name>__base</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>virtual</name> <operator>~</operator><macro><name>__base</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>__base</name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>__clone</name><argument_list>(<argument><expr><name>__base</name><operator>*</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <name>void</name> <macro><name>destroy</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>void</name> <macro><name>destroy_deallocate</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>_Rp</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_ArgTypes</name><operator>&amp;&amp;</operator> <operator>...</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>target</name><argument_list>(<argument><expr><specifier>const</specifier> <name>type_info</name><operator>&amp;</operator></expr></argument>)</argument_list> const <name>_NOEXCEPT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_FD</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_FB</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>__func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>__alloc_func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>__f_</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <call><name>__func</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>)</argument_list></macro> <block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <call><name>__func</name><argument_list>(<argument><expr><specifier>const</specifier> <name>_Fp</name><operator>&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator> <name>__a</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>__f</argument>, <argument>__a</argument>)</argument_list></macro> <block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <call><name>__func</name><argument_list>(<argument><expr><specifier>const</specifier> <name>_Fp</name><operator>&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_Alloc</name><operator>&amp;&amp;</operator> <name>__a</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>__f</argument>, <argument>_VSTD::move(__a)</argument>)</argument_list></macro> <block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <call><name>__func</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_Alloc</name><operator>&amp;&amp;</operator> <name>__a</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>, <argument>_VSTD::move(__a)</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>__clone</name><argument_list>(<argument>__base&lt;_Rp(_ArgTypes...)&gt;*</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>destroy</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>destroy_deallocate</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;
<expr><name>virtual</name> <name>_Rp</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_ArgTypes</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__arg</name></expr></argument>)</argument_list></call></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>virtual</name> <specifier>const</specifier> <name>void</name><operator>*</operator> <macro><name>target</name><argument_list>(<argument>const type_info&amp;</argument>)</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name></expr>;
<expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>__get_allocator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__func</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>__target</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_ArgTypes</name><operator>&gt;</operator>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__clone</name><argument_list>(<argument>__base&lt;_Rp(_ArgTypes...)&gt;* __p</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>__target</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__f_</name><operator>.</operator><name>__get_allocator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>destroy</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<expr><call><name><name>__f_</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>destroy_deallocate</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>__get_allocator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__a</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_ArgTypes</name><operator>&gt;</operator>
<name>_Rp</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_ArgTypes</name><operator>&amp;&amp;</operator> <operator>...</operator> <name>__arg</name><operator>)</operator>
<block>{
<return>return <expr><call><name>__f_</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__arg</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>void</name><operator>*</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>(<argument>const type_info&amp; __ti</argument>)</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<if_stmt><if>if <condition>(<expr><name>__ti</name> <operator>==</operator> <call><name>typeid</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><call><name><name>__f_</name><operator>.</operator><name>__target</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_ArgTypes</name><operator>&gt;</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>__value_func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name><name>__value_func</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<expr_stmt><expr><name>typename</name> <name>aligned_storage</name><operator>&lt;</operator><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__buf_</name></expr>;</expr_stmt>

<typedef>typedef <type><name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>__func</name>;</typedef>
<decl_stmt><decl><type><name>__func</name><modifier>*</modifier></type> <name>__f_</name></decl>;</decl_stmt>

<function><type><name>_LIBCPP_NO_CFI</name> <specifier>static</specifier> <name>__func</name><modifier>*</modifier></type> <name>__as_base</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>__func</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<macro><name>__value_func</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <call><name>__value_func</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator> <name>__a</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>_Fun</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_FunAlloc</name></expr>;</expr_stmt></typedef>

<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<function_decl><type><name>_FunAlloc</name></type> <name>__af</name><parameter_list>(<parameter><decl><type><name>__a</name></type></decl></parameter>)</parameter_list>;</function_decl>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_Fun</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_FunAlloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator>
<operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)&amp;__buf_</argument>)</argument_list></macro> <call><name>_Fun</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__af</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_FunAlloc</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__func</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__af</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__af</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>_Fun</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>,
<argument><expr><name>class</name> <operator>=</operator> <name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>, <argument><expr><name>__value_func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name></type> <name>__value_func</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>)</argument_list>
<range>: <macro><name>__value_func</name><argument_list>(<argument>_VSTD::forward&lt;_Fp&gt;(__f)</argument>, <argument>allocator&lt;_Fp&gt;()</argument>)</argument_list></macro> <expr><block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<macro><name>__value_func</name><argument_list>(<argument>const __value_func&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
else
__f_ = __f.__f_-&gt;__clone(</block></if></if_stmt>)</block></expr></range></decl>;</decl_stmt>
}

_LIBCPP_INLINE_VISIBILITY
<macro><name>__value_func</name><argument_list>(<argument>__value_func&amp;&amp; __f</argument>)</argument_list></macro> <macro><name>_NOEXCEPT</name></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<operator>~</operator><macro><name>__value_func</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>__f_</name> <operator>==</operator> <operator>&amp;</operator><name>__buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__f_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy_deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>__value_func</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>__value_func</name><operator>&amp;&amp;</operator> <name>__f</name><operator>)</operator>
<block>{
<expr><operator>*</operator><name>this</name> <operator>=</operator> <name>nullptr</name></expr>;
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
else
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block></block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>__value_func</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>nullptr_t</name><operator>)</operator>
<block>{
<expr><name>__func</name><operator>*</operator> <name>__f</name> <operator>=</operator> <name>__f_</name></expr>;
<expr><name>__f_</name> <operator>=</operator> <name>nullptr</name></expr>;
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>__f</name> <operator>==</operator> <operator>&amp;</operator><name>__buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f</name><operator>-&gt;</operator><name>destroy_deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></init></decl></decl_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

_LIBCPP_INLINE_VISIBILITY
<expr_stmt><expr><name>_Rp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_ArgTypes</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name><operator>)</operator> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_bad_function_call</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call>(<modifier>*</modifier><name>__f_</name>)<argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}

_LIBCPP_INLINE_VISIBILITY
<function><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>__value_func</name><modifier>&amp;</modifier></type> <name>__f</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name>__f</name> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>__f_</name> <operator>==</operator> <operator>&amp;</operator><name>__buf_</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>typename</name> <name>aligned_storage</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__tempbuf</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__func</name><modifier>*</modifier></type> <name>__t</name> <init>= <expr><call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__tempbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>__f_</name> <operator>==</operator> <operator>&amp;</operator><name>__buf_</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <name>__f_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name>__as_base</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>, <argument><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{ <return>return <expr><name>__f_</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>__f_</name><operator>-&gt;</operator><name>target_type</name></name><argument_list>()</argument_list></call></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>_Tp</name><operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <specifier>const</specifier> <name>_Tp</name><operator>*</operator> <macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator><operator>)</operator><call><name><name>__f_</name><operator>-&gt;</operator><name>target</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}<empty_stmt>;</empty_stmt>



<union>union <name>__policy_storage</name>
<block>{
<decl_stmt><decl><type><name>mutable</name> <name>char</name></type> <name><name>__small</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>__large</name></decl>;</decl_stmt>
}</block>;</union>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Fun</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__use_small_storage</name>
<range>: <expr><name>public</name> <name>integral_constant</name><operator>&lt;</operator>
<name>bool</name></expr></range></decl>, sizeof<argument_list>(<argument><expr><name>_Fun</name></expr></argument>)</argument_list> &lt;= sizeof<argument_list>(<argument><expr><name>__policy_storage</name></expr></argument>)</argument_list> &amp;&amp;
<decl><type ref="prev"/><name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>_Fun</name></expr></argument>)</argument_list> &lt;= <name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>__policy_storage</name></expr></argument>)</argument_list> &amp;&amp;
<name><name>is_trivially_copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name>::<name>value</name> &amp;&amp;
<name><name>is_trivially_destructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name>::<name>value</name>&gt; <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<struct>struct <name>__policy</name>
<block>{

<expr_stmt><expr><call><call><name>void</name><argument_list>* <argument><expr><operator>(</operator><operator>*</operator><specifier>const</specifier> <name>__clone</name><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator></expr></argument>;
<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><specifier>const</specifier> <name>__destroy</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>;


<argument><expr><specifier>const</specifier> <name>bool</name> <name>__is_null</name></expr></argument>;


<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>*</operator> <specifier>const</specifier> <name>__type_info</name></expr></argument>;



<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Fun</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <specifier>static</specifier> <specifier>const</specifier> <name>__policy</name><operator>*</operator> <macro><name>__create</name><argument_list>()</argument_list></macro>
<block>{
<return>return <expr><call><name><name>__choose_policy</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__use_small_storage</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></argument></argument_list></call></call></expr></expr_stmt>

<function><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<specifier>static</specifier> <specifier>const</specifier> <name>__policy</name><modifier>*</modifier></type> <name>__create_empty</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_LIBCPP_CONSTEXPR</name> <name>__policy</name></type> <name>__policy_</name> <init>= <expr><block>{<expr><name>nullptr</name></expr>, <expr><name>nullptr</name></expr>,
<expr><name>true</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><macro><name>typeid</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>nullptr</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name>__policy_</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Fun</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>__large_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>_Fun</name><modifier>*</modifier></type> <name>__f</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Fun</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>__f</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Fun</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name></type> <name>__large_destroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>_Fun</name><operator>::</operator><call><name>__destroy_and_delete</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Fun</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <specifier>static</specifier> <specifier>const</specifier> <name>__policy</name><modifier>*</modifier></type>
<name>__choose_policy</name><parameter_list>( <parameter><decl><type><name>false_type</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_LIBCPP_CONSTEXPR</name> <name>__policy</name></type> <name>__policy_</name> <init>= <expr><block>{
<expr><operator>&amp;</operator><name><name>__large_clone</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name></expr>, <expr><operator>&amp;</operator><name><name>__large_destroy</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name></expr>, <expr><name>false</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><macro><name>typeid</name><argument_list>(<argument>typename _Fun::_Target</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>nullptr</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name>__policy_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Fun</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <specifier>static</specifier> <specifier>const</specifier> <name>__policy</name><modifier>*</modifier></type>
<name>__choose_policy</name><parameter_list>( <parameter><decl><type><name>true_type</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_LIBCPP_CONSTEXPR</name> <name>__policy</name></type> <name>__policy_</name> <init>= <expr><block>{
<expr><name>nullptr</name></expr>, <expr><name>nullptr</name></expr>, <expr><name>false</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><macro><name>typeid</name><argument_list>(<argument>typename _Fun::_Target</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>nullptr</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name>__policy_</name></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>__fast_forward</name> <init>=
<expr><name>typename</name> <name><name>conditional</name><argument_list type="generic">&lt;<argument><expr><name><name>is_scalar</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name><operator>&amp;&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name><operator>&gt;</operator> struct <name>__policy_invoker</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name><operator>...</operator> <name>_ArgTypes</name><operator>&gt;</operator>
struct <name><name>__policy_invoker</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <function_decl><type><name>_Rp</name></type> (<modifier>*</modifier><name>__Call</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__policy_storage</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>__fast_forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<name>__Call</name> <name>__call_</name></block></expr>;</expr_stmt>


<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro>
<expr_stmt><expr><call><name>__policy_invoker</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>__call_</name><argument_list>(<argument>&amp;__call_empty</argument>)</argument_list></macro> <block>{}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Fun</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <specifier>static</specifier> <name>__policy_invoker</name> <macro><name>__create</name><argument_list>()</argument_list></macro>
<block>{
<return>return <expr><call><name>__policy_invoker</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__call_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro>
<macro><name>explicit</name></macro> <macro><name>__policy_invoker</name><argument_list>(<argument>__Call __c</argument>)</argument_list></macro> : <macro><name>__call_</name><argument_list>(<argument>__c</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<function><type><specifier>static</specifier> <name>_Rp</name></type> <name>__call_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__policy_storage</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>__fast_forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__throw_bad_function_call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Fun</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>_Rp</name></type> <name>__call_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>__policy_storage</name><modifier>*</modifier></type> <name>__buf</name></decl></parameter>,
<parameter><decl><type><name><name>__fast_forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><modifier>...</modifier></type> <name>__args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_Fun</name><modifier>*</modifier></type> <name>__f</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>__use_small_storage</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>
?</condition><then> <expr><operator>&amp;</operator><name><name>__buf</name><operator>-&gt;</operator><name>__small</name></name></expr>
</then><else>: <expr><name><name>__buf</name><operator>-&gt;</operator><name>__large</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call>(<modifier>*</modifier><name>__f</name>)<argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
};




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>__policy_func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name><name>__policy_func</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{<block_content>

<decl_stmt><decl><type><name>__policy_storage</name></type> <name>__buf_</name></decl>;</decl_stmt>




<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__policy_invoker</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>__invoker</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>__invoker</name></type> <name>__invoker_</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>__policy</name><modifier>*</modifier></type> <name>__policy_</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro>
<expr_stmt><expr><call><name>__policy_func</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>__policy_</name><argument_list>(<argument>__policy::__create_empty()</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <call><name>__policy_func</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator> <name>__a</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__policy_</name><argument_list>(<argument>__policy::__create_empty()</argument>)</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>__alloc_func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>_Fun</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>_FunAlloc</name></expr>;</expr_stmt></typedef>

<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__invoker_</name> <operator>=</operator> <name>__invoker</name><operator>::</operator><name>template</name> <call><name><name>__create</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__policy_</name> <operator>=</operator> <name>__policy</name><operator>::</operator><call><name><name>__create</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>_FunAlloc</name></type> <name>__af</name><parameter_list>(<parameter><decl><type><name>__a</name></type></decl></parameter>)</parameter_list>;</function_decl>
<if_stmt><if>if <condition>(<expr><call><name><name>__use_small_storage</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)&amp;__buf_.__small</argument>)</argument_list></macro>
<call><name>_Fun</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__af</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_FunAlloc</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__af</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__af</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro>
<call><name>_Fun</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__af</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__buf_</name><operator>.</operator><name>__large</name></name> <operator>=</operator> <call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>, <argument><expr><name>__policy_func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name></type> <name>__policy_func</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>)</argument_list>
<range>: <macro><name>__policy_</name><argument_list>(<argument>__policy::__create_empty()</argument>)</argument_list></macro> <expr><block>{
<typedef>typedef <type><name><name>__default_alloc_func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>_Fun</name>;</typedef></block></expr></range></decl></decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__invoker_</name> <operator>=</operator> <name>__invoker</name><operator>::</operator><name>template</name> <call><name><name>__create</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__policy_</name> <operator>=</operator> <name>__policy</name><operator>::</operator><call><name><name>__create</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>__use_small_storage</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)&amp;__buf_.__small</argument>)</argument_list></macro> <call><name>_Fun</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>__builtin_new_allocator</name><operator>::</operator><name>__holder_t</name> <name>__hold</name> <operator>=</operator>
<name>__builtin_new_allocator</name><operator>::</operator><call><name><name>__allocate_type</name><argument_list type="generic">&lt;<argument><expr><name>_Fun</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__buf_</name><operator>.</operator><name>__large</name></name> <operator>=</operator> <operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>_Fun</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
}

_LIBCPP_INLINE_VISIBILITY
<expr_stmt><expr><call><name>__policy_func</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__policy_func</name><operator>&amp;</operator> <name>__f</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>__buf_</name><argument_list>(<argument><expr><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>__invoker_</name><argument_list>(<argument><expr><name><name>__f</name><operator>.</operator><name>__invoker_</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__policy_</name><argument_list>(<argument>__f.__policy_</argument>)</argument_list></macro>
<expr><block>{
<if_stmt><if>if <condition>(<expr><name><name>__policy_</name><operator>-&gt;</operator><name>__clone</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>__buf_</name><operator>.</operator><name>__large</name></name> <operator>=</operator> <call><name><name>__policy_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name><name>__f</name><operator>.</operator><name>__buf_</name><operator>.</operator><name>__large</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>__policy_func</name><argument_list>(<argument><expr><name>__policy_func</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>)</argument_list>
<range>: <expr><call><name>__buf_</name><argument_list>(<argument><expr><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr></range></decl>, <decl><type ref="prev"/><name>__invoker_</name><argument_list>(<argument><expr><name><name>__f</name><operator>.</operator><name>__invoker_</name></name></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>__policy_</name><argument_list>(<argument><expr><name><name>__f</name><operator>.</operator><name>__policy_</name></name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>__policy_</name><operator>-&gt;</operator><name>__destroy</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__policy_</name></name> <operator>=</operator> <name>__policy</name><operator>::</operator><call><name>__create_empty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__invoker_</name></name> <operator>=</operator> <call><name>__invoker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<operator>~</operator><macro><name>__policy_func</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__policy_</name><operator>-&gt;</operator><name>__destroy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__policy_</name><operator>-&gt;</operator><name>__destroy</name></name><argument_list>(<argument><expr><name><name>__buf_</name><operator>.</operator><name>__large</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>__policy_func</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>__policy_func</name><operator>&amp;&amp;</operator> <name>__f</name><operator>)</operator>
<block>{
<expr><operator>*</operator><name>this</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>__buf_</name> <operator>=</operator> <name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>;
<expr><name>__invoker_</name> <operator>=</operator> <name><name>__f</name><operator>.</operator><name>__invoker_</name></name></expr>;
<expr><name>__policy_</name> <operator>=</operator> <name><name>__f</name><operator>.</operator><name>__policy_</name></name></expr>;
<expr><name><name>__f</name><operator>.</operator><name>__policy_</name></name> <operator>=</operator> <name>__policy</name><operator>::</operator><call><name>__create_empty</name><argument_list>()</argument_list></call></expr>;
<expr><name><name>__f</name><operator>.</operator><name>__invoker_</name></name> <operator>=</operator> <call><name>__invoker</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>__policy_func</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>nullptr_t</name><operator>)</operator>
<block>{
<expr><specifier>const</specifier> <name>__policy</name><operator>*</operator> <name>__p</name> <operator>=</operator> <name>__policy_</name></expr>;
<expr><name>__policy_</name> <operator>=</operator> <name>__policy</name><operator>::</operator><call><name>__create_empty</name><argument_list>()</argument_list></call></expr>;
<expr><name>__invoker_</name> <operator>=</operator> <call><name>__invoker</name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>__p</name><operator>-&gt;</operator><name>__destroy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__p</name><operator>-&gt;</operator><name>__destroy</name></name><argument_list>(<argument><expr><name><name>__buf_</name><operator>.</operator><name>__large</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></init></decl></decl_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

_LIBCPP_INLINE_VISIBILITY
<expr_stmt><expr><name>_Rp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_ArgTypes</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name><operator>)</operator> <specifier>const</specifier>
<block>{
<return>return <expr><call><name><name>__invoker_</name><operator>.</operator><name>__call_</name></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>__policy_func</name><modifier>&amp;</modifier></type> <name>__f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__invoker_</name></expr></argument>, <argument><expr><name><name>__f</name><operator>.</operator><name>__invoker_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__policy_</name></expr></argument>, <argument><expr><name><name>__f</name><operator>.</operator><name>__policy_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__buf_</name></expr></argument>, <argument><expr><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><name><name>__policy_</name><operator>-&gt;</operator><name>__is_null</name></name></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>*</operator><name><name>__policy_</name><operator>-&gt;</operator><name>__type_info</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <specifier>const</specifier> <name>_Tp</name><operator>*</operator> <macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__policy_</name><operator>-&gt;</operator><name>__is_null</name></name> <operator>||</operator> <call><name>typeid</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>*</operator><name><name>__policy_</name><operator>-&gt;</operator><name>__type_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>__policy_</name><operator>-&gt;</operator><name>__clone</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__buf_</name><operator>.</operator><name>__large</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__buf_</name><operator>.</operator><name>__small</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}<empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_BLOCKS_RUNTIME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_OBJC_ARC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name> <modifier>*</modifier></type><name>_Block_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></extern>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name></type> <name>_Block_release</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></extern>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp1</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes1</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Rp1</name><operator>(</operator><operator>^</operator><operator>)</operator><operator>(</operator><name>_ArgTypes1</name><operator>...</operator><operator>)</operator></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <function_decl><type><name>_Rp1</name></type>(<modifier>^</modifier><name>__block_type</name>)<parameter_list>(<parameter><decl><type><name>_ArgTypes1</name><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<name>__block_type</name> <name>__f_</name></block></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>__func</name><argument_list>(<argument><expr><name>__block_type</name> <specifier>const</specifier><operator>&amp;</operator> <name>__f</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>reinterpret_cast&lt;__block_type&gt;(__f ? _Block_copy(__f) : nullptr)</argument>)</argument_list></macro>
<block>{ }</block>



<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <macro><name>__func</name><argument_list>(<argument>__block_type __f</argument>, <argument>const _Alloc&amp;</argument> )</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>reinterpret_cast&lt;__block_type&gt;(__f ? _Block_copy(__f) : nullptr)</argument>)</argument_list></macro>
<block>{ }</block>

<name>virtual</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>,
<argument><expr><literal type="string">"Block pointers are just pointers, so they should always fit into "</literal>
<literal type="string">"std::function's small buffer optimization. This function should "</literal>
<literal type="string">"never be invoked."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>__clone</name><argument_list>(<argument><expr><name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>__p</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__f_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_Block_release</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>destroy_deallocate</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>,
<argument><expr><literal type="string">"Block pointers are just pointers, so they should always fit into "</literal>
<literal type="string">"std::function's small buffer optimization. This function should "</literal>
<literal type="string">"never be invoked."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>virtual</name> <name>_Rp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_ArgTypes</name><operator>&amp;&amp;</operator> <operator>...</operator> <name>__arg</name><operator>)</operator> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__arg</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>target</name><argument_list>(<argument><expr><name>type_info</name> <specifier>const</specifier><operator>&amp;</operator> <name>__ti</name></expr></argument>)</argument_list> const <name>_NOEXCEPT</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__ti</name> <operator>==</operator> <call><name>typeid</name><argument_list>(<argument><expr><name>__func</name><operator>::</operator><name>__block_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>__f_</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>__func</name><operator>::</operator><name>__block_type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_ArgTypes</name><operator>&gt;</operator>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name>__function</name><operator>::</operator><name><name>__maybe_derive_from_unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr><operator>,</operator>
<expr><name>public</name> <name>__function</name><operator>::</operator><name><name>__maybe_derive_from_binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_OPTIMIZED_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__value_func</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>__func</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__policy_func</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>__func</name></expr>;</expr_stmt></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>__func</name></type> <name>__f_</name></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>bool</name> <operator>=</operator> <name><name>_And</name><argument_list type="generic">&lt;
<argument><expr><name><name>_IsNotSame</name><argument_list type="generic">&lt;<argument><expr><name><name>__uncvref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>function</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>__invokable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_ArgTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__callable</name></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name><operator>&gt;</operator>
struct <name><name>__callable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name><name>is_void</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name><name>__is_core_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>__invoke_of</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_ArgTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>,
<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;
}</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name><operator>&gt;</operator>
struct <name><name>__callable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name>false</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>_EnableIfLValueCallable</name> <init>= <expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>__callable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>
<label><name>public</name>:</label>
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>


<function><type><name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>function</name><parameter_list>()</parameter_list> _NOEXCEPT <block>{<block_content> </block_content>}</block></function>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>function</name><parameter_list>(<parameter><decl><type><name>nullptr_t</name></type></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content/>}</block></function>
<expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>function</name><argument_list>(<argument>function&amp;&amp;</argument>)</argument_list></macro> <expr_stmt><expr><name>_NOEXCEPT</name></expr>;</expr_stmt>
<function_decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIfLValueCallable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><parameter_list>(<parameter><decl><type><name>_Fp</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal></expr></cpp:if>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>function</name><parameter_list>(<parameter><decl><type><name>allocator_arg_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Alloc</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content/>}</block></function>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>function</name><parameter_list>(<parameter><decl><type><name>allocator_arg_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Alloc</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><name>nullptr_t</name></type></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content/>}</block></function>
<function_decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><parameter_list>(<parameter><decl><type><name>allocator_arg_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Alloc</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>function</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>function</name><operator>&amp;&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIfLValueCallable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><parameter_list>(<parameter><decl><type><name>allocator_arg_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Alloc</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>_Fp</name></type> <name>__f</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>function</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>function</name><operator>&amp;&amp;</operator><operator>)</operator> <name>_NOEXCEPT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>nullptr_t</name><operator>)</operator> <name>_NOEXCEPT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIfLValueCallable</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>_Fp</name><operator>&amp;&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><call><name>function</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>swap</name><argument_list>(<argument><expr><name>function</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>assign</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator> <name>__a</name></expr></argument>)</argument_list>
<block>{<block_content><expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>allocator_arg</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_R2</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes2</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_R2</name><operator>(</operator><name>_ArgTypes2</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_R2</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes2</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_R2</name><operator>(</operator><name>_ArgTypes2</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<label><name>public</name>:</label>

<expr_stmt><expr><name>_Rp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>_Tp</name><operator>*</operator> <macro><name>target</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>_Tp</name><operator>*</operator> <macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_DEDUCTION_GUIDES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Ap</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><call><call><name>_Rp</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list> -&gt; <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name><operator>&gt;</operator>
struct <name>__strip_signature</name></expr>;</expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>const</specifier></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>volatile</specifier></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>const</specifier> <specifier>volatile</specifier></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name>__strip_signature</name><operator>&lt;</operator><call><call><name>_Rp</name> <argument_list>(<argument><expr><name>_Gp</name><operator>::</operator><operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call> <operator>&amp;</operator><operator>&gt;</operator> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>const</specifier> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>volatile</specifier> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>const</specifier> <specifier>volatile</specifier> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <name>noexcept</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>const</specifier> <name>noexcept</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>volatile</specifier> <name>noexcept</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>const</specifier> <specifier>volatile</specifier> <name>noexcept</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <operator>&amp;</operator> <name>noexcept</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>const</specifier> <operator>&amp;</operator> <name>noexcept</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>volatile</specifier> <operator>&amp;</operator> <name>noexcept</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Gp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Ap</name><operator>&gt;</operator>
struct <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name> <operator>(</operator><name>_Gp</name><operator>::</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name>_Ap</name><operator>...</operator><operator>)</operator> <specifier>const</specifier> <specifier>volatile</specifier> <operator>&amp;</operator> <name>noexcept</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>_Rp</name><argument_list>(<argument><expr><name>_Ap</name><operator>...</operator></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Stripped</name> <operator>=</operator> <name>typename</name> <name><name>__strip_signature</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><operator>&amp;</operator><name>_Fp</name><operator>::</operator><name>operator</name><operator>(</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list> -&gt; <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Stripped</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>function</name><argument_list>(<argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator> <name>__f</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>__f.__f_</argument>)</argument_list></macro> <block>{}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal></expr></cpp:if>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator> <name>__f</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>__f.__f_</argument>)</argument_list></macro> <block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>function&amp;&amp; __f</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f.__f_)</argument>)</argument_list></macro> <block>{}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal></expr></cpp:if>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>,
<argument><expr><name>function</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f.__f_)</argument>)</argument_list></macro> <block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>_Fp __f</argument>)</argument_list></macro> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>)</argument_list></macro> <block>{}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>allocator_arg_t</argument>, <argument>const _Alloc&amp; __a</argument>,
<argument>_Fp __f</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>, <argument>__a</argument>)</argument_list></macro> <block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>function</name><operator>&amp;</operator> <name>__f</name><operator>)</operator>
<block>{
<expr><call><name>function</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>function</name><operator>&amp;&amp;</operator> <name>__f</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><name>__f_</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>nullptr_t</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><name>__f_</name> <operator>=</operator> <name>nullptr</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>_Fp</name><operator>&amp;&amp;</operator> <name>__f</name><operator>)</operator>
<block>{
<expr><call><name>function</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><operator>~</operator><macro><name>function</name><argument_list>()</argument_list></macro> <block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>swap</name><argument_list>(<argument>function&amp; __f</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<expr><call><name><name>__f_</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>_Rp</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_ArgTypes</name><operator>...</operator> <name>__arg</name><operator>)</operator> <specifier>const</specifier>
<block>{
<return>return <expr><call><name>__f_</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__arg</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name><name>__f_</name><operator>.</operator><name>target_type</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_Tp</name><operator>*</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>__f_</name><operator>.</operator><name>template</name></name> <call><name><name>target</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>_Tp</name><operator>*</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name><name>__f_</name><operator>.</operator><name>template</name></name> <call><name><name>target</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__f</name><operator>,</operator> <name>nullptr_t</name><operator>)</operator> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>!</operator><name>__f</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><name>nullptr_t</name><operator>,</operator> <specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__f</name><operator>)</operator> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>!</operator><name>__f</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__f</name><operator>,</operator> <name>nullptr_t</name><operator>)</operator> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><name>__f</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><name>nullptr_t</name><operator>,</operator> <specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__f</name><operator>)</operator> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><name>__f</name></expr>;</return>}</block></expr></expr_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type>
<name>swap</name><parameter_list>(<parameter><decl><type><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_ArgTypes</name><operator>...</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__y</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content><return>return <expr><call><name><name>__x</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>namespace</name></type> <name>__function</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>__base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<expr_stmt><expr><call><name>__base</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__base</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>__base</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>__base</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>__base</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>__base</name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>__clone</name><argument_list>(<argument><expr><name>__base</name><operator>*</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>destroy_deallocate</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<expr_stmt><expr><name>virtual</name> <name>_Rp</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>target</name><argument_list>(<argument><expr><specifier>const</specifier> <name>type_info</name><operator>&amp;</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<expr_stmt><expr><call><name>__base</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__base</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>__base</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>__base</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>__base</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>__base</name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>__clone</name><argument_list>(<argument><expr><name>__base</name><operator>*</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>destroy_deallocate</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<expr_stmt><expr><name>virtual</name> <name>_Rp</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_A0</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>target</name><argument_list>(<argument><expr><specifier>const</specifier> <name>type_info</name><operator>&amp;</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<expr_stmt><expr><call><name>__base</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__base</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>__base</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>__base</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>__base</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>__base</name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>__clone</name><argument_list>(<argument><expr><name>__base</name><operator>*</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>destroy_deallocate</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<expr_stmt><expr><name>virtual</name> <name>_Rp</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>target</name><argument_list>(<argument><expr><specifier>const</specifier> <name>type_info</name><operator>&amp;</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<expr_stmt><expr><call><name>__base</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__base</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>__base</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>__base</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>__base</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>__base</name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>__clone</name><argument_list>(<argument><expr><name>__base</name><operator>*</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>destroy_deallocate</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<expr_stmt><expr><name>virtual</name> <name>_Rp</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>virtual</name> <specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>target</name><argument_list>(<argument><expr><specifier>const</specifier> <name>type_info</name><operator>&amp;</operator></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_FD</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_FB</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>__func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name> <name>__f_</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>__func</name><argument_list>(<argument>_Fp __f</argument>)</argument_list></macro> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>, <argument>__default_init_tag()</argument>)</argument_list></macro> <block>{}</block>
<name>explicit</name> <macro><name>__func</name><argument_list>(<argument>_Fp __f</argument>, <argument>_Alloc __a</argument>)</argument_list></macro> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>, <argument>_VSTD::move(__a)</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>__clone</name><argument_list>(<argument>__base&lt;_Rp()&gt;*</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>destroy</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>destroy_deallocate</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>_Rp</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>virtual</name> <specifier>const</specifier> <name>void</name><operator>*</operator> <macro><name>target</name><argument_list>(<argument>const type_info&amp;</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__func</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__clone</name><argument_list>(<argument>__base&lt;_Rp()&gt;* __p</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>destroy</name><argument_list>()</argument_list></macro>
<block>{
<expr><name><name>__f_</name><operator>.</operator><name/></name>~<call><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>destroy_deallocate</name><argument_list>()</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__f_</name><operator>.</operator><name/></name>~<call><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__a</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<name>_Rp</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><operator>)</operator>
<block>{
<typedef>typedef <type><name><name>__invoke_void_return_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name></type> <name>_Invoker</name>;</typedef></block></expr></expr_stmt>
<return>return <expr><name>_Invoker</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<specifier>const</specifier> <name>void</name><operator>*</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>(<argument>const type_info&amp; __ti</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__ti</name> <operator>==</operator> <call><name>typeid</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name> <name>__f_</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <macro><name>__func</name><argument_list>(<argument>_Fp __f</argument>)</argument_list></macro> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>, <argument>__default_init_tag()</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <macro><name>__func</name><argument_list>(<argument>_Fp __f</argument>, <argument>_Alloc __a</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>, <argument>_VSTD::move(__a)</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>__clone</name><argument_list>(<argument>__base&lt;_Rp(_A0)&gt;*</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>destroy</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>destroy_deallocate</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>_Rp</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_A0</name></expr></argument>)</argument_list></call></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>virtual</name> <specifier>const</specifier> <name>void</name><operator>*</operator> <macro><name>target</name><argument_list>(<argument>const type_info&amp;</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__func</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__clone</name><argument_list>(<argument>__base&lt;_Rp(_A0)&gt;* __p</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>destroy</name><argument_list>()</argument_list></macro>
<block>{
<expr><name><name>__f_</name><operator>.</operator><name/></name>~<call><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>destroy_deallocate</name><argument_list>()</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__f_</name><operator>.</operator><name/></name>~<call><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__a</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name>_Rp</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_A0</name> <name>__a0</name><operator>)</operator>
<block>{
<typedef>typedef <type><name><name>__invoke_void_return_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name></type> <name>_Invoker</name>;</typedef></block></expr></expr_stmt>
<return>return <expr><name>_Invoker</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<specifier>const</specifier> <name>void</name><operator>*</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>(<argument>const type_info&amp; __ti</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__ti</name> <operator>==</operator> <call><name>typeid</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name> <name>__f_</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <macro><name>__func</name><argument_list>(<argument>_Fp __f</argument>)</argument_list></macro> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>, <argument>__default_init_tag()</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <macro><name>__func</name><argument_list>(<argument>_Fp __f</argument>, <argument>_Alloc __a</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>, <argument>_VSTD::move(__a)</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>__clone</name><argument_list>(<argument>__base&lt;_Rp(_A0, _A1)&gt;*</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>destroy</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>destroy_deallocate</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>_Rp</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name></expr></argument>)</argument_list></call></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>virtual</name> <specifier>const</specifier> <name>void</name><operator>*</operator> <macro><name>target</name><argument_list>(<argument>const type_info&amp;</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__func</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__clone</name><argument_list>(<argument>__base&lt;_Rp(_A0, _A1)&gt;* __p</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>destroy</name><argument_list>()</argument_list></macro>
<block>{
<expr><name><name>__f_</name><operator>.</operator><name/></name>~<call><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>destroy_deallocate</name><argument_list>()</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__f_</name><operator>.</operator><name/></name>~<call><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__a</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name>_Rp</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_A0</name> <name>__a0</name><operator>,</operator> <name>_A1</name> <name>__a1</name><operator>)</operator>
<block>{
<typedef>typedef <type><name><name>__invoke_void_return_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name></type> <name>_Invoker</name>;</typedef></block></expr></expr_stmt>
<return>return <expr><name>_Invoker</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<specifier>const</specifier> <name>void</name><operator>*</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>(<argument>const type_info&amp; __ti</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__ti</name> <operator>==</operator> <call><name>typeid</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name> <name>__f_</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <macro><name>__func</name><argument_list>(<argument>_Fp __f</argument>)</argument_list></macro> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>, <argument>__default_init_tag()</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <macro><name>__func</name><argument_list>(<argument>_Fp __f</argument>, <argument>_Alloc __a</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument>_VSTD::move(__f)</argument>, <argument>_VSTD::move(__a)</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>__clone</name><argument_list>(<argument>__base&lt;_Rp(_A0, _A1, _A2)&gt;*</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>destroy</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>destroy_deallocate</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>_Rp</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>)</argument_list></call></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>virtual</name> <specifier>const</specifier> <name>void</name><operator>*</operator> <macro><name>target</name><argument_list>(<argument>const type_info&amp;</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>*</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__clone</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__func</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__clone</name><argument_list>(<argument>__base&lt;_Rp(_A0, _A1, _A2)&gt;* __p</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>__func</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>destroy</name><argument_list>()</argument_list></macro>
<block>{
<expr><name><name>__f_</name><operator>.</operator><name/></name>~<call><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>destroy_deallocate</name><argument_list>()</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>__func</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__f_</name><operator>.</operator><name/></name>~<call><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__a</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name>_Rp</name>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_A0</name> <name>__a0</name><operator>,</operator> <name>_A1</name> <name>__a1</name><operator>,</operator> <name>_A2</name> <name>__a2</name><operator>)</operator>
<block>{
<typedef>typedef <type><name><name>__invoke_void_return_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name></type> <name>_Invoker</name>;</typedef></block></expr></expr_stmt>
<return>return <expr><name>_Invoker</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<specifier>const</specifier> <name>void</name><operator>*</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>(<argument>const type_info&amp; __ti</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__ti</name> <operator>==</operator> <call><name>typeid</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><call><name><name>__f_</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator>
<name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>__base</name></expr>;</expr_stmt></typedef>
<name>aligned_storage</name><operator>&lt;</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__buf_</name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>*</modifier></type> <name>__f_</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>


<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>function</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <call><name>function</name><argument_list>(<argument><expr><name>nullptr_t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<call><name>function</name><argument_list>(<argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>*</operator> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>nullptr_t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator> <name>__a</name></expr></argument>, <argument><expr><name>_Fp</name> <name>__f</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>*</operator> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>function</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>nullptr_t</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>function</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>operator</name><operator>=</operator><operator>(</operator><name>_Fp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>function</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>function</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>_Fp</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Alloc</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content><expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>allocator_arg</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>


<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><name>__f_</name></expr>;</return>}</block></expr></expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_R2</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_R2</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_R2</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_R2</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<label><name>public</name>:</label>

<expr_stmt><expr><name>_Rp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>_Tp</name><modifier>*</modifier></type> <name>target</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>_Tp</name><operator>*</operator> <macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>const function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>allocator_arg_t</argument>, <argument>const _Alloc&amp;</argument>, <argument>const function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>_Fp __f</argument>,
<argument>typename enable_if&lt;!is_integral&lt;_Fp&gt;::value&gt;::type*</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>_FF</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_FF</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__f_</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else
<block>{<block_content>
<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_FF</name></expr></argument>&gt;</argument_list></name></type> <name>_Ap</name>;</typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><call><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
}
}

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>allocator_arg_t</argument>, <argument>const _Alloc&amp; __a0</argument>, <argument>_Fp __f</argument>,
<argument>typename enable_if&lt;!is_integral&lt;_Fp&gt;::value&gt;::type*</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>_FF</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_FF</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__f_</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>_FF</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<function_decl><type><name>_Ap</name></type> <name>__a</name><parameter_list>(<parameter><decl><type><name>__a0</name></type></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>function</name><operator>&amp;</operator> <name>__f</name><operator>)</operator>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>nullptr_t</name><operator>)</operator>
<block>{
<expr><name>__base</name><operator>*</operator> <name>__t</name> <operator>=</operator> <name>__f_</name></expr>;
<expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<if_stmt><if>if <condition>(<expr><name>__t</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy_deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>_Fp</name> <name>__f</name><operator>)</operator>
<block>{
<expr><call><name>function</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><operator>~</operator><macro><name>function</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__f_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy_deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>swap</name><argument_list>(<argument>function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name> <operator>&amp;&amp;</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>typename</name> <name>aligned_storage</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__tempbuf</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>*</modifier></type> <name>__t</name> <init>= <expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tempbuf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <name>__f_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>, <argument><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<name>_Rp</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><operator>)</operator> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_bad_function_call</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call>(<modifier>*</modifier><name>__f_</name>)<argument_list>()</argument_list></call></expr>;</return>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>__f_</name><operator>-&gt;</operator><name>target_type</name></name><argument_list>()</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_Tp</name><operator>*</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>target</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>_Tp</name><operator>*</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator><operator>)</operator><call><name><name>__f_</name><operator>-&gt;</operator><name>target</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>__base</name></expr>;</expr_stmt></typedef>
<name>aligned_storage</name><operator>&lt;</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__buf_</name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>*</modifier></type> <name>__f_</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>


<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>function</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <call><name>function</name><argument_list>(<argument><expr><name>nullptr_t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<call><name>function</name><argument_list>(<argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>*</operator> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>nullptr_t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator> <name>__a</name></expr></argument>, <argument><expr><name>_Fp</name> <name>__f</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>*</operator> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>function</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>nullptr_t</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>function</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>operator</name><operator>=</operator><operator>(</operator><name>_Fp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>function</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>function</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>_Fp</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Alloc</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content><expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>allocator_arg</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>


<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><name>__f_</name></expr>;</return>}</block></expr></expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_R2</name></expr></argument>, <argument><expr><name>class</name> <name>_B0</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_R2</name><operator>(</operator><name>_B0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_R2</name></expr></argument>, <argument><expr><name>class</name> <name>_B0</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_R2</name><operator>(</operator><name>_B0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<label><name>public</name>:</label>

<expr_stmt><expr><name>_Rp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_A0</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>_Tp</name><modifier>*</modifier></type> <name>target</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>_Tp</name><operator>*</operator> <macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>const function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>allocator_arg_t</argument>, <argument>const _Alloc&amp;</argument>, <argument>const function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>_Fp __f</argument>,
<argument>typename enable_if&lt;!is_integral&lt;_Fp&gt;::value&gt;::type*</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>_FF</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_FF</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__f_</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else
<block>{<block_content>
<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_FF</name></expr></argument>&gt;</argument_list></name></type> <name>_Ap</name>;</typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><call><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
}
}

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>allocator_arg_t</argument>, <argument>const _Alloc&amp; __a0</argument>, <argument>_Fp __f</argument>,
<argument>typename enable_if&lt;!is_integral&lt;_Fp&gt;::value&gt;::type*</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>_FF</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_FF</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__f_</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>_FF</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<function_decl><type><name>_Ap</name></type> <name>__a</name><parameter_list>(<parameter><decl><type><name>__a0</name></type></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>function</name><operator>&amp;</operator> <name>__f</name><operator>)</operator>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>nullptr_t</name><operator>)</operator>
<block>{
<expr><name>__base</name><operator>*</operator> <name>__t</name> <operator>=</operator> <name>__f_</name></expr>;
<expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<if_stmt><if>if <condition>(<expr><name>__t</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy_deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>_Fp</name> <name>__f</name><operator>)</operator>
<block>{
<expr><call><name>function</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><operator>~</operator><macro><name>function</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__f_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy_deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>swap</name><argument_list>(<argument>function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name> <operator>&amp;&amp;</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>typename</name> <name>aligned_storage</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__tempbuf</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>*</modifier></type> <name>__t</name> <init>= <expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tempbuf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <name>__f_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>, <argument><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name>_Rp</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_A0</name> <name>__a0</name><operator>)</operator> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_bad_function_call</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call>(<modifier>*</modifier><name>__f_</name>)<argument_list>(<argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>__f_</name><operator>-&gt;</operator><name>target_type</name></name><argument_list>()</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_Tp</name><operator>*</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>target</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>_Tp</name><operator>*</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator><operator>)</operator><call><name><name>__f_</name><operator>-&gt;</operator><name>target</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>__base</name></expr>;</expr_stmt></typedef>
<name>aligned_storage</name><operator>&lt;</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__buf_</name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>*</modifier></type> <name>__f_</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>


<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>function</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <call><name>function</name><argument_list>(<argument><expr><name>nullptr_t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<call><name>function</name><argument_list>(<argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>*</operator> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>nullptr_t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator> <name>__a</name></expr></argument>, <argument><expr><name>_Fp</name> <name>__f</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>*</operator> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>function</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>nullptr_t</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>function</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>operator</name><operator>=</operator><operator>(</operator><name>_Fp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>function</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>function</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>_Fp</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Alloc</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content><expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>allocator_arg</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>


<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><name>__f_</name></expr>;</return>}</block></expr></expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_R2</name></expr></argument>, <argument><expr><name>class</name> <name>_B0</name></expr></argument>, <argument><expr><name>class</name> <name>_B1</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_R2</name><operator>(</operator><name>_B0</name>, <name>_B1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_R2</name></expr></argument>, <argument><expr><name>class</name> <name>_B0</name></expr></argument>, <argument><expr><name>class</name> <name>_B1</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_R2</name><operator>(</operator><name>_B0</name>, <name>_B1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<label><name>public</name>:</label>

<expr_stmt><expr><name>_Rp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_A0</name><operator>,</operator> <name>_A1</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>_Tp</name><modifier>*</modifier></type> <name>target</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>_Tp</name><operator>*</operator> <macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>const function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>allocator_arg_t</argument>, <argument>const _Alloc&amp;</argument>, <argument>const function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>_Fp __f</argument>,
<argument>typename enable_if&lt;!is_integral&lt;_Fp&gt;::value&gt;::type*</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>_FF</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_FF</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__f_</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else
<block>{<block_content>
<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_FF</name></expr></argument>&gt;</argument_list></name></type> <name>_Ap</name>;</typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><call><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
}
}

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>allocator_arg_t</argument>, <argument>const _Alloc&amp; __a0</argument>, <argument>_Fp __f</argument>,
<argument>typename enable_if&lt;!is_integral&lt;_Fp&gt;::value&gt;::type*</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>_FF</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_FF</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__f_</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>_FF</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<function_decl><type><name>_Ap</name></type> <name>__a</name><parameter_list>(<parameter><decl><type><name>__a0</name></type></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>function</name><operator>&amp;</operator> <name>__f</name><operator>)</operator>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>nullptr_t</name><operator>)</operator>
<block>{
<expr><name>__base</name><operator>*</operator> <name>__t</name> <operator>=</operator> <name>__f_</name></expr>;
<expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<if_stmt><if>if <condition>(<expr><name>__t</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy_deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>_Fp</name> <name>__f</name><operator>)</operator>
<block>{
<expr><call><name>function</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><operator>~</operator><macro><name>function</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__f_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy_deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>swap</name><argument_list>(<argument>function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name> <operator>&amp;&amp;</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>typename</name> <name>aligned_storage</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__tempbuf</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>*</modifier></type> <name>__t</name> <init>= <expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tempbuf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <name>__f_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>, <argument><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name>_Rp</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_A0</name> <name>__a0</name><operator>,</operator> <name>_A1</name> <name>__a1</name><operator>)</operator> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_bad_function_call</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call>(<modifier>*</modifier><name>__f_</name>)<argument_list>(<argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>__f_</name><operator>-&gt;</operator><name>target_type</name></name><argument_list>()</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_Tp</name><operator>*</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>target</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>_Tp</name><operator>*</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator><operator>)</operator><call><name><name>__f_</name><operator>-&gt;</operator><name>target</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__base</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>__base</name></expr>;</expr_stmt></typedef>
<name>aligned_storage</name><operator>&lt;</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__buf_</name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>*</modifier></type> <name>__f_</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>


<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>function</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <call><name>function</name><argument_list>(<argument><expr><name>nullptr_t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<call><name>function</name><argument_list>(<argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><name>_Fp</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>*</operator> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>nullptr_t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<call><name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>function</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name></type>
<name>function</name><argument_list>(<argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Alloc</name><operator>&amp;</operator> <name>__a</name></expr></argument>, <argument><expr><name>_Fp</name> <name>__f</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>*</operator> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>function</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>function</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>nullptr_t</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>function</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name>operator</name><operator>=</operator><operator>(</operator><name>_Fp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>function</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>function</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>_Fp</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Alloc</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content><expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>allocator_arg</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>


<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><name>__f_</name></expr>;</return>}</block></expr></expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_R2</name></expr></argument>, <argument><expr><name>class</name> <name>_B0</name></expr></argument>, <argument><expr><name>class</name> <name>_B1</name></expr></argument>, <argument><expr><name>class</name> <name>_B2</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_R2</name><operator>(</operator><name>_B0</name>, <name>_B1</name>, <name>_B2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_R2</name></expr></argument>, <argument><expr><name>class</name> <name>_B0</name></expr></argument>, <argument><expr><name>class</name> <name>_B1</name></expr></argument>, <argument><expr><name>class</name> <name>_B2</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_R2</name><operator>(</operator><name>_B0</name>, <name>_B1</name>, <name>_B2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<label><name>public</name>:</label>

<expr_stmt><expr><name>_Rp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_A0</name><operator>,</operator> <name>_A1</name><operator>,</operator> <name>_A2</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator> <macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>_Tp</name><modifier>*</modifier></type> <name>target</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>_Tp</name><operator>*</operator> <macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>const function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>allocator_arg_t</argument>, <argument>const _Alloc&amp;</argument>,
<argument>const function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__f_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>_Fp __f</argument>,
<argument>typename enable_if&lt;!is_integral&lt;_Fp&gt;::value&gt;::type*</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>_FF</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_FF</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__f_</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else
<block>{<block_content>
<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_FF</name></expr></argument>&gt;</argument_list></name></type> <name>_Ap</name>;</typedef>
<decl_stmt><decl><type><name>_Ap</name></type> <name>__a</name></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><call><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
}
}

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>function</name><argument_list>(<argument>allocator_arg_t</argument>, <argument>const _Alloc&amp; __a0</argument>, <argument>_Fp __f</argument>,
<argument>typename enable_if&lt;!is_integral&lt;_Fp&gt;::value&gt;::type*</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__f_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
<block>{
<typedef>typedef <type><name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name></type> <name>__alloc_traits</name>;</typedef></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__function</name><operator>::</operator><call><name>__not_null</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>__function</name><operator>::</operator><name><name>__func</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>_FF</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_FF</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__f_</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__rebind_alloc_helper</name><argument_list type="generic">&lt;<argument><expr><name>__alloc_traits</name></expr></argument>, <argument><expr><name>_FF</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Ap</name></expr>;</expr_stmt></typedef>
<function_decl><type><name>_Ap</name></type> <name>__a</name><parameter_list>(<parameter><decl><type><name>__a0</name></type></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <type><name><name>__allocator_destructor</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<decl_stmt><decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>_Dp</name></expr></argument>&gt;</argument_list></name></type> <name>__hold</name><argument_list>(<argument><expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Dp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__hold.get()</argument>)</argument_list></macro> <call><name>_FF</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><call><name>_Alloc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <call><name><name>__hold</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>function</name><operator>&amp;</operator> <name>__f</name><operator>)</operator>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>nullptr_t</name><operator>)</operator>
<block>{
<expr><name>__base</name><operator>*</operator> <name>__t</name> <operator>=</operator> <name>__f_</name></expr>;
<expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<if_stmt><if>if <condition>(<expr><name>__t</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy_deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><name>_Fp</name> <name>__f</name><operator>)</operator>
<block>{
<expr><call><name>function</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><operator>~</operator><macro><name>function</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__f_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy_deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>void</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>swap</name><argument_list>(<argument>function&amp; __f</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name> <operator>&amp;&amp;</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>typename</name> <name>aligned_storage</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>__buf_</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__tempbuf</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__base</name><modifier>*</modifier></type> <name>__t</name> <init>= <expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tempbuf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__t</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>__f_</name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <name><name>__f</name><operator>.</operator><name>__f_</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>==</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>__f</name><operator>.</operator><name>__buf_</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>__clone</name></name><argument_list>(<argument><expr><operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>__f</name><operator>.</operator><name>__f_</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name> <operator>=</operator> <name>__f_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__f_</name> <operator>=</operator> <operator>(</operator><name>__base</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__buf_</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>, <argument><expr><name><name>__f</name><operator>.</operator><name>__f_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name>_Rp</name>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_A0</name> <name>__a0</name><operator>,</operator> <name>_A1</name> <name>__a1</name><operator>,</operator> <name>_A2</name> <name>__a2</name><operator>)</operator> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_bad_function_call</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call>(<modifier>*</modifier><name>__f_</name>)<argument_list>(<argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_RTTI</name></expr></argument>)</argument_list></call></expr></cpp:if>

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name><operator>&amp;</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target_type</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>typeid</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>__f_</name><operator>-&gt;</operator><name>target_type</name></name><argument_list>()</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_Tp</name><operator>*</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>()</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><name>_Tp</name><operator>*</operator><operator>)</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__f_</name><operator>-&gt;</operator><name>target</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Rp</name></expr><operator>,</operator> <expr><name>class</name> <name>_A0</name></expr><operator>,</operator> <expr><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>_Tp</name><operator>*</operator>
<name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name><operator>(</operator><name>_A0</name>, <name>_A1</name>, <name>_A2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>target</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>__f_</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator><operator>)</operator><call><name><name>__f_</name><operator>-&gt;</operator><name>target</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name><operator>&gt;</operator>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__f</name><operator>,</operator> <name>nullptr_t</name><operator>)</operator> <block>{<return>return <expr><operator>!</operator><name>__f</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><name>nullptr_t</name><operator>,</operator> <specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__f</name><operator>)</operator> <block>{<return>return <expr><operator>!</operator><name>__f</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__f</name><operator>,</operator> <name>nullptr_t</name><operator>)</operator> <block>{<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><name>__f</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><name>nullptr_t</name><operator>,</operator> <specifier>const</specifier> <name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__f</name><operator>)</operator> <block>{<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><name>__f</name></expr>;</return>}</block></expr></expr_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type>
<name>swap</name><parameter_list>(<parameter><decl><type><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__y</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name><name>__x</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
