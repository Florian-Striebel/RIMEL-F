<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/rotate.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_ROTATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_ROTATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/move_backward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/swap_ranges.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/next.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/prev.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/swap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_ForwardIterator</name></type>
<name>__rotate_left</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>value_type</name></type> <name>__tmp</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__lm1</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name>__first</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>__lm1</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__lm1</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_BidirectionalIterator</name></type>
<name>__rotate_right</name><parameter_list>(<parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__lm1</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>prev</name><argument_list>(<argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>value_type</name></type> <name>__tmp</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__lm1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__fp1</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>move_backward</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__lm1</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>__first</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__fp1</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name> <name>_ForwardIterator</name></type>
<name>__rotate_forward</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__middle</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__i</name> <init>= <expr><name>__middle</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__first</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>__i</name> <operator>==</operator> <name>__last</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__first</name> <operator>==</operator> <name>__middle</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__middle</name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__r</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__first</name> <operator>!=</operator> <name>__middle</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__i</name> <operator>=</operator> <name>__middle</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__first</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>__i</name> <operator>==</operator> <name>__last</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__first</name> <operator>==</operator> <name>__middle</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__i</name> <operator>=</operator> <name>__middle</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>__first</name> <operator>==</operator> <name>__middle</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__middle</name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Integral</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name> <name>_Integral</name></type>
<name>__algo_gcd</name><parameter_list>(<parameter><decl><type><name>_Integral</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>_Integral</name></type> <name>__y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>_Integral</name></type> <name>__t</name> <init>= <expr><name>__x</name> <operator>%</operator> <name>__y</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__x</name> <operator>=</operator> <name>__y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__y</name> <operator>=</operator> <name>__t</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>__y</name></expr>)</condition>;</do>
<return>return <expr><name>__x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name> <name>_RandomAccessIterator</name></type>
<name>__rotate_gcd</name><parameter_list>(<parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__middle</name></decl></parameter>, <parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>difference_type</name></type> <name>__m1</name> <init>= <expr><name>__middle</name> <operator>-</operator> <name>__first</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>difference_type</name></type> <name>__m2</name> <init>= <expr><name>__last</name> <operator>-</operator> <name>__middle</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__m1</name> <operator>==</operator> <name>__m2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap_ranges</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__middle</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>difference_type</name></type> <name>__g</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>__algo_gcd</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>_RandomAccessIterator</name></type> <name>__p</name> <init>= <expr><name>__first</name> <operator>+</operator> <name>__g</name></expr></init></decl>;</init> <condition><expr><name>__p</name> <operator>!=</operator> <name>__first</name></expr>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>value_type</name></type> <name>__t</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_RandomAccessIterator</name></type> <name>__p1</name> <init>= <expr><name>__p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_RandomAccessIterator</name></type> <name>__p2</name> <init>= <expr><name>__p1</name> <operator>+</operator> <name>__m1</name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__p1</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__p1</name> <operator>=</operator> <name>__p2</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>difference_type</name></type> <name>__d</name> <init>= <expr><name>__last</name> <operator>-</operator> <name>__p2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__m1</name> <operator>&lt;</operator> <name>__d</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__p2</name> <operator>+=</operator> <name>__m1</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__p2</name> <operator>=</operator> <name>__first</name> <operator>+</operator> <operator>(</operator><name>__m1</name> <operator>-</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><name>__p2</name> <operator>!=</operator> <name>__p</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>__p1</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>__first</name> <operator>+</operator> <name>__m2</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_ForwardIterator</name></type>
<name>__rotate</name><argument_list>(<argument><expr><name>_ForwardIterator</name> <name>__first</name></expr></argument>, <argument><expr><name>_ForwardIterator</name> <name>__middle</name></expr></argument>, <argument><expr><name>_ForwardIterator</name> <name>__last</name></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><name>forward_iterator_tag</name></expr></argument>)</argument_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><name><name>is_trivially_move_assignable</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_VSTD</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name>__first</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>__middle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__rotate_left</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__rotate_forward</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_BidirectionalIterator</name></type>
<name>__rotate</name><parameter_list>(<parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__middle</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__last</name></decl></parameter>,
<parameter><decl><type><name>bidirectional_iterator_tag</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><name><name>is_trivially_move_assignable</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_VSTD</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name>__first</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>__middle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__rotate_left</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>_VSTD</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name>__middle</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>__last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__rotate_right</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__rotate_forward</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_RandomAccessIterator</name></type>
<name>__rotate</name><parameter_list>(<parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__middle</name></decl></parameter>, <parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__last</name></decl></parameter>,
<parameter><decl><type><name>random_access_iterator_tag</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><name><name>is_trivially_move_assignable</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_VSTD</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name>__first</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>__middle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__rotate_left</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>_VSTD</name><operator>::</operator><call><name>next</name><argument_list>(<argument><expr><name>__middle</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>__last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__rotate_right</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__rotate_gcd</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__rotate_forward</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__middle</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name> <name>_ForwardIterator</name></type>
<name>rotate</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__middle</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__first</name> <operator>==</operator> <name>__middle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__last</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__middle</name> <operator>==</operator> <name>__last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__first</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><macro><name>__rotate</name><argument_list>(<argument>__first</argument>, <argument>__middle</argument>, <argument>__last</argument>,
<argument>typename iterator_traits&lt;_ForwardIterator&gt;::iterator_category()</argument>)</argument_list></macro></expr>;</return>
</block_content>}</block></function>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
