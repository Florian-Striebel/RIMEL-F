<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/math.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_MATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_MATH_H</name></cpp:macro></cpp:define>


























































































































































































































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:empty>#include_next &lt;math.h&gt;</cpp:empty>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>



<extern>extern <literal type="string">"C++"</literal> <block>{<block_content>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>signbit</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>__libcpp_signbit</name><parameter_list>(<parameter><decl><type><name>_A1</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_signbit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_signbit</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>signbit</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>signbit</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_floating_point</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>signbit</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>__libcpp_signbit</name><argument_list>(<argument><expr><operator>(</operator><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <name>std</name><operator>::</operator><name><name>is_signed</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>signbit</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>__lcpp_x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>std</name><operator>::</operator><name><name>is_signed</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>signbit</name><argument_list>(<argument>_A1</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_MSVCRT</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_floating_point</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>signbit</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>::</operator><macro><name>signbit</name><argument_list>(<argument>static_cast&lt;typename std::__promote&lt;_A1&gt;::type&gt;(__lcpp_x)</argument>)</argument_list></macro></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <name>std</name><operator>::</operator><name><name>is_signed</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>signbit</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>__lcpp_x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>std</name><operator>::</operator><name><name>is_signed</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>signbit</name><argument_list>(<argument>_A1</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>fpclassify</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>int</name></type>
<name>__libcpp_fpclassify</name><parameter_list>(<parameter><decl><type><name>_A1</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_fpclassify</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_fpclassify</name><argument_list>(<argument><expr><name>FP_NAN</name></expr></argument>, <argument><expr><name>FP_INFINITE</name></expr></argument>, <argument><expr><name>FP_NORMAL</name></expr></argument>, <argument><expr><name>FP_SUBNORMAL</name></expr></argument>,
<argument><expr><name>FP_ZERO</name></expr></argument>, <argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>fpclassify</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fpclassify</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_floating_point</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fpclassify</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>__libcpp_fpclassify</name><argument_list>(<argument><expr><operator>(</operator><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fpclassify</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>__lcpp_x</name> <operator>==</operator> <literal type="number">0</literal> <operator>?</operator> <name>FP_ZERO</name> <operator>:</operator> <name>FP_NORMAL</name></expr>;</return> }</block></expr></expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_MSVCRT</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_floating_point</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fpclassify</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>::</operator><macro><name>fpclassify</name><argument_list>(<argument>static_cast&lt;typename std::__promote&lt;_A1&gt;::type&gt;(__lcpp_x)</argument>)</argument_list></macro></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fpclassify</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>__lcpp_x</name> <operator>==</operator> <literal type="number">0</literal> <operator>?</operator> <name>FP_ZERO</name> <operator>:</operator> <name>FP_NORMAL</name></expr>;</return> }</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>isfinite</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>__libcpp_isfinite</name><parameter_list>(<parameter><decl><type><name>_A1</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_isfinite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_isfinite</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>isfinite</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isfinite</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>has_infinity</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isfinite</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>__libcpp_isfinite</name><argument_list>(<argument><expr><operator>(</operator><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>has_infinity</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isfinite</name><argument_list>(<argument>_A1</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>isinf</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>__libcpp_isinf</name><parameter_list>(<parameter><decl><type><name>_A1</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_isinf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_isinf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>isinf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isinf</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>has_infinity</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isinf</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>__libcpp_isinf</name><argument_list>(<argument><expr><operator>(</operator><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>has_infinity</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isinf</name><argument_list>(<argument>_A1</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_PREFERRED_OVERLOAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>isinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content> <return>return <expr><call><name>__libcpp_isinf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<name>bool</name></type>
<name>isinf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content> <return>return <expr><call><name>__libcpp_isinf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>isinf</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content> <return>return <expr><call><name>__libcpp_isinf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>isnan</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>__libcpp_isnan</name><parameter_list>(<parameter><decl><type><name>_A1</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_isnan</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_isnan</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>isnan</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isnan</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_floating_point</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isnan</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>__libcpp_isnan</name><argument_list>(<argument><expr><operator>(</operator><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isnan</name><argument_list>(<argument>_A1</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_PREFERRED_OVERLOAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>isnan</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content> <return>return <expr><call><name>__libcpp_isnan</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<name>bool</name></type>
<name>isnan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content> <return>return <expr><call><name>__libcpp_isnan</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>isnan</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content> <return>return <expr><call><name>__libcpp_isnan</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>isnormal</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>__libcpp_isnormal</name><parameter_list>(<parameter><decl><type><name>_A1</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_isnormal</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_isnormal</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>isnormal</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isnormal</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_floating_point</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isnormal</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>__libcpp_isnormal</name><argument_list>(<argument><expr><operator>(</operator><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isnormal</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{ <return>return <expr><name>__lcpp_x</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>isgreater</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>__libcpp_isgreater</name><parameter_list>(<parameter><decl><type><name>_A1</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>_A2</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><call><name>isgreater</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isgreater</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isgreater</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<return>return <expr><call><name>__libcpp_isgreater</name><argument_list>(<argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>isgreaterequal</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name></type>
<name>__libcpp_isgreaterequal</name><parameter_list>(<parameter><decl><type><name>_A1</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>_A2</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><call><name>isgreaterequal</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isgreaterequal</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isgreaterequal</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<return>return <expr><call><name>__libcpp_isgreaterequal</name><argument_list>(<argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>isless</name></expr></argument>)</argument_list></call></expr></cpp:if>

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<macro><name>__libcpp_isless</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>isless</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isless</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isless</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<return>return <expr><call><name>__libcpp_isless</name><argument_list>(<argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>islessequal</name></expr></argument>)</argument_list></call></expr></cpp:if>

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<macro><name>__libcpp_islessequal</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>islessequal</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>islessequal</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>islessequal</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<return>return <expr><call><name>__libcpp_islessequal</name><argument_list>(<argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>islessgreater</name></expr></argument>)</argument_list></call></expr></cpp:if>

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<macro><name>__libcpp_islessgreater</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>islessgreater</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>islessgreater</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>islessgreater</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<return>return <expr><call><name>__libcpp_islessgreater</name><argument_list>(<argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>isunordered</name></expr></argument>)</argument_list></call></expr></cpp:if>

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_A1</name></expr><operator>,</operator> <expr><name>class</name> <name>_A2</name><operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<macro><name>__libcpp_isunordered</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name>isunordered</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isunordered</name></cpp:undef>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>bool</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>isunordered</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<return>return <expr><call><name>__libcpp_isunordered</name><argument_list>(<argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>acos</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>acosf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>acos</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>acosl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>acos</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>acos</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>asin</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>asinf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>asin</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>asinl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>asin</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>asin</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>atan</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>atanf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>atan</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>atanl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>atan</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>atan</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>atan2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>atan2f</name><argument_list>(<argument><expr><name>__lcpp_y</name></expr></argument>, <argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>atan2</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>atan2l</name><argument_list>(<argument><expr><name>__lcpp_y</name></expr></argument>, <argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>atan2</name><argument_list>(<argument>_A1 __lcpp_y</argument>, <argument>_A2 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><call><name>atan2</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
}



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>ceil</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>ceilf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>ceil</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>ceill</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>ceil</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>cos</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>cosf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>cos</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>cosl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>cos</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>cosh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>coshf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>cosh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>coshl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>cosh</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>cosh</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>expf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>expl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>exp</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>exp</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>fabs</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>fabsf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>fabs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>fabsl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fabs</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>fabs</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>floor</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>floorf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>floor</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>floorl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>floor</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>floor</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>fmod</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>fmodf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>fmod</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>fmodl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fmod</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><call><name>fmod</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>frexp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>__lcpp_e</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>frexpf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_e</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>frexp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>__lcpp_e</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>frexpl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_e</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>frexp</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>int* __lcpp_e</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>frexp</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_e</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>ldexp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__lcpp_e</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>ldexpf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_e</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>ldexp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__lcpp_e</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>ldexpl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_e</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>ldexp</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>int __lcpp_e</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>ldexp</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_e</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>logf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>logl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>log</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>log</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>log10</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>log10f</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>log10</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>log10l</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>log10</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>log10</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>modf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>modff</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>modf</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name><modifier>*</modifier></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>modfl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>powf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>powl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>pow</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>sin</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>sinf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>sin</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>sinl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>sin</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>sinh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>sinhf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>sinh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>sinhl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>sinh</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>sinh</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>sqrt</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>sqrt</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>sqrtl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>sqrt</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>tan</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>tanf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>tan</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>tanl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>tan</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>tan</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>tanh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>tanhf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>tanh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>tanhl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>tanh</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>tanh</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>acosh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>acoshf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>acosh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>acoshl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>acosh</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>acosh</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>asinh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>asinhf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>asinh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>asinhl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>asinh</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>asinh</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>atanh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>atanhf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>atanh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>atanhl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>atanh</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>atanh</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>cbrt</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>cbrtf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>cbrt</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>cbrtl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>cbrt</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>cbrt</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_copysignf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>_LIBCPP_CONSTEXPR</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>__libcpp_copysign</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_copysignf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_copysignf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>copysignf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_copysign</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>_LIBCPP_CONSTEXPR</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>double</name></type> <name>__libcpp_copysign</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_copysign</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_copysign</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>copysign</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_copysignl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>_LIBCPP_CONSTEXPR</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>__libcpp_copysign</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_copysignl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_copysignl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>copysignl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_copysign</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_CONSTEXPR</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__libcpp_copysign</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_copysign</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_copysign</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>copysign</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>copysign</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>__libcpp_copysign</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>copysign</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>__libcpp_copysign</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>copysign</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<return>return <expr><operator>::</operator><call><name>__libcpp_copysign</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>erf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>erff</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>erf</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>erfl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>erf</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>erf</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>erfc</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>erfcf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>erfc</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>erfcl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>erfc</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>erfc</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>exp2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>exp2f</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>exp2</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>exp2l</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>exp2</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>exp2</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>expm1</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>expm1f</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>expm1</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>expm1l</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>expm1</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>expm1</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>fdim</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>fdimf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>fdim</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>fdiml</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fdim</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><call><name>fdim</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>fma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_z</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_fmaf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_fmaf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>, <argument><expr><name>__lcpp_z</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>fmaf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>, <argument><expr><name>__lcpp_z</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>fma</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_z</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_fmal</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_fmal</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>, <argument><expr><name>__lcpp_z</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>fmal</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>, <argument><expr><name>__lcpp_z</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>, <argument><expr><name>class</name> <name>_A3</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A3</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>_A3</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fma</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>, <argument>_A3 __lcpp_z</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>_A3</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A3</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_fma</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_fma</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_z</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>fma</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_z</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>fmax</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>fmaxf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>fmax</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>fmaxl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fmax</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><call><name>fmax</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>fmin</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>fminf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>fmin</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>fminl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fmin</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><call><name>fmin</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>hypot</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>hypotf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>hypot</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>hypotl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>hypot</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><call><name>hypot</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>int</name></type> <name>ilogb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>ilogbf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>int</name></type> <name>ilogb</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>ilogbl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>ilogb</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>ilogb</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>lgamma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>lgammaf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>lgamma</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>lgammal</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>lgamma</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>lgamma</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>long</name></type> <name>llrint</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_llrintf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_llrintf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>llrintf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>long</name></type> <name>llrint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_llrintl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_llrintl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>llrintl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>llrint</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_llrint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_llrint</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>llrint</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>long</name></type> <name>llround</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_llroundf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_llroundf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>llroundf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>long</name></type> <name>llround</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_llroundl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_llroundl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>llroundl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>llround</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_llround</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_llround</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>llround</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>log1p</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>log1pf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>log1p</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>log1pl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>log1p</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>log1p</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>log2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>log2f</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>log2</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>log2l</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>log2</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>log2</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>logb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>logbf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>logb</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>logbl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>logb</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>logb</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name></type> <name>lrint</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_lrintf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_lrintf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>lrintf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name></type> <name>lrint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_lrintl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_lrintl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>lrintl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>lrint</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_lrint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_lrint</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>lrint</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name></type> <name>lround</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_lroundf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_lroundf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>lroundf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name></type> <name>lround</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_lroundl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_lroundl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>lroundl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>lround</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_lround</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_lround</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>lround</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}





inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>nearbyint</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>nearbyintf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>nearbyint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>nearbyintl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>nearbyint</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>nearbyint</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>nextafter</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>nextafterf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>nextafter</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>nextafterl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>nextafter</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><call><name>nextafter</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>nexttoward</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>nexttowardf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>nexttoward</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>nexttowardl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>nexttoward</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>long double __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>nexttoward</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>remainder</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>remainderf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>remainder</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>remainderl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>remainder</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><call><name>remainder</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>remquo</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__lcpp_y</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>__lcpp_z</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>remquof</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>, <argument><expr><name>__lcpp_z</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>remquo</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_y</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>__lcpp_z</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>remquol</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>, <argument><expr><name>__lcpp_z</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>is_arithmetic</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>remquo</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>_A2 __lcpp_y</argument>, <argument>int* __lcpp_z</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>__promote</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>__result_type</name></expr>;</expr_stmt></typedef>
<call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_A2</name></expr></argument>, <argument><expr><name>__result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><call><name>remquo</name><argument_list>(<argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><operator>(</operator><name>__result_type</name><operator>)</operator><name>__lcpp_y</name></expr></argument>, <argument><expr><name>__lcpp_z</name></expr></argument>)</argument_list></call></expr>;</return>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>rint</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_rintf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_rintf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>rintf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>rint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_rintl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_rintl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>rintl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>rint</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_rint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_rint</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>rint</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>round</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_round</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_round</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>round</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>round</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_roundl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_roundl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>roundl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>round</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_round</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_round</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>round</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}



inline <function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>scalbln</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>scalblnf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>scalbln</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>scalblnl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>scalbln</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>long __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>scalbln</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>scalbn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>scalbnf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>scalbn</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__lcpp_y</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>scalbnl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>scalbn</name><argument_list>(<argument>_A1 __lcpp_x</argument>, <argument>int __lcpp_y</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>scalbn</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>, <argument><expr><name>__lcpp_y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>tgamma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>tgammaf</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>tgamma</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content><return>return <expr><operator>::</operator><call><name>tgammal</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>tgamma</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>::</operator><call><name>tgamma</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>



<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>float</name></type> <name>trunc</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_trunc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_trunc</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>trunc</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>long</name> <name>double</name></type> <name>trunc</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__lcpp_x</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_truncl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_truncl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>truncl</name><argument_list>(<argument><expr><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>trunc</name><argument_list>(<argument>_A1 __lcpp_x</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__builtin_trunc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_trunc</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>::</operator><call><name>trunc</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__lcpp_x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_MSVCRT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_USE_MATH_DEFINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#include_next &lt;math.h&gt;</cpp:empty>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
