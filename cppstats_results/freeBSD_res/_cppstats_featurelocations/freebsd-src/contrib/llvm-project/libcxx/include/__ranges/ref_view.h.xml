<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__ranges/ref_view.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___RANGES_REF_VIEW_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___RANGES_REF_VIEW_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/incrementable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/addressof.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/data.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/empty.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/size.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/view_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>namespace</name></type> <name>ranges</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>range</name> <name>_Range</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>is_object_v</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ref_view</name> <range>: <expr><name>public</name> <name><name>view_interface</name><argument_list type="generic">&lt;<argument><expr><name><name>ref_view</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>_Range</name> <operator>*</operator><name>__range_</name></expr>;

<expr><specifier>static</specifier> <name>void</name> <call><name>__fun</name><argument_list>(<argument><expr><name>_Range</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>void</name> <call><name>__fun</name><argument_list>(<argument><expr><name>_Range</name><operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<expr><name>public</name><operator>:</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>__different_from</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>ref_view</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Range</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name>requires</name> <block>{ <expr><call><name>__fun</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; }</block>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <call><name>ref_view</name><argument_list>(<argument><expr><name>_Tp</name><operator>&amp;&amp;</operator> <name>__t</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__range_</name><argument_list>(<argument>_VSTD::addressof(static_cast&lt;_Range&amp;&gt;(_VSTD::forward&lt;_Tp&gt;(__t)))</argument>)</argument_list></macro>
<block>{}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>_Range</name><operator>&amp;</operator> <macro><name>base</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>__range_</name></expr>;</return> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><operator>*</operator><name>__range_</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><operator>*</operator><name>__range_</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<name>requires</name> <name>requires</name> <block>{ <expr><name>ranges</name><operator>::</operator><call><name>empty</name><argument_list>(<argument><expr><operator>*</operator><name>__range_</name></expr></argument>)</argument_list></call></expr>; }</block>
<block>{ <return>return <expr><name>ranges</name><operator>::</operator><call><name>empty</name><argument_list>(<argument><expr><operator>*</operator><name>__range_</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<name>requires</name> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name>
<block>{ <return>return <expr><name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><operator>*</operator><name>__range_</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<name>requires</name> <name><name>contiguous_range</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name>
<block>{ <return>return <expr><name>ranges</name><operator>::</operator><call><name>data</name><argument_list>(<argument><expr><operator>*</operator><name>__range_</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Range</name></expr></argument>&gt;</argument_list></name>
<call><name>ref_view</name><argument_list>(<argument><expr><name>_Range</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>-&gt;</operator> <name><name>ref_view</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr>;

}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>_LIBCPP_END_NAMESPACE_STD</name>

<name>_LIBCPP_POP_MACROS</name></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
