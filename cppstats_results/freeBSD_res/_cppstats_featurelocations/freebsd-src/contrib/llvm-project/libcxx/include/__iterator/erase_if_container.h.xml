<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/erase_if_container.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_ERASE_IF_CONTAINER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_ERASE_IF_CONTAINER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Container</name></expr></argument>, <argument><expr><name>class</name> <name>_Predicate</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>typename</name> <name>_Container</name><operator>::</operator><name>size_type</name>
<macro><name>__libcpp_erase_if_container</name><argument_list>(<argument>_Container&amp; __c</argument>, <argument>_Predicate&amp; __pred</argument>)</argument_list></macro> <block>{
<expr><name>typename</name> <name>_Container</name><operator>::</operator><name>size_type</name> <name>__old_size</name> <operator>=</operator> <call><name><name>__c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>typename</name> <name>_Container</name><operator>::</operator><name>iterator</name> <name>__last</name> <operator>=</operator> <call><name><name>__c</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;
<for>for <control>(<init><expr><name>typename</name> <name>_Container</name><operator>::</operator><name>iterator</name> <name>__iter</name> <operator>=</operator> <call><name><name>__c</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>__iter</name> <operator>!=</operator> <name>__last</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><name>__iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__iter</name> <operator>=</operator> <call><name><name>__c</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>__iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>__iter</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>

<return>return <expr><name>__old_size</name> <operator>-</operator> <call><name><name>__c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
}

_LIBCPP_END_NAMESPACE_STD

<expr><name>_LIBCPP_POP_MACROS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
