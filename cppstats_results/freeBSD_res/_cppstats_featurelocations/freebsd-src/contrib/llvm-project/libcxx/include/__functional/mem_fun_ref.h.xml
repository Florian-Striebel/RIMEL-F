<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/mem_fun_ref.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_MEM_FUN_REF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_MEM_FUN_REF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/unary_function.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/binary_function.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX17_REMOVED_BINDERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX11</name></type> <name>mem_fun_t</name>
<range>: <expr><name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><call><name>_Sp</name> <argument_list>(<argument><expr><name>_Tp</name><operator>::</operator><operator>*</operator><name>__p_</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <call><name>mem_fun_t</name><argument_list>(<argument><expr><call><call><name>_Sp</name> <argument_list>(<argument><expr><name>_Tp</name><operator>::</operator><operator>*</operator><name>__p</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Sp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>*</operator> <name>__p</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>(</operator><name>__p</name><operator>-&gt;*</operator><name>__p_</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</return>}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ap</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX11</name> <name>mem_fun1_t</name>
<operator>:</operator> <name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Ap</name></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><call><name>_Sp</name> <argument_list>(<argument><expr><name>_Tp</name><operator>::</operator><operator>*</operator><name>__p_</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_Ap</name></expr></argument>)</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <call><name>mem_fun1_t</name><argument_list>(<argument><expr><call><call><name>_Sp</name> <argument_list>(<argument><expr><name>_Tp</name><operator>::</operator><operator>*</operator><name>__p</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_Ap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Sp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>*</operator> <name>__p</name>, <name>_Ap</name> <name>__x</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>(</operator><name>__p</name><operator>-&gt;*</operator><name>__p_</name><operator>)</operator><operator>(</operator><name>__x</name><operator>)</operator></expr>;</return>}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX11</name> <specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>mem_fun_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<macro><name>mem_fun</name><argument_list>(<argument>_Sp (_Tp::*__f)()</argument>)</argument_list></macro>
<block>{<return>return <expr><call><name><name>mem_fun_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return>}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ap</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX11</name> <specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>mem_fun1_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>,<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name>
<macro><name>mem_fun</name><argument_list>(<argument>_Sp (_Tp::*__f)(_Ap)</argument>)</argument_list></macro>
<block>{<return>return <expr><call><name><name>mem_fun1_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>,<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return>}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX11</name> <name>mem_fun_ref_t</name>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><call><name>_Sp</name> <argument_list>(<argument><expr><name>_Tp</name><operator>::</operator><operator>*</operator><name>__p_</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <call><name>mem_fun_ref_t</name><argument_list>(<argument><expr><call><call><name>_Sp</name> <argument_list>(<argument><expr><name>_Tp</name><operator>::</operator><operator>*</operator><name>__p</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Sp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;</operator> <name>__p</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>(</operator><name>__p</name><operator>.*</operator><name>__p_</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</return>}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ap</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX11</name> <name>mem_fun1_ref_t</name>
<operator>:</operator> <name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Ap</name></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><call><name>_Sp</name> <argument_list>(<argument><expr><name>_Tp</name><operator>::</operator><operator>*</operator><name>__p_</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_Ap</name></expr></argument>)</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <call><name>mem_fun1_ref_t</name><argument_list>(<argument><expr><call><call><name>_Sp</name> <argument_list>(<argument><expr><name>_Tp</name><operator>::</operator><operator>*</operator><name>__p</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_Ap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Sp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;</operator> <name>__p</name>, <name>_Ap</name> <name>__x</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>(</operator><name>__p</name><operator>.*</operator><name>__p_</name><operator>)</operator><operator>(</operator><name>__x</name><operator>)</operator></expr>;</return>}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX11</name> <specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>mem_fun_ref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<macro><name>mem_fun_ref</name><argument_list>(<argument>_Sp (_Tp::*__f)()</argument>)</argument_list></macro>
<block>{<return>return <expr><call><name><name>mem_fun_ref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return>}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ap</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX11</name> <specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>mem_fun1_ref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>,<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name>
<macro><name>mem_fun_ref</name><argument_list>(<argument>_Sp (_Tp::*__f)(_Ap)</argument>)</argument_list></macro>
<block>{<return>return <expr><call><name><name>mem_fun1_ref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>,<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return>}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX11</name> <name>const_mem_fun_t</name>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name>
<block>{
<macro><name>_Sp</name> <argument_list>(<argument>_Tp::*__p_</argument>)</argument_list></macro><expr><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <call><name>const_mem_fun_t</name><argument_list>(<argument><expr><macro><name>_Sp</name> <argument_list>(<argument>_Tp::*__p</argument>)</argument_list></macro><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Sp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator> <name>__p</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>(</operator><name>__p</name><operator>-&gt;*</operator><name>__p_</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</return>}</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ap</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX11</name> <name>const_mem_fun1_t</name>
<operator>:</operator> <name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name><operator>*</operator></expr></argument>, <argument><expr><name>_Ap</name></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name>
<block>{
<macro><name>_Sp</name> <argument_list>(<argument>_Tp::*__p_</argument>)</argument_list></macro><expr><operator>(</operator><name>_Ap</name><operator>)</operator> <specifier>const</specifier></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <call><name>const_mem_fun1_t</name><argument_list>(<argument><expr><macro><name>_Sp</name> <argument_list>(<argument>_Tp::*__p</argument>)</argument_list></macro><operator>(</operator><name>_Ap</name><operator>)</operator> <specifier>const</specifier></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Sp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator> <name>__p</name>, <name>_Ap</name> <name>__x</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>(</operator><name>__p</name><operator>-&gt;*</operator><name>__p_</name><operator>)</operator><operator>(</operator><name>__x</name><operator>)</operator></expr>;</return>}</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX11</name> <specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>const_mem_fun_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<macro><name>mem_fun</name><argument_list>(<argument>_Sp (_Tp::*__f)() const</argument>)</argument_list></macro>
<block>{<return>return <expr><call><name><name>const_mem_fun_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return>}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ap</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX11</name> <specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>const_mem_fun1_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>,<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name>
<macro><name>mem_fun</name><argument_list>(<argument>_Sp (_Tp::*__f)(_Ap) const</argument>)</argument_list></macro>
<block>{<return>return <expr><call><name><name>const_mem_fun1_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>,<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return>}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX11</name> <name>const_mem_fun_ref_t</name>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name>
<block>{
<macro><name>_Sp</name> <argument_list>(<argument>_Tp::*__p_</argument>)</argument_list></macro><expr><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <call><name>const_mem_fun_ref_t</name><argument_list>(<argument><expr><macro><name>_Sp</name> <argument_list>(<argument>_Tp::*__p</argument>)</argument_list></macro><operator>(</operator><operator>)</operator> <specifier>const</specifier></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Sp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__p</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>(</operator><name>__p</name><operator>.*</operator><name>__p_</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</return>}</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ap</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX11</name> <name>const_mem_fun1_ref_t</name>
<operator>:</operator> <name>public</name> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Ap</name></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name>
<block>{
<macro><name>_Sp</name> <argument_list>(<argument>_Tp::*__p_</argument>)</argument_list></macro><expr><operator>(</operator><name>_Ap</name><operator>)</operator> <specifier>const</specifier></expr>;
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name> <call><name>const_mem_fun1_ref_t</name><argument_list>(<argument><expr><macro><name>_Sp</name> <argument_list>(<argument>_Tp::*__p</argument>)</argument_list></macro><operator>(</operator><name>_Ap</name><operator>)</operator> <specifier>const</specifier></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Sp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__p</name>, <name>_Ap</name> <name>__x</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>(</operator><name>__p</name><operator>.*</operator><name>__p_</name><operator>)</operator><operator>(</operator><name>__x</name><operator>)</operator></expr>;</return>}</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX11</name> <specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>const_mem_fun_ref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<macro><name>mem_fun_ref</name><argument_list>(<argument>_Sp (_Tp::*__f)() const</argument>)</argument_list></macro>
<block>{<return>return <expr><call><name><name>const_mem_fun_ref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return>}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ap</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX11</name> <specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>const_mem_fun1_ref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>,<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name>
<macro><name>mem_fun_ref</name><argument_list>(<argument>_Sp (_Tp::*__f)(_Ap) const</argument>)</argument_list></macro>
<block>{<return>return <expr><call><name><name>const_mem_fun1_ref_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>,<argument><expr><name>_Tp</name></expr></argument>,<argument><expr><name>_Ap</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>_LIBCPP_END_NAMESPACE_STD</name></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
