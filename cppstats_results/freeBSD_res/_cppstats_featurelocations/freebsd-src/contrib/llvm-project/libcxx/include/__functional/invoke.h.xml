<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/invoke.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_INVOKE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_INVOKE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/weak_result_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ret</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>is_void</name><argument_list type="generic">&lt;<argument><expr><name>_Ret</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct <name>__invoke_void_return_wrapper</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>_Ret</name> <macro><name>__call</name><argument_list>(<argument>_Args&amp;&amp;... __args</argument>)</argument_list></macro> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return></block></expr>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>_Ret</name> <macro><name>__call</name><argument_list>(<argument>_Fn __f</argument>)</argument_list></macro> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>_Ret</name></type> <name>__call</name><parameter_list>(<parameter><decl><type><name>_Fn</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><name>_A0</name><modifier>&amp;</modifier></type> <name>__a0</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>_Ret</name></type> <name>__call</name><parameter_list>(<parameter><decl><type><name>_Fn</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><name>_A0</name><modifier>&amp;</modifier></type> <name>__a0</name></decl></parameter>, <parameter><decl><type><name>_A1</name><modifier>&amp;</modifier></type> <name>__a1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>_Ret</name></type> <name>__call</name><parameter_list>(<parameter><decl><type><name>_Fn</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><name>_A0</name><modifier>&amp;</modifier></type> <name>__a0</name></decl></parameter>, <parameter><decl><type><name>_A1</name><modifier>&amp;</modifier></type> <name>__a1</name></decl></parameter>, <parameter><decl><type><name>_A2</name><modifier>&amp;</modifier></type> <name>__a2</name></decl></parameter>)</parameter_list><block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ret</name><operator>&gt;</operator>
struct <name><name>__invoke_void_return_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Ret</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>__call</name><argument_list>(<argument>_Args&amp;&amp;... __args</argument>)</argument_list></macro> <block>{
<expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>__call</name><argument_list>(<argument>_Fn __f</argument>)</argument_list></macro> <block>{
<expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>__call</name><argument_list>(<argument>_Fn __f</argument>, <argument>_A0&amp; __a0</argument>)</argument_list></macro> <block>{
<expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>__call</name><argument_list>(<argument>_Fn __f</argument>, <argument>_A0&amp; __a0</argument>, <argument>_A1&amp; __a1</argument>)</argument_list></macro> <block>{
<expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>void</name> <macro><name>__call</name><argument_list>(<argument>_Fn __f</argument>, <argument>_A0&amp; __a0</argument>, <argument>_A1&amp; __a1</argument>, <argument>_A2&amp; __a2</argument>)</argument_list></macro> <block>{
<expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name> <name><name>invoke_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type>
<name>invoke</name><argument_list>(<argument><expr><name>_Fn</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument>)</argument_list>
<name>noexcept</name><argument_list>(<argument><expr><name><name>is_nothrow_invocable_v</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
