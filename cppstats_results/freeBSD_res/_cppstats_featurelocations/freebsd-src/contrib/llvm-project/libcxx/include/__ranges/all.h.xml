<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__ranges/all.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___RANGES_ALL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___RANGES_ALL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/ref_view.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/subrange.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/__decay_copy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/declval.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>namespace</name></type> <name>views</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>__all</name> <block>{<block_content>
<struct>struct <name>__fn</name> <block>{
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name>ranges</name><operator>::</operator><name><name>view</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;&amp;</operator> <name>__t</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(_VSTD::__decay_copy(_VSTD::forward&lt;_Tp&gt;(__t)))</argument>)</argument_list></macro>
<block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>requires</name> <argument_list>(<argument><expr><operator>!</operator><name>ranges</name><operator>::</operator><name><name>view</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> &amp;&amp;
<name>requires</name> <argument_list>(<argument><expr><name>_Tp</name><operator>&amp;&amp;</operator> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>ranges</name><operator>::</operator><name>ref_view</name><block>{<expr><name>_VSTD</name><operator>::</operator><macro><name>forward</name></macro><operator>&lt;</operator><name>_Tp</name><operator>&gt;</operator><operator>(</operator><name>__t</name><operator>)</operator></expr>}</block></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;&amp;</operator> <name>__t</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(ranges::ref_view{_VSTD::forward&lt;_Tp&gt;(__t)})</argument>)</argument_list></macro>
<block>{
<return>return <expr><name>ranges</name><operator>::</operator><name>ref_view</name><block>{<expr><name>_VSTD</name><operator>::</operator><macro><name>forward</name></macro><operator>&lt;</operator><name>_Tp</name><operator>&gt;</operator><operator>(</operator><name>__t</name><operator>)</operator></expr>}</block></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>requires</name> <argument_list>(<argument><expr><operator>!</operator><name>ranges</name><operator>::</operator><name><name>view</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<operator>!</operator><macro><name>requires</name> <argument_list>(<argument>_Tp&amp;&amp; __t</argument>)</argument_list></macro> <block>{ <expr><name>ranges</name><operator>::</operator><name>ref_view</name><block>{<expr><name>_VSTD</name><operator>::</operator><macro><name>forward</name></macro><operator>&lt;</operator><name>_Tp</name><operator>&gt;</operator><operator>(</operator><name>__t</name><operator>)</operator></expr>}</block></expr>; }</block> <operator>&amp;&amp;</operator>
<macro><name>requires</name> <argument_list>(<argument>_Tp&amp;&amp; __t</argument>)</argument_list></macro> <block>{ <expr><name>ranges</name><operator>::</operator><name>subrange</name><block>{<expr><name>_VSTD</name><operator>::</operator><macro><name>forward</name></macro><operator>&lt;</operator><name>_Tp</name><operator>&gt;</operator><operator>(</operator><name>__t</name><operator>)</operator></expr>}</block></expr>; }</block></expr></argument>)</argument_list>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> auto <name>operator</name><argument_list>()</argument_list><argument_list>(<argument><expr><name>_Tp</name><operator>&amp;&amp;</operator> <name>__t</name></expr></argument>)</argument_list> const
<name>noexcept</name><argument_list>(<argument><expr><macro><name>noexcept</name><argument_list>(<argument>ranges::subrange{_VSTD::forward&lt;_Tp&gt;(__t)}</argument>)</argument_list></macro></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><name>ranges</name><operator>::</operator><name>subrange</name><block>{<expr><name>_VSTD</name><operator>::</operator><macro><name>forward</name></macro><operator>&lt;</operator><name>_Tp</name><operator>&gt;</operator><operator>(</operator><name>__t</name><operator>)</operator></expr>}</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>
}</block>;</struct>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>namespace</name></type> <name>__cpo</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>inline</specifier> <name>constexpr</name> <specifier>auto</specifier></type> <name>all</name> <init>= <expr><name>__all</name><operator>::</operator><name>__fn</name><block>{}</block></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>ranges</name><operator>::</operator><name>viewable_range</name> <name>_Range</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>all_t</name> <init>= <expr><call><name>decltype</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><call><name>all</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
