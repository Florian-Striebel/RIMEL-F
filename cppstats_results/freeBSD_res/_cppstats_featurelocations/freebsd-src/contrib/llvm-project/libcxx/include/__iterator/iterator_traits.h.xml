<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/iterator_traits.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_ITERATOR_TRAITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_ITERATOR_TRAITS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/incrementable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/readable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>__with_reference</name> <init>= <expr><name>_Tp</name><operator>&amp;</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__referenceable</name> <init>= <expr><name>requires</name> <block>{
<expr><name>typename</name> <name><name>__with_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__dereferenceable</name> <init>= <macro><name>requires</name><argument_list>(<argument>_Tp&amp; __t</argument>)</argument_list></macro> <expr><block>{
<expr><block>{ <expr><operator>*</operator><name>__t</name></expr> }</block> <operator>-&gt;</operator> <name>__referenceable</name></expr>;
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__dereferenceable</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>iter_reference_t</name> <init>= <expr><call><name>decltype</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>iterator_traits</name></decl>;</decl_stmt>

<struct>struct <macro><name>_LIBCPP_TEMPLATE_VIS</name></macro> <name>input_iterator_tag</name> <block>{}</block>;</struct>
<struct>struct <macro><name>_LIBCPP_TEMPLATE_VIS</name></macro> <name>output_iterator_tag</name> <block>{}</block>;</struct>
<decl_stmt><decl><type><name><name>struct</name> <name>_LIBCPP_TEMPLATE_VIS</name></name></type> <name>forward_iterator_tag</name> <range>: <expr><name>public</name> <name>input_iterator_tag</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_LIBCPP_TEMPLATE_VIS</name></name></type> <name>bidirectional_iterator_tag</name> <range>: <expr><name>public</name> <name>forward_iterator_tag</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_LIBCPP_TEMPLATE_VIS</name></name></type> <name>random_access_iterator_tag</name> <range>: <expr><name>public</name> <name>bidirectional_iterator_tag</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>_LIBCPP_TEMPLATE_VIS</name></name></type> <name>contiguous_iterator_tag</name> <range>: <expr><name>public</name> <name>random_access_iterator_tag</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Iter</name><operator>&gt;</operator>
struct <name>__iter_traits_cache</name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name><name>_If</name><argument_list type="generic">&lt;
<argument><expr><name><name>__is_primary_template</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>_Iter</name></expr></argument>,
<argument><expr><name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name></expr>;
}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>_ITER_TRAITS</name> <init>= <expr><name>typename</name> <name><name>__iter_traits_cache</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>__iter_concept_concept_test</name> <block>{
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>_Apply</name> <init>= <expr><name>typename</name> <name><name>_ITER_TRAITS</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator_concept</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>__iter_concept_category_test</name> <block>{
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>_Apply</name> <init>= <expr><name>typename</name> <name><name>_ITER_TRAITS</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator_category</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>__iter_concept_random_fallback</name> <block>{
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>_Apply</name> <init>= <expr><name><name>_EnableIf</name><argument_list type="generic">&lt;
<argument><expr><name><name>__is_primary_template</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>random_access_iterator_tag</name></expr></argument>
&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>, <argument><expr><name>class</name> <name>_Tester</name></expr></argument>&gt;</argument_list></name> struct</type> <name>__test_iter_concept</name>
<range>: <expr><name><name>_IsValidExpansion</name><argument_list type="generic">&lt;<argument><expr><name>_Tester</name><operator>::</operator><name>template</name> <name>_Apply</name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>_Tester</name>
<block>{<block_content>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Iter</name><operator>&gt;</operator>
struct <name>__iter_concept_cache</name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name><name>_Or</name><argument_list type="generic">&lt;
<argument><expr><name><name>__test_iter_concept</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>__iter_concept_concept_test</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>__test_iter_concept</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>__iter_concept_category_test</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>__test_iter_concept</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>__iter_concept_random_fallback</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>_ITER_CONCEPT</name> <init>= <expr><name>typename</name> <name><name>__iter_concept_cache</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>::</operator><name>template</name> <name><name>_Apply</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name>__has_iterator_typedefs</name>
<block>{
<expr><name>private</name><operator>:</operator>
struct <name>__two</name> <block>{<expr><name>char</name> <name>__lx</name></expr>; <expr><name>char</name> <name>__lxx</name></expr>;}</block></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>__two</name> <call><name>__test</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>char</name> <macro><name>__test</name><argument_list>(<argument>typename __void_t&lt;typename _Up::iterator_category&gt;::type* = <literal type="number">0</literal></argument>,
<argument>typename __void_t&lt;typename _Up::difference_type&gt;::type* = <literal type="number">0</literal></argument>,
<argument>typename __void_t&lt;typename _Up::value_type&gt;::type* = <literal type="number">0</literal></argument>,
<argument>typename __void_t&lt;typename _Up::reference&gt;::type* = <literal type="number">0</literal></argument>,
<argument>typename __void_t&lt;typename _Up::pointer&gt;::type* = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name><name>__test</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">1</literal></expr>;
}</block></expr>;</expr_stmt>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name>__has_iterator_category</name>
<block>{
<expr><name>private</name><operator>:</operator>
struct <name>__two</name> <block>{<expr><name>char</name> <name>__lx</name></expr>; <expr><name>char</name> <name>__lxx</name></expr>;}</block></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>__two</name> <call><name>__test</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>char</name> <macro><name>__test</name><argument_list>(<argument>typename _Up::iterator_category* = nullptr</argument>)</argument_list></macro></expr>;
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name><name>__test</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">1</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name>__has_iterator_concept</name>
<block>{
<expr><name>private</name><operator>:</operator>
struct <name>__two</name> <block>{<expr><name>char</name> <name>__lx</name></expr>; <expr><name>char</name> <name>__lxx</name></expr>;}</block></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>__two</name> <call><name>__test</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>char</name> <macro><name>__test</name><argument_list>(<argument>typename _Up::iterator_concept* = nullptr</argument>)</argument_list></macro></expr>;
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name><name>__test</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">1</literal></expr>;
}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>namespace</name></type> <name>__iterator_traits_detail</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__cpp17_iterator</name> <init>=
<macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>)</argument_list></macro> <expr><block>{
<expr><block>{ <expr><operator>*</operator><name>__i</name></expr> }</block> <operator>-&gt;</operator> <name>__referenceable</name></expr>;
<expr><block>{ <expr><operator>++</operator><name>__i</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><operator>*</operator><name>__i</name><operator>++</operator></expr> }</block> <operator>-&gt;</operator> <name>__referenceable</name></expr>;
}</block> <operator>&amp;&amp;</operator>
<name><name>copyable</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__cpp17_input_iterator</name> <init>=
<expr><name><name>__cpp17_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>equality_comparable</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>)</argument_list></macro> <block>{
<expr><name>typename</name> <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name></expr>;
<expr><name>typename</name> <name><name>indirectly_readable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr>;
<expr><name>typename</name> <name><name>common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator></expr></argument>,
<argument><expr><name>typename</name> <name><name>indirectly_readable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>typename</name> <name>common_reference_t</name><operator>&lt;</operator><call><name>decltype</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name><operator>++</operator></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator></expr>,
<expr><name>typename</name> <name><name>indirectly_readable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name><operator>&amp;</operator><operator>&gt;</operator></expr>;
<expr><name>requires</name> <name><name>signed_integral</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__cpp17_forward_iterator</name> <init>=
<expr><name><name>__cpp17_input_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>constructible_from</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>is_lvalue_reference_v</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>typename</name> <name><name>indirectly_readable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><name>__i</name><operator>++</operator></expr> }</block> <operator>-&gt;</operator> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><operator>*</operator><name>__i</name><operator>++</operator></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__cpp17_bidirectional_iterator</name> <init>=
<expr><name><name>__cpp17_forward_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><operator>--</operator><name>__i</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__i</name><operator>--</operator></expr> }</block> <operator>-&gt;</operator> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><operator>*</operator><name>__i</name><operator>--</operator></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__cpp17_random_access_iterator</name> <init>=
<expr><name><name>__cpp17_bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>totally_ordered</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>, <argument>typename incrementable_traits&lt;_Ip&gt;::difference_type __n</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><name>__i</name> <operator>+=</operator> <name>__n</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__i</name> <operator>-=</operator> <name>__n</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__i</name> <operator>+</operator> <name>__n</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__n</name> <operator>+</operator> <name>__i</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__i</name> <operator>-</operator> <name>__n</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__i</name> <operator>-</operator> <name>__i</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name>__n</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name><name>__i</name><index>[<expr><name>__n</name></expr>]</index></name></expr> }</block> <operator>-&gt;</operator> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__has_member_reference</name> <init>= <expr><name>requires</name> <block>{ <expr><name>typename</name> <name>_Ip</name><operator>::</operator><name>reference</name></expr>; }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__has_member_pointer</name> <init>= <expr><name>requires</name> <block>{ <expr><name>typename</name> <name>_Ip</name><operator>::</operator><name>pointer</name></expr>; }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__has_member_iterator_category</name> <init>= <expr><name>requires</name> <block>{ <expr><name>typename</name> <name>_Ip</name><operator>::</operator><name>iterator_category</name></expr>; }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__specifies_members</name> <init>= <expr><name>requires</name> <block>{
<expr><name>typename</name> <name>_Ip</name><operator>::</operator><name>value_type</name></expr>;
<expr><name>typename</name> <name>_Ip</name><operator>::</operator><name>difference_type</name></expr>;
<expr><name>requires</name> <name><name>__has_member_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>requires</name> <name><name>__has_member_iterator_category</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name><operator>&gt;</operator>
struct <name>__iterator_traits_member_pointer_or_void</name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>void</name></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__has_member_pointer</name> <name>_Tp</name><operator>&gt;</operator>
struct <name><name>__iterator_traits_member_pointer_or_void</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>typename</name> <name>_Tp</name><operator>::</operator><name>pointer</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__cpp17_iterator_missing_members</name> <init>=
<expr><operator>!</operator><name><name>__specifies_members</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name>__iterator_traits_detail</name><operator>::</operator><name><name>__cpp17_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__cpp17_input_iterator_missing_members</name> <init>=
<expr><name><name>__cpp17_iterator_missing_members</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name>__iterator_traits_detail</name><operator>::</operator><name><name>__cpp17_input_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name><operator>&gt;</operator>
struct <name>__iterator_traits_member_pointer_or_arrow_or_void</name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <name>void</name></expr>; }</block></expr>;</expr_stmt>



<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__has_member_pointer</name> <name>_Ip</name><operator>&gt;</operator>
struct <name><name>__iterator_traits_member_pointer_or_arrow_or_void</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <name>typename</name> <name>_Ip</name><operator>::</operator><name>pointer</name></expr>; }</block></expr>;</expr_stmt>



<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>requires</name></type> <name>requires</name><parameter_list>(<parameter><decl><type><name>_Ip</name><modifier>&amp;</modifier></type> <name>__i</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>__i</name><operator>.</operator><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content></block>;</function> } &amp;&amp; <expr_stmt><expr><operator>(</operator><operator>!</operator><name><name>__has_member_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>)</operator>
struct <name><name>__iterator_traits_member_pointer_or_arrow_or_void</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>decltype</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></argument>)</argument_list></call></expr>)</block></expr>;</expr_stmt>
};


<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ip</name><operator>&gt;</operator>
struct <name>__iterator_traits_member_reference</name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>; }</block></expr>;</expr_stmt>



<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__has_member_reference</name> <name>_Ip</name><operator>&gt;</operator>
struct <name><name>__iterator_traits_member_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <name>typename</name> <name>_Ip</name><operator>::</operator><name>reference</name></expr>; }</block></expr>;</expr_stmt>



<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ip</name><operator>&gt;</operator>
struct <name>__deduce_iterator_category</name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>input_iterator_tag</name></expr>;
}</block></expr>;</expr_stmt>



<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__iterator_traits_detail</name><operator>::</operator><name>__cpp17_random_access_iterator</name> <name>_Ip</name><operator>&gt;</operator>
struct <name><name>__deduce_iterator_category</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>random_access_iterator_tag</name></expr>;
}</block></expr>;</expr_stmt>



<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__iterator_traits_detail</name><operator>::</operator><name>__cpp17_bidirectional_iterator</name> <name>_Ip</name><operator>&gt;</operator>
struct <name><name>__deduce_iterator_category</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>bidirectional_iterator_tag</name></expr>;
}</block></expr>;</expr_stmt>



<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__iterator_traits_detail</name><operator>::</operator><name>__cpp17_forward_iterator</name> <name>_Ip</name><operator>&gt;</operator>
struct <name><name>__deduce_iterator_category</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>forward_iterator_tag</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__iterator_traits_iterator_category</name> <range>: <expr><name><name>__deduce_iterator_category</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>




<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__has_member_iterator_category</name> <name>_Ip</name><operator>&gt;</operator>
struct <name><name>__iterator_traits_iterator_category</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>typename</name> <name>_Ip</name><operator>::</operator><name>iterator_category</name></expr>;
}</block></expr>;</expr_stmt>


<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name><operator>&gt;</operator>
struct <name>__iterator_traits_difference_type</name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <name>void</name></expr>; }</block></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>requires</name></type> <name>requires</name> <block>{<block_content> <expr_stmt><expr><name>typename</name> <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<struct>struct <name><name>__iterator_traits_difference_type</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>type</name> <init>= <expr><name>typename</name> <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>



<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name><operator>&gt;</operator>
struct <name>__iterator_traits</name> <block>{}</block></expr>;</expr_stmt>




<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__specifies_members</name> <name>_Ip</name><operator>&gt;</operator>
struct <name><name>__iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>iterator_category</name> <operator>=</operator> <name>typename</name> <name>_Ip</name><operator>::</operator><name>iterator_category</name></expr>;
<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name>typename</name> <name>_Ip</name><operator>::</operator><name>value_type</name></expr>;
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name>typename</name> <name>_Ip</name><operator>::</operator><name>difference_type</name></expr>;
<expr><name>using</name> <name>pointer</name> <operator>=</operator> <name>typename</name> <name><name>__iterator_traits_member_pointer_or_void</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>reference</name> <operator>=</operator> <name>typename</name> <name>_Ip</name><operator>::</operator><name>reference</name></expr>;
}</block></expr>;</expr_stmt>




<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__cpp17_input_iterator_missing_members</name> <name>_Ip</name><operator>&gt;</operator>
struct <name><name>__iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>iterator_category</name> <operator>=</operator> <name>typename</name> <name><name>__iterator_traits_iterator_category</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name>typename</name> <name><name>indirectly_readable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr>;
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name>typename</name> <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name></expr>;
<expr><name>using</name> <name>pointer</name> <operator>=</operator> <name>typename</name> <name><name>__iterator_traits_member_pointer_or_arrow_or_void</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>reference</name> <operator>=</operator> <name>typename</name> <name><name>__iterator_traits_member_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
}</block></expr>;</expr_stmt>



<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>__cpp17_iterator_missing_members</name> <name>_Ip</name><operator>&gt;</operator>
struct <name><name>__iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>iterator_category</name> <operator>=</operator> <name>output_iterator_tag</name></expr>;
<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name>void</name></expr>;
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name>typename</name> <name><name>__iterator_traits_difference_type</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>pointer</name> <operator>=</operator> <name>void</name></expr>;
<expr><name>using</name> <name>reference</name> <operator>=</operator> <name>void</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>iterator_traits</name> <range>: <expr><name><name>__iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>__primary_template</name> <operator>=</operator> <name>iterator_traits</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Iter</name></expr><operator>,</operator> <expr><name>bool</name><operator>&gt;</operator> struct <name>__iterator_traits</name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Iter</name></expr><operator>,</operator> <expr><name>bool</name><operator>&gt;</operator> struct <name>__iterator_traits_impl</name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Iter</name><operator>&gt;</operator>
struct <name><name>__iterator_traits_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>pointer</name> <name>pointer</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>reference</name> <name>reference</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>iterator_category</name> <name>iterator_category</name></expr>;</expr_stmt></typedef>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name><name>__iterator_traits_impl</name>
<argument_list type="generic">&lt;
<argument><expr><name>_Iter</name></expr></argument>,
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>iterator_category</name></expr></argument>, <argument><expr><name>input_iterator_tag</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Iter</name><operator>::</operator><name>iterator_category</name></expr></argument>, <argument><expr><name>output_iterator_tag</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name>
<block>{}</block></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>iterator_traits</name>
<range>: <expr><name><name>__iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name><name>__has_iterator_typedefs</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name> <block>{

<expr><name>using</name> <name>__primary_template</name> <operator>=</operator> <name>iterator_traits</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>requires</name> <name><name>is_object_v</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>ptrdiff_t</name></type> <name>difference_type</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>remove_cv</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name>_Tp</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
<typedef>typedef <type><name>_Tp</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
<typedef>typedef <type><name>random_access_iterator_tag</name></type> <name>iterator_category</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<typedef>typedef <type><name>contiguous_iterator_tag</name></type> <name>iterator_concept</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__has_iterator_category</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__has_iterator_category_convertible_to</name>
<range>: <expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator_category</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name>
<block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__has_iterator_category_convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>false_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__has_iterator_concept</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__has_iterator_concept_convertible_to</name>
<range>: <expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name><operator>::</operator><name>iterator_concept</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name>
<block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__has_iterator_concept_convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>false_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_cpp17_input_iterator</name> <range>: <expr><name>public</name> <name><name>__has_iterator_category_convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>input_iterator_tag</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_cpp17_forward_iterator</name> <range>: <expr><name>public</name> <name><name>__has_iterator_category_convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>forward_iterator_tag</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_cpp17_bidirectional_iterator</name> <range>: <expr><name>public</name> <name><name>__has_iterator_category_convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bidirectional_iterator_tag</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_cpp17_random_access_iterator</name> <range>: <expr><name>public</name> <name><name>__has_iterator_category_convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>random_access_iterator_tag</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_cpp17_contiguous_iterator</name> <range>: <expr><name><name>_Or</name><argument_list type="generic">&lt;
<argument><expr><name><name>__has_iterator_category_convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>contiguous_iterator_tag</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>__has_iterator_concept_convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>contiguous_iterator_tag</name></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_cpp17_contiguous_iterator</name> <range>: <expr><name>false_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_cpp17_contiguous_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name> <range>: <expr><name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_exactly_cpp17_input_iterator</name>
<range>: <expr><name>public</name> <name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,
<argument><expr><name><name>__has_iterator_category_convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>input_iterator_tag</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>__has_iterator_category_convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>forward_iterator_tag</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_DEDUCTION_GUIDES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIterator</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>__iter_value_type</name> <init>= <expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_InputIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIterator</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>__iter_key_type</name> <init>= <expr><name><name>remove_const_t</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_InputIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name><operator>::</operator><name>first_type</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIterator</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>__iter_mapped_type</name> <init>= <expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_InputIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name><operator>::</operator><name>second_type</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIterator</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>__iter_to_alloc_type</name> <init>= <expr><name><name>pair</name><argument_list type="generic">&lt;
<argument><expr><name><name>add_const_t</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_InputIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name><operator>::</operator><name>first_type</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_InputIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name><operator>::</operator><name>second_type</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
