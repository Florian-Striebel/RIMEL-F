<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/compressed_pair.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_COMPRESSED_PAIR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_COMPRESSED_PAIR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>


struct <name>__default_init_tag</name> <block>{}</block></expr>;</expr_stmt>
<struct>struct <name>__value_init_tag</name> <block>{}</block>;</struct>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>int</name> <name>_Idx</name></expr><operator>,</operator>
<expr><name>bool</name> <name>_CanBeEmptyBase</name> <operator>=</operator>
<name><name>is_empty</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>__libcpp_is_final</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__compressed_pair_elem</name> <block>{
<typedef>typedef <type><name>_Tp</name></type> <name>_ParamT</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>_Tp</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>const_reference</name>;</typedef>

<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name></type>
<name>__compressed_pair_elem</name><parameter_list>(<parameter><decl><type><name>__default_init_tag</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>_LIBCPP_CONSTEXPR</name></macro>
<expr_stmt><expr><call><name>__compressed_pair_elem</name><argument_list>(<argument><expr><name>__value_init_tag</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__value_</name><argument_list>()</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>__compressed_pair_elem</name></expr></argument>, <argument><expr><name>typename</name> <name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR</name> <name>explicit</name>
<call><name>__compressed_pair_elem</name><argument_list>(<argument><expr><name>_Up</name><operator>&amp;&amp;</operator> <name>__u</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__value_</name><argument_list>(<argument>_VSTD::forward&lt;_Up&gt;(__u)</argument>)</argument_list></macro>
<block>{
}</block>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>, <argument><expr><name>size_t</name><modifier>...</modifier> <name>_Indexes</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<call><name>__compressed_pair_elem</name><argument_list>(<argument><expr><name>piecewise_construct_t</name></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>__args</name></expr></argument>,
<argument><expr><name><name>__tuple_indices</name><argument_list type="generic">&lt;<argument><expr><name>_Indexes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__value_</name><argument_list>(<argument>_VSTD::forward&lt;_Args&gt;(_VSTD::get&lt;_Indexes&gt;(__args))...</argument>)</argument_list></macro> <block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<name>_LIBCPP_INLINE_VISIBILITY</name> <name>reference</name> <macro><name>__get</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{ <return>return <expr><name>__value_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>const_reference</name> <macro><name>__get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{ <return>return <expr><name>__value_</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>_Tp</name></type> <name>__value_</name></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>int</name> <name>_Idx</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__compressed_pair_elem</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Idx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>private</name> <name>_Tp</name> <block>{
<typedef>typedef <type><name>_Tp</name></type> <name>_ParamT</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <type><name>_Tp</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>const_reference</name>;</typedef>
<typedef>typedef <type><name>_Tp</name></type> <name>__value_type</name>;</typedef>

<function_decl><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name></type> <name>__compressed_pair_elem</name><parameter_list>()</parameter_list> <init>= <expr/>default</init>;</function_decl>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name></type>
<name>__compressed_pair_elem</name><parameter_list>(<parameter><decl><type><name>__default_init_tag</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>_LIBCPP_CONSTEXPR</name></macro>
<expr_stmt><expr><call><name>__compressed_pair_elem</name><argument_list>(<argument><expr><name>__value_init_tag</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__value_type</name><argument_list>()</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>__compressed_pair_elem</name></expr></argument>, <argument><expr><name>typename</name> <name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR</name> <name>explicit</name>
<call><name>__compressed_pair_elem</name><argument_list>(<argument><expr><name>_Up</name><operator>&amp;&amp;</operator> <name>__u</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__value_type</name><argument_list>(<argument>_VSTD::forward&lt;_Up&gt;(__u)</argument>)</argument_list></macro>
<block>{}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>, <argument><expr><name>size_t</name><modifier>...</modifier> <name>_Indexes</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<call><name>__compressed_pair_elem</name><argument_list>(<argument><expr><name>piecewise_construct_t</name></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>__args</name></expr></argument>,
<argument><expr><name><name>__tuple_indices</name><argument_list type="generic">&lt;<argument><expr><name>_Indexes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__value_type</name><argument_list>(<argument>_VSTD::forward&lt;_Args&gt;(_VSTD::get&lt;_Indexes&gt;(__args))...</argument>)</argument_list></macro> <block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>_LIBCPP_INLINE_VISIBILITY</name> <name>reference</name> <macro><name>__get</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{ <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>const_reference</name> <macro><name>__get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{ <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>__compressed_pair</name> <range>: <expr><name>private</name> <name><name>__compressed_pair_elem</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>private</name> <name><name>__compressed_pair_elem</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<label><name>public</name>:</label>




<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"__compressed_pair cannot be instantiated when T1 and T2 are the same type; "</literal>
<literal type="string">"The current implementation is NOT ABI-compatible with the previous "</literal>
<literal type="string">"implementation for this configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name><name>__compressed_pair_elem</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>_Base1</name>;</typedef>
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name><name>__compressed_pair_elem</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>_Base2</name>;</typedef>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>bool</name> <name>_Dummy</name> <operator>=</operator> <name>true</name></expr><operator>,</operator>
<expr><name>class</name> <operator>=</operator> <name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name><name>__dependent_type</name><argument_list type="generic">&lt;<argument><expr><name><name>is_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Dummy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>__dependent_type</name><argument_list type="generic">&lt;<argument><expr><name><name>is_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Dummy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR</name> <call><name>__compressed_pair</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>_Base1</name><argument_list>(<argument><expr><call><name>__value_init_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>_Base2</name><argument_list>(<argument>__value_init_tag()</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_U1</name></expr></argument>, <argument><expr><name>class</name> <name>_U2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<call><name>__compressed_pair</name><argument_list>(<argument><expr><name>_U1</name><operator>&amp;&amp;</operator> <name>__t1</name></expr></argument>, <argument><expr><name>_U2</name><operator>&amp;&amp;</operator> <name>__t2</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>_Base1</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>_Base2</name><argument_list>(<argument>_VSTD::forward&lt;_U2&gt;(__t2)</argument>)</argument_list></macro> <expr><block>{}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Args1</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<macro><name>__compressed_pair</name><argument_list>(<argument>piecewise_construct_t __pc</argument>, <argument>tuple&lt;_Args1...&gt; __first_args</argument>,
<argument>tuple&lt;_Args2...&gt; __second_args</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>_Base1</name><argument_list>(<argument>__pc</argument>, <argument>_VSTD::move(__first_args)</argument>,
<argument>typename __make_tuple_indices&lt;sizeof...(_Args1)&gt;::type()</argument>)</argument_list></macro></expr><operator>,</operator>
<macro><name>_Base2</name><argument_list>(<argument>__pc</argument>, <argument>_VSTD::move(__second_args)</argument>,
<argument>typename __make_tuple_indices&lt;sizeof...(_Args2)&gt;::type()</argument>)</argument_list></macro> <expr><block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>_Base1</name><operator>::</operator><name>reference</name> <macro><name>first</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Base1</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>__get</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>_Base1</name><operator>::</operator><name>const_reference</name> <macro><name>first</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Base1</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>__get</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>_Base2</name><operator>::</operator><name>reference</name> <macro><name>second</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Base2</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>__get</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name>_Base2</name><operator>::</operator><name>const_reference</name> <macro><name>second</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Base2</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>__get</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<specifier>static</specifier> <name>_Base1</name><modifier>*</modifier></type> <name>__get_first_base</name><parameter_list>(<parameter><decl><type><name>__compressed_pair</name><modifier>*</modifier></type> <name>__pair</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Base1</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__pair</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<specifier>static</specifier> <name>_Base2</name><modifier>*</modifier></type> <name>__get_second_base</name><parameter_list>(<parameter><decl><type><name>__compressed_pair</name><modifier>*</modifier></type> <name>__pair</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Base2</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__pair</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>__compressed_pair</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>)</parameter_list>
_NOEXCEPT_<parameter_list>(<parameter><decl/></parameter></parameter_list>__is_nothrow_swappable&lt;_T1&gt;::value &amp;&amp;
__is_nothrow_swappable&lt;_T2&gt;::value</function>)</block_content>
<block>{<block_content>
<expr_stmt><expr><name>using</name> <name>_VSTD</name><operator>::</operator><name>swap</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><call><name>first</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><call><name>second</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>second</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></block></decl></decl_stmt>
};

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name><name>__compressed_pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__y</name></decl></parameter>)</parameter_list>
_NOEXCEPT_<parameter_list>(<parameter><decl/></parameter></parameter_list>__is_nothrow_swappable&lt;_T1&gt;::value &amp;&amp;
__is_nothrow_swappable&lt;_T2&gt;::value</function>) <block>{<block_content>
<expr_stmt><expr><call><name><name>__x</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
