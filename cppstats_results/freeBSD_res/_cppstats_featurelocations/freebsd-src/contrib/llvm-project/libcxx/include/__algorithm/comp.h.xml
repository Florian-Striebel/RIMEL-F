<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/comp.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_COMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_COMP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>




<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name> <operator>=</operator> <name>_T1</name></expr></argument>&gt;</argument_list></name>
struct <name>__equal_to</name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>==</operator> <name>__y</name></expr>;</return></block></expr>}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T2</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>==</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T2</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>==</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T2</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T2</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>==</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__equal_to</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>==</operator> <name>__y</name></expr>;</return></block></expr>}</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__equal_to</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_T1</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>==</operator> <name>__y</name></expr>;</return></block></expr>}</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__equal_to</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_T1</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>==</operator> <name>__y</name></expr>;</return></block></expr>}</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_T1</name></expr><operator>,</operator> <expr><name>class</name> <name>_T2</name> <operator>=</operator> <name>_T1</name><operator>&gt;</operator>
struct <name>__less</name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>&lt;</operator> <name>__y</name></expr>;</return></block></expr>}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T2</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>&lt;</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T2</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>&lt;</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T2</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T2</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>&lt;</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__less</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>&lt;</operator> <name>__y</name></expr>;</return></block></expr>}</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__less</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_T1</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>&lt;</operator> <name>__y</name></expr>;</return></block></expr>}</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_T1</name><operator>&gt;</operator>
struct <name><name>__less</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_T1</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_T1</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__x</name> <operator>&lt;</operator> <name>__y</name></expr>;</return></block></expr>}</block></expr></expr_stmt>
};

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
