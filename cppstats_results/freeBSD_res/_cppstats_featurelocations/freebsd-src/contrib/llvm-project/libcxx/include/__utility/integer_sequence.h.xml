<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__utility/integer_sequence.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___UTILITY_INTEGER_SEQUENCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___UTILITY_INTEGER_SEQUENCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name><modifier>...</modifier> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>integer_sequence</name>
<block>{
<typedef>typedef <type><name>_Tp</name></type> <name>value_type</name>;</typedef>
<call><name>static_assert</name><argument_list>( <argument><expr><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"std::integer_sequence can only be instantiated with an integral type"</literal></expr></argument> )</argument_list></call></block></expr>;</expr_stmt>
<function><type><specifier>static</specifier>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name>
<name>size_t</name></type>
<name>size</name><parameter_list>()</parameter_list> noexcept <block>{<block_content> <return>return <expr><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>_Ip</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name><modifier>...</modifier> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>index_sequence</name> <init>= <expr><name><name>integer_sequence</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>_Ip</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__make_integer_seq</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_TESTING_FALLBACK_MAKE_INTEGER_SEQUENCE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name> <name>_Ep</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>__make_integer_sequence</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>= <expr><name><name>__make_integer_seq</name><argument_list type="generic">&lt;<argument><expr><name>integer_sequence</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Ep</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name> <name>_Np</name></expr></argument>&gt;</argument_list></name> <name>using</name> <name>__make_integer_sequence_unchecked</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>=
<expr><name>typename</name> <name>__detail</name><operator>::</operator><name><name>__make</name><argument_list type="generic">&lt;<argument><expr><name>_Np</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>::</operator><name>template</name> <name><name>__convert</name><argument_list type="generic">&lt;<argument><expr><name>integer_sequence</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>_Tp</name> <name>_Ep</name><operator>&gt;</operator>
struct <name>__make_integer_sequence_checked</name>
<block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"std::make_integer_sequence can only be instantiated with an integral type"</literal></expr></argument> )</argument_list></call></expr>;
<expr><call><name>static_assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>_Ep</name></expr></argument>, <argument><expr><literal type="string">"std::make_integer_sequence must have a non-negative sequence length"</literal></expr></argument>)</argument_list></call></expr>;


<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>__make_integer_sequence_unchecked</name><operator>&lt;</operator><name>_Tp</name></expr><operator>,</operator> <expr><ternary><condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>_Ep</name></expr> ?</condition><then> <expr><name>_Ep</name></expr> </then><else>: <expr><literal type="number">0</literal><operator>&gt;</operator> <name>type</name></expr></else></ternary></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name> <name>_Ep</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>__make_integer_sequence</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>= <expr><name>typename</name> <name><name>__make_integer_sequence_checked</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Ep</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name> <name>_Np</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>make_integer_sequence</name> <init>= <expr><name><name>__make_integer_sequence</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Np</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>_Np</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>make_index_sequence</name> <init>= <expr><name><name>make_integer_sequence</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>_Np</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>index_sequence_for</name> <init>= <expr><name>make_index_sequence</name><operator>&lt;</operator><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
