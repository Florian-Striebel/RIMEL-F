<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/concepts.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_CONCEPTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_CONCEPTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/incrementable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iter_move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/readable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/pointer_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>




<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_In</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__indirectly_readable_impl</name> <init>=
<macro><name>requires</name><argument_list>(<argument>const _In __i</argument>)</argument_list></macro> <expr><block>{
<expr><name>typename</name> <name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>typename</name> <name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>typename</name> <name><name>iter_rvalue_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><operator>*</operator><name>__i</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>ranges</name><operator>::</operator><macro><name>iter_move</name><argument_list>(<argument>__i</argument>)</argument_list></macro></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_rvalue_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
}</block> <operator>&amp;&amp;</operator>
<name><name>common_reference_with</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>common_reference_with</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator></expr></argument>, <argument><expr><name><name>iter_rvalue_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>common_reference_with</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_rvalue_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_In</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirectly_readable</name> <init>= <expr><name><name>__indirectly_readable_impl</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>indirectly_readable</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>iter_common_reference_t</name> <init>= <expr><name><name>common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Out</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirectly_writable</name> <init>=
<macro><name>requires</name><argument_list>(<argument>_Out&amp;&amp; __o</argument>, <argument>_Tp&amp;&amp; __t</argument>)</argument_list></macro> <expr><block>{
<expr><operator>*</operator><name>__o</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Out</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__o</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Out</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>__o</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Out</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Out</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__integer_like</name> <init>= <expr><name><name>integral</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__signed_integer_like</name> <init>= <expr><name><name>signed_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>weakly_incrementable</name> <init>=
<expr><name><name>movable</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>)</argument_list></macro> <block>{
<expr><name>typename</name> <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>requires</name> <name><name>__signed_integer_like</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><operator>++</operator><name>__i</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>__i</name><operator>++</operator></expr>;
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>incrementable</name> <init>=
<expr><name><name>regular</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>weakly_incrementable</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><name>__i</name><operator>++</operator></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>input_or_output_iterator</name> <init>=
<macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>)</argument_list></macro> <expr><block>{
<expr><block>{ <expr><operator>*</operator><name>__i</name></expr> }</block> <operator>-&gt;</operator> <name>__referenceable</name></expr>;
}</block> <operator>&amp;&amp;</operator>
<name><name>weakly_incrementable</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>sentinel_for</name> <init>=
<expr><name><name>semiregular</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>input_or_output_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>__weakly_equality_comparable_with</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>, <argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>constexpr</name> <name>bool</name></type> <name>disable_sized_sentinel_for</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>sized_sentinel_for</name> <init>=
<expr><name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>, <argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>disable_sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_cv_t</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>remove_cv_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>const _Ip&amp; __i</argument>, <argument>const _Sp&amp; __s</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><name>__s</name> <operator>-</operator> <name>__i</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__i</name> <operator>-</operator> <name>__s</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>input_iterator</name> <init>=
<expr><name><name>input_or_output_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name>requires</name> <block>{ <expr><name>typename</name> <name><name>_ITER_CONCEPT</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>; }</block> <operator>&amp;&amp;</operator>
<name><name>derived_from</name><argument_list type="generic">&lt;<argument><expr><name><name>_ITER_CONCEPT</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>input_iterator_tag</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>output_iterator</name> <init>=
<expr><name><name>input_or_output_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>indirectly_writable</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name> <argument_list>(<argument>_Ip __it</argument>, <argument>_Tp&amp;&amp; __t</argument>)</argument_list></macro> <block>{
<expr><operator>*</operator><name>__it</name><operator>++</operator> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>forward_iterator</name> <init>=
<expr><name><name>input_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>derived_from</name><argument_list type="generic">&lt;<argument><expr><name><name>_ITER_CONCEPT</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>forward_iterator_tag</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>incrementable</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>bidirectional_iterator</name> <init>=
<expr><name><name>forward_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>derived_from</name><argument_list type="generic">&lt;<argument><expr><name><name>_ITER_CONCEPT</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>bidirectional_iterator_tag</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><operator>--</operator><name>__i</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__i</name><operator>--</operator></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>random_access_iterator</name> <init>=
<expr><name><name>bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>derived_from</name><argument_list type="generic">&lt;<argument><expr><name><name>_ITER_CONCEPT</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>random_access_iterator_tag</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>totally_ordered</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>, <argument>const _Ip __j</argument>, <argument>const iter_difference_t&lt;_Ip&gt; __n</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><name>__i</name> <operator>+=</operator> <name>__n</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__j</name> <operator>+</operator> <name>__n</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__n</name> <operator>+</operator> <name>__j</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__i</name> <operator>-=</operator> <name>__n</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>__j</name> <operator>-</operator> <name>__n</name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name><name>__j</name><index>[<expr><name>__n</name></expr>]</index></name></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>contiguous_iterator</name> <init>=
<expr><name><name>random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>derived_from</name><argument_list type="generic">&lt;<argument><expr><name><name>_ITER_CONCEPT</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>contiguous_iterator_tag</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>is_lvalue_reference_v</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>is_pointer_v</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>||</operator> <name>requires</name> <block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>__pointer_traits_element_type</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></sizeof></expr>; }</block><operator>)</operator> <operator>&amp;&amp;</operator>
<macro><name>requires</name><argument_list>(<argument>const _Ip&amp; __i</argument>)</argument_list></macro> <block>{
<expr><block>{ <expr><name>_VSTD</name><operator>::</operator><macro><name>to_address</name><argument_list>(<argument>__i</argument>)</argument_list></macro></expr> }</block> <operator>-&gt;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name><name>add_pointer_t</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__has_arrow</name> <init>= <expr><name><name>input_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>is_pointer_v</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>||</operator> <macro><name>requires</name><argument_list>(<argument>_Ip __i</argument>)</argument_list></macro> <block>{ <expr><name><name>__i</name><operator>.</operator><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></block><operator>)</operator></expr></init></decl>;</decl_stmt> })<empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_It</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirectly_unary_invocable</name> <init>=
<expr><name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>invocable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>invocable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>invocable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>common_reference_with</name><argument_list type="generic">&lt;
<argument><expr><name><name>invoke_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>invoke_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_It</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirectly_regular_unary_invocable</name> <init>=
<expr><name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>regular_invocable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>regular_invocable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>regular_invocable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>common_reference_with</name><argument_list type="generic">&lt;
<argument><expr><name><name>invoke_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>invoke_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_It</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirect_unary_predicate</name> <init>=
<expr><name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>predicate</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>predicate</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>predicate</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_It1</name></expr></argument>, <argument><expr><name>class</name> <name>_It2</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirect_binary_predicate</name> <init>=
<expr><name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>predicate</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>predicate</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>predicate</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>predicate</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>predicate</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_It1</name></expr></argument>, <argument><expr><name>class</name> <name>_It2</name> <operator>=</operator> <name>_It1</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirect_equivalence_relation</name> <init>=
<expr><name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>equivalence_relation</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>equivalence_relation</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>equivalence_relation</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>equivalence_relation</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>equivalence_relation</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_It1</name></expr></argument>, <argument><expr><name>class</name> <name>_It2</name> <operator>=</operator> <name>_It1</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirect_strict_weak_order</name> <init>=
<expr><name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>strict_weak_order</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>strict_weak_order</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>strict_weak_order</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>strict_weak_order</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>strict_weak_order</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It1</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_common_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_It2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Its</name></expr></argument>&gt;</argument_list></name></type>
<name>requires</name> <argument_list>(<argument><expr><name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_Its</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <operator>...</operator></expr></argument>)</argument_list> &amp;&amp; <name><name>invocable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Its</name></expr></argument>&gt;</argument_list></name><modifier>...</modifier></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>indirect_result_t</name> <init>= <expr><name><name>invoke_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Its</name></expr></argument>&gt;</argument_list></name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_In</name></expr></argument>, <argument><expr><name>class</name> <name>_Out</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirectly_movable</name> <init>=
<expr><name><name>indirectly_readable</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>indirectly_writable</name><argument_list type="generic">&lt;<argument><expr><name>_Out</name></expr></argument>, <argument><expr><name><name>iter_rvalue_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_In</name></expr></argument>, <argument><expr><name>class</name> <name>_Out</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>indirectly_movable_storable</name> <init>=
<expr><name><name>indirectly_movable</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>, <argument><expr><name>_Out</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>indirectly_writable</name><argument_list type="generic">&lt;<argument><expr><name>_Out</name></expr></argument>, <argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>movable</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>constructible_from</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_rvalue_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>assignable_from</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>iter_rvalue_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_In</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
