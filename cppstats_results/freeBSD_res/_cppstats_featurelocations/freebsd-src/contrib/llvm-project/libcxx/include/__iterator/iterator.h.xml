<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/iterator.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_ITERATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_ITERATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Category</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name> <operator>=</operator> <name>ptrdiff_t</name></expr></argument>,
<argument><expr><name>class</name> <name>_Pointer</name> <operator>=</operator> <name>_Tp</name><operator>*</operator></expr></argument>, <argument><expr><name>class</name> <name>_Reference</name> <operator>=</operator> <name>_Tp</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>iterator</name>
<block>{
<typedef>typedef <type><name>_Tp</name></type> <name>value_type</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>_Distance</name></type> <name>difference_type</name>;</typedef>
<typedef>typedef <type><name>_Pointer</name></type> <name>pointer</name>;</typedef>
<typedef>typedef <type><name>_Reference</name></type> <name>reference</name>;</typedef>
<typedef>typedef <type><name>_Category</name></type> <name>iterator_category</name>;</typedef>
};

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
