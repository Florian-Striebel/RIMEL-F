<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/partition_point.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_PARTITION_POINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_PARTITION_POINT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/half_positive.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Predicate</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name> <name>_ForwardIterator</name></type>
<name>partition_point</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Predicate</name></type> <name>__pred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__len</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>__len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__l2</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>__half_positive</name><argument_list>(<argument><expr><name>__len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__m</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>advance</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__pred</name><argument_list>(<argument><expr><operator>*</operator><name>__m</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__first</name> <operator>=</operator> <operator>++</operator><name>__m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__len</name> <operator>-=</operator> <name>__l2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__len</name> <operator>=</operator> <name>__l2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>__first</name></expr>;</return>
</block_content>}</block></function>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
