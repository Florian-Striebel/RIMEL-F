<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/size.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_SIZE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_SIZE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Cont</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <specifier>auto</specifier></type> <name>size</name><argument_list>(<argument><expr><specifier>const</specifier> <name>_Cont</name><operator>&amp;</operator> <name>__c</name></expr></argument>)</argument_list>
<name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
-&gt; <name>decltype</name> <argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content> <return>return <expr><call><name><name>__c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name> <name>_Sz</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>size_t</name></type> <name>size</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>_Tp</name> <argument_list>(<argument><expr><operator>&amp;</operator></expr></argument>)</argument_list></call><index>[<expr><name>_Sz</name></expr>]</index></expr></argument>)</argument_list> <name>noexcept</name> <block>{<block_content> <return>return <expr><name>_Sz</name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Cont</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <specifier>auto</specifier></type> <name>ssize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>_Cont</name><operator>&amp;</operator> <name>__c</name></expr></argument>)</argument_list>
<name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name><name>common_type_t</name><argument_list type="generic">&lt;<argument><expr><name>ptrdiff_t</name></expr></argument>, <argument><expr><name><name>make_signed_t</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name><name>__c</name><operator>.</operator><name>size</name></name><operator>(</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
-&gt; <name><name>common_type_t</name><argument_list type="generic">&lt;<argument><expr><name>ptrdiff_t</name></expr></argument>, <argument><expr><name><name>make_signed_t</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name><name>__c</name><operator>.</operator><name>size</name></name><operator>(</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{<block_content> <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name><name>common_type_t</name><argument_list type="generic">&lt;<argument><expr><name>ptrdiff_t</name></expr></argument>, <argument><expr><name><name>make_signed_t</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><name><name>__c</name><operator>.</operator><name>size</name></name><operator>(</operator><operator>)</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>_Sz</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>ptrdiff_t</name></type> <name>ssize</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>_Tp</name> <argument_list>(<argument><expr><operator>&amp;</operator></expr></argument>)</argument_list></call><index>[<expr><name>_Sz</name></expr>]</index></expr></argument>)</argument_list> <name>noexcept</name> <block>{<block_content> <return>return <expr><name>_Sz</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
