<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/iter_swap.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_ITER_SWAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_ITER_SWAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/declval.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/swap.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator1</name></expr></argument>, <argument><expr><name>class</name> <name>_ForwardIterator2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name> <name>void</name></type> <name>iter_swap</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator1</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>_ForwardIterator2</name></type> <name>__b</name></decl></parameter>)</parameter_list>

_NOEXCEPT_<parameter_list>(<parameter><decl/></parameter></parameter_list>_NOEXCEPT_<parameter_list>(<parameter><decl/></parameter></parameter_list>swap<parameter_list>(<parameter><decl/></parameter></parameter_list>*declval&lt;_ForwardIterator1&gt;<parameter_list>()</parameter_list><operator>,</operator> *declval&lt;_ForwardIterator2&gt;<parameter_list>()</parameter_list></function>))) <block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__a</name></expr></argument>, <argument><expr><operator>*</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
