<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/reverse_iterator.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_REVERSE_ITERATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_REVERSE_ITERATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/addressof.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct <name>__is_stashing_iterator</name> <operator>:</operator> <name>false_type</name> <block>{}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_stashing_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>typename</name> <name><name>__void_t</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name><operator>::</operator><name>__stashing_iterator_tag</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>reverse_iterator</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_ITERATOR_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<range>: <expr><name>public</name> <name><name>iterator</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator_category</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>reference</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<name>private</name><operator>:</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_ITERATOR_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_Iter</name> <name>__t</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>__is_stashing_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"The specified iterator type cannot be used with reverse_iterator; "</literal>
<literal type="string">"Using stashing iterators with reverse_iterator causes undefined behavior"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>_Iter</name> <name>current</name></expr>;
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <type><name>_Iter</name></type> <name>iterator_type</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>reference</name> <name>reference</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name> <name>pointer</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name><name>_If</name><argument_list type="generic">&lt;<argument><expr><name><name>__is_cpp17_random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>random_access_iterator_tag</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator_category</name></expr></argument>&gt;</argument_list></name></type> <name>iterator_category</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<typedef>typedef <type><name><name>_If</name><argument_list type="generic">&lt;<argument><expr><name><name>__is_cpp17_random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>random_access_iterator_tag</name></expr></argument>,
<argument><expr><name>bidirectional_iterator_tag</name></expr></argument>&gt;</argument_list></name></type> <name>iterator_concept</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_ITERATOR_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name></macro>
<expr_stmt><expr><call><name>reverse_iterator</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>__t</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>current</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>explicit</name> <macro><name>reverse_iterator</name><argument_list>(<argument>_Iter __x</argument>)</argument_list></macro> <operator>:</operator> <call><name>__t</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>current</name><argument_list>(<argument>__x</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<call><name>reverse_iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__u</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>__t</name><argument_list>(<argument><expr><call><name><name>__u</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>current</name><argument_list>(<argument>__u.base()</argument>)</argument_list></macro>
<expr><block>{ }</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_assignable</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reverse_iterator</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__u</name><operator>)</operator> <block>{
<expr><name>__t</name> <operator>=</operator> <name>current</name> <operator>=</operator> <call><name><name>__u</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name></macro>
<expr_stmt><expr><call><name>reverse_iterator</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>current</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>explicit</name> <macro><name>reverse_iterator</name><argument_list>(<argument>_Iter __x</argument>)</argument_list></macro> <operator>:</operator> <macro><name>current</name><argument_list>(<argument>__x</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator> <name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<call><name>reverse_iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__u</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>current</name><argument_list>(<argument>__u.base()</argument>)</argument_list></macro>
<block>{ }</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_assignable</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reverse_iterator</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__u</name><operator>)</operator> <block>{
<expr><name>current</name> <operator>=</operator> <call><name><name>__u</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>_Iter</name> <macro><name>base</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><name>current</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{<expr><name>_Iter</name> <name>__tmp</name> <operator>=</operator> <name>current</name></expr>; <return>return <expr><operator>*</operator><operator>--</operator><name>__tmp</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>pointer</name> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>) <expr_stmt><expr><specifier>const</specifier> <block>{<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reverse_iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{<expr><operator>--</operator><name>current</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reverse_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{<expr><name>reverse_iterator</name> <call><name>__tmp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>--</operator><name>current</name></expr>; <return>return <expr><name>__tmp</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reverse_iterator</name><operator>&amp;</operator> <name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator> <block>{<expr><operator>++</operator><name>current</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reverse_iterator</name> <name>operator</name><operator>--</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{<expr><name>reverse_iterator</name> <call><name>__tmp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>++</operator><name>current</name></expr>; <return>return <expr><name>__tmp</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reverse_iterator</name> <name>operator</name><operator>+</operator> <operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><call><name>reverse_iterator</name><argument_list>(<argument><expr><name>current</name> <operator>-</operator> <name>__n</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reverse_iterator</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator> <block>{<expr><name>current</name> <operator>-=</operator> <name>__n</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reverse_iterator</name> <name>operator</name><operator>-</operator> <operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><call><name>reverse_iterator</name><argument_list>(<argument><expr><name>current</name> <operator>+</operator> <name>__n</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reverse_iterator</name><operator>&amp;</operator> <name>operator</name><operator>-=</operator><operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator> <block>{<expr><name>current</name> <operator>+=</operator> <name>__n</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>reference</name></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>difference_type</name> <name>__n</name></expr></argument>)</argument_list> const <block>{<block_content><return>return <expr><operator>*</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>+</operator> <name>__n</name><operator>)</operator></expr>;</return></block_content>}</block></decl></decl_stmt>
};

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>bool</name>
<name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>bool</name>
<name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>bool</name>
<name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>bool</name>
<name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>auto</name>
<name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<operator>-&gt;</operator> <macro><name>decltype</name><argument_list>(<argument>__y.base() - __x.base()</argument>)</argument_list></macro>
<block>{
<return>return <expr><call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name>
<name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>operator</name><operator>+</operator><operator>(</operator><name>typename</name> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>__n</name><operator>,</operator> <specifier>const</specifier> <name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>)</operator>
<block>{
<return>return <expr><call><name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></type> <name>make_reverse_iterator</name><parameter_list>(<parameter><decl><type><name>_Iter</name></type> <name>__i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
