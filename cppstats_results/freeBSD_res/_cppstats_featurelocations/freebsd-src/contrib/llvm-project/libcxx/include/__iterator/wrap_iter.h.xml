<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/wrap_iter.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_WRAP_ITER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_WRAP_ITER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__debug&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/pointer_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>__wrap_iter</name>
<block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>_Iter</name></type> <name>iterator_type</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>iterator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>iterator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>iterator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>pointer</name> <name>pointer</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>iterator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>reference</name> <name>reference</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>iterator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator_category</name> <name>iterator_category</name></expr>;</expr_stmt></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<typedef>typedef <type><name>contiguous_iterator_tag</name></type> <name>iterator_concept</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>iterator_type</name></type> <name>__i</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <macro><name>__wrap_iter</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<operator>:</operator> <name>__i</name><block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><call><name>__get_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__insert_i</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<macro><name>__wrap_iter</name><argument_list>(<argument>const __wrap_iter&lt;_Up&gt;&amp; __u</argument>,
<argument>typename enable_if&lt;is_convertible&lt;_Up</argument>, <argument>iterator_type&gt;::value&gt;::type* = nullptr</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <macro><name>__i</name><argument_list>(<argument>__u.base()</argument>)</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><call><name>__get_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__iterator_copy</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__u</name></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<call><name>__wrap_iter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__wrap_iter</name><operator>&amp;</operator> <name>__x</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__i</name><argument_list>(<argument>__x.base()</argument>)</argument_list></macro>
<block>{
<expr><call><name>__get_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__iterator_copy</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__x</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>__wrap_iter</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>__wrap_iter</name><operator>&amp;</operator> <name>__x</name><operator>)</operator>
<block>{
<if_stmt><if>if <condition>(<expr><name>this</name> <operator>!=</operator> <operator>&amp;</operator><name>__x</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>__get_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__iterator_copy</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__i</name> <operator>=</operator> <name><name>__x</name><operator>.</operator><name>__i</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<operator>~</operator><macro><name>__wrap_iter</name><argument_list>()</argument_list></macro>
<block>{
<expr><call><name>__get_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__erase_i</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name>__get_const_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__dereferenceable</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Attempted to dereference a non-dereferenceable iterator"</literal></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>*</operator><name>__i</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>pointer</name> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name>__get_const_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__dereferenceable</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Attempted to dereference a non-dereferenceable iterator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__to_address</name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter&amp; operator++(</block></decl>) _NOEXCEPT
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name>__get_const_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__dereferenceable</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Attempted to increment a non-incrementable iterator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>__wrap_iter</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{<expr><name>__wrap_iter</name> <call><name>__tmp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>__tmp</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>__wrap_iter</name><operator>&amp;</operator> <name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name>__get_const_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__decrementable</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Attempted to decrement a non-decrementable iterator"</literal></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>--</operator><name>__i</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>__wrap_iter</name> <name>operator</name><operator>--</operator><operator>(</operator><name>int</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{<expr><name>__wrap_iter</name> <call><name>__tmp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>--</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>__tmp</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>__wrap_iter</name> <name>operator</name><operator>+</operator> <operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<expr><name>__wrap_iter</name> <call><name>__w</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><name>__w</name> <operator>+=</operator> <name>__n</name></expr>; <return>return <expr><name>__w</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>__wrap_iter</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name>__get_const_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__addable</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Attempted to add/subtract an iterator outside its valid range"</literal></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>__i</name> <operator>+=</operator> <name>__n</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>__wrap_iter</name> <name>operator</name><operator>-</operator> <operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><operator>*</operator><name>this</name> <operator>+</operator> <operator>(</operator><operator>-</operator><name>__n</name><operator>)</operator></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>__wrap_iter</name><operator>&amp;</operator> <name>operator</name><operator>-=</operator><operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{<expr><operator>*</operator><name>this</name> <operator>+=</operator> <operator>-</operator><name>__n</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>reference</name></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>difference_type</name> <name>__n</name></expr></argument>)</argument_list> const <name>_NOEXCEPT</name>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name>__get_const_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__subscriptable</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Attempted to subscript an iterator outside its valid range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name><name>__i</name><index>[<expr><name>__n</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name> <name>iterator_type</name> <macro><name>base</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><name>__i</name></expr>;</return>}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name></macro> <macro><name>__wrap_iter</name><argument_list>(<argument>const void* __p</argument>, <argument>iterator_type __x</argument>)</argument_list></macro> : <macro><name>__i</name><argument_list>(<argument>__x</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>__get_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__insert_ic</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name></type> <name>__wrap_iter</name><argument_list>(<argument><expr><name>iterator_type</name> <name>__x</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name> <range>: <macro><name>__i</name><argument_list>(<argument>__x</argument>)</argument_list></macro> <expr><block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>__wrap_iter</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_CharT</name></expr></argument>, <argument><expr><name>class</name> <name>_Traits</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name></type> <name>basic_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>vector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>span</name></decl>;</decl_stmt>
};

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name>__get_const_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__less_than_comparable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__y</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Attempted to compare incomparable iterators"</literal></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name>__get_const_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__less_than_comparable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__y</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Attempted to compare incomparable iterators"</literal></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>==</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>==</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name>__y</name> <operator>&lt;</operator> <name>__x</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name>__y</name> <operator>&lt;</operator> <name>__x</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>&lt;</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>&lt;</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__y</name> <operator>&lt;</operator> <name>__x</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__y</name> <operator>&lt;</operator> <name>__x</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>auto</name> <name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <macro><name>_NOEXCEPT</name></macro>
<operator>-&gt;</operator> <macro><name>decltype</name><argument_list>(<argument>__x.base() - __y.base()</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>typename</name> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name>
<name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <name>_NOEXCEPT</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name>__get_const_db</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>__less_than_comparable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__y</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Attempted to subtract incompatible iterators"</literal></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name><name>__x</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>__y</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_IF_NODEBUG</name>
<name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name> <name>operator</name><operator>+</operator><operator>(</operator><name>typename</name> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>__n</name><operator>,</operator> <name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter1</name></expr></argument>&gt;</argument_list></name> <name>__x</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{
<expr><name>__x</name> <operator>+=</operator> <name>__n</name></expr>;
<return>return <expr><name>__x</name></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_It</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_cpp17_contiguous_iterator</name><argument_list type="generic">&lt;<argument><expr><name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_It</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <range>: <expr><name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR</name></type>
<name>decltype</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>__to_address</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>__to_address</name><argument_list>(<argument><expr><name><name>__wrap_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>__w</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name> <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__to_address</name><argument_list>(<argument><expr><call><name><name>__w</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
