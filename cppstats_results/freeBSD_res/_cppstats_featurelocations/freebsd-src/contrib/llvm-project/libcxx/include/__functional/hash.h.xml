<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/hash.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_HASH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_HASH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/unary_function.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/pair.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/swap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Size</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Size</name></type>
<name>__loadword</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_Size</name></type> <name>__r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__r</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>




<expr_stmt><expr><name>template</name> <operator>&lt;</operator><name>class</name> <name>_Size</name></expr><operator>,</operator> <expr><name>size_t</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Size</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>__CHAR_BIT__</name><operator>&gt;</operator>
struct <name>__murmur2_or_cityhash</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Size</name><operator>&gt;</operator>
struct <name><name>__murmur2_or_cityhash</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name>
<block>{
<expr><specifier>inline</specifier> <name>_Size</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator> <name>__key</name><operator>,</operator> <name>_Size</name> <name>__len</name><operator>)</operator>
<name>_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK</name></expr>;
}</block></expr>;</expr_stmt>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Size</name></expr></argument>&gt;</argument_list></name>
<name>_Size</name>
<name><name>__murmur2_or_cityhash</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator> <name>__key</name><operator>,</operator> <name>_Size</name> <name>__len</name><operator>)</operator>
<block>{
<expr><specifier>const</specifier> <name>_Size</name> <name>__m</name> <operator>=</operator> <literal type="number">0x5bd1e995</literal></expr>;
<expr><specifier>const</specifier> <name>_Size</name> <name>__r</name> <operator>=</operator> <literal type="number">24</literal></expr>;
<expr><name>_Size</name> <name>__h</name> <operator>=</operator> <name>__len</name></expr>;
<expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <name>__data</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__key</name></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init>;</init> <condition><expr><name>__len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>__data</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>__len</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>_Size</name></type> <name>__k</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__k</name> <operator>*=</operator> <name>__m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__k</name> <operator>^=</operator> <name>__k</name> <operator>&gt;&gt;</operator> <name>__r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__k</name> <operator>*=</operator> <name>__m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__h</name> <operator>*=</operator> <name>__m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__h</name> <operator>^=</operator> <name>__k</name></expr>;</expr_stmt>
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
<switch>switch <condition>(<expr><name>__len</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>__h</name> <operator>^=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBCPP_FALLTHROUGH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>__h</name> <operator>^=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBCPP_FALLTHROUGH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>__h</name> <operator>^=</operator> <name><name>__data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>__h</name> <operator>*=</operator> <name>__m</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>__h</name> <operator>^=</operator> <name>__h</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__h</name> <operator>*=</operator> <name>__m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__h</name> <operator>^=</operator> <name>__h</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<return>return <expr><name>__h</name></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Size</name><operator>&gt;</operator>
struct <name><name>__murmur2_or_cityhash</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>&gt;</argument_list></name>
<block>{
<expr><specifier>inline</specifier> <name>_Size</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator> <name>__key</name><operator>,</operator> <name>_Size</name> <name>__len</name><operator>)</operator> <name>_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK</name></expr>;

<expr><name>private</name><operator>:</operator>

<specifier>static</specifier> <specifier>const</specifier> <name>_Size</name> <name>__k0</name> <operator>=</operator> <literal type="number">0xc3a5c85c97cb3127ULL</literal></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>_Size</name> <name>__k1</name> <operator>=</operator> <literal type="number">0xb492b66fbe98f273ULL</literal></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>_Size</name> <name>__k2</name> <operator>=</operator> <literal type="number">0x9ae16a3b2f90404fULL</literal></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>_Size</name> <name>__k3</name> <operator>=</operator> <literal type="number">0xc949d7c7509e6557ULL</literal></expr>;

<expr><specifier>static</specifier> <name>_Size</name> <macro><name>__rotate</name><argument_list>(<argument>_Size __val</argument>, <argument>int __shift</argument>)</argument_list></macro> <block>{
<return>return <expr><name>__shift</name> <operator>==</operator> <literal type="number">0</literal> <operator>?</operator> <name>__val</name> <operator>:</operator> <operator>(</operator><operator>(</operator><name>__val</name> <operator>&gt;&gt;</operator> <name>__shift</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__val</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>__shift</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return></block></expr>
}</block>

<specifier>static</specifier> <name>_Size</name> <macro><name>__rotate_by_at_least_1</name><argument_list>(<argument>_Size __val</argument>, <argument>int __shift</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>(</operator><name>__val</name> <operator>&gt;&gt;</operator> <name>__shift</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__val</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>__shift</name><operator>)</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>_Size</name></type> <name>__shift_mix</name><parameter_list>(<parameter><decl><type><name>_Size</name></type> <name>__val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__val</name> <operator>^</operator> <operator>(</operator><name>__val</name> <operator>&gt;&gt;</operator> <literal type="number">47</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_Size</name></type> <name>__hash_len_16</name><parameter_list>(<parameter><decl><type><name>_Size</name></type> <name>__u</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__v</name></decl></parameter>)</parameter_list>
_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>_Size</name></type> <name>__mul</name> <init>= <expr><literal type="number">0x9ddfea08eb382d69ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__a</name> <init>= <expr><operator>(</operator><name>__u</name> <operator>^</operator> <name>__v</name><operator>)</operator> <operator>*</operator> <name>__mul</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__a</name> <operator>^=</operator> <operator>(</operator><name>__a</name> <operator>&gt;&gt;</operator> <literal type="number">47</literal><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__b</name> <init>= <expr><operator>(</operator><name>__v</name> <operator>^</operator> <name>__a</name><operator>)</operator> <operator>*</operator> <name>__mul</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__b</name> <operator>^=</operator> <operator>(</operator><name>__b</name> <operator>&gt;&gt;</operator> <literal type="number">47</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>*=</operator> <name>__mul</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_Size</name></type> <name>__hash_len_0_to_16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__len</name></decl></parameter>)</parameter_list>
_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>_Size</name></type> <name>__a</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>_Size</name></type> <name>__b</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__hash_len_16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>__rotate_by_at_least_1</name><argument_list>(<argument><expr><name>__b</name> <operator>+</operator> <name>__len</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>__a</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>__b</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__hash_len_16</name><argument_list>(<argument><expr><name>__len</name> <operator>+</operator> <operator>(</operator><name>__a</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>__a</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>__b</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__s</name><index>[<expr><name>__len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>__c</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__s</name><index>[<expr><name>__len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>__y</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>__z</name> <init>= <expr><name>__len</name> <operator>+</operator> <operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__shift_mix</name><argument_list>(<argument><expr><name>__y</name> <operator>*</operator> <name>__k2</name> <operator>^</operator> <name>__z</name> <operator>*</operator> <name>__k3</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__k2</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>__k2</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>_Size</name></type> <name>__hash_len_17_to_32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__len</name></decl></parameter>)</parameter_list>
_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>_Size</name></type> <name>__a</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__k1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>_Size</name></type> <name>__b</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>_Size</name></type> <name>__c</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>__k2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>_Size</name></type> <name>__d</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>__k0</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__hash_len_16</name><argument_list>(<argument><expr><call><name>__rotate</name><argument_list>(<argument><expr><name>__a</name> <operator>-</operator> <name>__b</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>__d</name></expr></argument>,
<argument><expr><name>__a</name> <operator>+</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__b</name> <operator>^</operator> <name>__k3</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>__c</name> <operator>+</operator> <name>__len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>, <argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name></type> <name>__weak_hash_len_32_with_seeds</name><parameter_list>(
<parameter><decl><type><name>_Size</name></type> <name>__w</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__z</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__b</name></decl></parameter>)</parameter_list>
_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
<block>{<block_content>
<expr_stmt><expr><name>__a</name> <operator>+=</operator> <name>__w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__b</name> <operator>+</operator> <name>__a</name> <operator>+</operator> <name>__z</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>_Size</name></type> <name>__c</name> <init>= <expr><name>__a</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__a</name> <operator>+=</operator> <name>__x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__a</name> <operator>+=</operator> <name>__y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>+=</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>, <argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__a</name> <operator>+</operator> <name>__z</name></expr></argument>, <argument><expr><name>__b</name> <operator>+</operator> <name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>, <argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name></type> <name>__weak_hash_len_32_with_seeds</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__b</name></decl></parameter>)</parameter_list>
_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
<block>{<block_content>
<return>return <expr><call><name>__weak_hash_len_32_with_seeds</name><argument_list>(<argument><expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>_Size</name></type> <name>__hash_len_33_to_64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__len</name></decl></parameter>)</parameter_list>
_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
<block>{<block_content>
<decl_stmt><decl><type><name>_Size</name></type> <name>__z</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__a</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><name>__len</name> <operator>+</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>__k0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__b</name> <init>= <expr><call><name>__rotate</name><argument_list>(<argument><expr><name>__a</name> <operator>+</operator> <name>__z</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__c</name> <init>= <expr><call><name>__rotate</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__a</name> <operator>+=</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>+=</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__a</name> <operator>+=</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__vf</name> <init>= <expr><name>__a</name> <operator>+</operator> <name>__z</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__vs</name> <init>= <expr><name>__b</name> <operator>+</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>__c</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__z</name> <operator>+=</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__a</name> <operator>+</operator> <name>__z</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__a</name> <operator>+=</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>+=</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__a</name> <operator>+=</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__wf</name> <init>= <expr><name>__a</name> <operator>+</operator> <name>__z</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__ws</name> <init>= <expr><name>__b</name> <operator>+</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>__c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__r</name> <init>= <expr><call><name>__shift_mix</name><argument_list>(<argument><expr><operator>(</operator><name>__vf</name> <operator>+</operator> <name>__ws</name><operator>)</operator> <operator>*</operator> <name>__k2</name> <operator>+</operator> <operator>(</operator><name>__wf</name> <operator>+</operator> <name>__vs</name><operator>)</operator> <operator>*</operator> <name>__k0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__shift_mix</name><argument_list>(<argument><expr><name>__r</name> <operator>*</operator> <name>__k0</name> <operator>+</operator> <name>__vs</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__k2</name></expr>;</return>
</block_content>}</block></function>
};


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Size</name></expr></argument>&gt;</argument_list></name>
<name>_Size</name>
<name><name>__murmur2_or_cityhash</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator> <name>__key</name><operator>,</operator> <name>_Size</name> <name>__len</name><operator>)</operator>
<block>{
<expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>__s</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__key</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>__hash_len_0_to_16</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
<return>return <expr><call><name>__hash_len_17_to_32</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
} else <if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>__hash_len_33_to_64</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>_Size</name></type> <name>__x</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__y</name> <init>= <expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">56</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Size</name></type> <name>__z</name> <init>= <expr><call><name>__hash_len_16</name><argument_list>(<argument><expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>__len</name></expr></argument>,
<argument><expr><call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>, <argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name></type> <name>__v</name> <init>= <expr><call><name>__weak_hash_len_32_with_seeds</name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>__len</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>, <argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name></type> <name>__w</name> <init>= <expr><call><name>__weak_hash_len_32_with_seeds</name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <name>__len</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>__y</name> <operator>+</operator> <name>__k1</name></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__x</name> <operator>=</operator> <name>__x</name> <operator>*</operator> <name>__k1</name> <operator>+</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>__len</name> <operator>=</operator> <operator>(</operator><name>__len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>__x</name> <operator>=</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__x</name> <operator>+</operator> <name>__y</name> <operator>+</operator> <name><name>__v</name><operator>.</operator><name>first</name></name> <operator>+</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>__k1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__y</name> <operator>=</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__y</name> <operator>+</operator> <name><name>__v</name><operator>.</operator><name>second</name></name> <operator>+</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>__k1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__x</name> <operator>^=</operator> <name><name>__w</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>__y</name> <operator>+=</operator> <name><name>__v</name><operator>.</operator><name>first</name></name> <operator>+</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__z</name> <operator>=</operator> <call><name>__rotate</name><argument_list>(<argument><expr><name>__z</name> <operator>+</operator> <name><name>__w</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>__k1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__v</name> <operator>=</operator> <call><name>__weak_hash_len_32_with_seeds</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name><name>__v</name><operator>.</operator><name>second</name></name> <operator>*</operator> <name>__k1</name></expr></argument>, <argument><expr><name>__x</name> <operator>+</operator> <name><name>__w</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__w</name> <operator>=</operator> <call><name>__weak_hash_len_32_with_seeds</name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>__z</name> <operator>+</operator> <name><name>__w</name><operator>.</operator><name>second</name></name></expr></argument>,
<argument><expr><name>__y</name> <operator>+</operator> <call><name><name>__loadword</name><argument_list type="generic">&lt;<argument><expr><name>_Size</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__s</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>__z</name></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__s</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__len</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>__len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<return>return <expr><call><name>__hash_len_16</name><argument_list>(
<argument><expr><call><name>__hash_len_16</name><argument_list>(<argument><expr><name><name>__v</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>__w</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>__shift_mix</name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__k1</name> <operator>+</operator> <name>__z</name></expr></argument>,
<argument><expr><call><name>__hash_len_16</name><argument_list>(<argument><expr><name><name>__v</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>__w</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>size_t</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator>
struct <name>__scalar_hash</name></expr>;</expr_stmt>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<expr>union
<block>{
<expr><name>_Tp</name> <name>__t</name></expr>;
<expr><name>size_t</name> <name>__a</name></expr>;
}</block> <name>__u</name></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__a</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__t</name></name> <operator>=</operator> <name>__v</name></expr>;
<return>return <expr><name><name>__u</name><operator>.</operator><name>__a</name></name></expr>;</return>
}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<expr>union
<block>{
<expr><name>_Tp</name> <name>__t</name></expr>;
<expr><name>size_t</name> <name>__a</name></expr>;
}</block> <name>__u</name></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__t</name></name> <operator>=</operator> <name>__v</name></expr>;
<return>return <expr><name><name>__u</name><operator>.</operator><name>__a</name></name></expr>;</return>
}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<expr>union
<block>{
<expr><name>_Tp</name> <name>__t</name></expr>;
struct
<expr><block>{
<expr><name>size_t</name> <name>__a</name></expr>;
<expr><name>size_t</name> <name>__b</name></expr>;
}</block> <name>__s</name></expr>;
}</block> <name>__u</name></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__t</name></name> <operator>=</operator> <name>__v</name></expr>;
<return>return <expr><call><call><name><name>__murmur2_or_cityhash</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name>__u</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<expr>union
<block>{
<expr><name>_Tp</name> <name>__t</name></expr>;
struct
<expr><block>{
<expr><name>size_t</name> <name>__a</name></expr>;
<expr><name>size_t</name> <name>__b</name></expr>;
<expr><name>size_t</name> <name>__c</name></expr>;
}</block> <name>__s</name></expr>;
}</block> <name>__u</name></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__t</name></name> <operator>=</operator> <name>__v</name></expr>;
<return>return <expr><call><call><name><name>__murmur2_or_cityhash</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name>__u</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<expr>union
<block>{
<expr><name>_Tp</name> <name>__t</name></expr>;
struct
<expr><block>{
<expr><name>size_t</name> <name>__a</name></expr>;
<expr><name>size_t</name> <name>__b</name></expr>;
<expr><name>size_t</name> <name>__c</name></expr>;
<expr><name>size_t</name> <name>__d</name></expr>;
}</block> <name>__s</name></expr>;
}</block> <name>__u</name></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__t</name></name> <operator>=</operator> <name>__v</name></expr>;
<return>return <expr><call><call><name><name>__murmur2_or_cityhash</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name>__u</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
};

<struct>struct <name>_PairT</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>second</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>_LIBCPP_INLINE_VISIBILITY</name>
<specifier>inline</specifier> <name>size_t</name></type> <name>__hash_combine</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>__lhs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__rhs</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<typedef>typedef <type><name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>_PairT</name></expr></argument>&gt;</argument_list></name></type> <name>_HashT</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>_PairT</name></type> <name>__p</name> <init>= <expr><block>{<expr><name>__lhs</name></expr>, <expr><name>__rhs</name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><call><name>_HashT</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name><modifier>*</modifier></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>*</operator> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<expr>union
<block>{
<expr><name>_Tp</name><operator>*</operator> <name>__t</name></expr>;
<expr><name>size_t</name> <name>__a</name></expr>;
}</block> <name>__u</name></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__t</name></name> <operator>=</operator> <name>__v</name></expr>;
<return>return <expr><call><call><name><name>__murmur2_or_cityhash</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name>__u</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>bool</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>bool</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>char</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>char</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>signed</name> <name>char</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>signed</name> <name>char</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>signed</name> <name>char</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>signed</name> <name>char</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>unsigned</name> <name>char</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_CHAR8_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>char8_t</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>char8_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>char8_t</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>char8_t</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_UNICODE_CHARS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>char16_t</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>char16_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>char16_t</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>char16_t</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>char32_t</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>char32_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>char32_t</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>char32_t</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>wchar_t</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>wchar_t</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>short</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>short</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>short</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>short</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>short</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>short</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>unsigned</name> <name>short</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>int</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>int</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>unsigned</name> <name>int</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>long</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>long</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>unsigned</name> <name>long</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_INT128</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>__int128_t</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>__int128_t</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>__uint128_t</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>__uint128_t</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>float</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{

<if_stmt><if>if <condition>(<expr><name>__v</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>double</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{

<if_stmt><if>if <condition>(<expr><name>__v</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>double</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>double</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>long</name> <name>double</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{

<if_stmt><if>if <condition>(<expr><name>__v</name> <operator>==</operator> <literal type="number">0.0L</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ILP32__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

union
<block>{
<expr><name>long</name> <name>double</name> <name>__t</name></expr>;
struct
<expr><block>{
<expr><name>size_t</name> <name>__a</name></expr>;
<expr><name>size_t</name> <name>__b</name></expr>;
<expr><name>size_t</name> <name>__c</name></expr>;
<expr><name>size_t</name> <name>__d</name></expr>;
}</block> <name>__s</name></expr>;
}</block></block> <name>__u</name></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__a</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__b</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__c</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__d</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name><name>__u</name><operator>.</operator><name>__t</name></name> <operator>=</operator> <name>__v</name></expr>;
<return>return <expr><name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__a</name></name> <operator>^</operator> <name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__b</name></name> <operator>^</operator> <name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__c</name></name> <operator>^</operator> <name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__d</name></name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

union
<block>{
<expr><name>long</name> <name>double</name> <name>__t</name></expr>;
struct
<expr><block>{
<expr><name>size_t</name> <name>__a</name></expr>;
<expr><name>size_t</name> <name>__b</name></expr>;
}</block> <name>__s</name></expr>;
}</block></block> <name>__u</name></expr></range></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__a</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__b</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__u</name><operator>.</operator><name>__t</name></name> <operator>=</operator> <name>__v</name></expr>;</expr_stmt>
<return>return <expr><name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__a</name></name> <operator>^</operator> <name><name>__u</name><operator>.</operator><name>__s</name><operator>.</operator><name>__b</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>__scalar_hash</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
}<empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>is_enum</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>__enum_hash</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name> <name>__v</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>underlying_type</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<return>return <expr><name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><block>{}</block><operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}
}<empty_stmt>;</empty_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>__enum_hash</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><call><name>__enum_hash</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><call><name>__enum_hash</name><argument_list>(<argument><expr><name>__enum_hash</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>__enum_hash</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><name>__enum_hash</name> <specifier>const</specifier><operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>hash</name> <range>: <expr><name>public</name> <name><name>__enum_hash</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>nullptr_t</name></expr></argument>&gt;</argument_list></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name>public</name> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>nullptr_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>size_t</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>nullptr_t</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>nullptr_t</name><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{
<return>return <expr><literal type="number">662607004ull</literal></expr>;</return>
}</block></expr></expr_stmt>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Key</name></expr></argument>, <argument><expr><name>class</name> <name>_Hash</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>__check_hash_requirements</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>= <expr><name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,
<argument><expr><name><name>is_copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Hash</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_move_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Hash</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>__invokable_r</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>_Hash</name></expr></argument>, <argument><expr><name>_Key</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Key</name></expr></argument>, <argument><expr><name>class</name> <name>_Hash</name> <operator>=</operator> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>_Key</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>using</name> <name>__has_enabled_hash</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>= <expr><name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,
<argument><expr><name><name>__check_hash_requirements</name><argument_list type="generic">&lt;<argument><expr><name>_Key</name></expr></argument>, <argument><expr><name>_Hash</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Hash</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Type</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>__enable_hash_helper_imp</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>= <expr><name>_Type</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Type</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Keys</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>__enable_hash_helper</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>= <expr><name><name>__enable_hash_helper_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Type</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>__all</name><argument_list type="generic">&lt;<argument><expr><name><name>__has_enabled_hash</name><argument_list type="generic">&lt;<argument><expr><name>_Keys</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>
&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Type</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>__enable_hash_helper</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>= <expr><name>_Type</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
