<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__random/uniform_int_distribution.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___RANDOM_UNIFORM_INT_DISTRIBUTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___RANDOM_UNIFORM_INT_DISTRIBUTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__bits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iosfwd&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>



<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name> <name>long</name> <name>_Xp</name></expr></argument>, <argument><expr><name>size_t</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
struct <name>__log2_imp</name>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name> <name>value</name> <operator>=</operator> <name>_Xp</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>_Rp</name><operator>)</operator> <operator>?</operator> <name>_Rp</name>
<operator>:</operator> <name><name>__log2_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Xp</name></expr></argument>, <argument><expr><name>_Rp</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>_Xp</name><operator>&gt;</operator>
struct <name><name>__log2_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Xp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name> <name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>size_t</name> <name>_Rp</name><operator>&gt;</operator>
struct <name><name>__log2_imp</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name> <name>value</name> <operator>=</operator> <name>_Rp</name> <operator>+</operator> <literal type="number">1</literal></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_UIntType</name></expr><operator>,</operator> <expr><name>_UIntType</name> <name>_Xp</name><operator>&gt;</operator>
struct <name>__log2</name>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name> <name>value</name> <operator>=</operator> <name>__log2_imp</name><operator>&lt;</operator><name>_Xp</name></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_UIntType</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>__CHAR_BIT__</name> <operator>-</operator> <literal type="number">1</literal><operator>&gt;</operator><operator>::</operator><name>value</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Engine</name></expr></argument>, <argument><expr><name>class</name> <name>_UIntType</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>__independent_bits_engine</name>
<block>{<block_content>
<label><name>public</name>:</label>

<typedef>typedef <type><name>_UIntType</name></type> <name>result_type</name>;</typedef>

<label><name>private</name>:</label>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Engine</name><operator>::</operator><name>result_type</name> <name>_Engine_result_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>conditional</name>
<operator>&lt;</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>_Engine_result_type</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>result_type</name></expr></argument>)</argument_list></sizeof></expr><operator>,</operator>
<expr><name>result_type</name></expr><operator>,</operator>
<expr><name>_Engine_result_type</name>
<operator>&gt;</operator><operator>::</operator><name>type</name> <name>_Working_result_type</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>_Engine</name><modifier>&amp;</modifier></type> <name>__e_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>__w_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>__w0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>__n_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>__n0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Working_result_type</name></type> <name>__y0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Working_result_type</name></type> <name>__y1_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Engine_result_type</name></type> <name>__mask0_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Engine_result_type</name></type> <name>__mask1_</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_Working_result_type</name></type> <name>_Rp</name> <init>= <expr><name>_Engine</name><operator>::</operator><name>_Max</name> <operator>-</operator> <name>_Engine</name><operator>::</operator><name>_Min</name>
<operator>+</operator> <call><name>_Working_result_type</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR</name> <specifier>const</specifier> <name>_Working_result_type</name></type> <name>_Rp</name> <init>= <expr><name>_Engine</name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>-</operator> <name>_Engine</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call>
<operator>+</operator> <call><name>_Working_result_type</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR</name> <specifier>const</specifier> <name>size_t</name></type> <name>__m</name> <init>= <expr><name><name>__log2</name><argument_list type="generic">&lt;<argument><expr><name>_Working_result_type</name></expr></argument>, <argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR</name> <specifier>const</specifier> <name>size_t</name></type> <name>_WDt</name> <init>= <expr><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>_Working_result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>digits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR</name> <specifier>const</specifier> <name>size_t</name></type> <name>_EDt</name> <init>= <expr><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>_Engine_result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>digits</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<macro><name>__independent_bits_engine</name><argument_list>(<argument>_Engine&amp; __e</argument>, <argument>size_t __w</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>result_type</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><operator>)</operator> <block>{<return>return <expr><call><name>__eval</name><argument_list>(<argument><expr><call><name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>_Rp</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>result_type</name></type> <name>__eval</name><parameter_list>(<parameter><decl><type><name>false_type</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>result_type</name></type> <name>__eval</name><parameter_list>(<parameter><decl><type><name>true_type</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Engine</name></expr></argument>, <argument><expr><name>class</name> <name>_UIntType</name></expr></argument>&gt;</argument_list></name>
<name><name>__independent_bits_engine</name><argument_list type="generic">&lt;<argument><expr><name>_Engine</name></expr></argument>, <argument><expr><name>_UIntType</name></expr></argument>&gt;</argument_list></name>
<operator>::</operator><macro><name>__independent_bits_engine</name><argument_list>(<argument>_Engine&amp; __e</argument>, <argument>size_t __w</argument>)</argument_list></macro>
<operator>:</operator> <call><name>__e_</name><argument_list>(<argument><expr><name>__e</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>__w_</name><argument_list>(<argument>__w</argument>)</argument_list></macro>
<expr><block>{
<expr><name>__n_</name> <operator>=</operator> <name>__w_</name> <operator>/</operator> <name>__m</name> <operator>+</operator> <operator>(</operator><name>__w_</name> <operator>%</operator> <name>__m</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;
<expr><name>__w0_</name> <operator>=</operator> <name>__w_</name> <operator>/</operator> <name>__n_</name></expr>;
<if_stmt><if>if <condition>(<expr><name>_Rp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__y0_</name> <operator>=</operator> <name>_Rp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__w0_</name> <operator>&lt;</operator> <name>_WDt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__y0_</name> <operator>=</operator> <operator>(</operator><name>_Rp</name> <operator>&gt;&gt;</operator> <name>__w0_</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>__w0_</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__y0_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_Rp</name> <operator>-</operator> <name>__y0_</name> <operator>&gt;</operator> <name>__y0_</name> <operator>/</operator> <name>__n_</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>__n_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__w0_</name> <operator>=</operator> <name>__w_</name> <operator>/</operator> <name>__n_</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__w0_</name> <operator>&lt;</operator> <name>_WDt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__y0_</name> <operator>=</operator> <operator>(</operator><name>_Rp</name> <operator>&gt;&gt;</operator> <name>__w0_</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>__w0_</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__y0_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>__n0_</name> <operator>=</operator> <name>__n_</name> <operator>-</operator> <name>__w_</name> <operator>%</operator> <name>__n_</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__w0_</name> <operator>&lt;</operator> <name>_WDt</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__y1_</name> <operator>=</operator> <operator>(</operator><name>_Rp</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>__w0_</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>__w0_</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>__y1_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>__mask0_</name> <operator>=</operator> <ternary><condition><expr><name>__w0_</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>_Engine_result_type</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>_EDt</name> <operator>-</operator> <name>__w0_</name><operator>)</operator></expr> </then><else>:
<expr><call><name>_Engine_result_type</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>__mask1_</name> <operator>=</operator> <name><name>__w0_</name> <argument_list type="generic">&lt; <argument><expr><name>_EDt</name> <operator>-</operator> <literal type="number">1</literal> <operator>?</operator>
<name>_Engine_result_type</name><operator>(</operator><operator>~</operator><literal type="number">0</literal><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <operator>(</operator><name>_EDt</name> <operator>-</operator> <operator>(</operator><name>__w0_</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>:</operator>
<call><name>_Engine_result_type</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Engine</name></expr><operator>,</operator> <expr><name>class</name> <name>_UIntType</name><operator>&gt;</operator>
<specifier>inline</specifier>
<name>_UIntType</name>
<name><name>__independent_bits_engine</name><argument_list type="generic">&lt;<argument><expr><name>_Engine</name></expr></argument>, <argument><expr><name>_UIntType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__eval</name><argument_list>(<argument>false_type</argument>)</argument_list></macro>
<block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>result_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>__e_</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>__mask0_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Engine</name></expr></argument>, <argument><expr><name>class</name> <name>_UIntType</name></expr></argument>&gt;</argument_list></name>
<name>_UIntType</name>
<name><name>__independent_bits_engine</name><argument_list type="generic">&lt;<argument><expr><name>_Engine</name></expr></argument>, <argument><expr><name>_UIntType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>__eval</name><argument_list>(<argument>true_type</argument>)</argument_list></macro>
<block>{
<expr><specifier>const</specifier> <name>size_t</name> <name>_WRt</name> <operator>=</operator> <name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>digits</name></expr>;
<expr><name>result_type</name> <name>_Sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>__k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>__k</name> <operator>&lt;</operator> <name>__n0_</name></expr>;</condition> <incr><expr><operator>++</operator><name>__k</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>_Engine_result_type</name></type> <name>__u</name></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>__u</name> <operator>=</operator> <call><name>__e_</name><argument_list>()</argument_list></call> <operator>-</operator> <name>_Engine</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></do></block_content></block></for>}</block></expr></expr_stmt> <while>while <condition>(<expr><name>__u</name> <operator>&gt;=</operator> <name>__y0_</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>__w0_</name> <operator>&lt;</operator> <name>_WRt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>_Sp</name> <operator>&lt;&lt;=</operator> <name>__w0_</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>_Sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>_Sp</name> <operator>+=</operator> <name>__u</name> <operator>&amp;</operator> <name>__mask0_</name></expr>;</expr_stmt>
}
for <expr_stmt><expr><operator>(</operator><name>size_t</name> <name>__k</name> <operator>=</operator> <name>__n0_</name>; <name>__k</name> <operator>&lt;</operator> <name>__n_</name>; <operator>++</operator><name>__k</name><operator>)</operator>
<block>{
<expr><name>_Engine_result_type</name> <name>__u</name></expr>;
<do>do
<block>{<block_content>
<expr_stmt><expr><name>__u</name> <operator>=</operator> <call><name>__e_</name><argument_list>()</argument_list></call> <operator>-</operator> <name>_Engine</name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></do>}</block></expr></expr_stmt> <while>while <condition>(<expr><name>__u</name> <operator>&gt;=</operator> <name>__y1_</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>__w0_</name> <operator>&lt;</operator> <name>_WRt</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>_Sp</name> <operator>&lt;&lt;=</operator> <name>__w0_</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>_Sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>_Sp</name> <operator>+=</operator> <name>__u</name> <operator>&amp;</operator> <name>__mask1_</name></expr>;</expr_stmt>
}
return <expr_stmt><expr><name>_Sp</name></expr>;</expr_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_IntType</name> <operator>=</operator> <name>int</name><operator>&gt;</operator>
<name>class</name> <name>uniform_int_distribution</name>
<block>{
<expr><name>public</name><operator>:</operator></expr>

<typedef>typedef <type><name>_IntType</name></type> <name>result_type</name>;</typedef>

<name>class</name> <name>param_type</name>
<block>{
<expr><name>result_type</name> <name>__a_</name></expr>;
<expr><name>result_type</name> <name>__b_</name></expr>;
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <type><name>uniform_int_distribution</name></type> <name>distribution_type</name>;</typedef>

<name>explicit</name> <macro><name>param_type</name><argument_list>(<argument>result_type __a = <literal type="number">0</literal></argument>,
<argument>result_type __b = numeric_limits&lt;result_type&gt;::max()</argument>)</argument_list></macro>
<operator>:</operator> <call><name>__a_</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>,</operator> <macro><name>__b_</name><argument_list>(<argument>__b</argument>)</argument_list></macro> <block>{}</block></block></block>

<name>result_type</name> <macro><name>a</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><name>__a_</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>result_type</name> <macro><name>b</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><name>__b_</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>param_type</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>param_type</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{<return>return <expr><name><name>__x</name><operator>.</operator><name>__a_</name></name> <operator>==</operator> <name><name>__y</name><operator>.</operator><name>__a_</name></name> <operator>&amp;&amp;</operator> <name><name>__x</name><operator>.</operator><name>__b_</name></name> <operator>==</operator> <name><name>__y</name><operator>.</operator><name>__b_</name></name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>param_type</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>param_type</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>==</operator> <name>__y</name><operator>)</operator></expr>;</return>}</block></expr></expr_stmt>
};

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>param_type</name></type> <name>__p_</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>uniform_int_distribution</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>uniform_int_distribution</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<name>explicit</name> <macro><name>uniform_int_distribution</name><argument_list>(
<argument>result_type __a</argument>, <argument>result_type __b = numeric_limits&lt;result_type&gt;::max()</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>param_type(__a, __b)</argument>)</argument_list></macro> <block>{}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>explicit</name> <macro><name>uniform_int_distribution</name><argument_list>(
<argument>result_type __a = <literal type="number">0</literal></argument>,
<argument>result_type __b = numeric_limits&lt;result_type&gt;::max()</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>param_type(__a, __b)</argument>)</argument_list></macro> <block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>explicit</name> <call><name>uniform_int_distribution</name><argument_list>(<argument><expr><specifier>const</specifier> <name>param_type</name><operator>&amp;</operator> <name>__p</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__p_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <block>{}</block>
<name>void</name> <macro><name>reset</name><argument_list>()</argument_list></macro> <block>{}</block>


<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_URNG</name></expr></argument>&gt;</argument_list></name> <name>result_type</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_URNG</name><operator>&amp;</operator> <name>__g</name><operator>)</operator>
<block>{<return>return <expr><call>(<modifier>*</modifier><name>this</name>)<argument_list>(<argument><expr><name>__g</name></expr></argument>, <argument><expr><name>__p_</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_URNG</name></expr></argument>&gt;</argument_list></name> <name>result_type</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_URNG</name><operator>&amp;</operator> <name>__g</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>param_type</name><operator>&amp;</operator> <name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result_type</name> <macro><name>a</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><call><name><name>__p_</name><operator>.</operator><name>a</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>result_type</name> <macro><name>b</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><call><name><name>__p_</name><operator>.</operator><name>b</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name>param_type</name> <macro><name>param</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><name>__p_</name></expr>;</return>}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>param</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>param_type</name><modifier>&amp;</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> <block>{<block_content><expr_stmt><expr><name>__p_</name> <operator>=</operator> <name>__p</name></expr>;</expr_stmt></block_content>}</block></function>

<expr_stmt><expr><name>result_type</name> <macro><name>min</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><call><name>a</name><argument_list>()</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>result_type</name> <macro><name>max</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{<return>return <expr><call><name>b</name><argument_list>()</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>uniform_int_distribution</name><operator>&amp;</operator> <name>__x</name><operator>,</operator>
<specifier>const</specifier> <name>uniform_int_distribution</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{<return>return <expr><name><name>__x</name><operator>.</operator><name>__p_</name></name> <operator>==</operator> <name><name>__y</name><operator>.</operator><name>__p_</name></name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>uniform_int_distribution</name><operator>&amp;</operator> <name>__x</name><operator>,</operator>
<specifier>const</specifier> <name>uniform_int_distribution</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>==</operator> <name>__y</name><operator>)</operator></expr>;</return>}</block></expr></expr_stmt>
};

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_IntType</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_URNG</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>_IntType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>result_type</name>
<name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>_IntType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_URNG</name><operator>&amp;</operator> <name>__g</name><operator>,</operator> <specifier>const</specifier> <name>param_type</name><operator>&amp;</operator> <name>__p</name><operator>)</operator>
<name>_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>conditional</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>result_type</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr><operator>,</operator>
<expr><name>uint32_t</name></expr><operator>,</operator> <expr><name>uint64_t</name><operator>&gt;</operator><operator>::</operator><name>type</name> <name>_UIntType</name></expr>;</expr_stmt></typedef>
<specifier>const</specifier> <name>_UIntType</name> <name>_Rp</name> <operator>=</operator> <call><name>_UIntType</name><argument_list>(<argument><expr><call><name><name>__p</name><operator>.</operator><name>b</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>_UIntType</name><argument_list>(<argument><expr><call><name><name>__p</name><operator>.</operator><name>a</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>_UIntType</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_Rp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>__p</name><operator>.</operator><name>a</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>_Dt</name> <init>= <expr><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>_UIntType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>digits</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>__independent_bits_engine</name><argument_list type="generic">&lt;<argument><expr><name>_URNG</name></expr></argument>, <argument><expr><name>_UIntType</name></expr></argument>&gt;</argument_list></name></type> <name>_Eng</name>;</typedef>
<if_stmt><if>if <condition>(<expr><name>_Rp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>result_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><call><name>_Eng</name><argument_list>(<argument><expr><name>__g</name></expr></argument>, <argument><expr><name>_Dt</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>__w</name> <init>= <expr><name>_Dt</name> <operator>-</operator> <call><name>__libcpp_clz</name><argument_list>(<argument><expr><name>_Rp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>_Rp</name> <operator>&amp;</operator> <operator>(</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>_UIntType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>_Dt</name> <operator>-</operator> <name>__w</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>__w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<function_decl><type><name>_Eng</name></type> <name>__e</name><parameter_list>(<parameter><decl><type><name>__g</name></type></decl></parameter>, <parameter><decl><type><name>__w</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>_UIntType</name></type> <name>__u</name></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>__u</name> <operator>=</operator> <call><name>__e</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>__u</name> <operator>&gt;=</operator> <name>_Rp</name></expr>)</condition>;</do>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>result_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name> <operator>+</operator> <call><name><name>__p</name><operator>.</operator><name>a</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_CharT</name></expr><operator>,</operator> <expr><name>class</name> <name>_Traits</name></expr><operator>,</operator> <expr><name>class</name> <name>_IT</name><operator>&gt;</operator>
<name><name>basic_ostream</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>basic_ostream</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__os</name><operator>,</operator>
<specifier>const</specifier> <name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>_IT</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>)</operator>
<block>{
<expr><name><name>__save_flags</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name> <call><name>__lx</name><argument_list>(<argument><expr><name>__os</name></expr></argument>)</argument_list></call></expr>;
<typedef>typedef <type><name><name>basic_ostream</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name></type> <name>_Ostream</name>;</typedef>
<call><name><name>__os</name><operator>.</operator><name>flags</name></name><argument_list>(<argument><expr><name>_Ostream</name><operator>::</operator><name>dec</name> <operator>|</operator> <name>_Ostream</name><operator>::</operator><name>left</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_CharT</name></type> <name>__sp</name> <init>= <expr><call><name><name>__os</name><operator>.</operator><name>widen</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>__os</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>__sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__os</name> <operator>&lt;&lt;</operator> <call><name><name>__x</name><operator>.</operator><name>a</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>__sp</name> <operator>&lt;&lt;</operator> <call><name><name>__x</name><operator>.</operator><name>b</name></name><argument_list>()</argument_list></call></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_CharT</name></expr><operator>,</operator> <expr><name>class</name> <name>_Traits</name></expr><operator>,</operator> <expr><name>class</name> <name>_IT</name><operator>&gt;</operator>
<name><name>basic_istream</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<name>operator</name><operator>&gt;&gt;</operator><operator>(</operator><name><name>basic_istream</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__is</name><operator>,</operator>
<name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>_IT</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>)</operator>
<block>{
<typedef>typedef <type><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>_IT</name></expr></argument>&gt;</argument_list></name></type> <name>_Eng</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Eng</name><operator>::</operator><name>result_type</name> <name>result_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Eng</name><operator>::</operator><name>param_type</name> <name>param_type</name></expr>;</expr_stmt></typedef>
<function_decl><type><name><name>__save_flags</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name></type> <name>__lx</name><parameter_list>(<parameter><decl><type><name>__is</name></type></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <type><name><name>basic_istream</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name></type> <name>_Istream</name>;</typedef>
<expr_stmt><expr><call><name><name>__is</name><operator>.</operator><name>flags</name></name><argument_list>(<argument><expr><name>_Istream</name><operator>::</operator><name>dec</name> <operator>|</operator> <name>_Istream</name><operator>::</operator><name>skipws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>result_type</name></type> <name>__a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>result_type</name></type> <name>__b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>__is</name> <operator>&gt;&gt;</operator> <name>__a</name> <operator>&gt;&gt;</operator> <name>__b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>__is</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>__x</name><operator>.</operator><name>param</name></name><argument_list>(<argument><expr><call><name>param_type</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>__is</name></expr>;</return>
}

_LIBCPP_END_NAMESPACE_STD

<expr><name>_LIBCPP_POP_MACROS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
