<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/sample.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_SAMPLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_SAMPLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/min.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__random/uniform_int_distribution.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_PopulationIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_SampleIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name></expr></argument>,
<argument><expr><name>class</name> <name>_UniformRandomNumberGenerator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_SampleIterator</name></type> <name>__sample</name><parameter_list>(<parameter><decl><type><name>_PopulationIterator</name></type> <name>__first</name></decl></parameter>,
<parameter><decl><type><name>_PopulationIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_SampleIterator</name></type> <name>__output_iter</name></decl></parameter>,
<parameter><decl><type><name>_Distance</name></type> <name>__n</name></decl></parameter>,
<parameter><decl><type><name>_UniformRandomNumberGenerator</name> <modifier>&amp;</modifier></type> <name>__g</name></decl></parameter>,
<parameter><decl><type><name>input_iterator_tag</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>_Distance</name></type> <name>__k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>__first</name> <operator>!=</operator> <name>__last</name> <operator>&amp;&amp;</operator> <name>__k</name> <operator>&lt;</operator> <name>__n</name></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__k</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>__output_iter</name><index>[<expr><name>__k</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>__first</name></expr>;</expr_stmt></block_content></block></for>
<decl_stmt><decl><type><name>_Distance</name></type> <name>__sz</name> <init>= <expr><name>__k</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>__first</name> <operator>!=</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__k</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>_Distance</name></type> <name>__r</name> <init>= <expr><call><call><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>_Distance</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__k</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>__g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__r</name> <operator>&lt;</operator> <name>__sz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>__output_iter</name><index>[<expr><name>__r</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>__first</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>__output_iter</name> <operator>+</operator> <name>_VSTD</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__k</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_PopulationIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_SampleIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name></expr></argument>,
<argument><expr><name>class</name> <name>_UniformRandomNumberGenerator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_SampleIterator</name></type> <name>__sample</name><parameter_list>(<parameter><decl><type><name>_PopulationIterator</name></type> <name>__first</name></decl></parameter>,
<parameter><decl><type><name>_PopulationIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_SampleIterator</name></type> <name>__output_iter</name></decl></parameter>,
<parameter><decl><type><name>_Distance</name></type> <name>__n</name></decl></parameter>,
<parameter><decl><type><name>_UniformRandomNumberGenerator</name><modifier>&amp;</modifier></type> <name>__g</name></decl></parameter>,
<parameter><decl><type><name>forward_iterator_tag</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_Distance</name></type> <name>__unsampled_sz</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>__n</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__unsampled_sz</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>__n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>_Distance</name></type> <name>__r</name> <init>= <expr><call><call><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>_Distance</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>--</operator><name>__unsampled_sz</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>__g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__r</name> <operator>&lt;</operator> <name>__n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__output_iter</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>__first</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>__n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>__output_iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_PopulationIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_SampleIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name></expr></argument>,
<argument><expr><name>class</name> <name>_UniformRandomNumberGenerator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_SampleIterator</name></type> <name>__sample</name><parameter_list>(<parameter><decl><type><name>_PopulationIterator</name></type> <name>__first</name></decl></parameter>,
<parameter><decl><type><name>_PopulationIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_SampleIterator</name></type> <name>__output_iter</name></decl></parameter>,
<parameter><decl><type><name>_Distance</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>_UniformRandomNumberGenerator</name><modifier>&amp;</modifier></type> <name>__g</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_PopulationIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator_category</name>
<name>_PopCategory</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_PopulationIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name>
<name>_Difference</name></expr>;</expr_stmt></typedef>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name><name>__is_cpp17_forward_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_PopulationIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator>
<name><name>__is_cpp17_random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_SampleIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"SampleIterator must meet the requirements of RandomAccessIterator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>common_type</name><argument_list type="generic">&lt;<argument><expr><name>_Distance</name></expr></argument>, <argument><expr><name>_Difference</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_CommonType</name></expr>;</expr_stmt></typedef>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"N must be a positive number."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__sample</name><argument_list>(
<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__output_iter</name></expr></argument>, <argument><expr><call><name>_CommonType</name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__g</name></expr></argument>, <argument><expr><call><name>_PopCategory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_PopulationIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_SampleIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name></expr></argument>,
<argument><expr><name>class</name> <name>_UniformRandomNumberGenerator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_SampleIterator</name></type> <name>sample</name><argument_list>(<argument><expr><name>_PopulationIterator</name> <name>__first</name></expr></argument>,
<argument><expr><name>_PopulationIterator</name> <name>__last</name></expr></argument>, <argument><expr><name>_SampleIterator</name> <name>__output_iter</name></expr></argument>,
<argument><expr><name>_Distance</name> <name>__n</name></expr></argument>, <argument><expr><name>_UniformRandomNumberGenerator</name><operator>&amp;&amp;</operator> <name>__g</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__sample</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__output_iter</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__g</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
