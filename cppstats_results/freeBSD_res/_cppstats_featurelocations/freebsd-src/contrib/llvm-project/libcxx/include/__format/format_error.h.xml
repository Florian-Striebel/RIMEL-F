<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__format/format_error.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FORMAT_FORMAT_ERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FORMAT_FORMAT_ERROR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>

<name>class</name> <name>_LIBCPP_EXCEPTION_ABI</name></type> <name>format_error</name> <range>: <expr><name>public</name> <name>runtime_error</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_HIDE_FROM_ABI</name> <name>explicit</name> <call><name>format_error</name><argument_list>(<argument><expr><specifier>const</specifier> <name>string</name><operator>&amp;</operator> <name>__s</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>runtime_error</name><argument_list>(<argument>__s</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_HIDE_FROM_ABI</name> <name>explicit</name> <call><name>format_error</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>__s</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>runtime_error</name><argument_list>(<argument>__s</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <operator>~</operator><macro><name>format_error</name><argument_list>()</argument_list></macro> <name>noexcept</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function><type><name>_LIBCPP_NORETURN</name> <specifier>inline</specifier> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>void</name></type>
<name>__throw_format_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>throw</name></type> <name>format_error</name><argument_list>(<argument><expr><name>__s</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>__s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
