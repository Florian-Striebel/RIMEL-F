<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/uninitialized_algorithms.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_UNINITIALIZED_ALGORITHMS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_UNINITIALIZED_ALGORITHMS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/addressof.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/construct_at.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<name>_ForwardIterator</name></type>
<name>uninitialized_copy</name><parameter_list>(<parameter><decl><type><name>_InputIterator</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><name>_InputIterator</name></type> <name>__l</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__s</name> <init>= <expr><name>__r</name></expr></init></decl>;</decl_stmt>
<macro><name>try</name></macro>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>__f</name> <operator>!=</operator> <name>__l</name></expr>;</condition> <incr><expr><operator>++</operator><name>__f</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__r</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__r)</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><operator>*</operator><name>__f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block>
<macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__s</name> <operator>!=</operator> <name>__r</name></expr>;</condition> <incr><expr><operator>++</operator><name>__s</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>__s</name><operator>-&gt;</operator><name/></name>~<call><name>value_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Size</name></expr></argument>, <argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<name>_ForwardIterator</name></type>
<name>uninitialized_copy_n</name><parameter_list>(<parameter><decl><type><name>_InputIterator</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__s</name> <init>= <expr><name>__r</name></expr></init></decl>;</decl_stmt>
<macro><name>try</name></macro>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>__f</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>++</operator><name>__r</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>--</operator><name>__n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__r)</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><operator>*</operator><name>__f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block>
<macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__s</name> <operator>!=</operator> <name>__r</name></expr>;</condition> <incr><expr><operator>++</operator><name>__s</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>__s</name><operator>-&gt;</operator><name/></name>~<call><name>value_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type>
<name>uninitialized_fill</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__s</name> <init>= <expr><name>__f</name></expr></init></decl>;</decl_stmt>
<macro><name>try</name></macro>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>__f</name> <operator>!=</operator> <name>__l</name></expr>;</condition> <incr><expr><operator>++</operator><name>__f</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__f)</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block>
<macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__s</name> <operator>!=</operator> <name>__f</name></expr>;</condition> <incr><expr><operator>++</operator><name>__s</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>__s</name><operator>-&gt;</operator><name/></name>~<call><name>value_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Size</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_ForwardIterator</name></type>
<name>uninitialized_fill_n</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__s</name> <init>= <expr><name>__f</name></expr></init></decl>;</decl_stmt>
<macro><name>try</name></macro>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>__f</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>--</operator><name>__n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__f)</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block>
<macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__s</name> <operator>!=</operator> <name>__f</name></expr>;</condition> <incr><expr><operator>++</operator><name>__s</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>__s</name><operator>-&gt;</operator><name/></name>~<call><name>value_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>__f</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__first</name> <operator>!=</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>destroy_at</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Size</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>_ForwardIterator</name></type> <name>destroy_n</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>(</operator><name>void</name><operator>)</operator><operator>++</operator><name>__first</name></expr><operator>,</operator> <expr><operator>--</operator><name>__n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>destroy_at</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>__first</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>uninitialized_default_construct</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>_Vt</name> <init>= <expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>__idx</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>try</name></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>__idx</name> <operator>!=</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__idx)</argument>)</argument_list></macro> <name>_Vt</name></expr>;</expr_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>destroy</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Size</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ForwardIterator</name></type> <name>uninitialized_default_construct_n</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>_Vt</name> <init>= <expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>__idx</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>try</name></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>(</operator><name>void</name><operator>)</operator><operator>++</operator><name>__idx</name></expr><operator>,</operator> <expr><operator>--</operator><name>__n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__idx)</argument>)</argument_list></macro> <name>_Vt</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>__idx</name></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>destroy</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>uninitialized_value_construct</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>_Vt</name> <init>= <expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>__idx</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>try</name></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>__idx</name> <operator>!=</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__idx)</argument>)</argument_list></macro> <call><name>_Vt</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>destroy</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Size</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ForwardIterator</name></type> <name>uninitialized_value_construct_n</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>_Vt</name> <init>= <expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>__idx</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>try</name></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>(</operator><name>void</name><operator>)</operator><operator>++</operator><name>__idx</name></expr><operator>,</operator> <expr><operator>--</operator><name>__n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__idx)</argument>)</argument_list></macro> <call><name>_Vt</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>__idx</name></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>destroy</name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIt</name></expr></argument>, <argument><expr><name>class</name> <name>_ForwardIt</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_ForwardIt</name></type> <name>uninitialized_move</name><parameter_list>(<parameter><decl><type><name>_InputIt</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_InputIt</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_ForwardIt</name></type> <name>__first_res</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>_Vt</name> <init>= <expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIt</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>__idx</name> <init>= <expr><name>__first_res</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>try</name></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>__first</name> <operator>!=</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>(</operator><name>void</name><operator>)</operator><operator>++</operator><name>__idx</name></expr><operator>,</operator> <expr><operator>++</operator><name>__first</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__idx)</argument>)</argument_list></macro> <call><name>_Vt</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>__idx</name></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>destroy</name><argument_list>(<argument><expr><name>__first_res</name></expr></argument>, <argument><expr><name>__idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIt</name></expr></argument>, <argument><expr><name>class</name> <name>_Size</name></expr></argument>, <argument><expr><name>class</name> <name>_ForwardIt</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_InputIt</name></expr></argument>, <argument><expr><name>_ForwardIt</name></expr></argument>&gt;</argument_list></name></type>
<name>uninitialized_move_n</name><parameter_list>(<parameter><decl><type><name>_InputIt</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>_ForwardIt</name></type> <name>__first_res</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>_Vt</name> <init>= <expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIt</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>__idx</name> <init>= <expr><name>__first_res</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>try</name></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>__idx</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator><operator>++</operator><name>__first</name></expr><operator>,</operator> <expr><operator>--</operator><name>__n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)_VSTD::addressof(*__idx)</argument>)</argument_list></macro> <call><name>_Vt</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><block>{<expr><name>__first</name></expr>, <expr><name>__idx</name></expr>}</block></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_NO_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>destroy</name><argument_list>(<argument><expr><name>__first_res</name></expr></argument>, <argument><expr><name>__idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
