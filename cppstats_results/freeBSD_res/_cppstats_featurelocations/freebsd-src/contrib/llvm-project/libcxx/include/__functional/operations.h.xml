<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/operations.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_OPERATIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_OPERATIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/binary_function.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/unary_function.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>



<name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>plus</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>_Tp</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>+</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>plus</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) + _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>minus</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>_Tp</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>-</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>minus</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) - _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>multiplies</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>_Tp</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>*</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>multiplies</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) * _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>divides</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>_Tp</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>/</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>divides</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) / _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>modulus</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>_Tp</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>%</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>modulus</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) % _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>negate</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>_Tp</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>-</operator><name>__x</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>negate</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;&amp;</operator> <name>__x</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><operator>-</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>- _VSTD::forward&lt;_Tp&gt;(__x)</argument>)</argument_list></macro>
<block>{ <return>return <expr><operator>-</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>bit_and</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>_Tp</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>&amp;</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>bit_and</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) &amp; _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>bit_not</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></expr> <typedef>typedef <type><name>_Tp</name></type> <name>result_type</name>;</typedef>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>~</operator><name>__x</name></expr>;</return>}</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>bit_not</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;&amp;</operator> <name>__x</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><operator>~</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>~_VSTD::forward&lt;_Tp&gt;(__x)</argument>)</argument_list></macro>
<block>{ <return>return <expr><operator>~</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>bit_or</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>_Tp</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>|</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>bit_or</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) | _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>bit_xor</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>_Tp</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>_Tp</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>^</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>bit_xor</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) ^ _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>equal_to</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>bool</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>==</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>equal_to</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) == _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>not_equal_to</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>bool</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>!=</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>not_equal_to</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) != _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>less</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>bool</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>&lt;</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) &lt; _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>less_equal</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>bool</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>&lt;=</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>less_equal</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) &lt;= _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>greater_equal</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>bool</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>&gt;=</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>greater_equal</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) &gt;= _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>greater</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>bool</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>&gt;</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) &gt; _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>logical_and</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>bool</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>&amp;&amp;</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>logical_and</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) &amp;&amp; _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>logical_not</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>unary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>bool</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><operator>!</operator><name>__x</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>logical_not</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>&amp;&amp;</operator> <name>__x</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><operator>!</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>!_VSTD::forward&lt;_Tp&gt;(__x)</argument>)</argument_list></macro>
<block>{ <return>return <expr><operator>!</operator><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>logical_or</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>:</operator> <name><name>binary_function</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr>
<typedef>typedef <type><name>bool</name></type> <name>__result_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name></block></expr></expr_stmt> <typedef>typedef <type><name>bool</name></type> <name>result_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>first_argument_type</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name></type> <name>second_argument_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <specifier>const</specifier>
<block>{<return>return <expr><name>__x</name> <operator>||</operator> <name>__y</name></expr>;</return>}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>logical_or</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_T1</name><operator>&amp;&amp;</operator> <name>__t</name><operator>,</operator> <name>_T2</name><operator>&amp;&amp;</operator> <name>__u</name><operator>)</operator> <specifier>const</specifier>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name> <argument_list>(<argument>_VSTD::forward&lt;_T1&gt;(__t) || _VSTD::forward&lt;_T2&gt;(__u)</argument>)</argument_list></macro>
<block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block></expr></expr_stmt>
<typedef>typedef <type><name>void</name></type> <name>is_transparent</name>;</typedef>
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
