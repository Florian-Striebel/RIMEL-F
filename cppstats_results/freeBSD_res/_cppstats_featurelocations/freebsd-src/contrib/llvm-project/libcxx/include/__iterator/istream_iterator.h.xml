<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/istream_iterator.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_ISTREAM_ITERATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_ISTREAM_ITERATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/addressof.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iosfwd&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_CharT</name> <operator>=</operator> <name>char</name></expr></argument>,
<argument><expr><name>class</name> <name>_Traits</name> <operator>=</operator> <name><name>char_traits</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name> <operator>=</operator> <name>ptrdiff_t</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>istream_iterator</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_ITERATOR_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<range>: <expr><name>public</name> <name><name>iterator</name><argument_list type="generic">&lt;<argument><expr><name>input_iterator_tag</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Distance</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Tp</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<name>public</name><operator>:</operator></expr>
<typedef>typedef <type><name>input_iterator_tag</name></type> <name>iterator_category</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <type><name>_Tp</name></type> <name>value_type</name>;</typedef>
<typedef>typedef <type><name>_Distance</name></type> <name>difference_type</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name>_Tp</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
<typedef>typedef <type><name>_CharT</name></type> <name>char_type</name>;</typedef>
<typedef>typedef <type><name>_Traits</name></type> <name>traits_type</name>;</typedef>
<typedef>typedef <type><name><name>basic_istream</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>,<argument><expr><name>_Traits</name></expr></argument>&gt;</argument_list></name></type> <name>istream_type</name>;</typedef>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>istream_type</name><modifier>*</modifier></type> <name>__in_stream_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Tp</name></type> <name>__value_</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>_LIBCPP_CONSTEXPR</name></macro> <expr_stmt><expr><call><name>istream_iterator</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>__in_stream_</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>__value_</name><argument_list>()</argument_list></macro> <expr><block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <call><name>istream_iterator</name><argument_list>(<argument><expr><name>istream_type</name><operator>&amp;</operator> <name>__s</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__in_stream_</name><argument_list>(<argument>_VSTD::addressof(__s)</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>__in_stream_</name> <operator>&gt;&gt;</operator> <name>__value_</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__in_stream_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <specifier>const</specifier> <name>_Tp</name><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{<return>return <expr><name>__value_</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <specifier>const</specifier> <name>_Tp</name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>) <expr_stmt><expr><specifier>const</specifier> <block>{<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><operator>(</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>istream_iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator>
<block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>__in_stream_</name> <operator>&gt;&gt;</operator> <name>__value_</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__in_stream_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}
_LIBCPP_INLINE_VISIBILITY <expr_stmt><expr><name>istream_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator>
<block>{<expr><name>istream_iterator</name> <call><name>__t</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>__t</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name> <name>_CharU</name></expr></argument>, <argument><expr><name>class</name> <name>_TraitsU</name></expr></argument>, <argument><expr><name>class</name> <name>_DistanceU</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>_CharU</name></expr></argument>, <argument><expr><name>_TraitsU</name></expr></argument>, <argument><expr><name>_DistanceU</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator>
<specifier>const</specifier> <name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>_CharU</name></expr></argument>, <argument><expr><name>_TraitsU</name></expr></argument>, <argument><expr><name>_DistanceU</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name> <name>_CharU</name></expr></argument>, <argument><expr><name>class</name> <name>_TraitsU</name></expr></argument>, <argument><expr><name>class</name> <name>_DistanceU</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>_CharU</name></expr></argument>, <argument><expr><name>_TraitsU</name></expr></argument>, <argument><expr><name>_DistanceU</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator>
<specifier>const</specifier> <name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>_CharU</name></expr></argument>, <argument><expr><name>_TraitsU</name></expr></argument>, <argument><expr><name>_DistanceU</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator></expr>;</expr_stmt>
};

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_CharT</name></expr></argument>, <argument><expr><name>class</name> <name>_Traits</name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>, <argument><expr><name>_Distance</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator>
<specifier>const</specifier> <name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>, <argument><expr><name>_Distance</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>__in_stream_</name></name> <operator>==</operator> <name><name>__y</name><operator>.</operator><name>__in_stream_</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_CharT</name></expr></argument>, <argument><expr><name>class</name> <name>_Traits</name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>, <argument><expr><name>_Distance</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator>
<specifier>const</specifier> <name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_CharT</name></expr></argument>, <argument><expr><name>_Traits</name></expr></argument>, <argument><expr><name>_Distance</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>==</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
