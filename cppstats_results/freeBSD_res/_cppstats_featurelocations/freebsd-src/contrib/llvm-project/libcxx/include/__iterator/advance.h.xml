<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/advance.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_ADVANCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_ADVANCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__debug&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__function_like.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/incrementable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIter</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>void</name></type> <name>__advance</name><argument_list>(<argument><expr><name>_InputIter</name><operator>&amp;</operator> <name>__i</name></expr></argument>, <argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_InputIter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>__n</name></expr></argument>, <argument><expr><name>input_iterator_tag</name></expr></argument>)</argument_list> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>__n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_BiDirIter</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>void</name></type> <name>__advance</name><argument_list>(<argument><expr><name>_BiDirIter</name><operator>&amp;</operator> <name>__i</name></expr></argument>, <argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BiDirIter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>__n</name></expr></argument>, <argument><expr><name>bidirectional_iterator_tag</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>__n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>__n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>__i</name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_RandIter</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>void</name></type> <name>__advance</name><argument_list>(<argument><expr><name>_RandIter</name><operator>&amp;</operator> <name>__i</name></expr></argument>, <argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandIter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>__n</name></expr></argument>, <argument><expr><name>random_access_iterator_tag</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>__i</name> <operator>+=</operator> <name>__n</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;
<argument><expr><name>class</name> <name>_InputIter</name></expr></argument>, <argument><expr><name>class</name> <name>_Distance</name></expr></argument>,
<argument><expr><name>class</name> <name>_IntegralDistance</name> <operator>=</operator> <name>decltype</name><operator>(</operator><name>_VSTD</name><operator>::</operator><name>__convert_to_integral</name><operator>(</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Distance</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_IntegralDistance</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>void</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>_InputIter</name><modifier>&amp;</modifier></type> <name>__i</name></decl></parameter>, <parameter><decl><type><name>_Distance</name></type> <name>__orig_n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_InputIter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>_Difference</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_Difference</name></type> <name>__n</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Difference</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>__convert_to_integral</name><argument_list>(<argument><expr><name>__orig_n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>__is_cpp17_bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_InputIter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"Attempt to advance(it, n) with negative n on a non-bidirectional iterator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><macro><name>__advance</name><argument_list>(<argument>__i</argument>, <argument>__n</argument>, <argument>typename iterator_traits&lt;_InputIter&gt;::iterator_category()</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>namespace</name></type> <name>ranges</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>__advance_fn</name></name></type> <name>final</name> <range>: <expr><name>private</name> <name>__function_like</name> <block>{
<expr><name>private</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<specifier>static</specifier> <name>constexpr</name> <name>_Tp</name> <macro><name>__magnitude_geq</name><argument_list>(<argument>_Tp __a</argument>, <argument>_Tp __b</argument>)</argument_list></macro> <name>noexcept</name> <block>{
<return>return <expr><name>__a</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>?</operator> <operator>(</operator><name>__a</name> <operator>&lt;=</operator> <name>__b</name><operator>)</operator> <operator>:</operator> <operator>(</operator><name>__a</name> <operator>&gt;=</operator> <name>__b</name><operator>)</operator></expr>;</return>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<specifier>static</specifier> <name>constexpr</name> <name>void</name> <macro><name>__advance_forward</name><argument_list>(<argument>_Ip&amp; __i</argument>, <argument>iter_difference_t&lt;_Ip&gt; __n</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>__n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

template &lt;class _Ip&gt;
_LIBCPP_HIDE_FROM_ABI
static constexpr void __advance_backward(_Ip&amp; __i</block><operator>,</operator> <expr_stmt><expr><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <name>__n</name></expr></expr_stmt></while>) <block>{
<while>while <condition>(<expr><name>__n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>__n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>__i</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

public:
constexpr explicit __advance_fn(__tag __x</block></while>) <name>noexcept</name> <operator>:</operator> <macro><name>__function_like</name><argument_list>(<argument>__x</argument>)</argument_list></macro> <block>{}</block></block></block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>input_or_output_iterator</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Ip</name><operator>&amp;</operator> <name>__i</name>, <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <name>__n</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><literal type="string">"If `n &lt; 0`, then `bidirectional_iterator&lt;I&gt;` must be true."</literal></expr></argument>)</argument_list></call></expr>;


<if_stmt><if>if constexpr <condition>(<expr><name><name>random_access_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__i</name> <operator>+=</operator> <name>__n</name></expr>;</expr_stmt>
<return>return;</return>
<expr_stmt/>}</block_content> else if constexpr (bidirectional_iterator&lt;_Ip&gt;</block></if></if_stmt>) <block>{

<expr><call><name>__advance_forward</name><argument_list>(<argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name>__advance_backward</name><argument_list>(<argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;
<return>return;</return>
}</block></block></expr> <if_stmt><else>else <block>{<block_content>

<expr_stmt><expr><call><name>__advance_forward</name><argument_list>(<argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<expr_stmt/>}</block_content>
}


template &lt;input_or_output_iterator _Ip</block><operator>,</operator> <expr_stmt><expr><name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <name>_Sp</name><operator>&gt;</operator>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Ip</name><operator>&amp;</operator> <name>__i</name>, <name>_Sp</name> <name>__bound</name><operator>)</operator> <specifier>const</specifier> <block>{

<if_stmt><if>if constexpr <condition>(<expr><name><name>assignable_from</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__i</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

else if constexpr (sized_sentinel_for&lt;_Sp</block><operator>,</operator> <expr_stmt><expr><name>_Ip</name><operator>&gt;</operator></expr></expr_stmt></if></if_stmt>)</block> <block>{
<expr><call>(<modifier>*</modifier><name>this</name>)<argument_list>(<argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__bound</name> <operator>-</operator> <name>__i</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt></else></if_stmt>

<if_stmt><else>else <block>{<block_content>
<while>while <condition>(<expr><name>__i</name> <operator>!=</operator> <name>__bound</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}
}






template &lt;input_or_output_iterator _Ip</block><operator>,</operator> <expr_stmt><expr><name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <name>_Sp</name><operator>&gt;</operator>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Ip</name><operator>&amp;</operator> <name>__i</name>, <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <name>__n</name>, <name>_Sp</name> <name>__bound</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>__n</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"If `n &lt; 0`, then `bidirectional_iterator&lt;I&gt; &amp;&amp; same_as&lt;I, S&gt;` must be true."</literal></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt></while>

<if_stmt><if>if constexpr <condition>(<expr><name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Sp</name></expr></argument>, <argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>__M</name> <init>= <expr><name>__bound</name> <operator>-</operator> <name>__i</name></expr></init></decl>;</decl_stmt> <expr><call><name>__magnitude_geq</name><argument_list>(<argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__M</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>this</name>)<argument_list>(<argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__n</name> <operator>-</operator> <name>__M</name></expr>;</return>
<expr_stmt/>}</block_content>


(*this</block></if></if_stmt>)</block_content>(__i</block><operator>,</operator> <expr_stmt><expr><name>__n</name></expr></expr_stmt></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></else></if_stmt></block></expr></range></decl></decl_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt> <if_stmt><else>else <block>{<block_content>


<while>while <condition>(<expr><name>__i</name> <operator>!=</operator> <name>__bound</name> <operator>&amp;&amp;</operator> <name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>__n</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if constexpr <condition>(<expr><name><name>bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>&gt;</argument_list></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>__i</name> <operator>!=</operator> <name>__bound</name> <operator>&amp;&amp;</operator> <name>__n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>__i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__n</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>__n</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>_LIBCPP_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}
}<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>constexpr</name> <specifier>auto</specifier></type> <name>advance</name> <init>= <expr><call><name>__advance_fn</name><argument_list>(<argument><expr><name>__function_like</name><operator>::</operator><call><name>__tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

_LIBCPP_END_NAMESPACE_STD

<expr><name>_LIBCPP_POP_MACROS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
