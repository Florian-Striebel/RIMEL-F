<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__ranges/transform_view.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___RANGES_TRANSFORM_VIEW_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___RANGES_TRANSFORM_VIEW_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iter_swap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/all.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/copyable_box.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/empty.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/size.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/view_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>namespace</name></type> <name>ranges</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_View</name></expr></argument>, <argument><expr><name>class</name> <name>_Fn</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__transform_view_constraints</name> <init>=
<expr><name><name>view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>is_object_v</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>regular_invocable</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>range_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>__referenceable</name><argument_list type="generic">&lt;<argument><expr><name><name>invoke_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>range_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>input_range</name> <name>_View</name></expr></argument>, <argument><expr><name>copy_constructible</name> <name>_Fn</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>__transform_view_constraints</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>transform_view</name> <range>: <expr><name>public</name> <name><name>view_interface</name><argument_list type="generic">&lt;<argument><expr><name><name>transform_view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>__iterator</name></expr>;
<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>__sentinel</name></expr>;

<expr><index>[<expr><index>[<expr><name>no_unique_address</name></expr>]</index></expr>]</index> <name><name>__copyable_box</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name> <name>__func_</name></expr>;
<expr><index>[<expr><index>[<expr><name>no_unique_address</name></expr>]</index></expr>]</index> <name>_View</name> <name>__base_</name> <operator>=</operator> <call><name>_View</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<macro><name>transform_view</name><argument_list>()</argument_list></macro>
<name>requires</name> <name><name>default_initializable</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>default_initializable</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name> <operator>=</operator> default</expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>transform_view</name><argument_list>(<argument>_View __base</argument>, <argument>_Fn __func</argument>)</argument_list></macro>
<operator>:</operator> <call><name>__func_</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><name>in_place</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__func</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>__base_</name><argument_list>(<argument>_VSTD::move(__base)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_View</name> <macro><name>base</name><argument_list>()</argument_list></macro> <specifier>const</specifier><operator>&amp;</operator> <name>requires</name> <name><name>copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <block>{ <return>return <expr><name>__base_</name></expr>;</return> }</block>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_View</name> <call><name>base</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <macro><name>begin</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>false</name></expr></argument>&gt;</argument_list></name><block>{<expr><operator>*</operator><name>this</name></expr>, <expr><name>ranges</name><operator>::</operator><macro><name>begin</name><argument_list>(<argument>__base_</argument>)</argument_list></macro></expr>}</block></expr>;</return>
}</block>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<name>requires</name> <name><name>range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>regular_invocable</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Fn</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>range_reference_t</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><call><name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>__sentinel</name><argument_list type="generic">&lt;<argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <macro><name>end</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>__sentinel</name><argument_list type="generic">&lt;<argument><expr><name>false</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <macro><name>end</name><argument_list>()</argument_list></macro>
<name>requires</name> <name><name>common_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><call><name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>false</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>__sentinel</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<name>requires</name> <name><name>range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>regular_invocable</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Fn</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>range_reference_t</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><call><name><name>__sentinel</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<name>requires</name> <name><name>common_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>regular_invocable</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Fn</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>range_reference_t</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><call><name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>size</name><argument_list>()</argument_list></macro> <name>requires</name> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <block>{ <return>return <expr><name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>requires</name> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name> <block>{ <return>return <expr><name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Range</name></expr></argument>, <argument><expr><name>class</name> <name>_Fn</name></expr></argument>&gt;</argument_list></name>
<call><name>transform_view</name><argument_list>(<argument><expr><name>_Range</name><operator>&amp;&amp;</operator></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>)</argument_list></call> <operator>-&gt;</operator> <name><name>transform_view</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name><name>all_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_View</name></expr></argument>&gt;</argument_list></name>
struct <name>__transform_view_iterator_concept</name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <name>input_iterator_tag</name></expr>; }</block></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>random_access_range</name> <name>_View</name></expr></argument>&gt;</argument_list></name>
struct <name><name>__transform_view_iterator_concept</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <name>random_access_iterator_tag</name></expr>; }</block></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bidirectional_range</name> <name>_View</name></expr></argument>&gt;</argument_list></name>
struct <name><name>__transform_view_iterator_concept</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <name>bidirectional_iterator_tag</name></expr>; }</block></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>forward_range</name> <name>_View</name></expr></argument>&gt;</argument_list></name>
struct <name><name>__transform_view_iterator_concept</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>type</name> <operator>=</operator> <name>forward_iterator_tag</name></expr>; }</block></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
struct <name>__transform_view_iterator_category_base</name> <block>{}</block></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>forward_range</name> <name>_View</name></expr></argument>, <argument><expr><name>class</name> <name>_Fn</name></expr></argument>&gt;</argument_list></name>
struct <name><name>__transform_view_iterator_category_base</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>_Cat</name> <operator>=</operator> <name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator_category</name></expr>;

<expr><name>using</name> <name>iterator_category</name> <operator>=</operator> <name><name>conditional_t</name><argument_list type="generic">&lt;
<argument><expr><name><name>is_lvalue_reference_v</name><argument_list type="generic">&lt;<argument><expr><name><name>invoke_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>range_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>conditional_t</name><argument_list type="generic">&lt;
<argument><expr><name><name>derived_from</name><argument_list type="generic">&lt;<argument><expr><name>_Cat</name></expr></argument>, <argument><expr><name>contiguous_iterator_tag</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>random_access_iterator_tag</name></expr></argument>,
<argument><expr><name>_Cat</name></expr></argument>
&gt;</argument_list></name></expr></argument>,
<argument><expr><name>input_iterator_tag</name></expr></argument>
&gt;</argument_list></name></expr>;
}</block></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>input_range</name> <name>_View</name></expr></argument>, <argument><expr><name>copy_constructible</name> <name>_Fn</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>__transform_view_constraints</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>_Const</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name><name>transform_view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>__iterator</name>
<operator>:</operator> <name>public</name> <name><name>__transform_view_iterator_category_base</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name> <block>{

<expr><name>using</name> <name>_Parent</name> <operator>=</operator> <name><name>__maybe_const</name><argument_list type="generic">&lt;<argument><expr><name>_Const</name></expr></argument>, <argument><expr><name>transform_view</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>_Base</name> <operator>=</operator> <name><name>__maybe_const</name><argument_list type="generic">&lt;<argument><expr><name>_Const</name></expr></argument>, <argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>_Parent</name> <operator>*</operator><name>__parent_</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name> <name><name>transform_view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>__iterator</name></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name> <name><name>transform_view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>__sentinel</name></expr>;

<expr><name>public</name><operator>:</operator>
<name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name> <name>__current_</name> <operator>=</operator> <call><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

<expr><name>using</name> <name>iterator_concept</name> <operator>=</operator> <name>typename</name> <name><name>__transform_view_iterator_concept</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name><name>remove_cvref_t</name><argument_list type="generic">&lt;<argument><expr><name><name>invoke_result_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name><operator>&amp;</operator></expr></argument>, <argument><expr><name><name>range_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name><name>range_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<macro><name>__iterator</name><argument_list>()</argument_list></macro> <name>requires</name> <name><name>default_initializable</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>=</operator> default</expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <call><name>__iterator</name><argument_list>(<argument><expr><name>_Parent</name><operator>&amp;</operator> <name>__parent</name></expr></argument>, <argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name> <name>__current</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>__parent_</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>__current_</name><argument_list>(<argument>_VSTD::move(__current)</argument>)</argument_list></macro> <expr><block>{}</block>




<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>__iterator</name><argument_list>(<argument>__iterator&lt;!_Const&gt; __i</argument>)</argument_list></macro>
<name>requires</name> <name>_Const</name> <operator>&amp;&amp;</operator> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <call><name>__parent_</name><argument_list>(<argument><expr><name><name>__i</name><operator>.</operator><name>__parent_</name></name></expr></argument>)</argument_list></call></expr>, <macro><name>__current_</name><argument_list>(<argument>_VSTD::move(__i.__current_)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name> <macro><name>base</name><argument_list>()</argument_list></macro> <specifier>const</specifier><operator>&amp;</operator>
<name>requires</name> <name><name>copyable</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>__current_</name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name> <call><name>base</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__current_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(_VSTD::invoke(*__parent_-&gt;__func_, *__current_))</argument>)</argument_list></macro>
<block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>invoke</name><argument_list>(<argument><expr><operator>*</operator><name><name>__parent_</name><operator>-&gt;</operator><name>__func_</name></name></expr></argument>, <argument><expr><operator>*</operator><name>__current_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>__iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><operator>++</operator><name>__current_</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>void</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <expr><operator>++</operator><name>__current_</name></expr>; }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>__iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator>
<name>requires</name> <name><name>forward_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>auto</name> <name>__tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><operator>++</operator><operator>*</operator><name>this</name></expr>;
<return>return <expr><name>__tmp</name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>__iterator</name><operator>&amp;</operator> <name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator>
<name>requires</name> <name><name>bidirectional_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><operator>--</operator><name>__current_</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>__iterator</name> <name>operator</name><operator>--</operator><operator>(</operator><name>int</name><operator>)</operator>
<name>requires</name> <name><name>bidirectional_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>auto</name> <name>__tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><operator>--</operator><operator>*</operator><name>this</name></expr>;
<return>return <expr><name>__tmp</name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>__iterator</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>__current_</name> <operator>+=</operator> <name>__n</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>__iterator</name><operator>&amp;</operator> <name>operator</name><operator>-=</operator><operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>__current_</name> <operator>-=</operator> <name>__n</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <name><name>operator</name><index>[]</index></name><operator>(</operator><name>difference_type</name> <name>__n</name><operator>)</operator> <specifier>const</specifier>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(_VSTD::invoke(*__parent_-&gt;__func_, __current_[__n]))</argument>)</argument_list></macro>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>invoke</name><argument_list>(<argument><expr><operator>*</operator><name><name>__parent_</name><operator>-&gt;</operator><name>__func_</name></name></expr></argument>, <argument><expr><name><name>__current_</name><index>[<expr><name>__n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__x</name>, <specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<name>requires</name> <name><name>equality_comparable</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>__current_</name></name> <operator>==</operator> <name><name>__y</name><operator>.</operator><name>__current_</name></name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__x</name>, <specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>__current_</name></name> <operator>&lt;</operator> <name><name>__y</name><operator>.</operator><name>__current_</name></name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__x</name>, <specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>__current_</name></name> <operator>&gt;</operator> <name><name>__y</name><operator>.</operator><name>__current_</name></name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__x</name>, <specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>__current_</name></name> <operator>&lt;=</operator> <name><name>__y</name><operator>.</operator><name>__current_</name></name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__x</name>, <specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>__current_</name></name> <operator>&gt;=</operator> <name><name>__y</name><operator>.</operator><name>__current_</name></name></expr>;</return>
}</block>









<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>__iterator</name> <name>operator</name><operator>+</operator><operator>(</operator><name>__iterator</name> <name>__i</name>, <name>difference_type</name> <name>__n</name><operator>)</operator>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>__iterator</name><block>{<expr><operator>*</operator><name><name>__i</name><operator>.</operator><name>__parent_</name></name></expr>, <expr><name><name>__i</name><operator>.</operator><name>__current_</name></name> <operator>+</operator> <name>__n</name></expr>}</block></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>__iterator</name> <name>operator</name><operator>+</operator><operator>(</operator><name>difference_type</name> <name>__n</name>, <name>__iterator</name> <name>__i</name><operator>)</operator>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>__iterator</name><block>{<expr><operator>*</operator><name><name>__i</name><operator>.</operator><name>__parent_</name></name></expr>, <expr><name><name>__i</name><operator>.</operator><name>__current_</name></name> <operator>+</operator> <name>__n</name></expr>}</block></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>__iterator</name> <name>operator</name><operator>-</operator><operator>(</operator><name>__iterator</name> <name>__i</name>, <name>difference_type</name> <name>__n</name><operator>)</operator>
<name>requires</name> <name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name>__iterator</name><block>{<expr><operator>*</operator><name><name>__i</name><operator>.</operator><name>__parent_</name></name></expr>, <expr><name><name>__i</name><operator>.</operator><name>__current_</name></name> <operator>-</operator> <name>__n</name></expr>}</block></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>difference_type</name> <name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__x</name>, <specifier>const</specifier> <name>__iterator</name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<name>requires</name> <name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>__current_</name></name> <operator>-</operator> <name><name>__y</name><operator>.</operator><name>__current_</name></name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <macro><name>iter_move</name><argument_list>(<argument>const __iterator&amp; __i</argument>)</argument_list></macro>
<macro><name>noexcept</name><argument_list>(<argument>noexcept(*__i)</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if constexpr <condition>(<expr><name><name>is_lvalue_reference_v</name><argument_list type="generic">&lt;<argument><expr><name>decltype</name><operator>(</operator><operator>*</operator><name>__i</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>__i</name></expr>;</return></block_content></block></else></if_stmt>
}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>input_range</name> <name>_View</name></expr></argument>, <argument><expr><name>copy_constructible</name> <name>_Fn</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>__transform_view_constraints</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>_Const</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name><name>transform_view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>__sentinel</name> <block>{
<expr><name>using</name> <name>_Parent</name> <operator>=</operator> <name><name>__maybe_const</name><argument_list type="generic">&lt;<argument><expr><name>_Const</name></expr></argument>, <argument><expr><name>transform_view</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>_Base</name> <operator>=</operator> <name><name>__maybe_const</name><argument_list type="generic">&lt;<argument><expr><name>_Const</name></expr></argument>, <argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name> <name>__end_</name> <operator>=</operator> <call><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name> <name><name>transform_view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>__iterator</name></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name> <name><name>transform_view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>__sentinel</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<call><name>__sentinel</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>explicit</name> <call><name>__sentinel</name><argument_list>(<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name> <name>__end</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>__end_</name><argument_list>(<argument>__end</argument>)</argument_list></macro> <block>{}</block>




<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>__sentinel</name><argument_list>(<argument>__sentinel&lt;!_Const&gt; __i</argument>)</argument_list></macro>
<name>requires</name> <name>_Const</name> <operator>&amp;&amp;</operator> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <macro><name>__end_</name><argument_list>(<argument>_VSTD::move(__i.__end_)</argument>)</argument_list></macro> <block>{}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name> <macro><name>base</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>__end_</name></expr>;</return> }</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>_OtherConst</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name><name>__maybe_const</name><argument_list type="generic">&lt;<argument><expr><name>_OtherConst</name></expr></argument>, <argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>_OtherConst</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name>, <specifier>const</specifier> <name>__sentinel</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>__current_</name></name> <operator>==</operator> <name><name>__y</name><operator>.</operator><name>__end_</name></name></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>_OtherConst</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name><name>__maybe_const</name><argument_list type="generic">&lt;<argument><expr><name>_OtherConst</name></expr></argument>, <argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name><name>range_difference_t</name><argument_list type="generic">&lt;<argument><expr><name><name>__maybe_const</name><argument_list type="generic">&lt;<argument><expr><name>_OtherConst</name></expr></argument>, <argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>_OtherConst</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name>, <specifier>const</specifier> <name>__sentinel</name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>__current_</name></name> <operator>-</operator> <name><name>__y</name><operator>.</operator><name>__end_</name></name></expr>;</return>
}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>_OtherConst</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Base</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name><name>__maybe_const</name><argument_list type="generic">&lt;<argument><expr><name>_OtherConst</name></expr></argument>, <argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>friend</name> <name>constexpr</name> <name><name>range_difference_t</name><argument_list type="generic">&lt;<argument><expr><name><name>__maybe_const</name><argument_list type="generic">&lt;<argument><expr><name>_OtherConst</name></expr></argument>, <argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name>__sentinel</name><operator>&amp;</operator> <name>__x</name>, <specifier>const</specifier> <name><name>__iterator</name><argument_list type="generic">&lt;<argument><expr><name>_OtherConst</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>__end_</name></name> <operator>-</operator> <name><name>__y</name><operator>.</operator><name>__current_</name></name></expr>;</return>
}</block>
}</expr>;

}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>_LIBCPP_END_NAMESPACE_STD</name>

<name>_LIBCPP_POP_MACROS</name></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
