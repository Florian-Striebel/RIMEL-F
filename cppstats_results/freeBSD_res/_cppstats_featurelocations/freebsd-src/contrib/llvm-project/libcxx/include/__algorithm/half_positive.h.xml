<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/half_positive.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_HALF_POSITIVE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_HALF_POSITIVE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>



<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Integral</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Integral</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>_Integral</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__half_positive</name><argument_list>(<argument>_Integral __value</argument>)</argument_list></macro>
<block>{
<return>return <macro><name>static_cast</name></macro><expr><operator>&lt;</operator><name>_Integral</name><operator>&gt;</operator><operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>make_unsigned</name><argument_list type="generic">&lt;<argument><expr><name>_Integral</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__value</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>_Tp</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__half_positive</name><argument_list>(<argument>_Tp __value</argument>)</argument_list></macro>
<block>{
<return>return <expr><name>__value</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
}</block></expr></expr_stmt>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
