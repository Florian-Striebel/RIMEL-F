<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/auto_ptr.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_AUTO_PTR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_AUTO_PTR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__nullptr&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_DEPRECATED_IN_CXX11</name> <name>auto_ptr_ref</name>
<block>{
<expr><name>_Tp</name><operator>*</operator> <name>__ptr_</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX11</name></type> <name>auto_ptr</name>
<block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>_Tp</name><modifier>*</modifier></type> <name>__ptr_</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<typedef>typedef <type><name>_Tp</name></type> <name>element_type</name>;</typedef>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>explicit</name></type> <name>auto_ptr</name><argument_list>(<argument><expr><name>_Tp</name><operator>*</operator> <name>__p</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> <name>_NOEXCEPT</name> <range>: <macro><name>__ptr_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <expr><block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <macro><name>auto_ptr</name><argument_list>(<argument>auto_ptr&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <operator>:</operator> <macro><name>__ptr_</name><argument_list>(<argument>__p.release()</argument>)</argument_list></macro> <block>{}</block>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name> <macro><name>auto_ptr</name><argument_list>(<argument>auto_ptr&lt;_Up&gt;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<operator>:</operator> <macro><name>__ptr_</name><argument_list>(<argument>__p.release()</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>auto_ptr</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><name>auto_ptr</name><operator>&amp;</operator> <name>__p</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{<expr><call><name>reset</name><argument_list>(<argument><expr><call><name><name>__p</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></range></decl></decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>auto_ptr</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name><name>auto_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__p</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{<expr><call><name>reset</name><argument_list>(<argument><expr><call><name><name>__p</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></init></decl></decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>auto_ptr</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name><name>auto_ptr_ref</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__p</name><operator>)</operator> <name>_NOEXCEPT</name>
<block>{<expr><call><name>reset</name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>__ptr_</name></name></expr></argument>)</argument_list></call></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></init></decl></decl_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <operator>~</operator><macro><name>auto_ptr</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{<expr><name>delete</name> <name>__ptr_</name></expr>;}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Tp</name><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name>
<block>{<return>return <expr><operator>*</operator><name>__ptr_</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Tp</name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const _NOEXCEPT <block>{<block_content><return>return <expr><name>__ptr_</name></expr>;</return></block_content>}</block>
_LIBCPP_INLINE_VISIBILITY _Tp* get(</block></decl>) const _NOEXCEPT <block>{<block_content><return>return <expr><name>__ptr_</name></expr>;</return></block_content>}</block></decl_stmt>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_Tp</name><modifier>*</modifier></type> <name>release</name><parameter_list>()</parameter_list> _NOEXCEPT
<block>{<block_content>
<decl_stmt><decl><type><name>_Tp</name><modifier>*</modifier></type> <name>__t</name> <init>= <expr><name>__ptr_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__ptr_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<return>return <expr><name>__t</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>*</modifier></type> <name>__p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__ptr_</name> <operator>!=</operator> <name>__p</name></expr>)</condition><block type="pseudo"><block_content>
<decl_stmt><decl><type><name>delete</name></type> <name>__ptr_</name></decl>;</decl_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__ptr_</name> <operator>=</operator> <name>__p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name></type> <name>auto_ptr</name><argument_list>(<argument><expr><name><name>auto_ptr_ref</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__p</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name> <range>: <macro><name>__ptr_</name><argument_list>(<argument>__p.__ptr_</argument>)</argument_list></macro> <expr><block>{}</block>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>operator</name> <macro><name>auto_ptr_ref</name></macro><operator>&lt;</operator><name>_Up</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <name>_NOEXCEPT</name>
<block>{<expr><name><name>auto_ptr_ref</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name> <name>__t</name></expr>; <expr><name><name>__t</name><operator>.</operator><name>__ptr_</name></name> <operator>=</operator> <call><name>release</name><argument_list>()</argument_list></call></expr>; <return>return <expr><name>__t</name></expr>;</return>}</block></expr></range></decl></decl_stmt>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>operator</name></type> <name><name>auto_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list> _NOEXCEPT
<block>{<block_content><return>return <expr><call><name><name>auto_ptr</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>release</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_DEPRECATED_IN_CXX11</name></type> <name><name>auto_ptr</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>void</name></type> <name>element_type</name>;</typedef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
