<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/bind.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_BIND_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_BIND_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/weak_result_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/invoke.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> struct <name>__is_bind_expression</name> <operator>:</operator> <name>public</name> <name>false_type</name> <block>{}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>is_bind_expression</name>
<range>: <expr><name>public</name> <name><name>__is_bind_expression</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>remove_cv</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VAR</name> <name>constexpr</name> <name>size_t</name></type> <name>is_bind_expression_v</name> <init>= <expr><name><name>is_bind_expression</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> struct</type> <name>__is_placeholder</name> <range>: <expr><name>public</name> <name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>is_placeholder</name>
<range>: <expr><name>public</name> <name><name>__is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>remove_cv</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VAR</name> <name>constexpr</name> <name>size_t</name></type> <name>is_placeholder_v</name> <init>= <expr><name><name>is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>placeholders</name>
<block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>int</name> <name>_Np</name><operator>&gt;</operator> struct <name>__ph</name> <block>{}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_BUILDING_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>_LIBCPP_FUNC_VIS</name> <specifier>extern</specifier> <specifier>const</specifier> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_FUNC_VIS</name> <specifier>extern</specifier> <specifier>const</specifier> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>_2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_FUNC_VIS</name> <specifier>extern</specifier> <specifier>const</specifier> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name></type> <name>_3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_FUNC_VIS</name> <specifier>extern</specifier> <specifier>const</specifier> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>_4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_FUNC_VIS</name> <specifier>extern</specifier> <specifier>const</specifier> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name></type> <name>_5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_FUNC_VIS</name> <specifier>extern</specifier> <specifier>const</specifier> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name></type> <name>_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_FUNC_VIS</name> <specifier>extern</specifier> <specifier>const</specifier> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name></type> <name>_7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_FUNC_VIS</name> <specifier>extern</specifier> <specifier>const</specifier> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>_8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_FUNC_VIS</name> <specifier>extern</specifier> <specifier>const</specifier> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">9</literal></expr></argument>&gt;</argument_list></name></type> <name>_9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_FUNC_VIS</name> <specifier>extern</specifier> <specifier>const</specifier> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">10</literal></expr></argument>&gt;</argument_list></name></type> <name>_10</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>constexpr</name> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>_1</name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>_2</name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name></type> <name>_3</name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>_4</name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name></type> <name>_5</name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name></type> <name>_6</name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">7</literal></expr></argument>&gt;</argument_list></name></type> <name>_7</name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>_8</name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">9</literal></expr></argument>&gt;</argument_list></name></type> <name>_9</name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>constexpr</name> <name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><literal type="number">10</literal></expr></argument>&gt;</argument_list></name></type> <name>_10</name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>int</name> <name>_Np</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>placeholders</name><operator>::</operator><name><name>__ph</name><argument_list type="generic">&lt;<argument><expr><name>_Np</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_Np</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Uj</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_Tp</name><modifier>&amp;</modifier></type>
<name>__mu</name><parameter_list>(<parameter><decl><type><name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__t</name></decl></parameter>, <parameter><decl><type><name>_Uj</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>__t</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ti</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Uj</name></expr></argument>, <argument><expr><name>size_t</name> <modifier>...</modifier><name>_Indx</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_of</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Uj</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__mu_expand</name><argument_list>(<argument>_Ti&amp; __ti</argument>, <argument>tuple&lt;_Uj...&gt;&amp; __uj</argument>, <argument>__tuple_indices&lt;_Indx...&gt;</argument>)</argument_list></macro>
<block>{
<return>return <expr><call><name>__ti</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Uj</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Indx</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__uj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ti</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Uj</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>_EnableIf</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_bind_expression</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>__invoke_of</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Uj</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__mu</name><argument_list>(<argument>_Ti&amp; __ti</argument>, <argument>tuple&lt;_Uj...&gt;&amp; __uj</argument>)</argument_list></macro>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>__make_tuple_indices</name><operator>&lt;</operator><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>_Uj</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__indices</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__mu_expand</name><argument_list>(<argument><expr><name>__ti</name></expr></argument>, <argument><expr><name>__uj</name></expr></argument>, <argument><expr><call><name>__indices</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><name>bool</name> <name>IsPh</name></expr><operator>,</operator> <expr><name>class</name> <name>_Ti</name></expr><operator>,</operator> <expr><name>class</name> <name>_Uj</name><operator>&gt;</operator>
struct <name>__mu_return2</name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ti</name></expr><operator>,</operator> <expr><name>class</name> <name>_Uj</name><operator>&gt;</operator>
struct <name><name>__mu_return2</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><name>_Ti</name></expr></argument>, <argument><expr><name>_Uj</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name><name>is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>_Uj</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ti</name></expr></argument>, <argument><expr><name>class</name> <name>_Uj</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>__mu_return2</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>_Ti</name></expr></argument>, <argument><expr><name>_Uj</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__mu</name><argument_list>(<argument>_Ti&amp;</argument>, <argument>_Uj&amp; __uj</argument>)</argument_list></macro>
<block>{
<expr><specifier>const</specifier> <name>size_t</name> <name>_Indx</name> <operator>=</operator> <name><name>is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>-</operator> <literal type="number">1</literal></expr>;
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>_Indx</name></expr></argument>, <argument><expr><name>_Uj</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Indx</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__uj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ti</name></expr></argument>, <argument><expr><name>class</name> <name>_Uj</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>is_bind_expression</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>__is_reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>_Ti</name><operator>&amp;</operator></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__mu</name><argument_list>(<argument>_Ti&amp; __ti</argument>, <argument>_Uj&amp;</argument>)</argument_list></macro>
<block>{
<return>return <expr><name>__ti</name></expr>;</return>
}</block></expr></expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ti</name></expr><operator>,</operator> <expr><name>bool</name> <name>IsReferenceWrapper</name></expr><operator>,</operator> <expr><name>bool</name> <name>IsBindEx</name></expr><operator>,</operator> <expr><name>bool</name> <name>IsPh</name></expr><operator>,</operator>
<expr><name>class</name> <name>_TupleUj</name><operator>&gt;</operator>
struct <name>__mu_return_impl</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>bool</name> <name>_Invokable</name></expr><operator>,</operator> <expr><name>class</name> <name>_Ti</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Uj</name><operator>&gt;</operator>
struct <name>__mu_return_invokable</name>
<block>{
<typedef>typedef <type><name>__nat</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ti</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Uj</name><operator>&gt;</operator>
struct <name><name>__mu_return_invokable</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><name>_Ti</name></expr></argument>, <argument><expr><name>_Uj</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__invoke_of</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Uj</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ti</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Uj</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__mu_return_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Uj</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>__mu_return_invokable</name><argument_list type="generic">&lt;<argument><expr><name><name>__invokable</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Uj</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>_Ti</name></expr></argument>, <argument><expr><name>_Uj</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ti</name></expr><operator>,</operator> <expr><name>class</name> <name>_TupleUj</name><operator>&gt;</operator>
struct <name><name>__mu_return_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name><name>is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;&amp;</operator> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ti</name></expr><operator>,</operator> <expr><name>class</name> <name>_TupleUj</name><operator>&gt;</operator>
struct <name><name>__mu_return_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Ti</name><operator>::</operator><name>type</name><operator>&amp;</operator> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ti</name></expr><operator>,</operator> <expr><name>class</name> <name>_TupleUj</name><operator>&gt;</operator>
struct <name><name>__mu_return_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_Ti</name><modifier>&amp;</modifier></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ti</name></expr></argument>, <argument><expr><name>class</name> <name>_TupleUj</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__mu_return</name>
<range>: <expr><name>public</name> <name><name>__mu_return_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>,
<argument><expr><name><name>__is_reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name><name>is_bind_expression</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_placeholder</name><argument_list type="generic">&lt;<argument><expr><name>_Ti</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&lt;=</operator> <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name>
<block>{
}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_BoundArgs</name></expr><operator>,</operator> <expr><name>class</name> <name>_TupleUj</name><operator>&gt;</operator>
struct <name>__is_valid_bind_return</name>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name>false</name></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_BoundArgs</name></expr><operator>,</operator> <expr><name>class</name> <name>_TupleUj</name><operator>&gt;</operator>
struct <name><name>__is_valid_bind_return</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name><name>__invokable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>__mu_return</name><argument_list type="generic">&lt;<argument><expr><name>_BoundArgs</name></expr></argument>, <argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_BoundArgs</name></expr><operator>,</operator> <expr><name>class</name> <name>_TupleUj</name><operator>&gt;</operator>
struct <name><name>__is_valid_bind_return</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>value</name> <operator>=</operator> <name><name>__invokable</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>__mu_return</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_BoundArgs</name></expr></argument>, <argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <name>_BoundArgs</name></expr><operator>,</operator> <expr><name>class</name> <name>_TupleUj</name></expr><operator>,</operator>
<expr><name>bool</name> <operator>=</operator> <name><name>__is_valid_bind_return</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_BoundArgs</name></expr></argument>, <argument><expr><name>_TupleUj</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__bind_return</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_BoundArgs</name></expr><operator>,</operator> <expr><name>class</name> <name>_TupleUj</name><operator>&gt;</operator>
struct <name><name>__bind_return</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_TupleUj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__invoke_of</name>
<argument_list type="generic">&lt;
<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>,
<argument><expr><name>typename</name> <name><name>__mu_return</name>
<argument_list type="generic">&lt;
<argument><expr><name>_BoundArgs</name></expr></argument>,
<argument><expr><name>_TupleUj</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name><modifier>...</modifier></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_BoundArgs</name></expr><operator>,</operator> <expr><name>class</name> <name>_TupleUj</name><operator>&gt;</operator>
struct <name><name>__bind_return</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_TupleUj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__invoke_of</name>
<argument_list type="generic">&lt;
<argument><expr><name>_Fp</name><operator>&amp;</operator></expr></argument>,
<argument><expr><name>typename</name> <name><name>__mu_return</name>
<argument_list type="generic">&lt;
<argument><expr><specifier>const</specifier> <name>_BoundArgs</name></expr></argument>,
<argument><expr><name>_TupleUj</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name><modifier>...</modifier></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name> <name>type</name></expr>;</expr_stmt></typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <name>_BoundArgs</name></expr></argument>, <argument><expr><name>size_t</name> <modifier>...</modifier><name>_Indx</name></expr></argument>, <argument><expr><name>class</name> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__bind_return</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_BoundArgs</name></expr></argument>, <argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>__apply_functor</name><argument_list>(<argument>_Fp&amp; __f</argument>, <argument>_BoundArgs&amp; __bound_args</argument>, <argument>__tuple_indices&lt;_Indx...&gt;</argument>,
<argument>_Args&amp;&amp; __args</argument>)</argument_list></macro>
<block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><name>__f</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name>__mu</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Indx</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__bound_args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_BoundArgs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>__bind</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<range>: <expr><name>public</name> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>protected</name><operator>:</operator></expr>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Fd</name></expr>;</expr_stmt></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>_BoundArgs</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type> <name>_Td</name>;</typedef>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>_Fd</name></type> <name>__f_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Td</name></type> <name>__bound_args_</name></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>typename</name> <name>__make_tuple_indices</name><operator>&lt;</operator><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>_BoundArgs</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><operator>::</operator><name>type</name> <name>__indices</name></expr>;</expr_stmt></typedef>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Gp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_BA</name></expr></argument>,
<argument><expr><name>class</name> <operator>=</operator> <name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fd</name></expr></argument>, <argument><expr><name>_Gp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>remove_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Gp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>,
<argument><expr><name>__bind</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>explicit</name></type> <name>__bind</name><argument_list>(<argument><expr><name>_Gp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_BA</name><operator>&amp;&amp;</operator> <operator>...</operator><name>__bound_args</name></expr></argument>)</argument_list>
<range>: <expr><call><name>__f_</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Gp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl>,
<decl><type ref="prev"/><name>__bound_args_</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_BA</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__bound_args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>typename</name> <name><name>__bind_return</name><argument_list type="generic">&lt;<argument><expr><name>_Fd</name></expr></argument>, <argument><expr><name>_Td</name></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name><operator>&amp;&amp;</operator><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Args</name><operator>&amp;&amp;</operator> <operator>...</operator><name>__args</name><operator>)</operator>
<block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__apply_functor</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>, <argument><expr><name>__bound_args_</name></expr></argument>, <argument><expr><call><name>__indices</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name><operator>&amp;&amp;</operator><modifier>...</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>typename</name> <name><name>__bind_return</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Fd</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Td</name></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name><operator>&amp;&amp;</operator><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Args</name><operator>&amp;&amp;</operator> <operator>...</operator><name>__args</name><operator>)</operator> <specifier>const</specifier>
<block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__apply_functor</name><argument_list>(<argument><expr><name>__f_</name></expr></argument>, <argument><expr><name>__bound_args_</name></expr></argument>, <argument><expr><call><name>__indices</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name><operator>&amp;&amp;</operator><modifier>...</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
};

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_BoundArgs</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_bind_expression</name><argument_list type="generic">&lt;<argument><expr><name><name>__bind</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <range>: <expr><name>public</name> <name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_BoundArgs</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>__bind_r</name>
<range>: <expr><name>public</name> <name><name>__bind</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name>
<block>{
<typedef>typedef <type><name><name>__bind</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type> <name>base</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>_Fd</name> <name>_Fd</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>_Td</name> <name>_Td</name></expr>;</expr_stmt></typedef>
<label><name>public</name>:</label>
<typedef>typedef <type><name>_Rp</name></type> <name>result_type</name>;</typedef>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Gp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_BA</name></expr></argument>,
<argument><expr><name>class</name> <operator>=</operator> <name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Fd</name></expr></argument>, <argument><expr><name>_Gp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>remove_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Gp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>,
<argument><expr><name>__bind_r</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>explicit</name></type> <name>__bind_r</name><argument_list>(<argument><expr><name>_Gp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_BA</name><operator>&amp;&amp;</operator> <operator>...</operator><name>__bound_args</name></expr></argument>)</argument_list>
<range>: <macro><name>base</name><argument_list>(<argument>_VSTD::forward&lt;_Gp&gt;(__f)</argument>,
<argument>_VSTD::forward&lt;_BA&gt;(__bound_args)...</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>__bind_return</name><argument_list type="generic">&lt;<argument><expr><name>_Fd</name></expr></argument>, <argument><expr><name>_Td</name></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name><operator>&amp;&amp;</operator><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>,
<argument><expr><name>result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator> <name><name>is_void</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>result_type</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Args</name><operator>&amp;&amp;</operator> <operator>...</operator><name>__args</name><operator>)</operator>
<block>{
<typedef>typedef <type><name><name>__invoke_void_return_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name></type> <name>_Invoker</name>;</typedef></block></expr></range></decl></decl_stmt>
<return>return <expr><name>_Invoker</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}

template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <operator>...</operator><name>_Args</name><operator>&gt;</operator>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>__bind_return</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Fd</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Td</name></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name><operator>&amp;&amp;</operator><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>,
<argument><expr><name>result_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator> <name><name>is_void</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>result_type</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Args</name><operator>&amp;&amp;</operator> <operator>...</operator><name>__args</name><operator>)</operator> <specifier>const</specifier>
<block>{
<typedef>typedef <type><name><name>__invoke_void_return_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name></type> <name>_Invoker</name>;</typedef></block></expr></expr_stmt>
<return>return <expr><name>_Invoker</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>base</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}
}<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_BoundArgs</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_bind_expression</name><argument_list type="generic">&lt;<argument><expr><name><name>__bind_r</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>, <argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <range>: <expr><name>public</name> <name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_BoundArgs</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name><name>__bind</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type>
<name>bind</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_BoundArgs</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__bound_args</name></expr></argument>)</argument_list>
<block>{<block_content>
<typedef>typedef <type><name><name>__bind</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type> <name>type</name>;</typedef>
<return>return <expr><call><name>type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_BoundArgs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__bound_args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Rp</name></expr></argument>, <argument><expr><name>class</name> <name>_Fp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_BoundArgs</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name><name>__bind_r</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>, <argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type>
<name>bind</name><argument_list>(<argument><expr><name>_Fp</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_BoundArgs</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__bound_args</name></expr></argument>)</argument_list>
<block>{<block_content>
<typedef>typedef <type><name><name>__bind_r</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>, <argument><expr><name>_Fp</name></expr></argument>, <argument><expr><name>_BoundArgs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type> <name>type</name>;</typedef>
<return>return <expr><call><name>type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Fp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_BoundArgs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__bound_args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
