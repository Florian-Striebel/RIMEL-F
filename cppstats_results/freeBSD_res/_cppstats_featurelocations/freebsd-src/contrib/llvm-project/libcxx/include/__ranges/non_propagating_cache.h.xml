<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__ranges/non_propagating_cache.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___RANGES_NON_PROPAGATING_CACHE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___RANGES_NON_PROPAGATING_CACHE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/addressof.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>namespace</name></type> <name>ranges</name> <block>{<block_content>








<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>is_object_v</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>__non_propagating_cache</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>optional</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__value_</name> <init>= <expr><name>nullopt</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<function_decl><type><name>_LIBCPP_HIDE_FROM_ABI</name></type> <name>__non_propagating_cache</name><parameter_list>()</parameter_list> <init>= <expr/>default</init>;</function_decl>

<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name></type> <name>__non_propagating_cache</name><argument_list>(<argument><expr><name>__non_propagating_cache</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>)</argument_list> <name>noexcept</name>
<range>: <macro><name>__value_</name><argument_list>(<argument>nullopt</argument>)</argument_list></macro>
<expr><block>{ }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>__non_propagating_cache</name><argument_list>(<argument>__non_propagating_cache&amp;&amp; __other</argument>)</argument_list></macro> <name>noexcept</name>
<operator>:</operator> <macro><name>__value_</name><argument_list>(<argument>nullopt</argument>)</argument_list></macro>
<block>{
<expr><call><name><name>__other</name><operator>.</operator><name>__value_</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>__non_propagating_cache</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><name>__non_propagating_cache</name> <specifier>const</specifier><operator>&amp;</operator> <name>__other</name><operator>)</operator> <name>noexcept</name> <block>{
<if_stmt><if>if <condition>(<expr><name>this</name> <operator>!=</operator> <name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>__value_</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>__non_propagating_cache</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>__non_propagating_cache</name><operator>&amp;&amp;</operator> <name>__other</name><operator>)</operator> <name>noexcept</name> <block>{
<expr><call><name><name>__value_</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>__other</name><operator>.</operator><name>__value_</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<function><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_Tp</name><modifier>&amp;</modifier></type> <name>operator</name><modifier>*</modifier><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>__value_</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_Tp</name> <specifier>const</specifier><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>__value_</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>bool</name> <macro><name>__has_value</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>__value_</name><operator>.</operator><name>has_value</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>void</name></type> <name>__set</name><parameter_list>(<parameter><decl><type><name>_Tp</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>__value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>__value_</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>__value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>void</name></type> <name>__set</name><argument_list>(<argument><expr><name>_Tp</name><operator>&amp;&amp;</operator> <name>__value</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><call><name><name>__value_</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>__empty_cache</name> <block>{ }</block>;</struct>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
