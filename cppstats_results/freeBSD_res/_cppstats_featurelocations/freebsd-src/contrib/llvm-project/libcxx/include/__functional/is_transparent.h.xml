<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/is_transparent.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_IS_TRANSPARENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_IS_TRANSPARENT</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct <name>__is_transparent</name> <operator>:</operator> <name>false_type</name> <block>{}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_transparent</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>__void_t</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Tp</name><operator>::</operator><name>is_transparent</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
