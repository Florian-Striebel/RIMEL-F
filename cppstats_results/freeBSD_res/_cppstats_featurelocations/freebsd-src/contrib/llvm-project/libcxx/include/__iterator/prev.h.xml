<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/prev.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_PREV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_PREV_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__debug&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__function_like.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/advance.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/incrementable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_InputIter</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX14</name>
<name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>__is_cpp17_input_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_InputIter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>_InputIter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>prev</name><argument_list>(<argument>_InputIter __x</argument>, <argument>typename iterator_traits&lt;_InputIter&gt;::difference_type __n = <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__n</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>__is_cpp17_bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_InputIter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><literal type="string">"Attempt to prev(it, n) with a positive n on a non-bidirectional iterator"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>_VSTD</name><operator>::</operator><call><name>advance</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>-</operator><name>__n</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>__x</name></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>namespace</name></type> <name>ranges</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>__prev_fn</name></name></type> <name>final</name> <range>: <expr><name>private</name> <name>__function_like</name> <block>{
<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>explicit</name> <macro><name>__prev_fn</name><argument_list>(<argument>__tag __x</argument>)</argument_list></macro> <name>noexcept</name> <operator>:</operator> <macro><name>__function_like</name><argument_list>(<argument>__x</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bidirectional_iterator</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_Ip</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Ip</name> <name>__x</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><operator>--</operator><name>__x</name></expr>;
<return>return <expr><name>__x</name></expr>;</return>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bidirectional_iterator</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_Ip</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Ip</name> <name>__x</name>, <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <name>__n</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><name>ranges</name><operator>::</operator><call><name>advance</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>-</operator><name>__n</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>__x</name></expr>;</return>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bidirectional_iterator</name> <name>_Ip</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_Ip</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Ip</name> <name>__x</name>, <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name> <name>__n</name>, <name>_Ip</name> <name>__bound</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><name>ranges</name><operator>::</operator><call><name>advance</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>-</operator><name>__n</name></expr></argument>, <argument><expr><name>__bound</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>__x</name></expr>;</return>
}</block>
}</expr>;

<expr><specifier>inline</specifier> <name>constexpr</name> <name>auto</name> <name>prev</name> <operator>=</operator> <call><name>__prev_fn</name><argument_list>(<argument><expr><name>__function_like</name><operator>::</operator><call><name>__tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>_LIBCPP_END_NAMESPACE_STD</name>

<name>_LIBCPP_POP_MACROS</name></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
