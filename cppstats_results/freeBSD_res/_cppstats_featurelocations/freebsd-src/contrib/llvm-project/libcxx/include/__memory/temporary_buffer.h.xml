<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/temporary_buffer.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_TEMPORARY_BUFFER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_TEMPORARY_BUFFER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;new&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_NODISCARD_EXT</name> <name>_LIBCPP_NO_CFI</name>
<name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><modifier>*</modifier></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>&gt;</argument_list></name></type>
<name>get_temporary_buffer</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><modifier>*</modifier></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>&gt;</argument_list></name></type> <name>__r</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>__m</name> <init>= <expr><operator>(</operator><operator>~</operator><call><name>ptrdiff_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>ptrdiff_t</name><argument_list>(<argument><expr><call><name>ptrdiff_t</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ptrdiff_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>__CHAR_BIT__</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator>
<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>&gt;</operator> <name>__m</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__n</name> <operator>=</operator> <name>__m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_ALIGNED_ALLOCATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>__is_overaligned_for_new</name><argument_list>(<argument><expr><call><name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>align_val_t</name></type> <name>__al</name> <init>=
<expr><call><name>align_val_t</name><argument_list>(<argument><expr><name><name>alignment_of</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__r</name><operator>.</operator><name>first</name></name> <operator>=</operator> <macro><name>static_cast</name></macro><operator>&lt;</operator><name>_Tp</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>::</operator><name>operator</name> <call><name>new</name><argument_list>(
<argument><expr><name>__n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>__al</name></expr></argument>, <argument><expr><name>nothrow</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>__r</name><operator>.</operator><name>first</name></name> <operator>=</operator> <macro><name>static_cast</name></macro><operator>&lt;</operator><name>_Tp</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>::</operator><name>operator</name> <call><name>new</name><argument_list>(
<argument><expr><name>__n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nothrow</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>__is_overaligned_for_new</name><argument_list>(<argument><expr><call><name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>__r</name><operator>.</operator><name>first</name></name> <operator>=</operator> <macro><name>static_cast</name></macro><operator>&lt;</operator><name>_Tp</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>::</operator><name>operator</name> <call><name>new</name><argument_list>(<argument><expr><name>__n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nothrow</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>__r</name><operator>.</operator><name>first</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>__r</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name>__n</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>__n</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>return_temporary_buffer</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>*</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>__libcpp_deallocate_unsized</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>__p</name></expr></argument>, <argument><expr><call><name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>__return_temporary_buffer</name>
<block>{
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Tp</name><operator>*</operator> <name>__p</name><operator>)</operator> <specifier>const</specifier> <block>{<expr><name>_VSTD</name><operator>::</operator><call><name>return_temporary_buffer</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;}</block></expr></expr_stmt>
}</block>;</struct>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
