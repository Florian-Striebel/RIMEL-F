<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/allocator.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_ALLOCATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_ALLOCATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/allocator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;new&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>allocator</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<label><name>public</name>:</label>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>const_pointer</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>void</name></type> <name>value_type</name>;</typedef>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Up</name><operator>&gt;</operator> struct <name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>rebind</name> <block>{<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name></type> <name>other</name>;</typedef>}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<label><name>public</name>:</label>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>const_pointer</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><specifier>const</specifier> <name>void</name></type> <name>value_type</name>;</typedef>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Up</name><operator>&gt;</operator> struct <name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>rebind</name> <block>{<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name></type> <name>other</name>;</typedef>}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>bool</name> <name>_Cond</name></expr><operator>,</operator> <expr><name>class</name> <name>_Unique</name><operator>&gt;</operator>
struct <name>__non_trivial_if</name> <block>{ }</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Unique</name><operator>&gt;</operator>
struct <name><name>__non_trivial_if</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><name>_Unique</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>_LIBCPP_CONSTEXPR</name> <macro><name>__non_trivial_if</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{ }</block></expr>
}</block></expr>;</expr_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>allocator</name>
<range>: <expr><name>private</name> <name><name>__non_trivial_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_void</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <type><name>size_t</name></type> <name>size_type</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <type><name>ptrdiff_t</name></type> <name>difference_type</name>;</typedef>
<typedef>typedef <type><name>_Tp</name></type> <name>value_type</name>;</typedef>
<typedef>typedef <type><name>true_type</name></type> <name>propagate_on_container_move_assignment</name>;</typedef>
<typedef>typedef <type><name>true_type</name></type> <name>is_always_equal</name>;</typedef>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<macro><name>allocator</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <name>_LIBCPP_DEFAULT</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<macro><name>allocator</name><argument_list>(<argument>const allocator&lt;_Up&gt;&amp;</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{ }</block>

<name>_LIBCPP_NODISCARD_AFTER_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>_Tp</name><operator>*</operator> <macro><name>allocate</name><argument_list>(<argument>size_t __n</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>&gt;</operator> <name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>allocator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max_size</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_length_error</name><argument_list>(<argument><expr><literal type="string">"allocator&lt;T&gt;::allocate(size_t n)"</literal>
<literal type="string">" 'n' exceeds maximum supported size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__libcpp_is_constant_evaluated</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <macro><name>static_cast</name></macro><expr><operator>&lt;</operator><name>_Tp</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>::</operator><name>operator</name> <call><name>new</name><argument_list>(<argument><expr><name>__n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>__libcpp_allocate</name><argument_list>(<argument><expr><name>__n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
}

_LIBCPP_INLINE_VISIBILITY <function><type><name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>void</name></type> <name>deallocate</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__libcpp_is_constant_evaluated</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>::</operator><name>operator</name> <call><name>delete</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>__libcpp_deallocate</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>__p</name></expr></argument>, <argument><expr><name>__n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><specifier>const</specifier> <name>_Tp</name><modifier>*</modifier></type> <name>const_pointer</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><name>_Tp</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><specifier>const</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>const_reference</name>;</typedef>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Up</name><operator>&gt;</operator>
struct <name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>rebind</name> <block>{
<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name></type> <name>other</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>pointer</name></type> <name>address</name><argument_list>(<argument><expr><name>reference</name> <name>__x</name></expr></argument>)</argument_list> const <name>_NOEXCEPT</name> <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>const_pointer</name></type> <name>address</name><argument_list>(<argument><expr><name>const_reference</name> <name>__x</name></expr></argument>)</argument_list> const <name>_NOEXCEPT</name> <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>_LIBCPP_NODISCARD_AFTER_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_DEPRECATED_IN_CXX17</name>
<name>_Tp</name><modifier>*</modifier></type> <name>allocate</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>allocate</name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>size_type</name> <macro><name>max_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{
<return>return <expr><call><name>size_type</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>construct</name><argument_list>(<argument><expr><name>_Up</name><operator>*</operator> <name>__p</name></expr></argument>, <argument><expr><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>_Up</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>pointer</name></type> <name>__p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__p</name><operator>-&gt;</operator><name/></name>~<call><name>_Tp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>private</name> <name><name>__non_trivial_if</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>is_void</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<block>{
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <type><name>size_t</name></type> <name>size_type</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <type><name>ptrdiff_t</name></type> <name>difference_type</name>;</typedef>
<typedef>typedef <type><specifier>const</specifier> <name>_Tp</name></type> <name>value_type</name>;</typedef>
<typedef>typedef <type><name>true_type</name></type> <name>propagate_on_container_move_assignment</name>;</typedef>
<typedef>typedef <type><name>true_type</name></type> <name>is_always_equal</name>;</typedef>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<macro><name>allocator</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <name>_LIBCPP_DEFAULT</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<macro><name>allocator</name><argument_list>(<argument>const allocator&lt;_Up&gt;&amp;</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{ }</block>

<name>_LIBCPP_NODISCARD_AFTER_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>const</specifier> <name>_Tp</name><operator>*</operator> <macro><name>allocate</name><argument_list>(<argument>size_t __n</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>&gt;</operator> <name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>allocator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max_size</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_length_error</name><argument_list>(<argument><expr><literal type="string">"allocator&lt;const T&gt;::allocate(size_t n)"</literal>
<literal type="string">" 'n' exceeds maximum supported size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__libcpp_is_constant_evaluated</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <macro><name>static_cast</name></macro><expr><operator>&lt;</operator><specifier>const</specifier> <name>_Tp</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>::</operator><name>operator</name> <call><name>new</name><argument_list>(<argument><expr><name>__n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>__libcpp_allocate</name><argument_list>(<argument><expr><name>__n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
}

_LIBCPP_INLINE_VISIBILITY <function><type><name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>void</name></type> <name>deallocate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_Tp</name><modifier>*</modifier></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__libcpp_is_constant_evaluated</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>::</operator><name>operator</name> <call><name>delete</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>__libcpp_deallocate</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>_LIBCPP_ALIGNOF</name><argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><specifier>const</specifier> <name>_Tp</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><specifier>const</specifier> <name>_Tp</name><modifier>*</modifier></type> <name>const_pointer</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><specifier>const</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
<macro><name>_LIBCPP_DEPRECATED_IN_CXX17</name></macro> <typedef>typedef <type><specifier>const</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>const_reference</name>;</typedef>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Up</name><operator>&gt;</operator>
struct <name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>rebind</name> <block>{
<typedef>typedef <type><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name></type> <name>other</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>const_pointer</name></type> <name>address</name><argument_list>(<argument><expr><name>const_reference</name> <name>__x</name></expr></argument>)</argument_list> const <name>_NOEXCEPT</name> <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>_LIBCPP_NODISCARD_AFTER_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_DEPRECATED_IN_CXX17</name>
<specifier>const</specifier> <name>_Tp</name><modifier>*</modifier></type> <name>allocate</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>allocate</name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>size_type</name> <macro><name>max_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{
<return>return <expr><call><name>size_type</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_Tp</name></expr></argument>)</argument_list></sizeof></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>construct</name><argument_list>(<argument><expr><name>_Up</name><operator>*</operator> <name>__p</name></expr></argument>, <argument><expr><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>_Up</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>_LIBCPP_DEPRECATED_IN_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>pointer</name></type> <name>__p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__p</name><operator>-&gt;</operator><name/></name>~<call><name>_Tp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>,</operator> <specifier>const</specifier> <name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <name>_NOEXCEPT</name> <block>{<return>return <expr><name>true</name></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>,</operator> <specifier>const</specifier> <name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator> <name>_NOEXCEPT</name> <block>{<return>return <expr><name>false</name></expr>;</return>}</block></expr></expr_stmt>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
