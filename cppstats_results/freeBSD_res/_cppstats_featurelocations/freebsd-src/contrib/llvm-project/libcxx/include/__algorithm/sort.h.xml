<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/sort.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_SORT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_SORT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/comp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/comp_ref_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/min_element.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/partial_sort.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/unwrap_iter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/swap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>



<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>unsigned</name></type>
<name>__sort3</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__z</name></decl></parameter>, <parameter><decl><type><name>_Compare</name></type> <name>__c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>__r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__y</name></expr></argument>, <argument><expr><operator>*</operator><name>__x</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__z</name></expr></argument>, <argument><expr><operator>*</operator><name>__y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__y</name></expr></argument>, <argument><expr><operator>*</operator><name>__z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__y</name></expr></argument>, <argument><expr><operator>*</operator><name>__x</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__x</name></expr></argument>, <argument><expr><operator>*</operator><name>__y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__z</name></expr></argument>, <argument><expr><operator>*</operator><name>__y</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__x</name></expr></argument>, <argument><expr><operator>*</operator><name>__z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__x</name></expr></argument>, <argument><expr><operator>*</operator><name>__y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__z</name></expr></argument>, <argument><expr><operator>*</operator><name>__y</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__y</name></expr></argument>, <argument><expr><operator>*</operator><name>__z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<name>unsigned</name></type>
<name>__sort4</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__x1</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__x2</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__x3</name></decl></parameter>,
<parameter><decl><type><name>_ForwardIterator</name></type> <name>__x4</name></decl></parameter>, <parameter><decl><type><name>_Compare</name></type> <name>__c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>__r</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort3</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x1</name></expr></argument>, <argument><expr><name>__x2</name></expr></argument>, <argument><expr><name>__x3</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__x4</name></expr></argument>, <argument><expr><operator>*</operator><name>__x3</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__x3</name></expr></argument>, <argument><expr><operator>*</operator><name>__x4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__x3</name></expr></argument>, <argument><expr><operator>*</operator><name>__x2</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__x2</name></expr></argument>, <argument><expr><operator>*</operator><name>__x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__x2</name></expr></argument>, <argument><expr><operator>*</operator><name>__x1</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__x1</name></expr></argument>, <argument><expr><operator>*</operator><name>__x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__r</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDDEN</name>
<name>unsigned</name></type>
<name>__sort5</name><parameter_list>(<parameter><decl><type><name>_ForwardIterator</name></type> <name>__x1</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__x2</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__x3</name></decl></parameter>,
<parameter><decl><type><name>_ForwardIterator</name></type> <name>__x4</name></decl></parameter>, <parameter><decl><type><name>_ForwardIterator</name></type> <name>__x5</name></decl></parameter>, <parameter><decl><type><name>_Compare</name></type> <name>__c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>__r</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort4</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x1</name></expr></argument>, <argument><expr><name>__x2</name></expr></argument>, <argument><expr><name>__x3</name></expr></argument>, <argument><expr><name>__x4</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__x5</name></expr></argument>, <argument><expr><operator>*</operator><name>__x4</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__x4</name></expr></argument>, <argument><expr><operator>*</operator><name>__x5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__x4</name></expr></argument>, <argument><expr><operator>*</operator><name>__x3</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__x3</name></expr></argument>, <argument><expr><operator>*</operator><name>__x4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__x3</name></expr></argument>, <argument><expr><operator>*</operator><name>__x2</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__x2</name></expr></argument>, <argument><expr><operator>*</operator><name>__x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__c</name><argument_list>(<argument><expr><operator>*</operator><name>__x2</name></expr></argument>, <argument><expr><operator>*</operator><name>__x1</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__x1</name></expr></argument>, <argument><expr><operator>*</operator><name>__x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__r</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>void</name></type>
<name>__selection_sort</name><parameter_list>(<parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Compare</name></type> <name>__comp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__lm1</name> <init>= <expr><name>__last</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><operator>--</operator><name>__lm1</name></expr>;</init> <condition><expr><name>__first</name> <operator>!=</operator> <name>__lm1</name></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__i</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name><name>min_element</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>add_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>!=</operator> <name>__first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type>
<name>__insertion_sort</name><parameter_list>(<parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_BidirectionalIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Compare</name></type> <name>__comp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><name>__first</name> <operator>!=</operator> <name>__last</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__i</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>__i</name></expr>;</init> <condition><expr><name>__i</name> <operator>!=</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>_BidirectionalIterator</name></type> <name>__j</name> <init>= <expr><name>__i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>value_type</name></type> <name>__t</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>_BidirectionalIterator</name></type> <name>__k</name> <init>= <expr><name>__i</name></expr></init></decl>;</init> <condition><expr><name>__k</name> <operator>!=</operator> <name>__first</name> <operator>&amp;&amp;</operator> <call><name>__comp</name><argument_list>(<argument><expr><name>__t</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>__k</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>--</operator><name>__j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>__j</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>__j</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type>
<name>__insertion_sort_3</name><parameter_list>(<parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Compare</name></type> <name>__comp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_RandomAccessIterator</name></type> <name>__j</name> <init>= <expr><name>__first</name><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort3</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>__j</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>_RandomAccessIterator</name></type> <name>__i</name> <init>= <expr><name>__j</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>__i</name> <operator>!=</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>, <argument><expr><operator>*</operator><name>__j</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>value_type</name></type> <name>__t</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_RandomAccessIterator</name></type> <name>__k</name> <init>= <expr><name>__j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__j</name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__j</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__j</name> <operator>=</operator> <name>__k</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>__j</name> <operator>!=</operator> <name>__first</name> <operator>&amp;&amp;</operator> <call><name>__comp</name><argument_list>(<argument><expr><name>__t</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>__k</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>__j</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>__j</name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type>
<name>__insertion_sort_incomplete</name><parameter_list>(<parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Compare</name></type> <name>__comp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>__last</name> <operator>-</operator> <name>__first</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>__last</name></expr></argument>, <argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort3</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>--</operator><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort4</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>--</operator><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort5</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>--</operator><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_RandomAccessIterator</name></type> <name>__j</name> <init>= <expr><name>__first</name><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort3</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>__j</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>__limit</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>__count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>_RandomAccessIterator</name></type> <name>__i</name> <init>= <expr><name>__j</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>__i</name> <operator>!=</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>, <argument><expr><operator>*</operator><name>__j</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>value_type</name></type> <name>__t</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_RandomAccessIterator</name></type> <name>__k</name> <init>= <expr><name>__j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__j</name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__j</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__j</name> <operator>=</operator> <name>__k</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>__j</name> <operator>!=</operator> <name>__first</name> <operator>&amp;&amp;</operator> <call><name>__comp</name><argument_list>(<argument><expr><name>__t</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>__k</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>__j</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>__count</name> <operator>==</operator> <name>__limit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>++</operator><name>__i</name> <operator>==</operator> <name>__last</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>__j</name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type>
<name>__insertion_sort_move</name><argument_list>(<argument><expr><name>_BidirectionalIterator</name> <name>__first1</name></expr></argument>, <argument><expr><name>_BidirectionalIterator</name> <name>__last1</name></expr></argument>,
<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name><operator>*</operator> <name>__first2</name></expr></argument>, <argument><expr><name>_Compare</name> <name>__comp</name></expr></argument>)</argument_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_BidirectionalIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><name>__first1</name> <operator>!=</operator> <name>__last1</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>__destruct_n</name></type> <name>__d</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>__destruct_n</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></type> <name>__h</name><parameter_list>(<parameter><decl><type><name>__first2</name></type></decl></parameter>, <parameter><decl><type><name>__d</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>value_type</name><modifier>*</modifier></type> <name>__last2</name> <init>= <expr><name>__first2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__last2</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__first1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name><name>__d</name><operator>.</operator><name>template</name></name></type> <name><name>__incr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>;</function_decl>
<for>for <control>(<init><expr><operator>++</operator><name>__last2</name></expr>;</init> <condition><expr><operator>++</operator><name>__first1</name> <operator>!=</operator> <name>__last1</name></expr>;</condition> <incr><expr><operator>++</operator><name>__last2</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>value_type</name><modifier>*</modifier></type> <name>__j2</name> <init>= <expr><name>__last2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>value_type</name><modifier>*</modifier></type> <name>__i2</name> <init>= <expr><name>__j2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__first1</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>__i2</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__j2</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name><name>__d</name><operator>.</operator><name>template</name></name></type> <name><name>__incr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>;</function_decl>
<for>for <control>(<init><expr><operator>--</operator><name>__j2</name></expr>;</init> <condition><expr><name>__i2</name> <operator>!=</operator> <name>__first2</name> <operator>&amp;&amp;</operator> <call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__first1</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>__i2</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>--</operator><name>__j2</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>__j2</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>__j2</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__first1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__j2</argument>)</argument_list></macro> <call><name>value_type</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>__first1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name><name>__d</name><operator>.</operator><name>template</name></name></type> <name><name>__incr</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>__h</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type>
<name>__sort</name><parameter_list>(<parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Compare</name></type> <name>__comp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>difference_type</name></type> <name>__limit</name> <init>= <expr><ternary><condition><expr><name><name>is_trivially_copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_trivially_copy_assignable</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr> ?</condition><then> <expr><literal type="number">30</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition>
<block>{<block_content>
<label><name>__restart</name>:</label>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__len</name> <init>= <expr><name>__last</name> <operator>-</operator> <name>__first</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>__len</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>__last</name></expr></argument>, <argument><expr><operator>*</operator><name>__first</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort3</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>--</operator><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort4</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>--</operator><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort5</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>__first</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>--</operator><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&lt;=</operator> <name>__limit</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__insertion_sort_3</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>_RandomAccessIterator</name></type> <name>__m</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_RandomAccessIterator</name></type> <name>__lm1</name> <init>= <expr><name>__last</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>--</operator><name>__lm1</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>__n_swaps</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__delta</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__len</name> <operator>&gt;=</operator> <literal type="number">1000</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__delta</name> <operator>=</operator> <name>__len</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__m</name> <operator>+=</operator> <name>__delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__delta</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__n_swaps</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__sort5</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__first</name> <operator>+</operator> <name>__delta</name></expr></argument>, <argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__m</name><operator>+</operator><name>__delta</name></expr></argument>, <argument><expr><name>__lm1</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>__delta</name> <operator>=</operator> <name>__len</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>__m</name> <operator>+=</operator> <name>__delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__n_swaps</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__sort3</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__lm1</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>



<decl_stmt><decl><type><name>_RandomAccessIterator</name></type> <name>__i</name> <init>= <expr><name>__first</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_RandomAccessIterator</name></type> <name>__j</name> <init>= <expr><name>__lm1</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>, <argument><expr><operator>*</operator><name>__m</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<while>while <condition>(<expr><name>true</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>==</operator> <operator>--</operator><name>__j</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__j</name> <operator>=</operator> <name>__last</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>__j</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>true</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>==</operator> <name>__j</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>, <argument><expr><operator>*</operator><name>__j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__n_swaps</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>==</operator> <name>__j</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>__j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>&gt;=</operator> <name>__j</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>, <argument><expr><operator>*</operator><name>__j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__n_swaps</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name>__first</name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt>
<goto>goto <name>__restart</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__j</name></expr></argument>, <argument><expr><operator>*</operator><name>__m</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>, <argument><expr><operator>*</operator><name>__j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__n_swaps</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>&lt;</operator> <name>__j</name></expr>)</condition>
<block>{<block_content>


<while>while <condition>(<expr><name>true</name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>, <argument><expr><operator>*</operator><name>__m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><operator>!</operator><call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>__j</name></expr></argument>, <argument><expr><operator>*</operator><name>__m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>&gt;</operator> <name>__j</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>, <argument><expr><operator>*</operator><name>__j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__n_swaps</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>__m</name> <operator>==</operator> <name>__i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__m</name> <operator>=</operator> <name>__j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>__i</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>!=</operator> <name>__m</name> <operator>&amp;&amp;</operator> <call><name>__comp</name><argument_list>(<argument><expr><operator>*</operator><name>__m</name></expr></argument>, <argument><expr><operator>*</operator><name>__i</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__i</name></expr></argument>, <argument><expr><operator>*</operator><name>__m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__n_swaps</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>__n_swaps</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>__fs</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name><name>__insertion_sort_incomplete</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>_VSTD</name><operator>::</operator><call><name><name>__insertion_sort_incomplete</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__fs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__last</name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__fs</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>__first</name> <operator>=</operator> <operator>++</operator><name>__i</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>-</operator> <name>__first</name> <operator>&lt;</operator> <name>__last</name> <operator>-</operator> <name>__i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>__first</name> <operator>=</operator> <operator>++</operator><name>__i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>__last</name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Compare</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type>
<name>__sort</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>*</modifier><modifier>*</modifier></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_Tp</name><modifier>*</modifier><modifier>*</modifier></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name><name>__less</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>__less</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name></type> <name>__comp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort</name><argument_list type="generic">&lt;<argument><expr><name><name>__less</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>, <argument><expr><name>uintptr_t</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>*</operator><operator>)</operator><name>__first</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>*</operator><operator>)</operator><name>__last</name></expr></argument>, <argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;char&gt;&amp;</argument>, <argument>char*&gt;(char*, char*, __less&lt;char&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;wchar_t&gt;&amp;</argument>, <argument>wchar_t*&gt;(wchar_t*, wchar_t*, __less&lt;wchar_t&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;signed char&gt;&amp;</argument>, <argument>signed char*&gt;(signed char*, signed char*, __less&lt;signed char&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;unsigned char&gt;&amp;</argument>, <argument>unsigned char*&gt;(unsigned char*, unsigned char*, __less&lt;unsigned char&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;short&gt;&amp;</argument>, <argument>short*&gt;(short*, short*, __less&lt;short&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;unsigned short&gt;&amp;</argument>, <argument>unsigned short*&gt;(unsigned short*, unsigned short*, __less&lt;unsigned short&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;int&gt;&amp;</argument>, <argument>int*&gt;(int*, int*, __less&lt;int&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;unsigned&gt;&amp;</argument>, <argument>unsigned*&gt;(unsigned*, unsigned*, __less&lt;unsigned&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;long&gt;&amp;</argument>, <argument>long*&gt;(long*, long*, __less&lt;long&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;unsigned long&gt;&amp;</argument>, <argument>unsigned long*&gt;(unsigned long*, unsigned long*, __less&lt;unsigned long&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;long long&gt;&amp;</argument>, <argument>long long*&gt;(long long*, long long*, __less&lt;long long&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;unsigned long long&gt;&amp;</argument>, <argument>unsigned long long*&gt;(unsigned long long*, unsigned long long*, __less&lt;unsigned long long&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;float&gt;&amp;</argument>, <argument>float*&gt;(float*, float*, __less&lt;float&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;double&gt;&amp;</argument>, <argument>double*&gt;(double*, double*, __less&lt;double&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS void __sort&lt;__less&lt;long double&gt;&amp;</argument>, <argument>long double*&gt;(long double*, long double*, __less&lt;long double&gt;&amp;)</argument>)</argument_list></macro>

<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;char&gt;&amp;</argument>, <argument>char*&gt;(char*, char*, __less&lt;char&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;wchar_t&gt;&amp;</argument>, <argument>wchar_t*&gt;(wchar_t*, wchar_t*, __less&lt;wchar_t&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;signed char&gt;&amp;</argument>, <argument>signed char*&gt;(signed char*, signed char*, __less&lt;signed char&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;unsigned char&gt;&amp;</argument>, <argument>unsigned char*&gt;(unsigned char*, unsigned char*, __less&lt;unsigned char&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;short&gt;&amp;</argument>, <argument>short*&gt;(short*, short*, __less&lt;short&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;unsigned short&gt;&amp;</argument>, <argument>unsigned short*&gt;(unsigned short*, unsigned short*, __less&lt;unsigned short&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;int&gt;&amp;</argument>, <argument>int*&gt;(int*, int*, __less&lt;int&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;unsigned&gt;&amp;</argument>, <argument>unsigned*&gt;(unsigned*, unsigned*, __less&lt;unsigned&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;long&gt;&amp;</argument>, <argument>long*&gt;(long*, long*, __less&lt;long&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;unsigned long&gt;&amp;</argument>, <argument>unsigned long*&gt;(unsigned long*, unsigned long*, __less&lt;unsigned long&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;long long&gt;&amp;</argument>, <argument>long long*&gt;(long long*, long long*, __less&lt;long long&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;unsigned long long&gt;&amp;</argument>, <argument>unsigned long long*&gt;(unsigned long long*, unsigned long long*, __less&lt;unsigned long long&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;float&gt;&amp;</argument>, <argument>float*&gt;(float*, float*, __less&lt;float&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;double&gt;&amp;</argument>, <argument>double*&gt;(double*, double*, __less&lt;double&gt;&amp;)</argument>)</argument_list></macro>
<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete&lt;__less&lt;long double&gt;&amp;</argument>, <argument>long double*&gt;(long double*, long double*, __less&lt;long double&gt;&amp;)</argument>)</argument_list></macro>

<macro><name>_LIBCPP_EXTERN_TEMPLATE</name><argument_list>(<argument>_LIBCPP_FUNC_VIS unsigned __sort5&lt;__less&lt;long double&gt;&amp;</argument>, <argument>long double*&gt;(long double*, long double*, long double*, long double*, long double*, __less&lt;long double&gt;&amp;)</argument>)</argument_list></macro>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_RandomAccessIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Compare</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>void</name></type>
<name>sort</name><parameter_list>(<parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__last</name></decl></parameter>, <parameter><decl><type><name>_Compare</name></type> <name>__comp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>__comp_ref_type</name><argument_list type="generic">&lt;<argument><expr><name>_Compare</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_Comp_ref</name></expr>;</expr_stmt></typedef>
<if_stmt><if>if <condition>(<expr><call><name>__libcpp_is_constant_evaluated</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__partial_sort</name><argument_list type="generic">&lt;<argument><expr><name>_Comp_ref</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__first</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><name>__last</name></expr></argument>, <argument><expr><call><name>_Comp_ref</name><argument_list>(<argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__sort</name><argument_list type="generic">&lt;<argument><expr><name>_Comp_ref</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>__unwrap_iter</name><argument_list>(<argument><expr><name>__first</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name>__unwrap_iter</name><argument_list>(<argument><expr><name>__last</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Comp_ref</name><argument_list>(<argument><expr><name>__comp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>void</name></type>
<name>sort</name><parameter_list>(<parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><macro><name>sort</name><argument_list>(<argument>__first</argument>, <argument>__last</argument>, <argument>__less&lt;typename iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;()</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></function>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
