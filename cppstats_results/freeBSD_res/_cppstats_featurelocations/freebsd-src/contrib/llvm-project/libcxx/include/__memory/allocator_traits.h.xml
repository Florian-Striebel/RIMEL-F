<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/allocator_traits.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_ALLOCATOR_TRAITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_ALLOCATOR_TRAITS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/construct_at.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/pointer_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name></type>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>PROPERTY</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>template &lt;class _Tp, class = void&gt; struct NAME : false_type { }; template &lt;class _Tp&gt; struct NAME&lt;_Tp, typename __void_t&lt;typename _Tp:: PROPERTY &gt;::type&gt; : true_type { }</cpp:value></cpp:define>




<name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><parameter_list>(<parameter><decl><type><name>__has_pointer</name></type></decl></parameter>, <parameter><decl><type><name>pointer</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator>
<expr><name>class</name> <name>_RawAlloc</name> <operator>=</operator> <name>typename</name> <name><name>remove_reference</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr><operator>,</operator>
<expr><name>bool</name> <operator>=</operator> <name><name>__has_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_RawAlloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__pointer</name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_RawAlloc</name><operator>::</operator><name>pointer</name></expr>;
}</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_RawAlloc</name><operator>&gt;</operator>
struct <name><name>__pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_RawAlloc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>_Tp</name><operator>*</operator></expr>;
}</block></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><argument_list>(<argument><expr><name>__has_const_pointer</name></expr></argument>, <argument><expr><name>const_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Ptr</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator>
<expr><name>bool</name> <operator>=</operator> <name><name>__has_const_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__const_pointer</name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Alloc</name><operator>::</operator><name>const_pointer</name></expr>;
}</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Ptr</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
struct <name><name>__const_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Ptr</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>typename</name> <name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name></expr></argument>&gt;</argument_list></name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><argument_list>(<argument><expr><name>__has_void_pointer</name></expr></argument>, <argument><expr><name>void_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ptr</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator>
<expr><name>bool</name> <operator>=</operator> <name><name>__has_void_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__void_pointer</name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Alloc</name><operator>::</operator><name>void_pointer</name></expr>;
}</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ptr</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
struct <name><name>__void_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><argument_list>(<argument><expr><name>__has_const_void_pointer</name></expr></argument>, <argument><expr><name>const_void_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ptr</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator>
<expr><name>bool</name> <operator>=</operator> <name><name>__has_const_void_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__const_void_pointer</name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Alloc</name><operator>::</operator><name>const_void_pointer</name></expr>;
}</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Ptr</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
struct <name><name>__const_void_pointer</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name></expr></argument>&gt;</argument_list></name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><argument_list>(<argument><expr><name>__has_size_type</name></expr></argument>, <argument><expr><name>size_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_DiffType</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__has_size_type</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__size_type</name> <range>: <expr><name><name>make_unsigned</name><argument_list type="generic">&lt;<argument><expr><name>_DiffType</name></expr></argument>&gt;</argument_list></name> <block>{ }</block></expr></range></decl>;</decl_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_DiffType</name><operator>&gt;</operator>
struct <name><name>__size_type</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_DiffType</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Alloc</name><operator>::</operator><name>size_type</name></expr>;
}</block></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><argument_list>(<argument><expr><name>__has_alloc_traits_difference_type</name></expr></argument>, <argument><expr><name>difference_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Ptr</name></expr><operator>,</operator> <expr><name>bool</name> <operator>=</operator> <name><name>__has_alloc_traits_difference_type</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__alloc_traits_difference_type</name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name><name>pointer_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Ptr</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name></expr>;
}</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Ptr</name><operator>&gt;</operator>
struct <name><name>__alloc_traits_difference_type</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Ptr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Alloc</name><operator>::</operator><name>difference_type</name></expr>;
}</block></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><argument_list>(<argument><expr><name>__has_propagate_on_container_copy_assignment</name></expr></argument>, <argument><expr><name>propagate_on_container_copy_assignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__has_propagate_on_container_copy_assignment</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__propagate_on_container_copy_assignment</name> <range>: <expr><name>false_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
struct <name><name>__propagate_on_container_copy_assignment</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Alloc</name><operator>::</operator><name>propagate_on_container_copy_assignment</name></expr>;
}</block></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><argument_list>(<argument><expr><name>__has_propagate_on_container_move_assignment</name></expr></argument>, <argument><expr><name>propagate_on_container_move_assignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__has_propagate_on_container_move_assignment</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__propagate_on_container_move_assignment</name> <range>: <expr><name>false_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
struct <name><name>__propagate_on_container_move_assignment</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Alloc</name><operator>::</operator><name>propagate_on_container_move_assignment</name></expr>;
}</block></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><argument_list>(<argument><expr><name>__has_propagate_on_container_swap</name></expr></argument>, <argument><expr><name>propagate_on_container_swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__has_propagate_on_container_swap</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__propagate_on_container_swap</name> <range>: <expr><name>false_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
struct <name><name>__propagate_on_container_swap</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Alloc</name><operator>::</operator><name>propagate_on_container_swap</name></expr>;
}</block></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name><argument_list>(<argument><expr><name>__has_is_always_equal</name></expr></argument>, <argument><expr><name>is_always_equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__has_is_always_equal</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_always_equal</name> <range>: <expr><name><name>is_empty</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name> <block>{ }</block></expr></range></decl>;</decl_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
struct <name><name>__is_always_equal</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Alloc</name><operator>::</operator><name>is_always_equal</name></expr>;
}</block></expr>;</expr_stmt>


<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct <name>__has_rebind_other</name> <operator>:</operator> <name>false_type</name> <block>{ }</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__has_rebind_other</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>typename</name> <name><name>__void_t</name><argument_list type="generic">&lt;
<argument><expr><name>typename</name> <name>_Tp</name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>true_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Up</name></expr><operator>,</operator> <expr><name>bool</name> <operator>=</operator> <name><name>__has_rebind_other</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>__allocator_traits_rebind</name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Tp</name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name></expr>;
}</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Args</name></expr><operator>,</operator> <expr><name>class</name> <name>_Up</name><operator>&gt;</operator>
struct <name><name>__allocator_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name><name>_Alloc</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name><name>_Alloc</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name></expr>;
}</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Args</name></expr><operator>,</operator> <expr><name>class</name> <name>_Up</name><operator>&gt;</operator>
struct <name><name>__allocator_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name><name>_Alloc</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name><name>_Alloc</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>__allocator_traits_rebind_t</name> <init>= <expr><name>typename</name> <name><name>__allocator_traits_rebind</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_SizeType</name></expr></argument>, <argument><expr><name>class</name> <name>_ConstVoidPtr</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct <name>__has_allocate_hint</name> <operator>:</operator> <name>false_type</name> <block>{ }</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_SizeType</name></expr><operator>,</operator> <expr><name>class</name> <name>_ConstVoidPtr</name><operator>&gt;</operator>
struct <name>__has_allocate_hint</name><operator>&lt;</operator><name>_Alloc</name></expr><operator>,</operator> <expr><name>_SizeType</name></expr><operator>,</operator> <expr><name>_ConstVoidPtr</name></expr><operator>,</operator> <expr><call><name>decltype</name><argument_list>(
<argument><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>allocate</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_SizeType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_ConstVoidPtr</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call><operator>&gt;</operator> <operator>:</operator> <name>true_type</name> <block>{ }</block></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__has_construct_impl</name> <range>: <expr><name>false_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Args</name><operator>&gt;</operator>
struct <name>__has_construct_impl</name><operator>&lt;</operator><call><name>decltype</name><argument_list>(
<argument><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>construct</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr><operator>,</operator> <expr><name>_Alloc</name></expr><operator>,</operator> <expr><name>_Args</name><operator>...</operator><operator>&gt;</operator> <operator>:</operator> <name>true_type</name> <block>{ }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__has_construct</name> <range>: <expr><name><name>__has_construct_impl</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{ }</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <name>_Pointer</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__has_destroy</name> <range>: <expr><name>false_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <name>_Pointer</name><operator>&gt;</operator>
struct <name>__has_destroy</name><operator>&lt;</operator><name>_Alloc</name></expr><operator>,</operator> <expr><name>_Pointer</name></expr><operator>,</operator> <expr><call><name>decltype</name><argument_list>(
<argument><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>destroy</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Pointer</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call><operator>&gt;</operator> <operator>:</operator> <name>true_type</name> <block>{ }</block></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__has_max_size</name> <range>: <expr><name>false_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
struct <name>__has_max_size</name><operator>&lt;</operator><name>_Alloc</name></expr><operator>,</operator> <expr><call><name>decltype</name><argument_list>(
<argument><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>max_size</name><argument_list>()</argument_list></call></expr></argument>
)</argument_list></call><operator>&gt;</operator> <operator>:</operator> <name>true_type</name> <block>{ }</block></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__has_select_on_container_copy_construction</name> <range>: <expr><name>false_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Alloc</name><operator>&gt;</operator>
struct <name>__has_select_on_container_copy_construction</name><operator>&lt;</operator><name>_Alloc</name></expr><operator>,</operator> <expr><call><name>decltype</name><argument_list>(
<argument><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select_on_container_copy_construction</name><argument_list>()</argument_list></call></expr></argument>
)</argument_list></call><operator>&gt;</operator> <operator>:</operator> <name>true_type</name> <block>{ }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>allocator_traits</name>
<block>{
<expr><name>using</name> <name>allocator_type</name> <operator>=</operator> <name>_Alloc</name></expr>;
<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name>typename</name> <name>allocator_type</name><operator>::</operator><name>value_type</name></expr>;
<expr><name>using</name> <name>pointer</name> <operator>=</operator> <name>typename</name> <name><name>__pointer</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>allocator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>const_pointer</name> <operator>=</operator> <name>typename</name> <name><name>__const_pointer</name><argument_list type="generic">&lt;<argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>, <argument><expr><name>allocator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>void_pointer</name> <operator>=</operator> <name>typename</name> <name><name>__void_pointer</name><argument_list type="generic">&lt;<argument><expr><name>pointer</name></expr></argument>, <argument><expr><name>allocator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>const_void_pointer</name> <operator>=</operator> <name>typename</name> <name><name>__const_void_pointer</name><argument_list type="generic">&lt;<argument><expr><name>pointer</name></expr></argument>, <argument><expr><name>allocator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name>typename</name> <name><name>__alloc_traits_difference_type</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>size_type</name> <operator>=</operator> <name>typename</name> <name><name>__size_type</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>, <argument><expr><name>difference_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>propagate_on_container_copy_assignment</name> <operator>=</operator> <name>typename</name> <name><name>__propagate_on_container_copy_assignment</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>propagate_on_container_move_assignment</name> <operator>=</operator> <name>typename</name> <name><name>__propagate_on_container_move_assignment</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>propagate_on_container_swap</name> <operator>=</operator> <name>typename</name> <name><name>__propagate_on_container_swap</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>is_always_equal</name> <operator>=</operator> <name>typename</name> <name><name>__is_always_equal</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>rebind_alloc</name> <operator>=</operator> <name><name>__allocator_traits_rebind_t</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>rebind_traits</name> <operator>=</operator> <name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name><name>rebind_alloc</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name>rebind_alloc</name> <block>{
<expr><name>using</name> <name>other</name> <operator>=</operator> <name><name>__allocator_traits_rebind_t</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr>;
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct <name>rebind_traits</name> <block>{
<expr><name>using</name> <name>other</name> <operator>=</operator> <name><name>allocator_traits</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>rebind_alloc</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_NODISCARD_AFTER_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>pointer</name> <macro><name>allocate</name><argument_list>(<argument>allocator_type&amp; __a</argument>, <argument>size_type __n</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ap</name> <operator>=</operator> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator>
<name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><name><name>__has_allocate_hint</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>, <argument><expr><name>size_type</name></expr></argument>, <argument><expr><name>const_void_pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_NODISCARD_AFTER_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>pointer</name> <macro><name>allocate</name><argument_list>(<argument>allocator_type&amp; __a</argument>, <argument>size_type __n</argument>, <argument>const_void_pointer __hint</argument>)</argument_list></macro> <block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name></expr>
<return>return <expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__hint</name></expr></argument>)</argument_list></call></expr>;</return>
<name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
}</block></expr></expr_stmt>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ap</name> <operator>=</operator> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator>
<name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>__has_allocate_hint</name><argument_list type="generic">&lt;<argument><expr><name>_Ap</name></expr></argument>, <argument><expr><name>size_type</name></expr></argument>, <argument><expr><name>const_void_pointer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_NODISCARD_AFTER_CXX17</name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>pointer</name></type> <name>allocate</name><parameter_list>(<parameter><decl><type><name>allocator_type</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>size_type</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>const_void_pointer</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>__a</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>void</name></type> <name>deallocate</name><parameter_list>(<parameter><decl><type><name>allocator_type</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>pointer</name></type> <name>__p</name></decl></parameter>, <parameter><decl><type><name>size_type</name></type> <name>__n</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<expr_stmt><expr><call><name><name>__a</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator>
<name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><name><name>__has_construct</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>, <argument><expr><name>_Tp</name><modifier>*</modifier></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>void</name></type> <name>construct</name><argument_list>(<argument><expr><name>allocator_type</name><operator>&amp;</operator> <name>__a</name></expr></argument>, <argument><expr><name>_Tp</name><operator>*</operator> <name>__p</name></expr></argument>, <argument><expr><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name></type>
<name><name>__a</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator>
<name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>__has_construct</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>, <argument><expr><name>_Tp</name><modifier>*</modifier></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>void</name></type> <name>construct</name><argument_list>(<argument><expr><name>allocator_type</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Tp</name><operator>*</operator> <name>__p</name></expr></argument>, <argument><expr><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>construct_at</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__p</argument>)</argument_list></macro> <call><name>_Tp</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator>
<name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><name><name>__has_destroy</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>, <argument><expr><name>_Tp</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>allocator_type</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>_Tp</name><modifier>*</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name></type>
<name><name>__a</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr></expr_stmt>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator>
<name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>__has_destroy</name><argument_list type="generic">&lt;<argument><expr><name>allocator_type</name></expr></argument>, <argument><expr><name>_Tp</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>allocator_type</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><name>_Tp</name><modifier>*</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name>destroy_at</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>__p</name><operator>-&gt;</operator><name/></name>~<call><name>_Tp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ap</name> <operator>=</operator> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator>
<name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><name><name>__has_max_size</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Ap</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>size_type</name></type> <name>max_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>allocator_type</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<macro><name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name></macro>
<return>return <expr><call><name><name>__a</name><operator>.</operator><name>max_size</name></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt><expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name></expr></expr_stmt>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ap</name> <operator>=</operator> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator>
<name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>__has_max_size</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Ap</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>size_type</name></type> <name>max_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>allocator_type</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> _NOEXCEPT <block>{<block_content>
<return>return <expr><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>size_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>value_type</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ap</name> <operator>=</operator> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator>
<name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><name><name>__has_select_on_container_copy_construction</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Ap</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>allocator_type</name></type> <name>select_on_container_copy_construction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>allocator_type</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>__a</name><operator>.</operator><name>select_on_container_copy_construction</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ap</name> <operator>=</operator> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator>
<name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>__has_select_on_container_copy_construction</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Ap</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<specifier>static</specifier> <name>allocator_type</name></type> <name>select_on_container_copy_construction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>allocator_type</name><modifier>&amp;</modifier></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Traits</name></expr><operator>,</operator> <expr><name>class</name> <name>_Tp</name><operator>&gt;</operator>
struct <name>__rebind_alloc_helper</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>using</name> <name>type</name> <name>_LIBCPP_NODEBUG_TYPE</name> <operator>=</operator> <name>typename</name> <name>_Traits</name><operator>::</operator><name>template</name> <name><name>rebind_alloc</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>typename</name> <name>_Traits</name><operator>::</operator><name>template</name> <name><name>rebind_alloc</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>other</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_default_allocator</name> <range>: <expr><name>false_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>allocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_default_allocator</name><argument_list type="generic">&lt;<argument><expr><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <range>: <expr><name>true_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_cpp17_move_insertable</name>
<range>: <expr><name><name>is_move_constructible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Alloc</name><operator>::</operator><name>value_type</name></expr></argument>&gt;</argument_list></name>
<block>{ }</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_cpp17_move_insertable</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name><name>_EnableIf</name><argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>__is_default_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>__has_construct</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>typename</name> <name>_Alloc</name><operator>::</operator><name>value_type</name><modifier>*</modifier></expr></argument>, <argument><expr><name>typename</name> <name>_Alloc</name><operator>::</operator><name>value_type</name><operator>&amp;&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <range>: <expr><name>true_type</name> <block>{ }</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>void</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__is_cpp17_copy_insertable</name>
<range>: <expr><name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,
<argument><expr><name><name>is_copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Alloc</name><operator>::</operator><name>value_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>__is_cpp17_move_insertable</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name>
<block>{ }</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Alloc</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>__is_cpp17_copy_insertable</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name><name>_EnableIf</name><argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name><name>__is_default_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>__has_construct</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>typename</name> <name>_Alloc</name><operator>::</operator><name>value_type</name><modifier>*</modifier></expr></argument>, <argument><expr><specifier>const</specifier> <name>typename</name> <name>_Alloc</name><operator>::</operator><name>value_type</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>
&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<range>: <expr><name><name>__is_cpp17_move_insertable</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name>
<block>{ }</block></expr></range></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX</name></cpp:undef>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
