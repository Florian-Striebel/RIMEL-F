<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/string.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_STRING_H</name></cpp:macro></cpp:define>










































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:empty>#include_next &lt;string.h&gt;</cpp:empty>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CORRECT_ISO_CPP_STRING_H_PROTO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_MSVCRT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_STRING_H_CPLUSPLUS_98_CONFORMANCE_</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_STRING_H_HAS_CONST_OVERLOADS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_STRING_H_HAS_CONST_OVERLOADS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_PREFERRED_OVERLOAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C++"</literal> <block>{<block_content>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>char</name><modifier>*</modifier></type> <name>__libcpp_strchr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>strchr</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>strchr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>__libcpp_strchr</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<name>char</name><modifier>*</modifier></type> <name>strchr</name><parameter_list>( <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>__libcpp_strchr</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>char</name><modifier>*</modifier></type> <name>__libcpp_strpbrk</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s2</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>strpbrk</name><argument_list>(<argument><expr><name>__s1</name></expr></argument>, <argument><expr><name>__s2</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>strpbrk</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s2</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>__libcpp_strpbrk</name><argument_list>(<argument><expr><name>__s1</name></expr></argument>, <argument><expr><name>__s2</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<name>char</name><modifier>*</modifier></type> <name>strpbrk</name><parameter_list>( <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>__s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s2</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>__libcpp_strpbrk</name><argument_list>(<argument><expr><name>__s1</name></expr></argument>, <argument><expr><name>__s2</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>char</name><modifier>*</modifier></type> <name>__libcpp_strrchr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>strrchr</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>strrchr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>__libcpp_strrchr</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<name>char</name><modifier>*</modifier></type> <name>strrchr</name><parameter_list>( <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>__libcpp_strrchr</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name><modifier>*</modifier></type> <name>__libcpp_memchr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>memchr</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memchr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>__libcpp_memchr</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<name>void</name><modifier>*</modifier></type> <name>memchr</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>__s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>__libcpp_memchr</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>char</name><modifier>*</modifier></type> <name>__libcpp_strstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s2</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>strstr</name><argument_list>(<argument><expr><name>__s1</name></expr></argument>, <argument><expr><name>__s2</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>strstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s2</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>__libcpp_strstr</name><argument_list>(<argument><expr><name>__s1</name></expr></argument>, <argument><expr><name>__s2</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_PREFERRED_OVERLOAD</name>
<name>char</name><modifier>*</modifier></type> <name>strstr</name><parameter_list>( <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>__s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__s2</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>__libcpp_strstr</name><argument_list>(<argument><expr><name>__s1</name></expr></argument>, <argument><expr><name>__s2</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
