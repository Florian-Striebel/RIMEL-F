<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/common_iterator.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_COMMON_ITERATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_COMMON_ITERATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__debug&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/incrementable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iter_move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iter_swap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/readable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;variant&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>input_or_output_iterator</name> <name>_Iter</name></expr></argument>, <argument><expr><name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_Sent</name></expr></argument>&gt;</argument_list></name></type>
<name>requires</name> <argument_list>(<argument><expr><operator>!</operator><name><name>same_as</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>copyable</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list>
<name>class</name> <name>common_iterator</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>__proxy</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name></type> <name>common_iterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></type> <name>__value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>constexpr</name></type> <name>__proxy</name><argument_list>(<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__x</name></expr></argument>)</argument_list>
<range>: <macro><name>__value</name><argument_list>(<argument>_VSTD::move(__x)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr>)</range> const <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>__postfix_proxy</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name></type> <name>common_iterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></type> <name>__value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constexpr</name></type> <name>__postfix_proxy</name><argument_list>(<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__x</name></expr></argument>)</argument_list>
<range>: <macro><name>__value</name><argument_list>(<argument>_VSTD::forward&lt;iter_reference_t&lt;_Iter&gt;&gt;(__x)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<name>constexpr</name> <specifier>static</specifier> <name>bool</name> <name>__valid_for_iter</name> <operator>=</operator>
<name><name>constructible_from</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>move_constructible</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>__value</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>variant</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name></type> <name>__hold_</name></decl>;</decl_stmt>

<macro><name>common_iterator</name><argument_list>()</argument_list></macro> <decl_stmt><decl><type><name>requires</name></type> <name><name>default_initializable</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <init>= <expr>default</expr></init></decl>;</decl_stmt>

<macro><name>constexpr</name></macro> <macro><name>common_iterator</name><argument_list>(<argument>_Iter __i</argument>)</argument_list></macro> : <macro><name>__hold_</name><argument_list>(<argument>in_place_type&lt;_Iter&gt;</argument>, <argument>_VSTD::move(__i)</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<macro><name>constexpr</name></macro> <macro><name>common_iterator</name><argument_list>(<argument>_Sent __s</argument>)</argument_list></macro> : <macro><name>__hold_</name><argument_list>(<argument>in_place_type&lt;_Sent&gt;</argument>, <argument>_VSTD::move(__s)</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_I2</name></expr></argument>, <argument><expr><name>class</name> <name>_S2</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_I2</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_S2</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <call><name>common_iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>, <argument><expr><name>_S2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__hold_</name><argument_list>(<argument>[&amp;]() -&gt; variant&lt;_Iter</argument>, <argument>_Sent&gt; {
_LIBCPP_ASSERT(!__other.__hold_.valueless_by_exception(), <literal type="string">"Constructed from valueless iterator."</literal>);
if (__other.__hold_.index() == <literal type="number">0</literal>)
return variant&lt;_Iter</argument>, <argument>_Sent&gt;{in_place_index&lt;<literal type="number">0</literal>&gt;</argument>, <argument>_VSTD::__unchecked_get&lt;<literal type="number">0</literal>&gt;(__other.__hold_)};
return variant&lt;_Iter</argument>, <argument>_Sent&gt;{in_place_index&lt;<literal type="number">1</literal>&gt;</argument>, <argument>_VSTD::__unchecked_get&lt;<literal type="number">1</literal>&gt;(__other.__hold_)};
}()</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_I2</name></expr></argument>, <argument><expr><name>class</name> <name>_S2</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_I2</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_S2</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>assignable_from</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>_I2</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>assignable_from</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>_S2</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name>
<name>common_iterator</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>, <argument><expr><name>_S2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__other</name><operator>)</operator> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>__other</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>valueless_by_exception</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Assigned from valueless iterator."</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>auto</name> <name>__idx</name> <operator>=</operator> <call><name><name>__hold_</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>auto</name> <name>__other_idx</name> <operator>=</operator> <call><name><name>__other</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call></expr>;


<if_stmt><if>if <condition>(<expr><name>__idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>__other_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__other</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__idx</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>__other_idx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__other</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if <condition>(<expr><name>__other_idx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<decl_stmt><decl><type><name><name>__hold_</name><operator>.</operator><name>template</name></name></type> <name><name>emplace</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__other</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__other_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<decl_stmt><decl><type><name><name>__hold_</name><operator>.</operator><name>template</name></name></type> <name><name>emplace</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__other</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <macro><name>operator</name></macro><expr_stmt><expr><operator>*</operator><operator>(</operator><operator>)</operator>
<block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name><name>holds_alternative</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Cannot dereference sentinel. Common iterator not holding an iterator."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <macro><name>operator</name></macro><expr_stmt><expr><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier>
<name>requires</name> <name><name>__dereferenceable</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name><name>holds_alternative</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Cannot dereference sentinel. Common iterator not holding an iterator."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_I2</name> <operator>=</operator> <name>_Iter</name></expr></argument>&gt;</argument_list></name></type>
<name>decltype</name><argument_list>(<argument><expr><name>auto</name></expr></argument>)</argument_list> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</decl>) const
requires indirectly_readable&lt;const _I2&gt; &amp;&amp;
(requires(const _I2&amp; __i</decl_stmt>) <block>{<block_content> <expr_stmt><expr><name><name>__i</name><operator>.</operator><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt> } ||
<expr_stmt><expr><name><name>is_reference_v</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>||</operator>
<name><name>constructible_from</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></expr_stmt>)
<block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name><name>holds_alternative</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Cannot dereference sentinel. Common iterator not holding an iterator."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if constexpr <condition>(<expr><name><name>is_pointer_v</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <operator>||</operator> <macro><name>requires</name><argument_list>(<argument>const _Iter&amp; __i</argument>)</argument_list></macro></expr></condition> <block>{<block_content> <expr_stmt><expr><name><name>__i</name><operator>.</operator><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt> </block_content>}</block>) <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block> <if_stmt><if type="elseif">else if constexpr <condition>(<expr><name><name>is_reference_v</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auto</name><operator>&amp;&amp;</operator> <name>__tmp</name> <operator>=</operator> <operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__tmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>__proxy</name><argument_list>(<argument><expr><operator>*</operator><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
}

common_iterator<expr_stmt><expr><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name><name>holds_alternative</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Cannot increment sentinel. Common iterator not holding an iterator."</literal></expr></argument>)</argument_list></call></expr>;
<expr><operator>++</operator><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<macro><name>decltype</name><argument_list>(<argument>auto</argument>)</argument_list></macro> <expr_stmt><expr><name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name><name>holds_alternative</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Cannot increment sentinel. Common iterator not holding an iterator."</literal></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if constexpr <condition>(<expr><name><name>forward_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>__tmp</name> <init>= <expr><operator>*</operator><name>this</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>this</name></expr>;</expr_stmt>
<return>return <expr><name>__tmp</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if constexpr <condition>(<expr><macro><name>requires</name> <argument_list>(<argument>_Iter&amp; __i</argument>)</argument_list></macro></expr></condition> <block>{<block_content> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>__i</name><operator>++</operator></expr></expr_stmt> </block_content>}</block> <expr_stmt><expr><operator>-&gt;</operator> <name>__referenceable</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt> <expr_stmt><expr><operator>||</operator>
<operator>!</operator><name>__postfix_proxy</name><operator>::</operator><name>__valid_for_iter</name></expr></expr_stmt>) <block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__hold_</name></expr></argument>)</argument_list></call><operator>++</operator></expr>;</return>
</block_content>}</block> <if_stmt><else>else <block>{<block_content>
<decl_stmt><decl><type><name>__postfix_proxy</name></type> <name>__p</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>this</name></expr>;</expr_stmt>
<return>return <expr><name>__p</name></expr>;</return>
</block_content>}</block></else></if_stmt>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_I2</name></expr><operator>,</operator> <expr><name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_S2</name><operator>&gt;</operator>
<name>requires</name> <name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>common_iterator</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>, <argument><expr><name>_S2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>__x</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>valueless_by_exception</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>__y</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>valueless_by_exception</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"One or both common_iterators are valueless. (Cannot compare valueless iterators.)"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>auto</name> <name>__x_index</name> <operator>=</operator> <call><name><name>__x</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>auto</name> <name>__y_index</name> <operator>=</operator> <call><name><name>__y</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>__x_index</name> <operator>==</operator> <name>__y_index</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><name>__x_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_S2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__y</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__y</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_I2</name></expr><operator>,</operator> <expr><name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_S2</name><operator>&gt;</operator>
<name>requires</name> <name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>equality_comparable_with</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>common_iterator</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>, <argument><expr><name>_S2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>__x</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>valueless_by_exception</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>__y</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>valueless_by_exception</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"One or both common_iterators are valueless. (Cannot compare valueless iterators.)"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>auto</name> <name>__x_index</name> <operator>=</operator> <call><name><name>__x</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>auto</name> <name>__y_index</name> <operator>=</operator> <call><name><name>__y</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>__x_index</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>__y_index</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><name>__x_index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>__y_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__y</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>__x_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_S2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__y</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__y</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_I2</name></expr><operator>,</operator> <expr><name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_S2</name><operator>&gt;</operator>
<name>requires</name> <name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name> <name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name>common_iterator</name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>, <argument><expr><name>_S2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator> <block>{
<expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>__x</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>valueless_by_exception</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>__y</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>valueless_by_exception</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"One or both common_iterators are valueless. (Cannot subtract valueless iterators.)"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>auto</name> <name>__x_index</name> <operator>=</operator> <call><name><name>__x</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>auto</name> <name>__y_index</name> <operator>=</operator> <call><name><name>__y</name><operator>.</operator><name>__hold_</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>__x_index</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>__y_index</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><name>__x_index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>__y_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__y</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>__x_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_S2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__y</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__y</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr>;</return>
}

friend <decl_stmt><decl><type><name><name>iter_rvalue_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></type> <name>iter_move</name><argument_list>(<argument><expr><specifier>const</specifier> <name>common_iterator</name><operator>&amp;</operator> <name>__i</name></expr></argument>)</argument_list>
<name>noexcept</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>iter_move</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Iter</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>requires</name> <name><name>input_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name><name>holds_alternative</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__i</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Cannot iter_move a sentinel. Common iterator not holding an iterator."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ranges</name><operator>::</operator><call><name>iter_move</name><argument_list>( <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__i</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>indirectly_swappable</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_I2</name></expr></argument>, <argument><expr><name>class</name> <name>_S2</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>void</name></type> <name>iter_swap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>common_iterator</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name></expr></argument>, <argument><expr><name>_S2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__y</name></decl></parameter>)</parameter_list>
noexcept<parameter_list>(<parameter><decl/></parameter></parameter_list>noexcept<parameter_list>(<parameter><decl/></parameter></parameter_list>ranges::iter_swap<parameter_list>(<parameter><decl/></parameter></parameter_list>declval&lt;const _Iter&amp;&gt;<parameter_list>()</parameter_list><operator>,</operator> declval&lt;const _I2&amp;&gt;<parameter_list>()</parameter_list></function>)))
<block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name><name>holds_alternative</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Cannot swap __y with a sentinel. Common iterator (__x) not holding an iterator."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><call><name><name>holds_alternative</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__y</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Cannot swap __x with a sentinel. Common iterator (__y) not holding an iterator."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ranges</name><operator>::</operator><call><name>iter_swap</name><argument_list>( <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>__unchecked_get</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__y</name><operator>.</operator><name>__hold_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
};

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Iter</name></expr><operator>,</operator> <expr><name>class</name> <name>_Sent</name><operator>&gt;</operator>
struct <name><name>incrementable_traits</name><argument_list type="generic">&lt;<argument><expr><name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__denotes_forward_iter</name> <init>=
<expr><name>requires</name> <block>{ <expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator_category</name></expr>; }</block> <operator>&amp;&amp;</operator>
<name><name>derived_from</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator_category</name></expr></argument>, <argument><expr><name>forward_iterator_tag</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>, <argument><expr><name>class</name> <name>_Sent</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__common_iter_has_ptr_op</name> <init>= <macro><name>requires</name><argument_list>(<argument>const common_iterator&lt;_Iter</argument>, <argument>_Sent&gt;&amp; __a</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>__a</name><operator>.</operator><name>operator</name><operator>-&gt;</operator><name/></name>(</expr>)</block></expr></init></decl>;</decl_stmt>
};

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name></expr><operator>,</operator> <expr><name>class</name><operator>&gt;</operator>
struct <name>__arrow_type_or_void</name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <name>void</name></expr>;
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>, <argument><expr><name>class</name> <name>_Sent</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>__common_iter_has_ptr_op</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name>
struct <name><name>__arrow_type_or_void</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>type</name> <operator>=</operator> <call><name>decltype</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></argument>)</argument_list></call></expr>)</block></expr>;</expr_stmt>
};

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Iter</name></expr><operator>,</operator> <expr><name>class</name> <name>_Sent</name><operator>&gt;</operator>
struct <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>iterator_concept</name> <operator>=</operator> <name><name>_If</name><argument_list type="generic">&lt;<argument><expr><name><name>forward_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>forward_iterator_tag</name></expr></argument>,
<argument><expr><name>input_iterator_tag</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>iterator_category</name> <operator>=</operator> <name><name>_If</name><argument_list type="generic">&lt;<argument><expr><name><name>__denotes_forward_iter</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>forward_iterator_tag</name></expr></argument>,
<argument><expr><name>input_iterator_tag</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>pointer</name> <operator>=</operator> <name>typename</name> <name><name>__arrow_type_or_void</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>using</name> <name>value_type</name> <operator>=</operator> <name><name>iter_value_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>reference</name> <operator>=</operator> <name><name>iter_reference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr>;</expr_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
