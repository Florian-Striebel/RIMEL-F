<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__bsd_locale_fallbacks.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_BSD_LOCALE_FALLBACKS_DEFAULTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_BSD_LOCALE_FALLBACKS_DEFAULTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>decltype</name><parameter_list>(<parameter><decl><type><name>MB_CUR_MAX</name></type></decl></parameter>)</parameter_list> __libcpp_mb_cur_max_l<parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><name>MB_CUR_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>wint_t</name></type> <name>__libcpp_btowc_l</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>btowc</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>int</name></type> <name>__libcpp_wctob_l</name><parameter_list>(<parameter><decl><type><name>wint_t</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>wctob</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name></type> <name>__libcpp_wcsnrtombs_l</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>__dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>__src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__nwc</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__len</name></decl></parameter>, <parameter><decl><type><name>mbstate_t</name> <modifier>*</modifier></type><name>__ps</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>wcsnrtombs</name><argument_list>(<argument><expr><name>__dest</name></expr></argument>, <argument><expr><name>__src</name></expr></argument>, <argument><expr><name>__nwc</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>, <argument><expr><name>__ps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name></type> <name>__libcpp_wcrtomb_l</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name></type> <name>__wc</name></decl></parameter>, <parameter><decl><type><name>mbstate_t</name> <modifier>*</modifier></type><name>__ps</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>wcrtomb</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__wc</name></expr></argument>, <argument><expr><name>__ps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name></type> <name>__libcpp_mbsnrtowcs_l</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type> <name>__dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>__src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__nms</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__len</name></decl></parameter>, <parameter><decl><type><name>mbstate_t</name> <modifier>*</modifier></type><name>__ps</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>mbsnrtowcs</name><argument_list>(<argument><expr><name>__dest</name></expr></argument>, <argument><expr><name>__src</name></expr></argument>, <argument><expr><name>__nms</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>, <argument><expr><name>__ps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name></type> <name>__libcpp_mbrtowc_l</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>__pwc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>,
<parameter><decl><type><name>mbstate_t</name> <modifier>*</modifier></type><name>__ps</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>mbrtowc</name><argument_list>(<argument><expr><name>__pwc</name></expr></argument>, <argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__ps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>int</name></type> <name>__libcpp_mbtowc_l</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>__pwc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__pmb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__max</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>mbtowc</name><argument_list>(<argument><expr><name>__pwc</name></expr></argument>, <argument><expr><name>__pmb</name></expr></argument>, <argument><expr><name>__max</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name></type> <name>__libcpp_mbrlen_l</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>mbstate_t</name> <modifier>*</modifier></type><name>__ps</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>mbrlen</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__ps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>lconv</name> <modifier>*</modifier></type><name>__libcpp_localeconv_l</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>localeconv</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>size_t</name></type> <name>__libcpp_mbsrtowcs_l</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>__dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>__src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__len</name></decl></parameter>,
<parameter><decl><type><name>mbstate_t</name> <modifier>*</modifier></type><name>__ps</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>mbsrtowcs</name><argument_list>(<argument><expr><name>__dest</name></expr></argument>, <argument><expr><name>__src</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>, <argument><expr><name>__ps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier>
<name>int</name></type> <name>__libcpp_snprintf_l</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>__va</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>__va</name></expr></argument>, <argument><expr><name>__format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>__res</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__format</name></expr></argument>, <argument><expr><name>__va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>__va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier>
<name>int</name></type> <name>__libcpp_asprintf_l</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>__va</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>__va</name></expr></argument>, <argument><expr><name>__format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>__res</name> <init>= <expr><call><name>vasprintf</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__format</name></expr></argument>, <argument><expr><name>__va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>__va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier>
<name>int</name></type> <name>__libcpp_sscanf_l</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>__l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>__va</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>__va</name></expr></argument>, <argument><expr><name>__format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__libcpp_locale_guard</name></type> <name>__current</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>__res</name> <init>= <expr><call><name>vsscanf</name><argument_list>(<argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__format</name></expr></argument>, <argument><expr><name>__va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>__va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
