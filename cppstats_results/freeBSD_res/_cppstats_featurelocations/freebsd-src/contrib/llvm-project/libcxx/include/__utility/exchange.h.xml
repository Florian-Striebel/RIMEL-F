<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__utility/exchange.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___UTILITY_EXCHANGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___UTILITY_EXCHANGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/move.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name> <operator>=</operator> <name>_T1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>_T1</name></type> <name>exchange</name><argument_list>(<argument><expr><name>_T1</name><operator>&amp;</operator> <name>__obj</name></expr></argument>, <argument><expr><name>_T2</name> <operator>&amp;&amp;</operator> <name>__new_value</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>_T1</name></type> <name>__old_value</name> <init>= <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__obj</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__old_value</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
