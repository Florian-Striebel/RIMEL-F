<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/generate_n.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_GENERATE_N_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_GENERATE_N_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_OutputIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_Size</name></expr></argument>, <argument><expr><name>class</name> <name>_Generator</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>_OutputIterator</name></type>
<name>generate_n</name><parameter_list>(<parameter><decl><type><name>_OutputIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_Size</name></type> <name>__orig_n</name></decl></parameter>, <parameter><decl><type><name>_Generator</name></type> <name>__gen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <macro><name>decltype</name><argument_list>(<argument>_VSTD::__convert_to_integral(__orig_n)</argument>)</argument_list></macro> <expr_stmt><expr><name>_IntegralSize</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>_IntegralSize</name></type> <name>__n</name> <init>= <expr><name>__orig_n</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>__n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>--</operator><name>__n</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>__first</name> <operator>=</operator> <call><name>__gen</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>__first</name></expr>;</return>
</block_content>}</block></function>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
