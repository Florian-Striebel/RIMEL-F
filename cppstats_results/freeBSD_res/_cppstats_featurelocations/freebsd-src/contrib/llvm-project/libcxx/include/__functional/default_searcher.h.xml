<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/default_searcher.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_DEFAULT_SEARCHER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_DEFAULT_SEARCHER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__algorithm/search.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/operations.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>


<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_ForwardIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_BinaryPredicate</name> <operator>=</operator> <name><name>equal_to</name><argument_list type="generic">&lt;&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>default_searcher</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name></macro>
<macro><name>default_searcher</name><argument_list>(<argument>_ForwardIterator __f</argument>, <argument>_ForwardIterator __l</argument>,
<argument>_BinaryPredicate __p = _BinaryPredicate()</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>__first_</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>__last_</name><argument_list>(<argument><expr><name>__l</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>__pred_</name><argument_list>(<argument>__p</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_ForwardIterator2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_ForwardIterator2</name></expr></argument>, <argument><expr><name>_ForwardIterator2</name></expr></argument>&gt;</argument_list></name>
<macro><name>operator</name> <argument_list>()</argument_list></macro> <operator>(</operator><name>_ForwardIterator2</name> <name>__f</name><operator>,</operator> <name>_ForwardIterator2</name> <name>__l</name><operator>)</operator> <specifier>const</specifier>
<block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><macro><name>__search</name><argument_list>(<argument>__f</argument>, <argument>__l</argument>, <argument>__first_</argument>, <argument>__last_</argument>, <argument>__pred_</argument>,
<argument>typename iterator_traits&lt;_ForwardIterator&gt;::iterator_category()</argument>,
<argument>typename iterator_traits&lt;_ForwardIterator2&gt;::iterator_category()</argument>)</argument_list></macro></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__first_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_ForwardIterator</name></type> <name>__last_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_BinaryPredicate</name></type> <name>__pred_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
