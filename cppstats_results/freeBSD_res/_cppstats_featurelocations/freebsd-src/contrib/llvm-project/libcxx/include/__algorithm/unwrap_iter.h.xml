<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/unwrap_iter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_UNWRAP_ITER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_UNWRAP_ITER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/pointer_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>
















<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name><name>__is_cpp17_contiguous_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
struct <name>__unwrap_iter_impl</name> <block>{
<expr><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR</name> <name>_Iter</name>
<macro><name>__apply</name><argument_list>(<argument>_Iter __i</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<return>return <expr><name>__i</name></expr>;</return></block></expr>
}</block></expr></expr_stmt>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_DEBUG_LEVEL</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Iter</name><operator>&gt;</operator>
struct <name><name>__unwrap_iter_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR</name> <macro><name>decltype</name><argument_list>(<argument>_VSTD::__to_address(declval&lt;_Iter&gt;())</argument>)</argument_list></macro>
<macro><name>__apply</name><argument_list>(<argument>_Iter __i</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__to_address</name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
}</block></expr></expr_stmt>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Iter</name></expr></argument>, <argument><expr><name>class</name> <name>_Impl</name> <operator>=</operator> <name><name>__unwrap_iter_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name></type>
<name>decltype</name><argument_list>(<argument><expr><name>_Impl</name><operator>::</operator><call><name>__apply</name><argument_list>(<argument><expr><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<name>__unwrap_iter</name><argument_list>(<argument><expr><name>_Iter</name> <name>__i</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name>
<block>{<block_content>
<return>return <expr><name>_Impl</name><operator>::</operator><call><name>__apply</name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_OrigIter</name></expr></argument>&gt;</argument_list></name>
<name>_OrigIter</name></type> <name>__rewrap_iter</name><parameter_list>(<parameter><decl><type><name>_OrigIter</name></type></decl></parameter>, <parameter><decl><type><name>_OrigIter</name></type> <name>__result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>__result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_OrigIter</name></expr></argument>, <argument><expr><name>class</name> <name>_UnwrappedIter</name></expr></argument>&gt;</argument_list></name>
<name>_OrigIter</name></type> <name>__rewrap_iter</name><parameter_list>(<parameter><decl><type><name>_OrigIter</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_UnwrappedIter</name></type> <name>__result</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><name>__first</name> <operator>+</operator> <operator>(</operator><name>__result</name> <operator>-</operator> <name>_VSTD</name><operator>::</operator><call><name>__unwrap_iter</name><argument_list>(<argument><expr><name>__first</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
