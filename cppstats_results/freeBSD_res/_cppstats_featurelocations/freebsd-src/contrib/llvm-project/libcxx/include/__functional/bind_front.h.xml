<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/bind_front.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_BIND_FRONT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_BIND_FRONT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/perfect_forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/invoke.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>_LIBCPP_BEGIN_NAMESPACE_STD</name></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>

<struct>struct <name>__bind_front_op</name>
<block>{
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <specifier>static</specifier> <specifier>auto</specifier></type> <name>__call</name><argument_list>(<argument><expr><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument>)</argument_list>
<name>noexcept</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>invoke</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
-&gt; <name>decltype</name><argument_list>( <argument><expr><name>_VSTD</name><operator>::</operator><call><name>invoke</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content> <return>return <expr><name>_VSTD</name><operator>::</operator><call><name>invoke</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>,
<argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><name><name>conjunction</name><argument_list type="generic">&lt;<argument><expr><name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>is_move_constructible</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><modifier>...</modifier></expr></argument>,
<argument><expr><name><name>is_move_constructible</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>...</modifier></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <specifier>auto</specifier></type> <name>bind_front</name><argument_list>(<argument><expr><name>_Fn</name><operator>&amp;&amp;</operator> <name>__f</name></expr></argument>, <argument><expr><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name><name>__perfect_forward</name><argument_list type="generic">&lt;<argument><expr><name>__bind_front_op</name></expr></argument>, <argument><expr><name>_Fn</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
