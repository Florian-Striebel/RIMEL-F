<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__utility/pair.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___UTILITY_PAIR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___UTILITY_PAIR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/unwrap_ref.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/piecewise_construct.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
struct <name>__non_trivially_copyable_base</name> <block>{
<expr><name>_LIBCPP_CONSTEXPR</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<macro><name>__non_trivially_copyable_base</name><argument_list>()</argument_list></macro> <name>_NOEXCEPT</name> <block>{}</block>
<name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name> <name>_LIBCPP_INLINE_VISIBILITY</name>
<macro><name>__non_trivially_copyable_base</name><argument_list>(<argument>__non_trivially_copyable_base const&amp;</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{}</block></expr>
}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>pair</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<range>: <expr><name>private</name> <name><name>__non_trivially_copyable_base</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<typedef>typedef <type><name>_T1</name></type> <name>first_type</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <type><name>_T2</name></type> <name>second_type</name>;</typedef>

<decl_stmt><decl><type><name>_T1</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_T2</name></type> <name>second</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pair</name><argument_list>(<argument><expr><name>pair</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>pair</name><argument_list>(<argument><expr><name>pair</name><operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro>
<expr_stmt><expr><call><name>pair</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>first</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>pair</name><argument_list>(<argument><expr><name>_T1</name> <specifier>const</specifier><operator>&amp;</operator> <name>__t1</name></expr></argument>, <argument><expr><name>_T2</name> <specifier>const</specifier><operator>&amp;</operator> <name>__t2</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name>__t1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>(<argument>__t2</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_U1</name></expr></argument>, <argument><expr><name>class</name> <name>_U2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<call><name>pair</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>, <argument><expr><name>_U2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__p</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>(<argument>__p.second</argument>)</argument_list></macro> <expr><block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>pair</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><name>pair</name> <specifier>const</specifier><operator>&amp;</operator> <name>__p</name><operator>)</operator> <block>{
<expr><name>first</name> <operator>=</operator> <name><name>__p</name><operator>.</operator><name>first</name></name></expr>;
<expr><name>second</name> <operator>=</operator> <name><name>__p</name><operator>.</operator><name>second</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>_Val</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>_EnableB</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>= <expr><name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>_Val</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>_CheckArgs</name> <block>{
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name><operator>&amp;</operator><modifier>...</modifier></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>__enable_explicit_default</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>is_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <name><name>is_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>__enable_implicit_default</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>int</name><operator>&amp;</operator><modifier>...</modifier></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>__enable_implicit_default</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__is_implicitly_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <name><name>__is_implicitly_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_U1</name></expr></argument>, <argument><expr><name>class</name> <name>_U2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>__enable_explicit</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>, <argument><expr><name>_U1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>, <argument><expr><name>_U2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>, <argument><expr><name>first_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>||</operator> <operator>!</operator><name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_U2</name></expr></argument>, <argument><expr><name>second_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_U1</name></expr></argument>, <argument><expr><name>class</name> <name>_U2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>__enable_implicit</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>, <argument><expr><name>_U1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>, <argument><expr><name>_U2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>, <argument><expr><name>first_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <name><name>is_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_U2</name></expr></argument>, <argument><expr><name>second_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>_MaybeEnable</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>_CheckArgsDep</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>= <expr><name>typename</name> <name><name>conditional</name><argument_list type="generic">&lt;
<argument><expr><name>_MaybeEnable</name></expr></argument>, <argument><expr><name>_CheckArgs</name></expr></argument>, <argument><expr><name>__check_tuple_constructor_fail</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>_CheckTupleLikeConstructor</name> <block>{
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>__enable_implicit</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__tuple_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>, <argument><expr><name>pair</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>__enable_explicit</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__tuple_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>, <argument><expr><name>pair</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>__tuple_convertible</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>, <argument><expr><name>pair</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tuple</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>__enable_assign</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__tuple_assignable</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>, <argument><expr><name>pair</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tuple</name></expr></argument>&gt;</argument_list></name>
<name>using</name> <name>_CheckTLC</name></type> <name>_LIBCPP_NODEBUG_TYPE</name> <init>= <expr><name>typename</name> <name><name>conditional</name><argument_list type="generic">&lt;
<argument><expr><name><name>__tuple_like_with_size</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>decay</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>, <argument><expr><name>pair</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>_CheckTupleLikeConstructor</name></expr></argument>,
<argument><expr><name>__check_tuple_constructor_fail</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name></expr></init></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>bool</name> <name>_Dummy</name> <operator>=</operator> <name>true</name></expr><operator>,</operator> <expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name><name>_CheckArgsDep</name><argument_list type="generic">&lt;<argument><expr><name>_Dummy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>__enable_explicit_default</name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name><operator>&gt;</operator>
<name>explicit</name> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<macro><name>pair</name><argument_list>()</argument_list></macro> <call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><name><name>is_nothrow_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>_Dummy</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name><name>_CheckArgsDep</name><argument_list type="generic">&lt;<argument><expr><name>_Dummy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>__enable_implicit_default</name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR</name>
<macro><name>pair</name><argument_list>()</argument_list></macro> <call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><name><name>is_nothrow_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_default_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>_Dummy</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name><name>_CheckArgsDep</name><argument_list type="generic">&lt;<argument><expr><name>_Dummy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>__enable_explicit</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>, <argument><expr><name>_T2</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>explicit</name> <macro><name>pair</name><argument_list>(<argument>_T1 const&amp; __t1</argument>, <argument>_T2 const&amp; __t2</argument>)</argument_list></macro>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><name><name>is_nothrow_copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name>__t1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>(<argument>__t2</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>_Dummy</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name><name>_CheckArgsDep</name><argument_list type="generic">&lt;<argument><expr><name>_Dummy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>__enable_implicit</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>, <argument><expr><name>_T2</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<macro><name>pair</name><argument_list>(<argument>_T1 const&amp; __t1</argument>, <argument>_T2 const&amp; __t2</argument>)</argument_list></macro>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><name><name>is_nothrow_copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name>__t1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>(<argument>__t2</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_U1</name></expr></argument>, <argument><expr><name>class</name> <name>_U2</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name>_CheckArgs</name><operator>::</operator><name>template</name> <name><name>__enable_explicit</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>, <argument><expr><name>_U2</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>explicit</name> <macro><name>pair</name><argument_list>(<argument>_U1&amp;&amp; __u1</argument>, <argument>_U2&amp;&amp; __u2</argument>)</argument_list></macro>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><operator>(</operator><name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>, <argument><expr><name>_U1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>, <argument><expr><name>_U2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>(<argument>_VSTD::forward&lt;_U2&gt;(__u2)</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_U1</name></expr></argument>, <argument><expr><name>class</name> <name>_U2</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name>_CheckArgs</name><operator>::</operator><name>template</name> <name><name>__enable_implicit</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>, <argument><expr><name>_U2</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<macro><name>pair</name><argument_list>(<argument>_U1&amp;&amp; __u1</argument>, <argument>_U2&amp;&amp; __u2</argument>)</argument_list></macro>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><operator>(</operator><name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>, <argument><expr><name>_U1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>, <argument><expr><name>_U2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>(<argument>_VSTD::forward&lt;_U2&gt;(__u2)</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_U1</name></expr></argument>, <argument><expr><name>class</name> <name>_U2</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name>_CheckArgs</name><operator>::</operator><name>template</name> <name><name>__enable_explicit</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>, <argument><expr><name>_U2</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>explicit</name> <macro><name>pair</name><argument_list>(<argument>pair&lt;_U1</argument>, <argument>_U2&gt; const&amp; __p</argument>)</argument_list></macro>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><operator>(</operator><name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>, <argument><expr><name>_U1</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>, <argument><expr><name>_U2</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>(<argument>__p.second</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_U1</name></expr></argument>, <argument><expr><name>class</name> <name>_U2</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name>_CheckArgs</name><operator>::</operator><name>template</name> <name><name>__enable_implicit</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>, <argument><expr><name>_U2</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<macro><name>pair</name><argument_list>(<argument>pair&lt;_U1</argument>, <argument>_U2&gt; const&amp; __p</argument>)</argument_list></macro>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><operator>(</operator><name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>, <argument><expr><name>_U1</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>, <argument><expr><name>_U2</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>(<argument>__p.second</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_U1</name></expr></argument>, <argument><expr><name>class</name> <name>_U2</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name>_CheckArgs</name><operator>::</operator><name>template</name> <name><name>__enable_explicit</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>, <argument><expr><name>_U2</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>explicit</name> <macro><name>pair</name><argument_list>(<argument>pair&lt;_U1</argument>, <argument>_U2&gt;&amp;&amp;__p</argument>)</argument_list></macro>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><operator>(</operator><name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>, <argument><expr><name>_U1</name><operator>&amp;&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>, <argument><expr><name>_U2</name><operator>&amp;&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>(<argument>_VSTD::forward&lt;_U2&gt;(__p.second)</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_U1</name></expr></argument>, <argument><expr><name>class</name> <name>_U2</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name>_CheckArgs</name><operator>::</operator><name>template</name> <name><name>__enable_implicit</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>, <argument><expr><name>_U2</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<macro><name>pair</name><argument_list>(<argument>pair&lt;_U1</argument>, <argument>_U2&gt;&amp;&amp; __p</argument>)</argument_list></macro>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><operator>(</operator><name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>, <argument><expr><name>_U1</name><operator>&amp;&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>, <argument><expr><name>_U2</name><operator>&amp;&amp;</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_U1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>second</name><argument_list>(<argument>_VSTD::forward&lt;_U2&gt;(__p.second)</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tuple</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name><name>_CheckTLC</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>__enable_explicit</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>explicit</name> <call><name>pair</name><argument_list>(<argument><expr><name>_Tuple</name><operator>&amp;&amp;</operator> <name>__p</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>second</name><argument_list>(<argument>_VSTD::get&lt;<literal type="number">1</literal>&gt;(_VSTD::forward&lt;_Tuple&gt;(__p))</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tuple</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name><name>_CheckTLC</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>__enable_implicit</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<call><name>pair</name><argument_list>(<argument><expr><name>_Tuple</name><operator>&amp;&amp;</operator> <name>__p</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>first</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>second</name><argument_list>(<argument>_VSTD::get&lt;<literal type="number">1</literal>&gt;(_VSTD::forward&lt;_Tuple&gt;(__p))</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Args1</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<macro><name>pair</name><argument_list>(<argument>piecewise_construct_t __pc</argument>,
<argument>tuple&lt;_Args1...&gt; __first_args</argument>, <argument>tuple&lt;_Args2...&gt; __second_args</argument>)</argument_list></macro>
<call><name>_NOEXCEPT_</name><argument_list>(<argument><expr><operator>(</operator><name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>, <argument><expr><name>_Args1</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_nothrow_constructible</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>, <argument><expr><name>_Args2</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>pair</name><argument_list>(<argument>__pc</argument>, <argument>__first_args</argument>, <argument>__second_args</argument>,
<argument>typename __make_tuple_indices&lt;sizeof...(_Args1)&gt;::type()</argument>,
<argument>typename __make_tuple_indices&lt;sizeof...(_Args2) &gt;::type()</argument>)</argument_list></macro> <block>{}</block>

<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>pair</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><name>typename</name> <name><name>conditional</name><argument_list type="generic">&lt;
<argument><expr><name><name>is_copy_assignable</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_copy_assignable</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>pair</name></expr></argument>, <argument><expr><name>__nat</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <specifier>const</specifier><operator>&amp;</operator> <name>__p</name><operator>)</operator>
<macro><name>_NOEXCEPT_</name><argument_list>(<argument>is_nothrow_copy_assignable&lt;first_type&gt;::value &amp;&amp;
is_nothrow_copy_assignable&lt;second_type&gt;::value</argument>)</argument_list></macro>
<block>{
<expr><name>first</name> <operator>=</operator> <name><name>__p</name><operator>.</operator><name>first</name></name></expr>;
<expr><name>second</name> <operator>=</operator> <name><name>__p</name><operator>.</operator><name>second</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>pair</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>typename</name> <name><name>conditional</name><argument_list type="generic">&lt;
<argument><expr><name><name>is_move_assignable</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>is_move_assignable</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>pair</name></expr></argument>, <argument><expr><name>__nat</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;&amp;</operator> <name>__p</name><operator>)</operator>
<macro><name>_NOEXCEPT_</name><argument_list>(<argument>is_nothrow_move_assignable&lt;first_type&gt;::value &amp;&amp;
is_nothrow_move_assignable&lt;second_type&gt;::value</argument>)</argument_list></macro>
<block>{
<expr><name>first</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>first_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>second</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>second_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tuple</name></expr></argument>, <argument><expr><name><name>_EnableB</name><argument_list type="generic">&lt;
<argument><expr><name><name>_CheckTLC</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>template</name> <name><name>__enable_assign</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator></expr></argument>
&gt;</argument_list></name> <operator>=</operator> <name>false</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>pair</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>_Tuple</name><operator>&amp;&amp;</operator> <name>__p</name><operator>)</operator> <block>{
<expr><name>first</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>second</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>void</name></type>
<name>swap</name><parameter_list>(<parameter><decl><type><name>pair</name><modifier>&amp;</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> _NOEXCEPT_<parameter_list>(<parameter><decl/></parameter></parameter_list>__is_nothrow_swappable&lt;first_type&gt;::value &amp;&amp;
__is_nothrow_swappable&lt;second_type&gt;::value</function>)
<block>{<block_content>
<expr_stmt><expr><name>using</name> <name>_VSTD</name><operator>::</operator><name>swap</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name><name>__p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<label><name>private</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Args1</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args2</name></expr></argument>, <argument><expr><name>size_t</name><modifier>...</modifier> <name>_I1</name></expr></argument>, <argument><expr><name>size_t</name><modifier>...</modifier> <name>_I2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name></type>
<name>pair</name><parameter_list>(<parameter><decl><type><name>piecewise_construct_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Args1</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__first_args</name></decl></parameter>, <parameter><decl><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Args2</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__second_args</name></decl></parameter>,
<parameter><decl><type><name><name>__tuple_indices</name><argument_list type="generic">&lt;<argument><expr><name>_I1</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type></decl></parameter>, <parameter><decl><type><name><name>__tuple_indices</name><argument_list type="generic">&lt;<argument><expr><name>_I2</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_DEDUCTION_GUIDES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name></type>
<name>pair</name><argument_list>(<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>)</argument_list> -&gt; <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name>
<name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name><name>__y</name><operator>.</operator><name>first</name></name> <operator>&amp;&amp;</operator> <name><name>__x</name><operator>.</operator><name>second</name></name> <operator>==</operator> <name><name>__y</name><operator>.</operator><name>second</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name>
<name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>==</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name>
<name>operator</name><operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><name><name>__x</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>__y</name><operator>.</operator><name>first</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>__y</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>__x</name><operator>.</operator><name>first</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>__x</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>__y</name><operator>.</operator><name>second</name></name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name>
<name>operator</name><operator>&gt;</operator> <operator>(</operator><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><name>__y</name> <operator>&lt;</operator> <name>__x</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name>
<name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__x</name> <operator>&lt;</operator> <name>__y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>bool</name>
<name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__x</name><operator>,</operator> <specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__y</name><operator>)</operator>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>__y</name> <operator>&lt;</operator> <name>__x</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>typename</name> <name><name>enable_if</name>
<argument_list type="generic">&lt;
<argument><expr><name><name>__is_swappable</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<name><name>__is_swappable</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>void</name></expr></argument>
&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>swap</name><argument_list>(<argument>pair&lt;_T1</argument>, <argument>_T2&gt;&amp; __x</argument>, <argument>pair&lt;_T1</argument>, <argument>_T2&gt;&amp; __y</argument>)</argument_list></macro>
<macro><name>_NOEXCEPT_</name><argument_list>(<argument>(__is_nothrow_swappable&lt;_T1&gt;::value &amp;&amp;
__is_nothrow_swappable&lt;_T2&gt;::value)</argument>)</argument_list></macro>
<block>{
<expr><call><name><name>__x</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;
}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>__unwrap_ref_decay</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>, <argument><expr><name>typename</name> <name><name>__unwrap_ref_decay</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<macro><name>make_pair</name><argument_list>(<argument>_T1&amp;&amp; __t1</argument>, <argument>_T2&amp;&amp; __t2</argument>)</argument_list></macro>
<block>{
<return>return <expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>__unwrap_ref_decay</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>, <argument><expr><name>typename</name> <name><name>__unwrap_ref_decay</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>,<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></type>
<name>make_pair</name><parameter_list>(<parameter><decl><type><name>_T1</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>_T2</name></type> <name>__y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
struct <name>_LIBCPP_TEMPLATE_VIS</name></type> <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>size_t</name> <name>_Ip</name></expr><operator>,</operator> <expr><name>class</name> <name>_T1</name></expr><operator>,</operator> <expr><name>class</name> <name>_T2</name><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><name>_Ip</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Index out of bounds in std::tuple_element&lt;std::pair&lt;T1, T2&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_T1</name></expr><operator>,</operator> <expr><name>class</name> <name>_T2</name><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name>_T1</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_T1</name></expr><operator>,</operator> <expr><name>class</name> <name>_T2</name><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>
<block>{
<typedef>typedef <type><name>_LIBCPP_NODEBUG_TYPE</name> <name>_T2</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>size_t</name> <name>_Ip</name><operator>&gt;</operator> struct <name>__get_pair</name></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>_T1</name><operator>&amp;</operator>
<macro><name>get</name><argument_list>(<argument>pair&lt;_T1</argument>, <argument>_T2&gt;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr>;</return></block></expr>}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<specifier>const</specifier> <name>_T1</name><operator>&amp;</operator>
<macro><name>get</name><argument_list>(<argument>const pair&lt;_T1</argument>, <argument>_T2&gt;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr>;</return>}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>_T1</name><operator>&amp;&amp;</operator>
<macro><name>get</name><argument_list>(<argument>pair&lt;_T1</argument>, <argument>_T2&gt;&amp;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<specifier>const</specifier> <name>_T1</name><operator>&amp;&amp;</operator>
<macro><name>get</name><argument_list>(<argument>const pair&lt;_T1</argument>, <argument>_T2&gt;&amp;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_T1</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>_T2</name><operator>&amp;</operator>
<macro><name>get</name><argument_list>(<argument>pair&lt;_T1</argument>, <argument>_T2&gt;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><name><name>__p</name><operator>.</operator><name>second</name></name></expr>;</return></block></expr>}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<specifier>const</specifier> <name>_T2</name><operator>&amp;</operator>
<macro><name>get</name><argument_list>(<argument>const pair&lt;_T1</argument>, <argument>_T2&gt;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><name><name>__p</name><operator>.</operator><name>second</name></name></expr>;</return>}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>_T2</name><operator>&amp;&amp;</operator>
<macro><name>get</name><argument_list>(<argument>pair&lt;_T1</argument>, <argument>_T2&gt;&amp;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<specifier>const</specifier> <name>_T2</name><operator>&amp;&amp;</operator>
<macro><name>get</name><argument_list>(<argument>const pair&lt;_T1</argument>, <argument>_T2&gt;&amp;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name> <block>{<return>return <expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_T2</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>__p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>_Ip</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>typename</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;</operator>
<macro><name>get</name><argument_list>(<argument>pair&lt;_T1</argument>, <argument>_T2&gt;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>_Ip</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<specifier>const</specifier> <name>typename</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;</operator>
<macro><name>get</name><argument_list>(<argument>const pair&lt;_T1</argument>, <argument>_T2&gt;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>_Ip</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<name>typename</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;&amp;</operator>
<macro><name>get</name><argument_list>(<argument>pair&lt;_T1</argument>, <argument>_T2&gt;&amp;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>_Ip</name></expr></argument>, <argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX11</name>
<specifier>const</specifier> <name>typename</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;&amp;</operator>
<macro><name>get</name><argument_list>(<argument>const pair&lt;_T1</argument>, <argument>_T2&gt;&amp;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">11</literal></expr></cpp:if>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>_T1</name> <modifier>&amp;</modifier></type> <name>get</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>_T1</name> <specifier>const</specifier> <modifier>&amp;</modifier></type> <name>get</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T1</name></expr></argument>, <argument><expr><name>_T2</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>_T1</name> <operator>&amp;&amp;</operator> <macro><name>get</name><argument_list>(<argument>pair&lt;_T1</argument>, <argument>_T2&gt;&amp;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>_T1</name> <specifier>const</specifier> <operator>&amp;&amp;</operator> <macro><name>get</name><argument_list>(<argument>pair&lt;_T1</argument>, <argument>_T2&gt; const&amp;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>_T1</name> <modifier>&amp;</modifier></type> <name>get</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>_T1</name> <specifier>const</specifier> <modifier>&amp;</modifier></type> <name>get</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>_T2</name></expr></argument>, <argument><expr><name>_T1</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>__p</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>_T1</name> <operator>&amp;&amp;</operator> <macro><name>get</name><argument_list>(<argument>pair&lt;_T2</argument>, <argument>_T1&gt;&amp;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_T1</name></expr></argument>, <argument><expr><name>class</name> <name>_T2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>_T1</name> <specifier>const</specifier> <operator>&amp;&amp;</operator> <macro><name>get</name><argument_list>(<argument>pair&lt;_T2</argument>, <argument>_T1&gt; const&amp;&amp; __p</argument>)</argument_list></macro> <name>_NOEXCEPT</name>
<block>{
<return>return <expr><name><name>__get_pair</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
