<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/allocator_arg_t.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL___ALLOCATOR_ARG_T_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL___ALLOCATOR_ARG_T_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/uses_allocator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>_LIBCPP_BEGIN_NAMESPACE_STD</name></macro>

<struct>struct <macro><name>_LIBCPP_TEMPLATE_VIS</name></macro> <name>allocator_arg_t</name> <block>{ <function_decl><type><name>explicit</name></type> <name>allocator_arg_t</name><parameter_list>()</parameter_list> <init>= <expr/>default</init>;</function_decl> }</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_BUILDING_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>_LIBCPP_EXPORTED_FROM_ABI</name> <specifier>const</specifier> <name>allocator_arg_t</name></type> <name>allocator_arg</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>constexpr</name> <name>allocator_arg_t</name></type> <name>allocator_arg</name> <init>= <expr><call><name>allocator_arg_t</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name></expr><operator>,</operator> <expr><name>class</name> <name>_Alloc</name></expr><operator>,</operator> <expr><name>class</name> <operator>...</operator><name>_Args</name><operator>&gt;</operator>
struct <name>__uses_alloc_ctor_imp</name>
<block>{
<typedef>typedef <expr_stmt><expr><name>_LIBCPP_NODEBUG_TYPE</name> <name>typename</name> <name><name>__uncvref</name><argument_list type="generic">&lt;<argument><expr><name>_Alloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <name>_RawAlloc</name></expr>;</expr_stmt></typedef>
<specifier>static</specifier> <specifier>const</specifier> <name>bool</name> <name>__ua</name> <operator>=</operator> <name><name>uses_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_RawAlloc</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>__ic</name> <init>=
<expr><name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>allocator_arg_t</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><name>__ua</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>-</operator> <name>__ic</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Alloc</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>__uses_alloc_ctor</name>
<range>: <expr><name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>__uses_alloc_ctor_imp</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Alloc</name></expr></argument>, <argument><expr><name>_Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name>
<block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Allocator</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>__user_alloc_construct_impl</name> <argument_list>(<argument><expr><name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Tp</name> <operator>*</operator><name>__storage</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Allocator</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>_Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument> )</argument_list>
<block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>__storage</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Tp</name> <argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Allocator</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>__user_alloc_construct_impl</name> <argument_list>(<argument><expr><name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Tp</name> <operator>*</operator><name>__storage</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Allocator</name> <operator>&amp;</operator><name>__a</name></expr></argument>, <argument><expr><name>_Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument> )</argument_list>
<block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>__storage</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Tp</name> <argument_list>(<argument><expr><name>allocator_arg</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <name>_Allocator</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>void</name></type> <name>__user_alloc_construct_impl</name> <argument_list>(<argument><expr><name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Tp</name> <operator>*</operator><name>__storage</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Allocator</name> <operator>&amp;</operator><name>__a</name></expr></argument>, <argument><expr><name>_Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument> )</argument_list>
<block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>__storage</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Tp</name> <argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
