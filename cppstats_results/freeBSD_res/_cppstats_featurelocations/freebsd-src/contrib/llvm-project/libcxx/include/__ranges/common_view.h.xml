<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__ranges/common_view.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___RANGES_COMMON_VIEW_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___RANGES_COMMON_VIEW_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/common_iterator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/all.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/enable_borrowed_range.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/size.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/view_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>namespace</name></type> <name>ranges</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>view</name> <name>_View</name></expr></argument>&gt;</argument_list></name></type>
<name>requires</name> <argument_list>(<argument><expr><operator>!</operator><name><name>common_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>copyable</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list>
<name>class</name> <name>common_view</name> <range>: <expr><name>public</name> <name><name>view_interface</name><argument_list type="generic">&lt;<argument><expr><name><name>common_view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>_View</name> <name>__base_</name> <operator>=</operator> <call><name>_View</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<macro><name>common_view</name><argument_list>()</argument_list></macro> <name>requires</name> <name><name>default_initializable</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <operator>=</operator> default</expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>explicit</name> <macro><name>common_view</name><argument_list>(<argument>_View __v</argument>)</argument_list></macro> <operator>:</operator> <macro><name>__base_</name><argument_list>(<argument>_VSTD::move(__v)</argument>)</argument_list></macro> <block>{ }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_View</name> <macro><name>base</name><argument_list>()</argument_list></macro> <specifier>const</specifier><operator>&amp;</operator> <name>requires</name> <name><name>copy_constructible</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <block>{ <return>return <expr><name>__base_</name></expr>;</return> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_View</name> <call><name>base</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <block>{ <return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if constexpr <condition>(<expr><name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>requires</name> <name><name>range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name> <block>{
<if_stmt><if>if constexpr <condition>(<expr><name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>end</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if constexpr <condition>(<expr><name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>requires</name> <name><name>range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name> <block>{
<if_stmt><if>if constexpr <condition>(<expr><name><name>random_access_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ranges</name><operator>::</operator><call><name>begin</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>common_iterator</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ranges</name><operator>::</operator><call><name>end</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>size</name><argument_list>()</argument_list></macro> <name>requires</name> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name> <block>{
<return>return <expr><name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>auto</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>requires</name> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_View</name></expr></argument>&gt;</argument_list></name> <block>{
<return>return <expr><name>ranges</name><operator>::</operator><call><name>size</name><argument_list>(<argument><expr><name>__base_</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Range</name></expr></argument>&gt;</argument_list></name>
<call><name>common_view</name><argument_list>(<argument><expr><name>_Range</name><operator>&amp;&amp;</operator></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <name><name>common_view</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name><name>all_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_View</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>constexpr</name> <name>bool</name> <name><name>enable_borrowed_range</name><argument_list type="generic">&lt;<argument><expr><name><name>common_view</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>=</operator> <name><name>enable_borrowed_range</name><argument_list type="generic">&lt;<argument><expr><name>_View</name></expr></argument>&gt;</argument_list></name></expr>;

}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>_LIBCPP_END_NAMESPACE_STD</name>

<name>_LIBCPP_POP_MACROS</name></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
