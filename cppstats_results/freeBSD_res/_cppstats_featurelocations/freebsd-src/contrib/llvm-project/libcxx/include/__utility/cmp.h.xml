<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__utility/cmp.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___UTILITY_CMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___UTILITY_CMP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_CONCEPTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Up</name></expr></argument>&gt;</argument_list></name>
struct <name>_IsSameAsAny</name> <operator>:</operator> <name><name>_Or</name><argument_list type="generic">&lt;<argument><expr><name><name>_IsSame</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__is_safe_integral_cmp</name> <init>= <expr><name><name>is_integral_v</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>_IsSameAsAny</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>char</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_CHAR8_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>char8_t</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_UNICODE_CHARS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>char16_t</name></expr></argument>, <argument><expr><name>char32_t</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>wchar_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></init></decl>;</decl_stmt>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__is_safe_integral_cmp</name> <name>_Tp</name></expr></argument>, <argument><expr><name>__is_safe_integral_cmp</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name>
<name>bool</name></type> <name>cmp_equal</name><parameter_list>(<parameter><decl><type><name>_Tp</name></type> <name>__t</name></decl></parameter>, <parameter><decl><type><name>_Up</name></type> <name>__u</name></decl></parameter>)</parameter_list> noexcept
<block>{<block_content>
<if_stmt><if>if constexpr <condition>(<expr><name><name>is_signed_v</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>==</operator> <name><name>is_signed_v</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__t</name> <operator>==</operator> <name>__u</name></expr>;</return></block_content></block></if>
<if type="elseif">else if constexpr <condition>(<expr><name><name>is_signed_v</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>__t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><call><name><name>make_unsigned_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>__u</name></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>__u</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>__t</name> <operator>==</operator> <call><name><name>make_unsigned_t</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__is_safe_integral_cmp</name> <name>_Tp</name></expr></argument>, <argument><expr><name>__is_safe_integral_cmp</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name>
<name>bool</name></type> <name>cmp_not_equal</name><parameter_list>(<parameter><decl><type><name>_Tp</name></type> <name>__t</name></decl></parameter>, <parameter><decl><type><name>_Up</name></type> <name>__u</name></decl></parameter>)</parameter_list> noexcept
<block>{<block_content>
<return>return <expr><operator>!</operator><name>_VSTD</name><operator>::</operator><call><name>cmp_equal</name><argument_list>(<argument><expr><name>__t</name></expr></argument>, <argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__is_safe_integral_cmp</name> <name>_Tp</name></expr></argument>, <argument><expr><name>__is_safe_integral_cmp</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name>
<name>bool</name></type> <name>cmp_less</name><parameter_list>(<parameter><decl><type><name>_Tp</name></type> <name>__t</name></decl></parameter>, <parameter><decl><type><name>_Up</name></type> <name>__u</name></decl></parameter>)</parameter_list> noexcept
<block>{<block_content>
<if_stmt><if>if constexpr <condition>(<expr><name><name>is_signed_v</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>==</operator> <name><name>is_signed_v</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__t</name> <operator>&lt;</operator> <name>__u</name></expr>;</return></block_content></block></if>
<if type="elseif">else if constexpr <condition>(<expr><name><name>is_signed_v</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>__t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><call><name><name>make_unsigned_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>__u</name></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>__u</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>__t</name> <operator>&lt;</operator> <call><name><name>make_unsigned_t</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__is_safe_integral_cmp</name> <name>_Tp</name></expr></argument>, <argument><expr><name>__is_safe_integral_cmp</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name>
<name>bool</name></type> <name>cmp_greater</name><parameter_list>(<parameter><decl><type><name>_Tp</name></type> <name>__t</name></decl></parameter>, <parameter><decl><type><name>_Up</name></type> <name>__u</name></decl></parameter>)</parameter_list> noexcept
<block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>cmp_less</name><argument_list>(<argument><expr><name>__u</name></expr></argument>, <argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__is_safe_integral_cmp</name> <name>_Tp</name></expr></argument>, <argument><expr><name>__is_safe_integral_cmp</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name>
<name>bool</name></type> <name>cmp_less_equal</name><parameter_list>(<parameter><decl><type><name>_Tp</name></type> <name>__t</name></decl></parameter>, <parameter><decl><type><name>_Up</name></type> <name>__u</name></decl></parameter>)</parameter_list> noexcept
<block>{<block_content>
<return>return <expr><operator>!</operator><name>_VSTD</name><operator>::</operator><call><name>cmp_greater</name><argument_list>(<argument><expr><name>__t</name></expr></argument>, <argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__is_safe_integral_cmp</name> <name>_Tp</name></expr></argument>, <argument><expr><name>__is_safe_integral_cmp</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name>
<name>bool</name></type> <name>cmp_greater_equal</name><parameter_list>(<parameter><decl><type><name>_Tp</name></type> <name>__t</name></decl></parameter>, <parameter><decl><type><name>_Up</name></type> <name>__u</name></decl></parameter>)</parameter_list> noexcept
<block>{<block_content>
<return>return <expr><operator>!</operator><name>_VSTD</name><operator>::</operator><call><name>cmp_less</name><argument_list>(<argument><expr><name>__t</name></expr></argument>, <argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>__is_safe_integral_cmp</name> <name>_Tp</name></expr></argument>, <argument><expr><name>__is_safe_integral_cmp</name> <name>_Up</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name>
<name>bool</name></type> <name>in_range</name><parameter_list>(<parameter><decl><type><name>_Up</name></type> <name>__u</name></decl></parameter>)</parameter_list> noexcept
<block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>cmp_less_equal</name><argument_list>(<argument><expr><name>__u</name></expr></argument>, <argument><expr><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>_VSTD</name><operator>::</operator><call><name>cmp_greater_equal</name><argument_list>(<argument><expr><name>__u</name></expr></argument>, <argument><expr><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
