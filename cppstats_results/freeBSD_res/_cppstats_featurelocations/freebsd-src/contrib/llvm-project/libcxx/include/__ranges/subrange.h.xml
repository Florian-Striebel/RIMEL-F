<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__ranges/subrange.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___RANGES_SUBRANGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___RANGES_SUBRANGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/incrementable_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/advance.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/concepts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/dangling.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/enable_borrowed_range.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/size.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__ranges/view_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;concepts&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>


<name>namespace</name></type> <name>ranges</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_From</name></expr></argument>, <argument><expr><name>class</name> <name>_To</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__convertible_to_non_slicing</name> <init>=
<expr><name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_From</name></expr></argument>, <argument><expr><name>_To</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>is_pointer_v</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_From</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>is_pointer_v</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_To</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>__different_from</name><argument_list type="generic">&lt;<argument><expr><name><name>remove_pointer_t</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_From</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>remove_pointer_t</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_To</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__pair_like</name> <init>=
<expr><operator>!</operator><name><name>is_reference_v</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <macro><name>requires</name><argument_list>(<argument>_Tp __t</argument>)</argument_list></macro> <block>{
<expr><name>typename</name> <name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr>;
<expr><name>requires</name> <name><name>derived_from</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>integral_constant</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>typename</name> <name><name>tuple_element_t</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>remove_const_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>typename</name> <name><name>tuple_element_t</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>remove_const_t</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>_VSTD</name><operator>::</operator><macro><name>get</name></macro><operator>&lt;</operator><literal type="number">0</literal><operator>&gt;</operator><operator>(</operator><name>__t</name><operator>)</operator></expr> }</block> <operator>-&gt;</operator> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>tuple_element_t</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><block>{ <expr><name>_VSTD</name><operator>::</operator><macro><name>get</name></macro><operator>&lt;</operator><literal type="number">1</literal><operator>&gt;</operator><operator>(</operator><name>__t</name><operator>)</operator></expr> }</block> <operator>-&gt;</operator> <name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>tuple_element_t</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Pair</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter</name></expr></argument>, <argument><expr><name>class</name> <name>_Sent</name></expr></argument>&gt;</argument_list></name>
<name>concept</name></type> <name>__pair_like_convertible_from</name> <init>=
<expr><operator>!</operator><name><name>range</name><argument_list type="generic">&lt;<argument><expr><name>_Pair</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator> <name><name>__pair_like</name><argument_list type="generic">&lt;<argument><expr><name>_Pair</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>constructible_from</name><argument_list type="generic">&lt;<argument><expr><name>_Pair</name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>__convertible_to_non_slicing</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name><name>tuple_element_t</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_Pair</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name><name>tuple_element_t</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_Pair</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name> <name>_LIBCPP_ENUM_VIS</name></type> <name>subrange_kind</name> <range>: <expr><name>bool</name> <block>{ <expr><name>unsized</name></expr>, <expr><name>sized</name></expr> }</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Iter</name></expr><operator>,</operator> <expr><name>class</name> <name>_Sent</name></expr><operator>,</operator> <expr><name>bool</name><operator>&gt;</operator>
struct <name>__subrange_base</name> <block>{
<expr><specifier>static</specifier> <name>constexpr</name> <name>bool</name> <name>__store_size</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>_Iter</name> <name>__begin_</name> <operator>=</operator> <call><name>_Iter</name><argument_list>()</argument_list></call></expr>;
<expr><name>_Sent</name> <name>__end_</name> <operator>=</operator> <call><name>_Sent</name><argument_list>()</argument_list></call></expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <call><name>__subrange_base</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>__subrange_base</name><argument_list>(<argument>_Iter __iter</argument>, <argument>_Sent __sent</argument>, <argument>make_unsigned_t&lt;iter_difference_t&lt;_Iter&gt;&gt; = <literal type="number">0</literal></argument>)</argument_list></macro>
<operator>:</operator> <call><name>__begin_</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>__end_</name><argument_list>(<argument>__sent</argument>)</argument_list></macro> <expr><block>{ }</block></expr>
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Iter</name></expr><operator>,</operator> <expr><name>class</name> <name>_Sent</name><operator>&gt;</operator>
struct <name><name>__subrange_base</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>constexpr</name> <name>bool</name> <name>__store_size</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>_Iter</name> <name>__begin_</name> <operator>=</operator> <call><name>_Iter</name><argument_list>()</argument_list></call></expr>;
<expr><name>_Sent</name> <name>__end_</name> <operator>=</operator> <call><name>_Sent</name><argument_list>()</argument_list></call></expr>;
<expr><name><name>make_unsigned_t</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>__size_</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <call><name>__subrange_base</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>__subrange_base</name><argument_list>(<argument>_Iter __iter</argument>, <argument>_Sent __sent</argument>, <argument>decltype(__size_) __size</argument>)</argument_list></macro>
<operator>:</operator> <call><name>__begin_</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>__end_</name><argument_list>(<argument><expr><name>__sent</name></expr></argument>)</argument_list></call></expr>, <macro><name>__size_</name><argument_list>(<argument>__size</argument>)</argument_list></macro> <expr><block>{ }</block></expr>
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>template</name><operator>&lt;</operator><name>input_or_output_iterator</name> <name>_Iter</name></expr><operator>,</operator> <expr><name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_Sent</name> <operator>=</operator> <name>_Iter</name></expr><operator>,</operator>
<expr><name>subrange_kind</name> <name>_Kind</name> <operator>=</operator> <ternary><condition><expr><name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr>
?</condition><then> <expr><name>subrange_kind</name><operator>::</operator><name>sized</name></expr>
</then><else>: <expr><name>subrange_kind</name><operator>::</operator><name>unsized</name><operator>&gt;</operator>
<macro><name>requires</name> <argument_list>(<argument>_Kind == subrange_kind::sized || !sized_sentinel_for&lt;_Sent</argument>, <argument>_Iter&gt;</argument>)</argument_list></macro>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>subrange</name>
<operator>:</operator> <name>public</name> <name><name>view_interface</name><argument_list type="generic">&lt;<argument><expr><name><name>subrange</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_Kind</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></else></ternary></expr><operator>,</operator>
<expr><name>private</name> <name><name>__subrange_base</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_Kind</name> <operator>==</operator> <name>subrange_kind</name><operator>::</operator><name>sized</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{

<expr><name>using</name> <name>_Base</name> <operator>=</operator> <name><name>__subrange_base</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_Kind</name> <operator>==</operator> <name>subrange_kind</name><operator>::</operator><name>sized</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<macro><name>subrange</name><argument_list>()</argument_list></macro> <name>requires</name> <name><name>default_initializable</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <operator>=</operator> default</expr>;

<expr><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>subrange</name><argument_list>(<argument>__convertible_to_non_slicing&lt;_Iter&gt; auto __iter</argument>, <argument>_Sent __sent</argument>)</argument_list></macro>
<call><name>requires</name> <argument_list>(<argument><expr><operator>!</operator><name>_Base</name><operator>::</operator><name>__store_size</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>_Base</name><argument_list>(<argument>_VSTD::move(__iter)</argument>, <argument>__sent</argument>)</argument_list></macro> <block>{}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>subrange</name><argument_list>(<argument>__convertible_to_non_slicing&lt;_Iter&gt; auto __iter</argument>, <argument>_Sent __sent</argument>,
<argument>make_unsigned_t&lt;iter_difference_t&lt;_Iter&gt;&gt; __n</argument>)</argument_list></macro>
<call><name>requires</name> <argument_list>(<argument><expr><name>_Kind</name> <operator>==</operator> <name>subrange_kind</name><operator>::</operator><name>sized</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>_Base</name><argument_list>(<argument>_VSTD::move(__iter)</argument>, <argument>__sent</argument>, <argument>__n</argument>)</argument_list></macro> <block>{ }</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>__different_from</name><argument_list type="generic">&lt;<argument><expr><name>subrange</name></expr></argument>&gt;</argument_list></name> <name>_Range</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>borrowed_range</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>__convertible_to_non_slicing</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>subrange</name><argument_list>(<argument>_Range&amp;&amp; __range</argument>)</argument_list></macro>
<call><name>requires</name> <argument_list>(<argument><expr><operator>!</operator><name>_Base</name><operator>::</operator><name>__store_size</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>subrange</name><argument_list>(<argument>ranges::begin(__range)</argument>, <argument>ranges::end(__range)</argument>)</argument_list></macro> <block>{ }</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>__different_from</name><argument_list type="generic">&lt;<argument><expr><name>subrange</name></expr></argument>&gt;</argument_list></name> <name>_Range</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>borrowed_range</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>__convertible_to_non_slicing</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>subrange</name><argument_list>(<argument>_Range&amp;&amp; __range</argument>)</argument_list></macro>
<name>requires</name> <name>_Base</name><operator>::</operator><name>__store_size</name> <operator>&amp;&amp;</operator> <name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <macro><name>subrange</name><argument_list>(<argument>__range</argument>, <argument>ranges::size(__range)</argument>)</argument_list></macro> <block>{ }</block>


<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>borrowed_range</name> <name>_Range</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>__convertible_to_non_slicing</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator>
<name><name>convertible_to</name><argument_list type="generic">&lt;<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <macro><name>subrange</name><argument_list>(<argument>_Range&amp;&amp; __range</argument>, <argument>make_unsigned_t&lt;iter_difference_t&lt;_Iter&gt;&gt; __n</argument>)</argument_list></macro>
<call><name>requires</name> <argument_list>(<argument><expr><name>_Kind</name> <operator>==</operator> <name>subrange_kind</name><operator>::</operator><name>sized</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>subrange</name><argument_list>(<argument>ranges::begin(__range)</argument>, <argument>ranges::end(__range)</argument>, <argument>__n</argument>)</argument_list></macro> <block>{ }</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>__different_from</name><argument_list type="generic">&lt;<argument><expr><name>subrange</name></expr></argument>&gt;</argument_list></name> <name>_Pair</name></expr></argument>&gt;</argument_list></name>
<name>requires</name> <name><name>__pair_like_convertible_from</name><argument_list type="generic">&lt;<argument><expr><name>_Pair</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Iter</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>_Sent</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>operator</name> <macro><name>_Pair</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>_Pair</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>__begin_</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>__end_</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_Iter</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>requires</name> <name><name>copyable</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <block>{
<return>return <expr><name><name>this</name><operator>-&gt;</operator><name>__begin_</name></name></expr>;</return>
}</block>

<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>_Iter</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <macro><name>requires</name> <argument_list>(<argument>!copyable&lt;_Iter&gt;</argument>)</argument_list></macro> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>__begin_</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>_Sent</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>this</name><operator>-&gt;</operator><name>__end_</name></name></expr>;</return> }</block>

<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>this</name><operator>-&gt;</operator><name>__begin_</name></name> <operator>==</operator> <name><name>this</name><operator>-&gt;</operator><name>__end_</name></name></expr>;</return> }</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name><name>make_unsigned_t</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<macro><name>requires</name> <argument_list>(<argument>_Kind == subrange_kind::sized</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if constexpr <condition>(<expr><name>_Base</name><operator>::</operator><name>__store_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>this</name><operator>-&gt;</operator><name>__size_</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>__to_unsigned_like</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>__end_</name></name> <operator>-</operator> <name><name>this</name><operator>-&gt;</operator><name>__begin_</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block>

<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>subrange</name> <macro><name>next</name><argument_list>(<argument>iter_difference_t&lt;_Iter&gt; __n = <literal type="number">1</literal></argument>)</argument_list></macro> <specifier>const</specifier><operator>&amp;</operator>
<name>requires</name> <name><name>forward_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>auto</name> <name>__tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><call><name><name>__tmp</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>__tmp</name></expr>;</return>
}</block>

<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>subrange</name> <call><name>next</name><argument_list>(<argument><expr><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>__n</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <block>{
<expr><call><name>advance</name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<index>[<expr><index>[<expr><name>nodiscard</name></expr>]</index></expr>]</index> <name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>subrange</name> <macro><name>prev</name><argument_list>(<argument>iter_difference_t&lt;_Iter&gt; __n = <literal type="number">1</literal></argument>)</argument_list></macro> <specifier>const</specifier>
<name>requires</name> <name><name>bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>auto</name> <name>__tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><call><name><name>__tmp</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><operator>-</operator><name>__n</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>__tmp</name></expr>;</return>
}</block>

<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>subrange</name><operator>&amp;</operator> <macro><name>advance</name><argument_list>(<argument>iter_difference_t&lt;_Iter&gt; __n</argument>)</argument_list></macro> <block>{
<if_stmt><if>if constexpr <condition>(<expr><name><name>bidirectional_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ranges</name><operator>::</operator><call><name>advance</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>__begin_</name></name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if constexpr <condition>(<expr><name>_Base</name><operator>::</operator><name>__store_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>__size_</name></name> <operator>+=</operator> <name>_VSTD</name><operator>::</operator><call><name>__to_unsigned_like</name><argument_list>(<argument><expr><operator>-</operator><name>__n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
<expr_stmt/>}</block_content>
}

auto __d = __n - ranges::advance(this-&gt;__begin_</block><operator>,</operator> <expr_stmt><expr><name>__n</name></expr><operator>,</operator> <expr><name><name>this</name><operator>-&gt;</operator><name>__end_</name></name></expr></expr_stmt></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt></block></expr>
<if_stmt><if>if constexpr <condition>(<expr><name>_Base</name><operator>::</operator><name>__store_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>__size_</name></name> <operator>-=</operator> <name>_VSTD</name><operator>::</operator><call><name>__to_unsigned_like</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
};

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>input_or_output_iterator</name> <name>_Iter</name></expr></argument>, <argument><expr><name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_Sent</name></expr></argument>&gt;</argument_list></name></type>
<name>subrange</name><argument_list>(<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>)</argument_list> -&gt; <name><name>subrange</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>input_or_output_iterator</name> <name>_Iter</name></expr></argument>, <argument><expr><name><name>sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name> <name>_Sent</name></expr></argument>&gt;</argument_list></name></type>
<name>subrange</name><argument_list>(<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name><name>make_unsigned_t</name><argument_list type="generic">&lt;<argument><expr><name><name>iter_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list>
-&gt; <name><name>subrange</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>subrange_kind</name><operator>::</operator><name>sized</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>borrowed_range</name> <name>_Range</name></expr></argument>&gt;</argument_list></name></type>
<name>subrange</name><argument_list>(<argument><expr><name>_Range</name><operator>&amp;&amp;</operator></expr></argument>)</argument_list> -&gt; <name>subrange</name><name/>&lt;<name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></decl>, <decl><type ref="prev"/><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></decl>,
<argument_list>(<argument><expr><name><name>sized_range</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name> <operator>||</operator> <name><name>sized_sentinel_for</name><argument_list type="generic">&lt;<argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list>
<decl><type ref="prev"><modifier/>? <name>subrange_kind</name>::<name>sized</name> <range>: <expr><name>subrange_kind</name><operator>::</operator><name>unsized</name><operator>&gt;</operator></expr></range></type></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>borrowed_range</name> <name>_Range</name></expr></argument>&gt;</argument_list></name></type>
<name>subrange</name><argument_list>(<argument><expr><name>_Range</name><operator>&amp;&amp;</operator></expr></argument>, <argument><expr><name><name>make_unsigned_t</name><argument_list type="generic">&lt;<argument><expr><name><name>range_difference_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list>
-&gt; <name><name>subrange</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>sentinel_t</name><argument_list type="generic">&lt;<argument><expr><name>_Range</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>subrange_kind</name><operator>::</operator><name>sized</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>_Index</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter</name></expr></argument>, <argument><expr><name>class</name> <name>_Sent</name></expr></argument>, <argument><expr><name>subrange_kind</name> <name>_Kind</name></expr></argument>&gt;</argument_list></name></type>
<name>requires</name> <argument_list>(<argument><expr><name>_Index</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> auto <name>get</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>subrange</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_Kind</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>__subrange</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if constexpr <condition>(<expr><name>_Index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>__subrange</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>__subrange</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name> <name>_Index</name></expr></argument>, <argument><expr><name>class</name> <name>_Iter</name></expr></argument>, <argument><expr><name>class</name> <name>_Sent</name></expr></argument>, <argument><expr><name>subrange_kind</name> <name>_Kind</name></expr></argument>&gt;</argument_list></name></type>
<name>requires</name> <argument_list>(<argument><expr><name>_Index</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list>
<name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> auto <name>get</name><argument_list>(<argument><expr><name><name>subrange</name><argument_list type="generic">&lt;<argument><expr><name>_Iter</name></expr></argument>, <argument><expr><name>_Sent</name></expr></argument>, <argument><expr><name>_Kind</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>__subrange</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if constexpr <condition>(<expr><name>_Index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>__subrange</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>__subrange</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Ip</name></expr></argument>, <argument><expr><name>class</name> <name>_Sp</name></expr></argument>, <argument><expr><name>subrange_kind</name> <name>_Kp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>constexpr</name> <name>bool</name></type> <name><name>enable_borrowed_range</name><argument_list type="generic">&lt;<argument><expr><name><name>subrange</name><argument_list type="generic">&lt;<argument><expr><name>_Ip</name></expr></argument>, <argument><expr><name>_Sp</name></expr></argument>, <argument><expr><name>_Kp</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>range</name> <name>_Rp</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>borrowed_subrange_t</name> <init>= <expr><name><name>_If</name><argument_list type="generic">&lt;<argument><expr><name><name>borrowed_range</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>subrange</name><argument_list type="generic">&lt;<argument><expr><name><name>iterator_t</name><argument_list type="generic">&lt;<argument><expr><name>_Rp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>, <argument><expr><name>dangling</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
}

using <expr_stmt><expr><name>ranges</name><operator>::</operator><name>get</name></expr>;</expr_stmt>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
