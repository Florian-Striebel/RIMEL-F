<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/reference_wrapper.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_REFERENCE_WRAPPER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_REFERENCE_WRAPPER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/weak_result_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/addressof.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>reference_wrapper</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">17</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_BINDER_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<range>: <expr><name>public</name> <name><name>__weak_result_type</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>public</name><operator>:</operator></expr>

<typedef>typedef <type><name>_Tp</name></type> <name>type</name>;</typedef>
<name>private</name><operator>:</operator>
<name>type</name><operator>*</operator> <name>__f_</name></block></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>__fun</name><argument_list>(<argument><expr><name>_Tp</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>_NOEXCEPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>__fun</name><argument_list>(<argument><expr><name>_Tp</name><operator>&amp;&amp;</operator></expr></argument>)</argument_list> <init>= <expr><name>delete</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>public</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name></type>
<name>reference_wrapper</name><argument_list>(<argument><expr><name>type</name><operator>&amp;</operator> <name>__f</name></expr></argument>)</argument_list> <name>_NOEXCEPT</name>
<range>: <macro><name>__f_</name><argument_list>(<argument>_VSTD::addressof(__f)</argument>)</argument_list></macro> <expr><block>{}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Up</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>__is_same_uncvref</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>, <argument><expr><name>reference_wrapper</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>decltype</name><operator>(</operator><name>__fun</name><operator>(</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument> &gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<macro><name>reference_wrapper</name><argument_list>(<argument>_Up&amp;&amp; __u</argument>)</argument_list></macro> <macro><name>_NOEXCEPT_</name><argument_list>(<argument>noexcept(__fun(declval&lt;_Up&gt;()))</argument>)</argument_list></macro> <block>{
<expr><name>type</name><operator>&amp;</operator> <name>__f</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>_Up</name><operator>&amp;&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__u</name></expr></argument>)</argument_list></call></expr>;
<expr><name>__f_</name> <operator>=</operator> <name>_VSTD</name><operator>::</operator><call><name>addressof</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>operator</name> <name>type</name><operator>&amp;</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>*</operator><name>__f_</name></expr>;</return>}</block></expr></range></decl></decl_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>type</name><operator>&amp;</operator> <macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{<return>return <expr><operator>*</operator><name>__f_</name></expr>;</return>}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_ArgTypes</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>typename</name> <name><name>__invoke_of</name><argument_list type="generic">&lt;<argument><expr><name>type</name><operator>&amp;</operator></expr></argument>, <argument><expr><name>_ArgTypes</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_ArgTypes</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_ArgTypes</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return0</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name><operator>&amp;</operator> <name>__a0</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return0</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name> <specifier>const</specifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a0</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return1</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name><operator>&amp;</operator> <name>__a1</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return1</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name> <specifier>const</specifier></expr></argument>, <argument><expr><name>_A1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name><operator>&amp;</operator> <name>__a1</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return1</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name> <specifier>const</specifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a1</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return1</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name> <specifier>const</specifier></expr></argument>, <argument><expr><name>_A1</name> <specifier>const</specifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a1</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return2</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name><operator>&amp;</operator> <name>__a1</name><operator>,</operator> <name>_A2</name><operator>&amp;</operator> <name>__a2</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return2</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name> <specifier>const</specifier></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name><operator>&amp;</operator> <name>__a1</name><operator>,</operator> <name>_A2</name><operator>&amp;</operator> <name>__a2</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return2</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name> <specifier>const</specifier></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a1</name><operator>,</operator> <name>_A2</name><operator>&amp;</operator> <name>__a2</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return2</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name> <specifier>const</specifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name><operator>&amp;</operator> <name>__a1</name><operator>,</operator> <name>_A2</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a2</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return2</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name> <specifier>const</specifier></expr></argument>, <argument><expr><name>_A1</name> <specifier>const</specifier></expr></argument>, <argument><expr><name>_A2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a1</name><operator>,</operator> <name>_A2</name><operator>&amp;</operator> <name>__a2</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return2</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name> <specifier>const</specifier></expr></argument>, <argument><expr><name>_A1</name></expr></argument>, <argument><expr><name>_A2</name> <specifier>const</specifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name><operator>&amp;</operator> <name>__a1</name><operator>,</operator> <name>_A2</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a2</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return2</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name></expr></argument>, <argument><expr><name>_A1</name> <specifier>const</specifier></expr></argument>, <argument><expr><name>_A2</name> <specifier>const</specifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a1</name><operator>,</operator> <name>_A2</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a2</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_A0</name></expr></argument>, <argument><expr><name>class</name> <name>_A1</name></expr></argument>, <argument><expr><name>class</name> <name>_A2</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>typename</name> <name><name>__invoke_return2</name><argument_list type="generic">&lt;<argument><expr><name>type</name></expr></argument>, <argument><expr><name>_A0</name> <specifier>const</specifier></expr></argument>, <argument><expr><name>_A1</name> <specifier>const</specifier></expr></argument>, <argument><expr><name>_A2</name> <specifier>const</specifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>_A0</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a0</name><operator>,</operator> <name>_A1</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a1</name><operator>,</operator> <name>_A2</name> <specifier>const</specifier><operator>&amp;</operator> <name>__a2</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>__invoke</name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__a0</name></expr></argument>, <argument><expr><name>__a1</name></expr></argument>, <argument><expr><name>__a2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_DEDUCTION_GUIDES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>reference_wrapper</name><argument_list>(<argument><expr><name>_Tp</name><operator>&amp;</operator></expr></argument>)</argument_list> -&gt; <name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>ref</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>&amp;</modifier></type> <name>__t</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><call><name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>ref</name><parameter_list>(<parameter><decl><type><name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__t</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>ref</name><argument_list>(<argument><expr><call><name><name>__t</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>cref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_Tp</name><modifier>&amp;</modifier></type> <name>__t</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><call><name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>_Tp</name></expr></argument>&gt;</argument_list></name></type>
<name>cref</name><parameter_list>(<parameter><decl><type><name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>__t</name></decl></parameter>)</parameter_list> _NOEXCEPT
<block>{<block_content>
<return>return <expr><name>_VSTD</name><operator>::</operator><call><name>cref</name><argument_list>(<argument><expr><call><name><name>__t</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>ref</name><argument_list>(<argument><expr><specifier>const</specifier> <name>_Tp</name><operator>&amp;&amp;</operator></expr></argument>)</argument_list> <init>= <expr><name>delete</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>cref</name><argument_list>(<argument><expr><specifier>const</specifier> <name>_Tp</name><operator>&amp;&amp;</operator></expr></argument>)</argument_list> <init>= <expr><name>delete</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
