<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__functional/perfect_forward.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FUNCTIONAL_PERFECT_FORWARD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FUNCTIONAL_PERFECT_FORWARD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Op</name></expr></argument>, <argument><expr><name>class</name> <name>_Tuple</name></expr></argument>,
<argument><expr><name>class</name> <name>_Idxs</name> <operator>=</operator> <name>typename</name> <name><name>__make_tuple_indices</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple_size</name><argument_list type="generic">&lt;<argument><expr><name>_Tuple</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
struct <name>__perfect_forward_impl</name></expr>;</expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Op</name></expr><operator>,</operator> <expr><name>class</name><operator>...</operator> <name>_Bound</name></expr><operator>,</operator> <expr><name>size_t</name><operator>...</operator> <name>_Idxs</name><operator>&gt;</operator>
struct <name><name>__perfect_forward_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Op</name></expr></argument>, <argument><expr><name><name>__tuple_types</name><argument_list type="generic">&lt;<argument><expr><name>_Bound</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>__tuple_indices</name><argument_list type="generic">&lt;<argument><expr><name>_Idxs</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Bound</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>__bound_</name></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name> <name>auto</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument>)</argument_list></call> <operator>&amp;</operator>
<call><name>noexcept</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_Op</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Idxs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__bound_</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name><argument_list>( <argument>_Op::__call(_VSTD::get&lt;_Idxs&gt;(__bound_)..., _VSTD::forward&lt;_Args&gt;(__args)...)</argument>)</argument_list></macro>
<block>{<return>return <expr><name>_Op</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Idxs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__bound_</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return></block></expr>}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name> <name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name><operator>)</operator> <specifier>const</specifier><operator>&amp;</operator>
<call><name>noexcept</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_Op</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Idxs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__bound_</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name><argument_list>( <argument>_Op::__call(_VSTD::get&lt;_Idxs&gt;(__bound_)..., _VSTD::forward&lt;_Args&gt;(__args)...)</argument>)</argument_list></macro>
<block>{<return>return <expr><name>_Op</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Idxs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__bound_</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>, <argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name> <name>auto</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>noexcept</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_Op</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Idxs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__bound_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name><argument_list>( <argument>_Op::__call(_VSTD::get&lt;_Idxs&gt;(_VSTD::move(__bound_))...,
_VSTD::forward&lt;_Args&gt;(__args)...)</argument>)</argument_list></macro>
<block>{<return>return <expr><name>_Op</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Idxs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__bound_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>constexpr</name> <name>auto</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>_Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__args</name><operator>)</operator> <specifier>const</specifier><operator>&amp;&amp;</operator>
<call><name>noexcept</name><argument_list>(<argument><expr><call><name>noexcept</name><argument_list>(<argument><expr><name>_Op</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Idxs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__bound_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator> <macro><name>decltype</name><argument_list>( <argument>_Op::__call(_VSTD::get&lt;_Idxs&gt;(_VSTD::move(__bound_))...,
_VSTD::forward&lt;_Args&gt;(__args)...)</argument>)</argument_list></macro>
<block>{<return>return <expr><name>_Op</name><operator>::</operator><call><name>__call</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>_Idxs</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__bound_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>,
<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Fn</name> <operator>=</operator> <name>typename</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Bound</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr><operator>,</operator>
<expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><name><name>is_copy_constructible_v</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>&gt;</operator>
<name>constexpr</name> <call><name>__perfect_forward_impl</name><argument_list>(<argument><expr><name>__perfect_forward_impl</name> <specifier>const</specifier><operator>&amp;</operator> <name>__other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__bound_</name><argument_list>(<argument>__other.__bound_</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Fn</name> <operator>=</operator> <name>typename</name> <name><name>tuple_element</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>_Bound</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>,
<argument><expr><name>class</name> <operator>=</operator> <name><name>_EnableIf</name><argument_list type="generic">&lt;<argument><expr><name><name>is_move_constructible_v</name><argument_list type="generic">&lt;<argument><expr><name>_Fn</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <call><name>__perfect_forward_impl</name><argument_list>(<argument><expr><name>__perfect_forward_impl</name> <operator>&amp;&amp;</operator> <name>__other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>__bound_</name><argument_list>(<argument>_VSTD::move(__other.__bound_)</argument>)</argument_list></macro> <block>{}</block>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>_BoundArgs</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <name>constexpr</name> <call><name>__perfect_forward_impl</name><argument_list>(<argument><expr><name>_BoundArgs</name><operator>&amp;&amp;</operator><operator>...</operator> <name>__bound</name></expr></argument>)</argument_list></call> <operator>:</operator>
<macro><name>__bound_</name><argument_list>(<argument>_VSTD::forward&lt;_BoundArgs&gt;(__bound)...</argument>)</argument_list></macro> <block>{ }</block></expr></expr_stmt>
};

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Op</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>_Args</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>__perfect_forward</name> <init>=
<expr><name><name>__perfect_forward_impl</name><argument_list type="generic">&lt;<argument><expr><name>_Op</name></expr></argument>, <argument><expr><name><name>__tuple_types</name><argument_list type="generic">&lt;<argument><expr><name><name>decay_t</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
