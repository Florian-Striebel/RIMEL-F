<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__iterator/back_insert_iterator.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ITERATOR_BACK_INSERT_ITERATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ITERATOR_BACK_INSERT_ITERATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__memory/addressof.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/move.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<name>_LIBCPP_SUPPRESS_DEPRECATED_PUSH</name>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Container</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name></type> <name>back_insert_iterator</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ABI_NO_ITERATOR_BASES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<range>: <expr><name>public</name> <name><name>iterator</name><argument_list type="generic">&lt;<argument><expr><name>output_iterator_tag</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>_LIBCPP_SUPPRESS_DEPRECATED_POP</name>
<name>protected</name><operator>:</operator>
<name>_Container</name><operator>*</operator> <name>container</name></expr>;
<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <type><name>output_iterator_tag</name></type> <name>iterator_category</name>;</typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <type><name>void</name></type> <name>value_type</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>
<typedef>typedef <type><name>ptrdiff_t</name></type> <name>difference_type</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>void</name></type> <name>difference_type</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>void</name></type> <name>pointer</name>;</typedef>
<typedef>typedef <type><name>void</name></type> <name>reference</name>;</typedef>
<typedef>typedef <type><name>_Container</name></type> <name>container_type</name>;</typedef>

<macro><name>_LIBCPP_INLINE_VISIBILITY</name></macro> <macro><name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name></macro> <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>back_insert_iterator</name><argument_list>(<argument><expr><name>_Container</name><operator>&amp;</operator> <name>__x</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>container</name><argument_list>(<argument>_VSTD::addressof(__x)</argument>)</argument_list></macro> <block>{}</block>
<name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name> <name>back_insert_iterator</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>typename</name> <name>_Container</name><operator>::</operator><name>value_type</name><operator>&amp;</operator> <name>__value_</name><operator>)</operator>
<block>{<expr><call><name><name>container</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>__value_</name></expr></argument>)</argument_list></call></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name> <name>back_insert_iterator</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>typename</name> <name>_Container</name><operator>::</operator><name>value_type</name><operator>&amp;&amp;</operator> <name>__value_</name><operator>)</operator>
<block>{<expr><call><name><name>container</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>__value_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></init></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name> <name>back_insert_iterator</name><modifier>&amp;</modifier></type> <name>operator</name><modifier>*</modifier><parameter_list>()</parameter_list> <block>{<block_content><return>return <expr><operator>*</operator><name>this</name></expr>;</return></block_content>}</block></function>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name> <name>back_insert_iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{<return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name> <name>back_insert_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{<return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></expr></expr_stmt>
};

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Container</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name><name>back_insert_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Container</name></expr></argument>&gt;</argument_list></name></type>
<name>back_inserter</name><parameter_list>(<parameter><decl><type><name>_Container</name><modifier>&amp;</modifier></type> <name>__x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>back_insert_iterator</name><argument_list type="generic">&lt;<argument><expr><name>_Container</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
