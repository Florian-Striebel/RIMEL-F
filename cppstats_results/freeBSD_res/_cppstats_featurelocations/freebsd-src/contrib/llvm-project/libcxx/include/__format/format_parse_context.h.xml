<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__format/format_parse_context.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___FORMAT_FORMAT_PARSE_CONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___FORMAT_FORMAT_PARSE_CONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__format/format_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string_view&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_CONCEPTS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_BUILTIN_IS_CONSTANT_EVALUATED</name></expr></argument>)</argument_list></call></expr></cpp:if>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_CharT</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>_LIBCPP_TEMPLATE_VIS</name> <name>_LIBCPP_AVAILABILITY_FORMAT</name></type> <name>basic_format_parse_context</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>char_type</name> <init>= <expr><name>_CharT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>typename</name> <name><name>basic_string_view</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_LIBCPP_HIDE_FROM_ABI</name>
<name>constexpr</name> <name>explicit</name></type> <name>basic_format_parse_context</name><argument_list>(<argument><expr><name><name>basic_string_view</name><argument_list type="generic">&lt;<argument><expr><name>_CharT</name></expr></argument>&gt;</argument_list></name> <name>__fmt</name></expr></argument>,
<argument><expr><name>size_t</name> <name>__num_args</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> <name>noexcept</name>
<range>: <expr><call><name>__begin_</name><argument_list>(<argument><expr><call><name><name>__fmt</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl>,
<decl><type ref="prev"/><name>__end_</name><argument_list>(<argument><expr><call><name><name>__fmt</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>__indexing_</name><argument_list>(<argument><expr><name>__unknown</name></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>__next_arg_id_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>__num_args_</name><argument_list>(<argument><expr><name>__num_args</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<expr_stmt><expr><call><name>basic_format_parse_context</name><argument_list>(<argument><expr><specifier>const</specifier> <name>basic_format_parse_context</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>basic_format_parse_context</name><modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>basic_format_parse_context</name><operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{
<return>return <expr><name>__begin_</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{
<return>return <expr><name>__end_</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>void</name></type> <name>advance_to</name><parameter_list>(<parameter><decl><type><name>const_iterator</name></type> <name>__it</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__begin_</name> <operator>=</operator> <name>__it</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>size_t</name></type> <name>next_arg_id</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__indexing_</name> <operator>==</operator> <name>__manual</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_format_error</name><argument_list>(<argument><expr><literal type="string">"Using automatic argument numbering in manual "</literal>
<literal type="string">"argument numbering mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>__indexing_</name> <operator>==</operator> <name>__unknown</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__indexing_</name> <operator>=</operator> <name>__automatic</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>__next_arg_id_</name><operator>++</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>_LIBCPP_HIDE_FROM_ABI</name> <name>constexpr</name> <name>void</name></type> <name>check_arg_id</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>__id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__indexing_</name> <operator>==</operator> <name>__automatic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_format_error</name><argument_list>(<argument><expr><literal type="string">"Using manual argument numbering in automatic "</literal>
<literal type="string">"argument numbering mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>__indexing_</name> <operator>==</operator> <name>__unknown</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__indexing_</name> <operator>=</operator> <name>__manual</name></expr>;</expr_stmt></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><call><name>is_constant_evaluated</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>__id</name> <operator>&gt;=</operator> <name>__num_args_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__throw_format_error</name><argument_list>(<argument><expr><literal type="string">"Argument index outside the valid range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>iterator</name></type> <name>__begin_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iterator</name></type> <name>__end_</name></decl>;</decl_stmt>
<enum>enum <name>_Indexing</name> <block>{ <decl><name>__unknown</name></decl>, <decl><name>__manual</name></decl>, <decl><name>__automatic</name></decl> }</block>;</enum>
<decl_stmt><decl><type><name>_Indexing</name></type> <name>__indexing_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>__next_arg_id_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>__num_args_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>format_parse_context</name> <init>= <expr><name><name>basic_format_parse_context</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>wformat_parse_context</name> <init>= <expr><name><name>basic_format_parse_context</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
