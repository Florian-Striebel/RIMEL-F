<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__variant/monostate.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___VARIANT_MONOSTATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___VARIANT_MONOSTATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__functional/hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>

struct <name>_LIBCPP_TEMPLATE_VIS</name> <name>monostate</name> <block>{}</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><name>monostate</name><operator>,</operator> <name>monostate</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><name>monostate</name><operator>,</operator> <name>monostate</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><name>monostate</name><operator>,</operator> <name>monostate</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><name>monostate</name><operator>,</operator> <name>monostate</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>monostate</name><operator>,</operator> <name>monostate</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>monostate</name><operator>,</operator> <name>monostate</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>_LIBCPP_TEMPLATE_VIS</name> <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>monostate</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>argument_type</name> <operator>=</operator> <name>monostate</name></expr>;
<expr><name>using</name> <name>result_type</name> <operator>=</operator> <name>size_t</name></expr>;

<expr><specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name>
<name>result_type</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>argument_type</name><operator>&amp;</operator><operator>)</operator> <specifier>const</specifier> <name>_NOEXCEPT</name> <block>{
<return>return <expr><literal type="number">66740831</literal></expr>;</return></block></expr>
}</block></expr></expr_stmt>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
