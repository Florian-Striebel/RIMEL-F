<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__algorithm/shuffle.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___ALGORITHM_SHUFFLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___ALGORITHM_SHUFFLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__iterator/iterator_traits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__random/uniform_int_distribution.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/swap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&lt;=</operator> <literal type="number">14</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_ENABLE_CXX17_REMOVED_RANDOM_SHUFFLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_BUILDING_LIBRARY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>class</name> <name>_LIBCPP_TYPE_VIS</name></type> <name>__rs_default</name></decl>;</decl_stmt>

<function_decl><type><name>_LIBCPP_FUNC_VIS</name> <name>__rs_default</name></type> <name>__rs_get</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name> <name>_LIBCPP_TYPE_VIS</name></type> <name>__rs_default</name>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>__c_</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__rs_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>public</name>:</label>
<typedef>typedef <type><name>uint_fast32_t</name></type> <name>result_type</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>result_type</name></type> <name>_Min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>result_type</name></type> <name>_Max</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__rs_default</name><argument_list>(<argument><expr><specifier>const</specifier> <name>__rs_default</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>__rs_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result_type</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR</name> <name>result_type</name></type> <name>min</name><parameter_list>()</parameter_list> <block>{<block_content><return>return <expr><name>_Min</name></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>_LIBCPP_CONSTEXPR</name> <name>result_type</name></type> <name>max</name><parameter_list>()</parameter_list> <block>{<block_content><return>return <expr><name>_Max</name></expr>;</return></block_content>}</block></function>

<function_decl><type><name>friend</name> <name>_LIBCPP_FUNC_VIS</name> <name>__rs_default</name></type> <name>__rs_get</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>_LIBCPP_FUNC_VIS</name> <name>__rs_default</name></type> <name>__rs_get</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX14</name> <name>void</name></type>
<name>random_shuffle</name><parameter_list>(<parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__first</name></decl></parameter>, <parameter><decl><type><name>_RandomAccessIterator</name></type> <name>__last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>ptrdiff_t</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Dp</name><operator>::</operator><name>param_type</name> <name>_Pp</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__d</name> <init>= <expr><name>__last</name> <operator>-</operator> <name>__first</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__d</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_Dp</name></type> <name>__uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__rs_default</name></type> <name>__g</name> <init>= <expr><call><name>__rs_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><operator>--</operator><name>__last</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>--</operator><name>__d</name></expr>;</init> <condition><expr><name>__first</name> <operator>&lt;</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>--</operator><name>__d</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__i</name> <init>= <expr><call><name>__uid</name><argument_list>(<argument><expr><name>__g</name></expr></argument>, <argument><expr><call><name>_Pp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>!=</operator> <call><name>difference_type</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>__first</name> <operator>+</operator> <name>__i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_RandomAccessIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_RandomNumberGenerator</name></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_DEPRECATED_IN_CXX14</name> <name>void</name></type>
<name>random_shuffle</name><argument_list>(<argument><expr><name>_RandomAccessIterator</name> <name>__first</name></expr></argument>, <argument><expr><name>_RandomAccessIterator</name> <name>__last</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_CXX03_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>_RandomNumberGenerator</name><operator>&amp;&amp;</operator> <name>__rand</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>_RandomNumberGenerator</name><modifier>&amp;</modifier> <name>__rand</name></decl>)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__d</name> <init>= <expr><name>__last</name> <operator>-</operator> <name>__first</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__d</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><operator>--</operator><name>__last</name></expr>;</init> <condition><expr><name>__first</name> <operator>&lt;</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>--</operator><name>__d</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__i</name> <init>= <expr><call><name>__rand</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>!=</operator> <call><name>difference_type</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>__first</name> <operator>+</operator> <name>__i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_RandomAccessIterator</name></expr></argument>, <argument><expr><name>class</name> <name>_UniformRandomNumberGenerator</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>shuffle</name><argument_list>(<argument><expr><name>_RandomAccessIterator</name> <name>__first</name></expr></argument>, <argument><expr><name>_RandomAccessIterator</name> <name>__last</name></expr></argument>,
<argument><expr><name>_UniformRandomNumberGenerator</name><operator>&amp;&amp;</operator> <name>__g</name></expr></argument>)</argument_list>
<block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>_RandomAccessIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>ptrdiff_t</name></expr></argument>&gt;</argument_list></name></type> <name>_Dp</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>_Dp</name><operator>::</operator><name>param_type</name> <name>_Pp</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__d</name> <init>= <expr><name>__last</name> <operator>-</operator> <name>__first</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__d</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>_Dp</name></type> <name>__uid</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><operator>--</operator><name>__last</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>--</operator><name>__d</name></expr>;</init> <condition><expr><name>__first</name> <operator>&lt;</operator> <name>__last</name></expr>;</condition> <incr><expr><operator>++</operator><name>__first</name></expr><operator>,</operator> <expr><operator>(</operator><name>void</name><operator>)</operator> <operator>--</operator><name>__d</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>difference_type</name></type> <name>__i</name> <init>= <expr><call><name>__uid</name><argument_list>(<argument><expr><name>__g</name></expr></argument>, <argument><expr><call><name>_Pp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>__i</name> <operator>!=</operator> <call><name>difference_type</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><operator>*</operator><name>__first</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>__first</name> <operator>+</operator> <name>__i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
