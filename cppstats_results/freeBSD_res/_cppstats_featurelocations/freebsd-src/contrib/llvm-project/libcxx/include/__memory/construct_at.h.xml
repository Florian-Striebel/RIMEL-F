<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/libcxx/include/__memory/construct_at.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP___MEMORY_CONSTRUCT_AT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP___MEMORY_CONSTRUCT_AT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__config&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__debug&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__utility/forward.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>system_header</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_LIBCPP_PUSH_MACROS</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__undef_macros&gt;</cpp:file></cpp:include>

<name>_LIBCPP_BEGIN_NAMESPACE_STD</name>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">17</literal></expr></cpp:if>

<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>, <argument><expr><name>class</name> <modifier>...</modifier><name>_Args</name></expr></argument>, <argument><expr><name>class</name> <operator>=</operator> <name>decltype</name><operator>(</operator>
<operator>::</operator><name>new</name> <operator>(</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>void</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>)</operator> <name>_Tp</name><operator>(</operator><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><operator>(</operator><operator>)</operator><operator>...</operator><operator>)</operator>
<operator>)</operator></expr></argument>&gt;</argument_list></name>
<name>_LIBCPP_INLINE_VISIBILITY</name>
<name>constexpr</name> <name>_Tp</name><modifier>*</modifier></type> <name>construct_at</name><argument_list>(<argument><expr><name>_Tp</name><operator>*</operator> <name>__location</name></expr></argument>, <argument><expr><name>_Args</name><operator>&amp;&amp;</operator> <operator>...</operator><name>__args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__location</name></expr></argument>, <argument><expr><literal type="string">"null pointer given to construct_at"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>::</operator><macro><name>new</name> <argument_list>(<argument>(void*)__location</argument>)</argument_list></macro> <call><name>_Tp</name><argument_list>(<argument><expr><name>_VSTD</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>_Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBCPP_STD_VER</name> <operator>&gt;</operator> <literal type="number">14</literal></expr></cpp:if>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>_LIBCPP_INLINE_VISIBILITY</name> <name>_LIBCPP_CONSTEXPR_AFTER_CXX17</name>
<name>void</name></type> <name>destroy_at</name><parameter_list>(<parameter><decl><type><name>_Tp</name><modifier>*</modifier></type> <name>__loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>_LIBCPP_ASSERT</name><argument_list>(<argument><expr><name>__loc</name></expr></argument>, <argument><expr><literal type="string">"null pointer given to destroy_at"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__loc</name><operator>-&gt;</operator><name/></name>~<call><name>_Tp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><type><name>_LIBCPP_END_NAMESPACE_STD</name></type>

<name>_LIBCPP_POP_MACROS</name></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
