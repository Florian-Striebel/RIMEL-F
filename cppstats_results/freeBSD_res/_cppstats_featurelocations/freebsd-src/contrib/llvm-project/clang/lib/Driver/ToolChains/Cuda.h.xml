<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/Cuda.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_CUDA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_CUDA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Cuda.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Action.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Multilib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Tool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/ToolChain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>CudaInstallationDetector</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>Driver</name> <modifier>&amp;</modifier></type><name>D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsValid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CudaVersion</name></type> <name>Version</name> <init>= <expr><name>CudaVersion</name><operator>::</operator><name>UNKNOWN</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>DetectedVersion</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>DetectedVersionIsNotSupported</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>InstallPath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>BinPath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>LibPath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>LibDevicePath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>IncludePath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>LibDeviceMap</name></expr>;</expr_stmt>



<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>CudaArch</name><operator>::</operator><name>LAST</name></expr></argument>&gt;</argument_list></name> <name>ArchsWithBadVersion</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CudaInstallationDetector</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>HostTriple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddCudaIncludeArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>CheckCudaVersionSupportsArch</name><argument_list>(<argument><expr><name>CudaArch</name> <name>Arch</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsValid</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>CudaVersion</name> <macro><name>version</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Version</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getInstallPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>InstallPath</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getBinPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BinPath</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getIncludePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IncludePath</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getLibPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LibPath</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getLibDevicePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LibDevicePath</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getLibDeviceFile</name><argument_list>(<argument>StringRef Gpu</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>LibDeviceMap</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>Gpu</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function_decl><type><name>void</name></type> <name>WarnIfUnsupportedVersion</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tools</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>NVPTX</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Assembler</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Assembler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"NVPTX::Assembler"</literal></argument>, <argument><literal type="string">"ptxas"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Linker</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Linker</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"NVPTX::Linker"</literal></argument>, <argument><literal type="string">"fatbinary"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>OpenMPLinker</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OpenMPLinker</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"NVPTX::OpenMPLinker"</literal></argument>, <argument><literal type="string">"nvlink"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>toolchains</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>CudaToolChain</name> <range>: <expr><name>public</name> <name>ToolChain</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>CudaToolChain</name><argument_list>(<argument>const Driver &amp;D</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>const ToolChain &amp;HostTC</argument>, <argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>const Action::OffloadKind OK</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>*</operator><macro><name>getAuxTriple</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>&amp;</operator><call><name><name>HostTC</name><operator>.</operator><name>getTriple</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>std</name><operator>::</operator><name>string</name> <macro><name>getInputFilename</name><argument_list>(<argument>const InputInfo &amp;Input</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator>
<macro><name>TranslateArgs</name><argument_list>(<argument>const llvm::opt::DerivedArgList &amp;Args</argument>, <argument>StringRef BoundArch</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>addClangTargetOptions</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>DenormalMode</name> <macro><name>getDefaultDenormalModeForType</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const llvm::fltSemantics *FPType = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><name>bool</name> <macro><name>useIntegratedAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isCrossCompiling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isPICDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isPIEDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isPICDefaultForced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>SupportsProfiling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>supportsDebugInfoOption</name><argument_list>(<argument>const llvm::opt::Arg *A</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>adjustDebugInfoKind</name><argument_list>(<argument>codegenoptions::DebugInfoKind &amp;DebugInfoKind</argument>,
<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>IsMathErrnoDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>AddCudaIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>addClangWarningOptions</name><argument_list>(<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>CXXStdlibType</name> <macro><name>GetCXXStdlibType</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name>
<macro><name>AddClangSystemIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>AddClangCXXStdlibIncludeArgs</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>AddIAMCUIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>SanitizerMask</name> <macro><name>getSupportedSanitizers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>VersionTuple</name>
<macro><name>computeMSVCVersion</name><argument_list>(<argument>const Driver *D</argument>,
<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>unsigned</name> <macro><name>GetDefaultDwarfVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="number">2</literal></expr>;</return> }</block>

<name>unsigned</name> <macro><name>getMaxDwarfVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="number">2</literal></expr>;</return> }</block>

<specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>HostTC</name></expr>;
<expr><name>CudaInstallationDetector</name> <name>CudaInstallation</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>Tool</name> <operator>*</operator><macro><name>buildAssembler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Tool</name> <operator>*</operator><macro><name>buildLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<specifier>const</specifier> <name>Action</name><operator>::</operator><name>OffloadKind</name> <name>OK</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
