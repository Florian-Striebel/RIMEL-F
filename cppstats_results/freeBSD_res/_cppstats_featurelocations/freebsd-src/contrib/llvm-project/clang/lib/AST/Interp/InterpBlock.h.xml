<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/InterpBlock.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_BLOCK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_BLOCK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Descriptor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ComparisonCategories.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeadBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InterpState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<enum_decl>enum <name>PrimType</name> : <type><name>unsigned</name></type>;</enum_decl>




<decl_stmt><decl><type><name>class</name></type> <name>Block</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>Block</name><argument_list>(<argument>const llvm::Optional&lt;unsigned&gt; &amp;DeclID</argument>, <argument>Descriptor *Desc</argument>,
<argument>bool IsStatic = false</argument>, <argument>bool IsExtern = false</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>DeclID</name><argument_list>(<argument><expr><name>DeclID</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsStatic</name><argument_list>(<argument><expr><name>IsStatic</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsExtern</name><argument_list>(<argument><expr><name>IsExtern</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Desc</name><argument_list>(<argument>Desc</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>Block</name><argument_list>(<argument>Descriptor *Desc</argument>, <argument>bool IsStatic = false</argument>, <argument>bool IsExtern = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>DeclID</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsStatic</name><argument_list>(<argument><expr><name>IsStatic</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsExtern</name><argument_list>(<argument><expr><name>IsExtern</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Desc</name><argument_list>(<argument>Desc</argument>)</argument_list></macro> <expr><block>{}</block>


<name>Descriptor</name> <operator>*</operator><macro><name>getDescriptor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Desc</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasPointers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Pointers</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isExtern</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsExtern</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isStatic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsStatic</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isTemporary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Desc</name><operator>-&gt;</operator><name>IsTemporary</name></name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>InterpSize</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Desc</name><operator>-&gt;</operator><name>getAllocSize</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getDeclID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DeclID</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>char</name> <modifier>*</modifier></type><name>data</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <modifier>&amp;</modifier></type><name>deref</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><name>void</name></type> <name>invokeCtor</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>memset</name><argument_list>(<argument><expr><call><name>data</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Desc</name><operator>-&gt;</operator><name>CtorFn</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Desc</name><operator>-&gt;</operator><name>CtorFn</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>data</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Desc</name><operator>-&gt;</operator><name>IsConst</name></name></expr></argument>, <argument><expr><name><name>Desc</name><operator>-&gt;</operator><name>IsMutable</name></name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>Desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DeadBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>InterpState</name></decl>;</decl_stmt>

<macro><name>Block</name><argument_list>(<argument>Descriptor *Desc</argument>, <argument>bool IsExtern</argument>, <argument>bool IsStatic</argument>, <argument>bool IsDead</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>IsStatic</name><argument_list>(<argument><expr><name>IsStatic</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsExtern</name><argument_list>(<argument><expr><name>IsExtern</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsDead</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Desc</name><argument_list>(<argument>Desc</argument>)</argument_list></macro> <expr><block>{}</block>


<name>void</name> <call><name>cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>addPointer</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>removePointer</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>movePointer</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>From</name></decl></parameter>, <parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>To</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>Pointers</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>DeclID</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsStatic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsExtern</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsDead</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Descriptor</name> <modifier>*</modifier></type><name>Desc</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>DeadBlock</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>DeadBlock</name><argument_list>(<argument><expr><name>DeadBlock</name> <operator>*</operator><operator>&amp;</operator><name>Root</name></expr></argument>, <argument><expr><name>Block</name> <operator>*</operator><name>Blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function><type><name>char</name> <modifier>*</modifier></type><name>data</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>B</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>InterpState</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>free</name><parameter_list>()</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>DeadBlock</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DeadBlock</name> <modifier>*</modifier></type><name>Prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DeadBlock</name> <modifier>*</modifier></type><name>Next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Block</name></type> <name>B</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
