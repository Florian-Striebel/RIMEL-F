<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/__clang_hip_runtime_wrapper.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_HIP_RUNTIME_WRAPPER_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_HIP_RUNTIME_WRAPPER_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__HIP__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__host__</name></cpp:macro> <cpp:value>__attribute__((host))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__device__</name></cpp:macro> <cpp:value>__attribute__((device))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__global__</name></cpp:macro> <cpp:value>__attribute__((global))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__shared__</name></cpp:macro> <cpp:value>__attribute__((shared))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__constant__</name></cpp:macro> <cpp:value>__attribute__((constant))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__managed__</name></cpp:macro> <cpp:value>__attribute__((managed))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__cplusplus</name> <operator>&lt;</operator> <literal type="number">201103L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nullptr</name></cpp:macro> <cpp:value>NULL;</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<macro><name>__attribute__</name><argument_list>(<argument>(__visibility__(<literal type="string">"default"</literal>))</argument>)</argument_list></macro>
<macro><name>__attribute__</name><argument_list>(<argument>(weak)</argument>)</argument_list></macro>
<macro><name>__attribute__</name><argument_list>(<argument>(noreturn)</argument>)</argument_list></macro>
<function><type><name>__device__</name> <name>void</name></type> <name>__cxa_pure_virtual</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_trap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<macro><name>__attribute__</name><argument_list>(<argument>(__visibility__(<literal type="string">"default"</literal>))</argument>)</argument_list></macro>
<macro><name>__attribute__</name><argument_list>(<argument>(weak)</argument>)</argument_list></macro>
<macro><name>__attribute__</name><argument_list>(<argument>(noreturn)</argument>)</argument_list></macro>
<function><type><name>__device__</name> <name>void</name></type> <name>__cxa_deleted_virtual</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_trap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HIPCC_RTC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>__SIZE_TYPE__</name></type> <name>size_t</name>;</typedef>




<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"NULL"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"uint32_t"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"uint64_t"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"CHAR_BIT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"INT_MAX"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>(void *)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint32_t</name></cpp:macro> <cpp:value>__UINT32_TYPE__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint64_t</name></cpp:macro> <cpp:value>__UINT64_TYPE__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_BIT</name></cpp:macro> <cpp:value>__CHAR_BIT__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_MAX</name></cpp:macro> <cpp:value>__INTMAX_MAX__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>__SIZE_TYPE__</name></type> <name>__hip_size_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__HIP_ENABLE_DEVICE_MALLOC__</name></expr></cpp:if>
<function_decl><type><name>__device__</name> <name>void</name> <modifier>*</modifier></type><name>__hip_malloc</name><parameter_list>(<parameter><decl><type><name>__hip_size_t</name></type> <name>__size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>void</name> <modifier>*</modifier></type><name>__hip_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>__attribute__</name><argument_list>(<argument>(weak)</argument>)</argument_list></macro> <function><type><specifier>inline</specifier> <name>__device__</name> <name>void</name> <modifier>*</modifier></type><name>malloc</name><parameter_list>(<parameter><decl><type><name>__hip_size_t</name></type> <name>__size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__hip_malloc</name><argument_list>(<argument><expr><name>__size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<macro><name>__attribute__</name><argument_list>(<argument>(weak)</argument>)</argument_list></macro> <function><type><specifier>inline</specifier> <name>__device__</name> <name>void</name> <modifier>*</modifier></type><name>free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__hip_free</name><argument_list>(<argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>__attribute__</name><argument_list>(<argument>(weak)</argument>)</argument_list></macro> <function><type><specifier>inline</specifier> <name>__device__</name> <name>void</name> <modifier>*</modifier></type><name>malloc</name><parameter_list>(<parameter><decl><type><name>__hip_size_t</name></type> <name>__size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_trap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<macro><name>__attribute__</name><argument_list>(<argument>(weak)</argument>)</argument_list></macro> <function><type><specifier>inline</specifier> <name>__device__</name> <name>void</name> <modifier>*</modifier></type><name>free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_trap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_hip_libdevice_declares.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_hip_math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HIPCC_RTC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_hip_cmath.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_math_forward_declares.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_hip_cmath.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_complex_builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;new&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_HIP_RUNTIME_WRAPPER_INCLUDED__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HIPCC_RTC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"NULL"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"uint32_t"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"uint64_t"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"CHAR_BIT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"INT_MAX"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
