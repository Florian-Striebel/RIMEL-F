<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/float.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_FLOAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_FLOAT_H</name></cpp:macro></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>__STDC_HOSTED__</name> <operator>&amp;&amp;</operator> <call><name>__has_include_next</name><argument_list>(<argument><expr><operator>&lt;</operator><name><name>float</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FLOAT_H_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:empty>#include_next &lt;float.h&gt;</cpp:empty>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_EVAL_METHOD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_ROUNDS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_RADIX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_MANT_DIG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_MANT_DIG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_MANT_DIG</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STRICT_ANSI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DECIMAL_DIG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_DIG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_DIG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_DIG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_MIN_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_MIN_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_MIN_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_MIN_10_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_MIN_10_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_MIN_10_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_MAX_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_MAX_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_MAX_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_MAX_10_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_MAX_10_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_MAX_10_EXP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_MAX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_MAX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_MAX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_EPSILON</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_EPSILON</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_EPSILON</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_MIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_MIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_MIN</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STRICT_ANSI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201703L</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_TRUE_MIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_TRUE_MIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_TRUE_MIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_DECIMAL_DIG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_DECIMAL_DIG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_DECIMAL_DIG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLT_HAS_SUBNORM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_HAS_SUBNORM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LDBL_HAS_SUBNORM</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_EVAL_METHOD</name></cpp:macro> <cpp:value>__FLT_EVAL_METHOD__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_ROUNDS</name></cpp:macro> <cpp:value>(__builtin_flt_rounds())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_RADIX</name></cpp:macro> <cpp:value>__FLT_RADIX__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MANT_DIG</name></cpp:macro> <cpp:value>__FLT_MANT_DIG__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MANT_DIG</name></cpp:macro> <cpp:value>__DBL_MANT_DIG__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_MANT_DIG</name></cpp:macro> <cpp:value>__LDBL_MANT_DIG__</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STRICT_ANSI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECIMAL_DIG</name></cpp:macro> <cpp:value>__DECIMAL_DIG__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_DIG</name></cpp:macro> <cpp:value>__FLT_DIG__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_DIG</name></cpp:macro> <cpp:value>__DBL_DIG__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_DIG</name></cpp:macro> <cpp:value>__LDBL_DIG__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MIN_EXP</name></cpp:macro> <cpp:value>__FLT_MIN_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MIN_EXP</name></cpp:macro> <cpp:value>__DBL_MIN_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_MIN_EXP</name></cpp:macro> <cpp:value>__LDBL_MIN_EXP__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MIN_10_EXP</name></cpp:macro> <cpp:value>__FLT_MIN_10_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MIN_10_EXP</name></cpp:macro> <cpp:value>__DBL_MIN_10_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_MIN_10_EXP</name></cpp:macro> <cpp:value>__LDBL_MIN_10_EXP__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MAX_EXP</name></cpp:macro> <cpp:value>__FLT_MAX_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_EXP</name></cpp:macro> <cpp:value>__DBL_MAX_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_MAX_EXP</name></cpp:macro> <cpp:value>__LDBL_MAX_EXP__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MAX_10_EXP</name></cpp:macro> <cpp:value>__FLT_MAX_10_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_10_EXP</name></cpp:macro> <cpp:value>__DBL_MAX_10_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_MAX_10_EXP</name></cpp:macro> <cpp:value>__LDBL_MAX_10_EXP__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MAX</name></cpp:macro> <cpp:value>__FLT_MAX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX</name></cpp:macro> <cpp:value>__DBL_MAX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_MAX</name></cpp:macro> <cpp:value>__LDBL_MAX__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_EPSILON</name></cpp:macro> <cpp:value>__FLT_EPSILON__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_EPSILON</name></cpp:macro> <cpp:value>__DBL_EPSILON__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_EPSILON</name></cpp:macro> <cpp:value>__LDBL_EPSILON__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MIN</name></cpp:macro> <cpp:value>__FLT_MIN__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MIN</name></cpp:macro> <cpp:value>__DBL_MIN__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_MIN</name></cpp:macro> <cpp:value>__LDBL_MIN__</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STRICT_ANSI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201703L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_TRUE_MIN</name></cpp:macro> <cpp:value>__FLT_DENORM_MIN__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_TRUE_MIN</name></cpp:macro> <cpp:value>__DBL_DENORM_MIN__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_TRUE_MIN</name></cpp:macro> <cpp:value>__LDBL_DENORM_MIN__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_DECIMAL_DIG</name></cpp:macro> <cpp:value>__FLT_DECIMAL_DIG__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_DECIMAL_DIG</name></cpp:macro> <cpp:value>__DBL_DECIMAL_DIG__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_DECIMAL_DIG</name></cpp:macro> <cpp:value>__LDBL_DECIMAL_DIG__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_HAS_SUBNORM</name></cpp:macro> <cpp:value>__FLT_HAS_DENORM__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_HAS_SUBNORM</name></cpp:macro> <cpp:value>__DBL_HAS_DENORM__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDBL_HAS_SUBNORM</name></cpp:macro> <cpp:value>__LDBL_HAS_DENORM__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_WANT_IEC_60559_TYPES_EXT__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_MANT_DIG</name></cpp:macro> <cpp:value>__FLT16_MANT_DIG__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_DECIMAL_DIG</name></cpp:macro> <cpp:value>__FLT16_DECIMAL_DIG__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_DIG</name></cpp:macro> <cpp:value>__FLT16_DIG__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_MIN_EXP</name></cpp:macro> <cpp:value>__FLT16_MIN_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_MIN_10_EXP</name></cpp:macro> <cpp:value>__FLT16_MIN_10_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_MAX_EXP</name></cpp:macro> <cpp:value>__FLT16_MAX_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_MAX_10_EXP</name></cpp:macro> <cpp:value>__FLT16_MAX_10_EXP__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_MAX</name></cpp:macro> <cpp:value>__FLT16_MAX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_EPSILON</name></cpp:macro> <cpp:value>__FLT16_EPSILON__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_MIN</name></cpp:macro> <cpp:value>__FLT16_MIN__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT16_TRUE_MIN</name></cpp:macro> <cpp:value>__FLT16_TRUE_MIN__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
