<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/Address.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_ADDRESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_ADDRESS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>Address</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>Pointer</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CharUnits</name></type> <name>Alignment</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>Address</name><argument_list>(<argument>llvm::Value *pointer</argument>, <argument>CharUnits alignment</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Pointer</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Alignment</name><argument_list>(<argument>alignment</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><call><name><name>alignment</name><operator>.</operator><name>isZero</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>pointer</name> <operator>==</operator> <name>nullptr</name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"creating valid address with invalid alignment"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <name>Address</name> <macro><name>invalid</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>Address</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><call><name>CharUnits</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Pointer</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Pointer</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>PointerType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getPointer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>getElementType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getType</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getElementType</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getAddressSpace</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getType</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getAddressSpace</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getPointer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>CharUnits</name> <macro><name>getAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Alignment</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ConstantAddress</name> <range>: <expr><name>public</name> <name>Address</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ConstantAddress</name><argument_list>(<argument>llvm::Constant *pointer</argument>, <argument>CharUnits alignment</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Address</name><argument_list>(<argument>pointer</argument>, <argument>alignment</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>ConstantAddress</name> <macro><name>invalid</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>ConstantAddress</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><call><name>CharUnits</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>getPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Address</name><operator>::</operator><call><name>getPointer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>ConstantAddress</name> <macro><name>getBitCast</name><argument_list>(<argument>llvm::Type *ty</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>ConstantAddress</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>ConstantExpr</name><operator>::</operator><call><name>getBitCast</name><argument_list>(<argument><expr><call><name>getPointer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getAlignment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>ConstantAddress</name> <macro><name>getElementBitCast</name><argument_list>(<argument>llvm::Type *ty</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getBitCast</name><argument_list>(<argument><expr><call><name><name>ty</name><operator>-&gt;</operator><name>getPointerTo</name></name><argument_list>(<argument><expr><call><name>getAddressSpace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isaImpl</name><argument_list>(<argument>Address addr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>ConstantAddress</name> <macro><name>castImpl</name><argument_list>(<argument>Address addr</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ConstantAddress</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>U</name></expr></argument>&gt;</argument_list></name> <specifier>inline</specifier> <name>U</name> <macro><name>cast</name><argument_list>(<argument>CodeGen::Address addr</argument>)</argument_list></macro> <block>{
<return>return <expr><name>U</name><operator>::</operator><call><name>castImpl</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>U</name></expr></argument>&gt;</argument_list></name> <specifier>inline</specifier> <name>bool</name></type> <name>isa</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>Address</name> <name>addr</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>U</name><operator>::</operator><call><name>isaImpl</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
