<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/avxintrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IMMINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Never use &lt;avxintrin.h&gt; directly; include &lt;immintrin.h&gt; instead."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVXINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__AVXINTRIN_H</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>double</name> <name>__v4df</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)));</typedef>
<typedef>typedef <type><name>float</name> <name>__v8sf</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)));</typedef>
<typedef>typedef <type><name>long</name> <name>long</name> <name>__v4di</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)));</typedef>
<typedef>typedef <type><name>int</name> <name>__v8si</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)));</typedef>
<typedef>typedef <type><name>short</name> <name>__v16hi</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)));</typedef>
<typedef>typedef <type><name>char</name> <name>__v32qi</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)));</typedef>


<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>__v4du</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)));</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name> <name>__v8su</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)));</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>__v16hu</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)));</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name> <name>__v32qu</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)));</typedef>



<typedef>typedef <type><name>signed</name> <name>char</name> <name>__v32qs</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(32)));</typedef>

<typedef>typedef <type><name>float</name> <name>__m256</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)<operator>,</operator> __aligned__(32)));</typedef>
<typedef>typedef <type><name>double</name> <name>__m256d</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(32)<operator>,</operator> __aligned__(32)));</typedef>
<typedef>typedef <type><name>long</name> <name>long</name> <name>__m256i</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(32)<operator>,</operator> __aligned__(32)));</typedef>

<typedef>typedef <type><name>float</name> <name>__m256_u</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (32)<operator>,</operator> __aligned__(1)));</typedef>
<typedef>typedef <type><name>double</name> <name>__m256d_u</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(32)<operator>,</operator> __aligned__(1)));</typedef>
<typedef>typedef <type><name>long</name> <name>long</name> <name>__m256i_u</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(32)<operator>,</operator> __aligned__(1)));</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("avx"), __min_vector_width__(256)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS128</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("avx"), __min_vector_width__(128)))</cpp:value></cpp:define>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_add_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name><operator>+</operator><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_add_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name><operator>+</operator><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_sub_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name><operator>-</operator><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_sub_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name><operator>-</operator><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_addsub_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_ia32_addsubpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_addsub_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_addsubps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_div_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name><operator>/</operator><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_div_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name><operator>/</operator><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_max_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_ia32_maxpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_max_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_maxps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_min_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_ia32_minpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_min_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_minps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_mul_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name> <operator>*</operator> <operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_mul_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name> <operator>*</operator> <operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_sqrt_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_ia32_sqrtpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_sqrt_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_sqrtps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_rsqrt_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_rsqrtps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_rcp_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_rcpps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_round_pd</name><parameter_list>(<parameter><type><name>V</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256d)__builtin_ia32_roundpd256((__v4df)(__m256d)(V), (M))</cpp:value></cpp:define>































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_round_ps</name><parameter_list>(<parameter><type><name>V</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256)__builtin_ia32_roundps256((__v8sf)(__m256)(V), (M))</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_ceil_pd</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm256_round_pd((V), _MM_FROUND_CEIL)</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_floor_pd</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm256_round_pd((V), _MM_FROUND_FLOOR)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_ceil_ps</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm256_round_ps((V), _MM_FROUND_CEIL)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_floor_ps</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm256_round_ps((V), _MM_FROUND_FLOOR)</cpp:value></cpp:define>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_and_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4du</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>__v4du</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_and_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v8su</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>__v8su</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_andnot_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>__v4du</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>__v4du</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_andnot_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>__v8su</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>__v8su</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_or_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4du</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>__v4du</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_or_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v8su</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>__v8su</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_xor_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4du</name><operator>)</operator><name>__a</name> <operator>^</operator> <operator>(</operator><name>__v4du</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_xor_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v8su</name><operator>)</operator><name>__a</name> <operator>^</operator> <operator>(</operator><name>__v8su</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_hadd_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_ia32_haddpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_hadd_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_haddps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_hsub_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_ia32_hsubpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_hsub_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_hsubps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128d</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_permutevar_pd</name><parameter_list>(<parameter><decl><type><name>__m128d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>__builtin_ia32_vpermilvarpd</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


































<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_permutevar_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_ia32_vpermilvarpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















































<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_permutevar_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_vpermilvarps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






















































































<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_permutevar_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_vpermilvarps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8si</name><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_permute_pd</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128d)__builtin_ia32_vpermilpd((__v2df)(__m128d)(A), (int)(C))</cpp:value></cpp:define>







































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_permute_pd</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256d)__builtin_ia32_vpermilpd256((__v4df)(__m256d)(A), (int)(C))</cpp:value></cpp:define>























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_permute_ps</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128)__builtin_ia32_vpermilps((__v4sf)(__m128)(A), (int)(C))</cpp:value></cpp:define>



























































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_permute_ps</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256)__builtin_ia32_vpermilps256((__v8sf)(__m256)(A), (int)(C))</cpp:value></cpp:define>







































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_permute2f128_pd</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256d)__builtin_ia32_vperm2f128_pd256((__v4df)(__m256d)(V1), (__v4df)(__m256d)(V2), (int)(M))</cpp:value></cpp:define>








































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_permute2f128_ps</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256)__builtin_ia32_vperm2f128_ps256((__v8sf)(__m256)(V1), (__v8sf)(__m256)(V2), (int)(M))</cpp:value></cpp:define>







































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_permute2f128_si256</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)__builtin_ia32_vperm2f128_si256((__v8si)(__m256i)(V1), (__v8si)(__m256i)(V2), (int)(M))</cpp:value></cpp:define>




























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_blend_pd</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256d)__builtin_ia32_blendpd256((__v4df)(__m256d)(V1), (__v4df)(__m256d)(V2), (int)(M))</cpp:value></cpp:define>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_blend_ps</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256)__builtin_ia32_blendps256((__v8sf)(__m256)(V1), (__v8sf)(__m256)(V2), (int)(M))</cpp:value></cpp:define>
























<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_blendv_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_ia32_blendvpd256</name><argument_list>(
<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_blendv_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_blendvps256</name><argument_list>(
<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_dp_ps</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256)__builtin_ia32_dpps256((__v8sf)(__m256)(V1), (__v8sf)(__m256)(V2), (M))</cpp:value></cpp:define>





















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_shuffle_ps</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256)__builtin_ia32_shufps256((__v8sf)(__m256)(a), (__v8sf)(__m256)(b), (int)(mask))</cpp:value></cpp:define>













































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_shuffle_pd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256d)__builtin_ia32_shufpd256((__v4df)(__m256d)(a), (__v4df)(__m256d)(b), (int)(mask))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_EQ_OQ</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_LT_OS</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_LE_OS</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_UNORD_Q</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NEQ_UQ</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NLT_US</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NLE_US</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_ORD_Q</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_EQ_UQ</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NGE_US</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NGT_US</name></cpp:macro> <cpp:value>0x0a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_FALSE_OQ</name></cpp:macro> <cpp:value>0x0b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NEQ_OQ</name></cpp:macro> <cpp:value>0x0c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_GE_OS</name></cpp:macro> <cpp:value>0x0d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_GT_OS</name></cpp:macro> <cpp:value>0x0e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_TRUE_UQ</name></cpp:macro> <cpp:value>0x0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_EQ_OS</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_LT_OQ</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_LE_OQ</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_UNORD_S</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NEQ_US</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NLT_UQ</name></cpp:macro> <cpp:value>0x15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NLE_UQ</name></cpp:macro> <cpp:value>0x16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_ORD_S</name></cpp:macro> <cpp:value>0x17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_EQ_US</name></cpp:macro> <cpp:value>0x18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NGE_UQ</name></cpp:macro> <cpp:value>0x19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NGT_UQ</name></cpp:macro> <cpp:value>0x1a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_FALSE_OS</name></cpp:macro> <cpp:value>0x1b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_NEQ_OS</name></cpp:macro> <cpp:value>0x1c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_GE_OQ</name></cpp:macro> <cpp:value>0x1d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_GT_OQ</name></cpp:macro> <cpp:value>0x1e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CMP_TRUE_US</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmp_pd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128d)__builtin_ia32_cmppd((__v2df)(__m128d)(a), (__v2df)(__m128d)(b), (c))</cpp:value></cpp:define>



























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmp_ps</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128)__builtin_ia32_cmpps((__v4sf)(__m128)(a), (__v4sf)(__m128)(b), (c))</cpp:value></cpp:define>



























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_cmp_pd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256d)__builtin_ia32_cmppd256((__v4df)(__m256d)(a), (__v4df)(__m256d)(b), (c))</cpp:value></cpp:define>



























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_cmp_ps</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256)__builtin_ia32_cmpps256((__v8sf)(__m256)(a), (__v8sf)(__m256)(b), (c))</cpp:value></cpp:define>


























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmp_sd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128d)__builtin_ia32_cmpsd((__v2df)(__m128d)(a), (__v2df)(__m128d)(b), (c))</cpp:value></cpp:define>


























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmp_ss</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128)__builtin_ia32_cmpss((__v4sf)(__m128)(a), (__v4sf)(__m128)(b), (c))</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_extract_epi32</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_vec_ext_v8si((__v8si)(__m256i)(X), (int)(N))</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_extract_epi16</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(unsigned short)__builtin_ia32_vec_ext_v16hi((__v16hi)(__m256i)(X), (int)(N))</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_extract_epi8</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(unsigned char)__builtin_ia32_vec_ext_v32qi((__v32qi)(__m256i)(X), (int)(N))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_extract_epi64</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(long long)__builtin_ia32_vec_ext_v4di((__v4di)(__m256i)(X), (int)(N))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_insert_epi32</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)__builtin_ia32_vec_set_v8si((__v8si)(__m256i)(X), (int)(I), (int)(N))</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_insert_epi16</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)__builtin_ia32_vec_set_v16hi((__v16hi)(__m256i)(X), (int)(I), (int)(N))</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_insert_epi8</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)__builtin_ia32_vec_set_v32qi((__v32qi)(__m256i)(X), (int)(I), (int)(N))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_insert_epi64</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)__builtin_ia32_vec_set_v4di((__v4di)(__m256i)(X), (long long)(I), (int)(N))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvtepi32_pd</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__v4df</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvtepi32_ps</name><parameter_list>(<parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><operator>(</operator><name>__v8si</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__v8sf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvtpd_ps</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cvtpd2ps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator> <name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvtps_epi32</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256i</name><operator>)</operator><call><name>__builtin_ia32_cvtps2dq256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator> <name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvtps_pd</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__v4df</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvttpd_epi32</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_ia32_cvttpd2dq256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator> <name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvtpd_epi32</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_ia32_cvtpd2dq256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator> <name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvttps_epi32</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256i</name><operator>)</operator><call><name>__builtin_ia32_cvttps2dq256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator> <name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline</name> <name>double</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvtsd_f64</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvtsi256_si32</name><parameter_list>(<parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8si</name></type> <name>__b</name> <init>= <expr><operator>(</operator><name>__v8si</name><operator>)</operator><name>__a</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline</name> <name>float</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_cvtss_f32</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_movehdup_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_moveldup_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_movedup_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_unpackhi_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_unpacklo_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_unpackhi_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">14</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_unpacklo_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_testz_pd</name><parameter_list>(<parameter><decl><type><name>__m128d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestzpd</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_testc_pd</name><parameter_list>(<parameter><decl><type><name>__m128d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestcpd</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_testnzc_pd</name><parameter_list>(<parameter><decl><type><name>__m128d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestnzcpd</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_testz_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestzps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_testc_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestcps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_testnzc_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestnzcps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_testz_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestzpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_testc_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestcpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_testnzc_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestnzcpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_testz_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestzps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_testc_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestcps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_testnzc_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_vtestnzcps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_testz_si256</name><parameter_list>(<parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ptestz256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_testc_si256</name><parameter_list>(<parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ptestc256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_testnzc_si256</name><parameter_list>(<parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ptestnzc256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_movemask_pd</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_movmskpd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_movemask_ps</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_movmskps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"avx"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_mm256_zeroall</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_vzeroall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"avx"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_mm256_zeroupper</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_vzeroupper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_broadcast_ss</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>__f</name> <init>= <expr><operator>*</operator><name>__a</name></expr></init></decl>;</decl_stmt>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><block>{ <expr><name>__f</name></expr>, <expr><name>__f</name></expr>, <expr><name>__f</name></expr>, <expr><name>__f</name></expr> }</block></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_broadcast_sd</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>__d</name> <init>= <expr><operator>*</operator><name>__a</name></expr></init></decl>;</decl_stmt>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256d</argument>)</argument_list></macro><expr><operator>(</operator><name>__v4df</name><operator>)</operator><block>{ <expr><name>__d</name></expr>, <expr><name>__d</name></expr>, <expr><name>__d</name></expr>, <expr><name>__d</name></expr> }</block></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_broadcast_ss</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>__f</name> <init>= <expr><operator>*</operator><name>__a</name></expr></init></decl>;</decl_stmt>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256</argument>)</argument_list></macro><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><block>{ <expr><name>__f</name></expr>, <expr><name>__f</name></expr>, <expr><name>__f</name></expr>, <expr><name>__f</name></expr>, <expr><name>__f</name></expr>, <expr><name>__f</name></expr>, <expr><name>__f</name></expr>, <expr><name>__f</name></expr> }</block></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_broadcast_pd</name><parameter_list>(<parameter><decl><type><name>__m128d</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128d</name></type> <name>__b</name> <init>= <expr><call><name>_mm_loadu_pd</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_broadcast_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128</name></type> <name>__b</name> <init>= <expr><call><name>_mm_loadu_ps</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_load_pd</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>__m256d</name> <operator>*</operator><operator>)</operator><name>__p</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_load_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>__m256</name> <operator>*</operator><operator>)</operator><name>__p</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_loadu_pd</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__loadu_pd</name> <block>{
<decl_stmt><decl><type><name>__m256d_u</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__loadu_pd</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__v</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_loadu_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__loadu_ps</name> <block>{
<decl_stmt><decl><type><name>__m256_u</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__loadu_ps</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__v</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_load_si256</name><parameter_list>(<parameter><decl><type><name>__m256i</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><name>__p</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_loadu_si256</name><parameter_list>(<parameter><decl><type><name>__m256i_u</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__loadu_si256</name> <block>{
<decl_stmt><decl><type><name>__m256i_u</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__loadu_si256</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__v</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_lddqu_si256</name><parameter_list>(<parameter><decl><type><name>__m256i</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256i</name><operator>)</operator><call><name>__builtin_ia32_lddqu256</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_store_pd</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__m256d</name> <operator>*</operator><operator>)</operator><name>__p</name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_store_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__m256</name> <operator>*</operator><operator>)</operator><name>__p</name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_storeu_pd</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__storeu_pd</name> <block>{
<decl_stmt><decl><type><name>__m256d_u</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>__storeu_pd</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__v</name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_storeu_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__storeu_ps</name> <block>{
<decl_stmt><decl><type><name>__m256_u</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>__storeu_ps</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__v</name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_store_si256</name><parameter_list>(<parameter><decl><type><name>__m256i</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__p</name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_storeu_si256</name><parameter_list>(<parameter><decl><type><name>__m256i_u</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__storeu_si256</name> <block>{
<decl_stmt><decl><type><name>__m256i_u</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>__storeu_si256</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__v</name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128d</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_maskload_pd</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>__builtin_ia32_maskloadpd</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__v2df</name> <operator>*</operator><operator>)</operator><name>__p</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_maskload_pd</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_ia32_maskloadpd256</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__v4df</name> <operator>*</operator><operator>)</operator><name>__p</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_maskload_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_maskloadps</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__v4sf</name> <operator>*</operator><operator>)</operator><name>__p</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_maskload_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_maskloadps256</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__v8sf</name> <operator>*</operator><operator>)</operator><name>__p</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8si</name><operator>)</operator><name>__m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_maskstore_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__m</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_maskstoreps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name> <operator>*</operator><operator>)</operator><name>__p</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8si</name><operator>)</operator><name>__m</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_maskstore_pd</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__m</name></decl></parameter>, <parameter><decl><type><name>__m128d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_maskstorepd</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name> <operator>*</operator><operator>)</operator><name>__p</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__m</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_maskstore_pd</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__m</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_maskstorepd256</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name> <operator>*</operator><operator>)</operator><name>__p</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__m</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_maskstore_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__m</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_maskstoreps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name> <operator>*</operator><operator>)</operator><name>__p</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__m</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_stream_si256</name><parameter_list>(<parameter><decl><type><name>__m256i</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <type><name>__v4di</name> <name>__v4di_aligned</name></type> <name>__attribute__</name>((<name>aligned</name>(32)));</typedef>
<expr_stmt><expr><call><name>__builtin_nontemporal_store</name><argument_list>(<argument><expr><operator>(</operator><name>__v4di_aligned</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4di_aligned</name><operator>*</operator><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_stream_pd</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <type><name>__v4df</name> <name>__v4df_aligned</name></type> <name>__attribute__</name>((<name>aligned</name>(32)));</typedef>
<expr_stmt><expr><call><name>__builtin_nontemporal_store</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df_aligned</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df_aligned</name><operator>*</operator><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_stream_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <type><name>__v8sf</name> <name>__v8sf_aligned</name></type> <name>__attribute__</name>((<name>aligned</name>(32)));</typedef>
<expr_stmt><expr><call><name>__builtin_nontemporal_store</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf_aligned</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf_aligned</name><operator>*</operator><operator>)</operator><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_undefined_pd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>__builtin_ia32_undef256</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_undefined_ps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_undef256</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_undefined_si256</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256i</name><operator>)</operator><call><name>__builtin_ia32_undef256</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set_pd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256d</argument>)</argument_list></macro><expr><block>{ <expr><name>__d</name></expr>, <expr><name>__c</name></expr>, <expr><name>__b</name></expr>, <expr><name>__a</name></expr> }</block></expr>;</return>
</block_content>}</block></function>


































<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set_ps</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__d</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>__e</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256</argument>)</argument_list></macro><expr><block>{ <expr><name>__h</name></expr>, <expr><name>__g</name></expr>, <expr><name>__f</name></expr>, <expr><name>__e</name></expr>, <expr><name>__d</name></expr>, <expr><name>__c</name></expr>, <expr><name>__b</name></expr>, <expr><name>__a</name></expr> }</block></expr>;</return>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set_epi32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__i0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i3</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__i4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v8si</name><operator>)</operator><block>{ <expr><name>__i7</name></expr>, <expr><name>__i6</name></expr>, <expr><name>__i5</name></expr>, <expr><name>__i4</name></expr>, <expr><name>__i3</name></expr>, <expr><name>__i2</name></expr>, <expr><name>__i1</name></expr>, <expr><name>__i0</name></expr> }</block></expr>;</return>
</block_content>}</block></function>










































<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set_epi16</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>__w15</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w14</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w13</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w12</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>__w11</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w10</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w09</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w08</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>__w07</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w06</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w05</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w04</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>__w03</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w02</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w01</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w00</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v16hi</name><operator>)</operator><block>{ <expr><name>__w00</name></expr>, <expr><name>__w01</name></expr>, <expr><name>__w02</name></expr>, <expr><name>__w03</name></expr>, <expr><name>__w04</name></expr>, <expr><name>__w05</name></expr>, <expr><name>__w06</name></expr>,
<expr><name>__w07</name></expr>, <expr><name>__w08</name></expr>, <expr><name>__w09</name></expr>, <expr><name>__w10</name></expr>, <expr><name>__w11</name></expr>, <expr><name>__w12</name></expr>, <expr><name>__w13</name></expr>, <expr><name>__w14</name></expr>, <expr><name>__w15</name></expr> }</block></expr>;</return>
</block_content>}</block></function>










































































<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set_epi8</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>__b31</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b30</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b29</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b28</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b27</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b26</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b25</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b24</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b23</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b22</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b21</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b20</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b19</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b18</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b17</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b16</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b15</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b14</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b13</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b12</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b11</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b10</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b09</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b08</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b07</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b06</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b05</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b04</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b03</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b02</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b01</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b00</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v32qi</name><operator>)</operator><block>{
<expr><name>__b00</name></expr>, <expr><name>__b01</name></expr>, <expr><name>__b02</name></expr>, <expr><name>__b03</name></expr>, <expr><name>__b04</name></expr>, <expr><name>__b05</name></expr>, <expr><name>__b06</name></expr>, <expr><name>__b07</name></expr>,
<expr><name>__b08</name></expr>, <expr><name>__b09</name></expr>, <expr><name>__b10</name></expr>, <expr><name>__b11</name></expr>, <expr><name>__b12</name></expr>, <expr><name>__b13</name></expr>, <expr><name>__b14</name></expr>, <expr><name>__b15</name></expr>,
<expr><name>__b16</name></expr>, <expr><name>__b17</name></expr>, <expr><name>__b18</name></expr>, <expr><name>__b19</name></expr>, <expr><name>__b20</name></expr>, <expr><name>__b21</name></expr>, <expr><name>__b22</name></expr>, <expr><name>__b23</name></expr>,
<expr><name>__b24</name></expr>, <expr><name>__b25</name></expr>, <expr><name>__b26</name></expr>, <expr><name>__b27</name></expr>, <expr><name>__b28</name></expr>, <expr><name>__b29</name></expr>, <expr><name>__b30</name></expr>, <expr><name>__b31</name></expr>
}</block></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set_epi64x</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>__d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v4di</name><operator>)</operator><block>{ <expr><name>__d</name></expr>, <expr><name>__c</name></expr>, <expr><name>__b</name></expr>, <expr><name>__a</name></expr> }</block></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setr_pd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_pd</name><argument_list>(<argument><expr><name>__d</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



































<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setr_ps</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__d</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>__e</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__f</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_ps</name><argument_list>(<argument><expr><name>__h</name></expr></argument>, <argument><expr><name>__g</name></expr></argument>, <argument><expr><name>__f</name></expr></argument>, <argument><expr><name>__e</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setr_epi32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__i0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i3</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__i4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__i7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_epi32</name><argument_list>(<argument><expr><name>__i7</name></expr></argument>, <argument><expr><name>__i6</name></expr></argument>, <argument><expr><name>__i5</name></expr></argument>, <argument><expr><name>__i4</name></expr></argument>, <argument><expr><name>__i3</name></expr></argument>, <argument><expr><name>__i2</name></expr></argument>, <argument><expr><name>__i1</name></expr></argument>, <argument><expr><name>__i0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










































<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setr_epi16</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>__w15</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w14</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w13</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w12</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>__w11</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w10</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w09</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w08</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>__w07</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w06</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w05</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w04</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>__w03</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w02</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w01</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>__w00</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_epi16</name><argument_list>(<argument><expr><name>__w00</name></expr></argument>, <argument><expr><name>__w01</name></expr></argument>, <argument><expr><name>__w02</name></expr></argument>, <argument><expr><name>__w03</name></expr></argument>,
<argument><expr><name>__w04</name></expr></argument>, <argument><expr><name>__w05</name></expr></argument>, <argument><expr><name>__w06</name></expr></argument>, <argument><expr><name>__w07</name></expr></argument>,
<argument><expr><name>__w08</name></expr></argument>, <argument><expr><name>__w09</name></expr></argument>, <argument><expr><name>__w10</name></expr></argument>, <argument><expr><name>__w11</name></expr></argument>,
<argument><expr><name>__w12</name></expr></argument>, <argument><expr><name>__w13</name></expr></argument>, <argument><expr><name>__w14</name></expr></argument>, <argument><expr><name>__w15</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










































































<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setr_epi8</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>__b31</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b30</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b29</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b28</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b27</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b26</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b25</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b24</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b23</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b22</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b21</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b20</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b19</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b18</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b17</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b16</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b15</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b14</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b13</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b12</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b11</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b10</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b09</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b08</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b07</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b06</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b05</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b04</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>__b03</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b02</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b01</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>__b00</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_epi8</name><argument_list>(<argument><expr><name>__b00</name></expr></argument>, <argument><expr><name>__b01</name></expr></argument>, <argument><expr><name>__b02</name></expr></argument>, <argument><expr><name>__b03</name></expr></argument>, <argument><expr><name>__b04</name></expr></argument>, <argument><expr><name>__b05</name></expr></argument>, <argument><expr><name>__b06</name></expr></argument>, <argument><expr><name>__b07</name></expr></argument>,
<argument><expr><name>__b08</name></expr></argument>, <argument><expr><name>__b09</name></expr></argument>, <argument><expr><name>__b10</name></expr></argument>, <argument><expr><name>__b11</name></expr></argument>, <argument><expr><name>__b12</name></expr></argument>, <argument><expr><name>__b13</name></expr></argument>, <argument><expr><name>__b14</name></expr></argument>, <argument><expr><name>__b15</name></expr></argument>,
<argument><expr><name>__b16</name></expr></argument>, <argument><expr><name>__b17</name></expr></argument>, <argument><expr><name>__b18</name></expr></argument>, <argument><expr><name>__b19</name></expr></argument>, <argument><expr><name>__b20</name></expr></argument>, <argument><expr><name>__b21</name></expr></argument>, <argument><expr><name>__b22</name></expr></argument>, <argument><expr><name>__b23</name></expr></argument>,
<argument><expr><name>__b24</name></expr></argument>, <argument><expr><name>__b25</name></expr></argument>, <argument><expr><name>__b26</name></expr></argument>, <argument><expr><name>__b27</name></expr></argument>, <argument><expr><name>__b28</name></expr></argument>, <argument><expr><name>__b29</name></expr></argument>, <argument><expr><name>__b30</name></expr></argument>, <argument><expr><name>__b31</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setr_epi64x</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>__d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_epi64x</name><argument_list>(<argument><expr><name>__d</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set1_pd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_pd</name><argument_list>(<argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set1_ps</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_ps</name><argument_list>(<argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set1_epi32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_epi32</name><argument_list>(<argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__i</name></expr></argument>, <argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set1_epi16</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>__w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_epi16</name><argument_list>(<argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>,
<argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set1_epi8</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_epi8</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set1_epi64x</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_epi64x</name><argument_list>(<argument><expr><name>__q</name></expr></argument>, <argument><expr><name>__q</name></expr></argument>, <argument><expr><name>__q</name></expr></argument>, <argument><expr><name>__q</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setzero_pd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256d</argument>)</argument_list></macro><expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setzero_ps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256</argument>)</argument_list></macro><expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setzero_si256</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m256i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v4di</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castpd_ps</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castpd_si256</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256i</name><operator>)</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castps_pd</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castps_si256</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256i</name><operator>)</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castsi256_ps</name><parameter_list>(<parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castsi256_pd</name><parameter_list>(<parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castpd256_pd128</name><parameter_list>(<parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castps256_ps128</name><parameter_list>(<parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castsi256_si128</name><parameter_list>(<parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4di</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castpd128_pd256</name><parameter_list>(<parameter><decl><type><name>__m128d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castps128_ps256</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_castsi128_si256</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_zextpd128_pd256</name><parameter_list>(<parameter><decl><type><name>__m128d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><call><name>_mm_setzero_pd</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_zextps128_ps256</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><call><name>_mm_setzero_ps</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_zextsi128_si256</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_insertf128_ps</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256)__builtin_ia32_vinsertf128_ps256((__v8sf)(__m256)(V1), (__v4sf)(__m128)(V2), (int)(M))</cpp:value></cpp:define>





































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_insertf128_pd</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256d)__builtin_ia32_vinsertf128_pd256((__v4df)(__m256d)(V1), (__v2df)(__m128d)(V2), (int)(M))</cpp:value></cpp:define>





































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_insertf128_si256</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)__builtin_ia32_vinsertf128_si256((__v8si)(__m256i)(V1), (__v4si)(__m128i)(V2), (int)(M))</cpp:value></cpp:define>





























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_extractf128_ps</name><parameter_list>(<parameter><type><name>V</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128)__builtin_ia32_vextractf128_ps256((__v8sf)(__m256)(V), (int)(M))</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_extractf128_pd</name><parameter_list>(<parameter><type><name>V</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128d)__builtin_ia32_vextractf128_pd256((__v4df)(__m256d)(V), (int)(M))</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_extractf128_si256</name><parameter_list>(<parameter><type><name>V</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_vextractf128_si256((__v8si)(__m256i)(V), (int)(M))</cpp:value></cpp:define>
























<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_loadu2_m128</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__addr_hi</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__addr_lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m256</name></type> <name>__v256</name> <init>= <expr><call><name>_mm256_castps128_ps256</name><argument_list>(<argument><expr><call><name>_mm_loadu_ps</name><argument_list>(<argument><expr><name>__addr_lo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>_mm256_insertf128_ps</name><argument_list>(<argument><expr><name>__v256</name></expr></argument>, <argument><expr><call><name>_mm_loadu_ps</name><argument_list>(<argument><expr><name>__addr_hi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_loadu2_m128d</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__addr_hi</name></decl></parameter>, <parameter><decl><type><name>double</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__addr_lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m256d</name></type> <name>__v256</name> <init>= <expr><call><name>_mm256_castpd128_pd256</name><argument_list>(<argument><expr><call><name>_mm_loadu_pd</name><argument_list>(<argument><expr><name>__addr_lo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>_mm256_insertf128_pd</name><argument_list>(<argument><expr><name>__v256</name></expr></argument>, <argument><expr><call><name>_mm_loadu_pd</name><argument_list>(<argument><expr><name>__addr_hi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_loadu2_m128i</name><parameter_list>(<parameter><decl><type><name>__m128i_u</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__addr_hi</name></decl></parameter>, <parameter><decl><type><name>__m128i_u</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__addr_lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m256i</name></type> <name>__v256</name> <init>= <expr><call><name>_mm256_castsi128_si256</name><argument_list>(<argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>__addr_lo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>_mm256_insertf128_si256</name><argument_list>(<argument><expr><name>__v256</name></expr></argument>, <argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>__addr_hi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_storeu2_m128</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__addr_hi</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__addr_lo</name></decl></parameter>, <parameter><decl><type><name>__m256</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128</name></type> <name>__v128</name></decl>;</decl_stmt>

<expr_stmt><expr><name>__v128</name> <operator>=</operator> <call><name>_mm256_castps256_ps128</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_storeu_ps</name><argument_list>(<argument><expr><name>__addr_lo</name></expr></argument>, <argument><expr><name>__v128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__v128</name> <operator>=</operator> <call><name>_mm256_extractf128_ps</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_storeu_ps</name><argument_list>(<argument><expr><name>__addr_hi</name></expr></argument>, <argument><expr><name>__v128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_storeu2_m128d</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__addr_hi</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__addr_lo</name></decl></parameter>, <parameter><decl><type><name>__m256d</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128d</name></type> <name>__v128</name></decl>;</decl_stmt>

<expr_stmt><expr><name>__v128</name> <operator>=</operator> <call><name>_mm256_castpd256_pd128</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_storeu_pd</name><argument_list>(<argument><expr><name>__addr_lo</name></expr></argument>, <argument><expr><name>__v128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__v128</name> <operator>=</operator> <call><name>_mm256_extractf128_pd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_storeu_pd</name><argument_list>(<argument><expr><name>__addr_hi</name></expr></argument>, <argument><expr><name>__v128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_storeu2_m128i</name><parameter_list>(<parameter><decl><type><name>__m128i_u</name> <modifier>*</modifier></type><name>__addr_hi</name></decl></parameter>, <parameter><decl><type><name>__m128i_u</name> <modifier>*</modifier></type><name>__addr_lo</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128i</name></type> <name>__v128</name></decl>;</decl_stmt>

<expr_stmt><expr><name>__v128</name> <operator>=</operator> <call><name>_mm256_castsi256_si128</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><name>__addr_lo</name></expr></argument>, <argument><expr><name>__v128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__v128</name> <operator>=</operator> <call><name>_mm256_extractf128_si256</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><name>__addr_hi</name></expr></argument>, <argument><expr><name>__v128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set_m128</name> <parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__hi</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__lo</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__hi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set_m128d</name> <parameter_list>(<parameter><decl><type><name>__m128d</name></type> <name>__hi</name></decl></parameter>, <parameter><decl><type><name>__m128d</name></type> <name>__lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__lo</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__hi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_set_m128i</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__hi</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__lo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256i</name><operator>)</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__lo</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__hi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setr_m128</name> <parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__lo</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_set_m128</name><argument_list>(<argument><expr><name>__hi</name></expr></argument>, <argument><expr><name>__lo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setr_m128d</name> <parameter_list>(<parameter><decl><type><name>__m128d</name></type> <name>__lo</name></decl></parameter>, <parameter><decl><type><name>__m128d</name></type> <name>__hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256d</name><operator>)</operator><call><name>_mm256_set_m128d</name><argument_list>(<argument><expr><name>__hi</name></expr></argument>, <argument><expr><name>__lo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm256_setr_m128i</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__lo</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256i</name><operator>)</operator><call><name>_mm256_set_m128i</name><argument_list>(<argument><expr><name>__hi</name></expr></argument>, <argument><expr><name>__lo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS128</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
