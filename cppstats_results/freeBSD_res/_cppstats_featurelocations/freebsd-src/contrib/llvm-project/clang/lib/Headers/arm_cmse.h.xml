<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/arm_cmse.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_CMSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ARM_CMSE_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__ARM_FEATURE_CMSE</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ARM_CMSE_SECURE_MODE</name></cpp:macro> <cpp:value>(__ARM_FEATURE_CMSE &amp; 0x2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSE_MPU_READWRITE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSE_AU_NONSECURE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSE_MPU_UNPRIV</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSE_MPU_READ</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSE_MPU_NONSECURE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSE_NONSECURE</name></cpp:macro> <cpp:value>(CMSE_AU_NONSECURE | CMSE_MPU_NONSECURE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cmse_check_pointed_object</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cmse_check_address_range((p), sizeof(*(p)), (f))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><union>union <block>{
<struct>struct <name>cmse_address_info</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__ARM_CMSE_SECURE_MODE</name><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name></type> <name>idau_region</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>idau_region_valid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>secure</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nonsecure_readwrite_ok</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nonsecure_read_ok</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<label><name>unsigned</name> :</label> <expr_stmt><expr><literal type="number">12</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name></type> <name>readwrite_ok</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>read_ok</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__ARM_CMSE_SECURE_MODE</name><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sau_region_valid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<label><name>unsigned</name> :</label> <expr_stmt><expr><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mpu_region_valid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__ARM_CMSE_SECURE_MODE</name><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sau_region</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<label><name>unsigned</name> :</label> <expr_stmt><expr><literal type="number">8</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mpu_region</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mpu_region</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__ARM_CMSE_SECURE_MODE</name><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sau_region</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<label><name>unsigned</name> :</label> <expr_stmt><expr><literal type="number">8</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mpu_region_valid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__ARM_CMSE_SECURE_MODE</name><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sau_region_valid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<label><name>unsigned</name> :</label> <expr_stmt><expr><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name></type> <name>read_ok</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>readwrite_ok</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__ARM_CMSE_SECURE_MODE</name><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nonsecure_read_ok</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nonsecure_readwrite_ok</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>secure</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>idau_region_valid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>idau_region</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<label><name>unsigned</name> :</label> <expr_stmt><expr><literal type="number">12</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>flags</name></decl>;</struct>
<decl_stmt><decl><type><name>unsigned</name></type> <name>value</name></decl>;</decl_stmt>
}</block></union></type> <name>cmse_address_info_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>cmse_address_info_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>cmse_TT</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>cmse_address_info_t</name></type> <name>__u</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__u</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>__builtin_arm_cmse_TT</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__u</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>cmse_address_info_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>cmse_TTT</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>cmse_address_info_t</name></type> <name>__u</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__u</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>__builtin_arm_cmse_TTT</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__u</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_CMSE_SECURE_MODE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>cmse_address_info_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>cmse_TTA</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>cmse_address_info_t</name></type> <name>__u</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__u</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>__builtin_arm_cmse_TTA</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__u</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>cmse_address_info_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>cmse_TTAT</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>cmse_address_info_t</name></type> <name>__u</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__u</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>__builtin_arm_cmse_TTAT</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__u</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cmse_TT_fptr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cmse_TT(__builtin_bit_cast(void *, (p)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cmse_TTT_fptr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cmse_TTT(__builtin_bit_cast(void *, (p)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_CMSE_SECURE_MODE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cmse_TTA_fptr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cmse_TTA(__builtin_bit_cast(void *, (p)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cmse_TTAT_fptr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cmse_TTAT(__builtin_bit_cast(void *, (p)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>cmse_check_address_range</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__pb</name></expr></argument>, <argument><expr><name>size_t</name> <name>__s</name></expr></argument>, <argument><expr><name>int</name> <name>__flags</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>__begin</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>__pb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>__end</name> <init>= <expr><name>__begin</name> <operator>+</operator> <name>__s</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__end</name> <operator>&lt;</operator> <name>__begin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>__single_check</name> <init>= <expr><operator>(</operator><name>__begin</name> <operator>^</operator> <name>__end</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0x20u</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>__pe</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>__end</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cmse_address_info_t</name></type> <name>__permb</name></decl>, <decl><type ref="prev"/><name>__perme</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>__flags</name> <operator>&amp;</operator> <operator>(</operator><name>CMSE_MPU_UNPRIV</name> <operator>|</operator> <name>CMSE_MPU_NONSECURE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>__permb</name> <operator>=</operator> <call><name>cmse_TT</name><argument_list>(<argument><expr><name>__pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__perme</name> <operator>=</operator> <ternary><condition><expr><name>__single_check</name></expr> ?</condition><then> <expr><name>__permb</name></expr> </then><else>: <expr><call><name>cmse_TT</name><argument_list>(<argument><expr><name>__pe</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMSE_MPU_UNPRIV</name></expr>:</case>
<expr_stmt><expr><name>__permb</name> <operator>=</operator> <call><name>cmse_TTT</name><argument_list>(<argument><expr><name>__pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__perme</name> <operator>=</operator> <ternary><condition><expr><name>__single_check</name></expr> ?</condition><then> <expr><name>__permb</name></expr> </then><else>: <expr><call><name>cmse_TTT</name><argument_list>(<argument><expr><name>__pe</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_CMSE_SECURE_MODE</name></expr></cpp:if>
<case>case <expr><name>CMSE_MPU_NONSECURE</name></expr>:</case>
<expr_stmt><expr><name>__permb</name> <operator>=</operator> <call><name>cmse_TTA</name><argument_list>(<argument><expr><name>__pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__perme</name> <operator>=</operator> <ternary><condition><expr><name>__single_check</name></expr> ?</condition><then> <expr><name>__permb</name></expr> </then><else>: <expr><call><name>cmse_TTA</name><argument_list>(<argument><expr><name>__pe</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMSE_MPU_UNPRIV</name> <operator>|</operator> <name>CMSE_MPU_NONSECURE</name></expr>:</case>
<expr_stmt><expr><name>__permb</name> <operator>=</operator> <call><name>cmse_TTAT</name><argument_list>(<argument><expr><name>__pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__perme</name> <operator>=</operator> <ternary><condition><expr><name>__single_check</name></expr> ?</condition><then> <expr><name>__permb</name></expr> </then><else>: <expr><call><name>cmse_TTAT</name><argument_list>(<argument><expr><name>__pe</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name><name>__permb</name><operator>.</operator><name>value</name></name> <operator>!=</operator> <name><name>__perme</name><operator>.</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>__ARM_CMSE_SECURE_MODE</name><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>__flags</name> <operator>&amp;</operator> <name>CMSE_AU_NONSECURE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<switch>switch <condition>(<expr><name>__flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CMSE_MPU_UNPRIV</name> <operator>|</operator> <name>CMSE_MPU_NONSECURE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__ARM_CMSE_SECURE_MODE</name><operator>)</operator></expr></cpp:if>
<case>case <expr><name>CMSE_MPU_READ</name> <operator>|</operator> <name>CMSE_MPU_READWRITE</name> <operator>|</operator> <name>CMSE_AU_NONSECURE</name></expr>:</case>
<case>case <expr><name>CMSE_MPU_READWRITE</name> <operator>|</operator> <name>CMSE_AU_NONSECURE</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name><name>__permb</name><operator>.</operator><name>flags</name><operator>.</operator><name>nonsecure_readwrite_ok</name></name></expr> ?</condition><then> <expr><name>__pb</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>CMSE_MPU_READ</name> <operator>|</operator> <name>CMSE_AU_NONSECURE</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name><name>__permb</name><operator>.</operator><name>flags</name><operator>.</operator><name>nonsecure_read_ok</name></name></expr> ?</condition><then> <expr><name>__pb</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>CMSE_AU_NONSECURE</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name><name>__permb</name><operator>.</operator><name>flags</name><operator>.</operator><name>secure</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>__pb</name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CMSE_MPU_READ</name> <operator>|</operator> <name>CMSE_MPU_READWRITE</name></expr>:</case>
<case>case <expr><name>CMSE_MPU_READWRITE</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name><name>__permb</name><operator>.</operator><name>flags</name><operator>.</operator><name>readwrite_ok</name></name></expr> ?</condition><then> <expr><name>__pb</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>CMSE_MPU_READ</name></expr>:</case>
<return>return <expr><ternary><condition><expr><name><name>__permb</name><operator>.</operator><name>flags</name><operator>.</operator><name>read_ok</name></name></expr> ?</condition><then> <expr><name>__pb</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_CMSE_SECURE_MODE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>cmse_nonsecure_caller</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>!</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>__builtin_return_address</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cmse_nsfptr_create</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_bit_cast(__typeof__(p), (__builtin_bit_cast(uintptr_t, p) &amp; ~(uintptr_t)1))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cmse_is_nsfptr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((__builtin_bit_cast(uintptr_t, p) &amp; 1) == 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__noreturn__</name><operator>)</operator></expr></argument>)</argument_list> <name>cmse_abort</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
