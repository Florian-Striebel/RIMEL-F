<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/Iterator.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_ITERATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_ITERATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/DynamicType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>iterator</name> <block>{<block_content>



<struct>struct <name>IteratorPosition</name> <block>{
<label><name>private</name>:</label>


<decl_stmt><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>Cont</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Valid</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>SymbolRef</name></type> <name>Offset</name></decl>;</decl_stmt>

<macro><name>IteratorPosition</name><argument_list>(<argument>const MemRegion *C</argument>, <argument>bool V</argument>, <argument>SymbolRef Of</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Cont</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Valid</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Offset</name><argument_list>(<argument>Of</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><macro><name>getContainer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Cont</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Valid</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SymbolRef</name> <macro><name>getOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Offset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>IteratorPosition</name> <macro><name>invalidate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>IteratorPosition</name><argument_list>(<argument><expr><name>Cont</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>IteratorPosition</name></type> <name>getPosition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>SymbolRef</name></type> <name>Of</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>IteratorPosition</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Of</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>IteratorPosition</name></type> <name>setTo</name><argument_list>(<argument><expr><name>SymbolRef</name> <name>NewOf</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>IteratorPosition</name><argument_list>(<argument><expr><name>Cont</name></expr></argument>, <argument><expr><name>Valid</name></expr></argument>, <argument><expr><name>NewOf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>IteratorPosition</name></type> <name>reAssign</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><name>NewCont</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>IteratorPosition</name><argument_list>(<argument><expr><name>NewCont</name></expr></argument>, <argument><expr><name>Valid</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>IteratorPosition</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Cont</name> <operator>==</operator> <name><name>X</name><operator>.</operator><name>Cont</name></name> <operator>&amp;&amp;</operator> <name>Valid</name> <operator>==</operator> <name><name>X</name><operator>.</operator><name>Valid</name></name> <operator>&amp;&amp;</operator> <name>Offset</name> <operator>==</operator> <name><name>X</name><operator>.</operator><name>Offset</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>IteratorPosition</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Cont</name> <operator>!=</operator> <name><name>X</name><operator>.</operator><name>Cont</name></name> <operator>||</operator> <name>Valid</name> <operator>!=</operator> <name><name>X</name><operator>.</operator><name>Valid</name></name> <operator>||</operator> <name>Offset</name> <operator>!=</operator> <name><name>X</name><operator>.</operator><name>Offset</name></name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>Cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddInteger</name></name><argument_list>(<argument><expr><name>Valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
}</block>;</struct>


<struct>struct <name>ContainerData</name> <block>{
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>SymbolRef</name></type> <name>Begin</name></decl>, <decl><type ref="prev"/><name>End</name></decl>;</decl_stmt>

<macro><name>ContainerData</name><argument_list>(<argument>SymbolRef B</argument>, <argument>SymbolRef E</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>Begin</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>End</name><argument_list>(<argument>E</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>ContainerData</name> <macro><name>fromBegin</name><argument_list>(<argument>SymbolRef B</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ContainerData</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>ContainerData</name></type> <name>fromEnd</name><parameter_list>(<parameter><decl><type><name>SymbolRef</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ContainerData</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>SymbolRef</name> <macro><name>getBegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Begin</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SymbolRef</name> <macro><name>getEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>End</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>ContainerData</name></type> <name>newBegin</name><argument_list>(<argument><expr><name>SymbolRef</name> <name>B</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name>ContainerData</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>End</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>ContainerData</name></type> <name>newEnd</name><argument_list>(<argument><expr><name>SymbolRef</name> <name>E</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name>ContainerData</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ContainerData</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Begin</name> <operator>==</operator> <name><name>X</name><operator>.</operator><name>Begin</name></name> <operator>&amp;&amp;</operator> <name>End</name> <operator>==</operator> <name><name>X</name><operator>.</operator><name>End</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ContainerData</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Begin</name> <operator>!=</operator> <name><name>X</name><operator>.</operator><name>Begin</name></name> <operator>||</operator> <name>End</name> <operator>!=</operator> <name><name>X</name><operator>.</operator><name>End</name></name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>Begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>End</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>IteratorSymbolMap</name> <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IteratorRegionMap</name> <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ContainerMap</name> <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>IteratorSymbolMapTy</name> <init>=
<expr><call><name>CLANG_ENTO_PROGRAMSTATE_MAP</name><argument_list>(<argument><expr><name>SymbolRef</name></expr></argument>, <argument><expr><name>IteratorPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>IteratorRegionMapTy</name> <init>=
<expr><call><name>CLANG_ENTO_PROGRAMSTATE_MAP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator></expr></argument>, <argument><expr><name>IteratorPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ContainerMapTy</name> <init>=
<expr><call><name>CLANG_ENTO_PROGRAMSTATE_MAP</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator></expr></argument>, <argument><expr><name>ContainerData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
struct</type> <name><name>ProgramStateTrait</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name><operator>::</operator><name>IteratorSymbolMap</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name><operator>::</operator><name>IteratorSymbolMapTy</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>GDMIndex</name><argument_list>()</argument_list></macro> <block>{ <expr><specifier>static</specifier> <name>int</name> <name>Index</name></expr>; <return>return <expr><operator>&amp;</operator><name>Index</name></expr>;</return> }</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name><name>ProgramStateTrait</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name><operator>::</operator><name>IteratorRegionMap</name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name><operator>::</operator><name>IteratorRegionMapTy</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>GDMIndex</name><argument_list>()</argument_list></macro> <block>{ <expr><specifier>static</specifier> <name>int</name> <name>Index</name></expr>; <return>return <expr><operator>&amp;</operator><name>Index</name></expr>;</return> }</block>
}</expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;&gt;</argument_list></name>
struct <name><name>ProgramStateTrait</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name><operator>::</operator><name>ContainerMap</name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name><operator>::</operator><name>ContainerMapTy</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>GDMIndex</name><argument_list>()</argument_list></macro> <block>{ <expr><specifier>static</specifier> <name>int</name> <name>Index</name></expr>; <return>return <expr><operator>&amp;</operator><name>Index</name></expr>;</return> }</block>
}</expr>;

<expr><name>namespace</name> <name>iterator</name> <block>{

<expr><name>bool</name> <call><name>isIteratorType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QualType</name> <operator>&amp;</operator><name>Type</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>isIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>CRD</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <macro><name>isComparisonOperator</name><argument_list>(<argument>OverloadedOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <call><name>isInsertCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>Func</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>isEraseCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>Func</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>isEraseAfterCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>Func</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>isEmplaceCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>Func</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <macro><name>isAccessOperator</name><argument_list>(<argument>OverloadedOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isAccessOperator</name><argument_list>(<argument>UnaryOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isAccessOperator</name><argument_list>(<argument>BinaryOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isDereferenceOperator</name><argument_list>(<argument>OverloadedOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isDereferenceOperator</name><argument_list>(<argument>UnaryOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isDereferenceOperator</name><argument_list>(<argument>BinaryOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isIncrementOperator</name><argument_list>(<argument>OverloadedOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isIncrementOperator</name><argument_list>(<argument>UnaryOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isDecrementOperator</name><argument_list>(<argument>OverloadedOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isDecrementOperator</name><argument_list>(<argument>UnaryOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isRandomIncrOrDecrOperator</name><argument_list>(<argument>OverloadedOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isRandomIncrOrDecrOperator</name><argument_list>(<argument>BinaryOperatorKind OK</argument>)</argument_list></macro></expr>;
<expr><specifier>const</specifier> <name>ContainerData</name> <operator>*</operator><macro><name>getContainerData</name><argument_list>(<argument>ProgramStateRef State</argument>,
<argument>const MemRegion *Cont</argument>)</argument_list></macro></expr>;
<expr><specifier>const</specifier> <name>IteratorPosition</name> <operator>*</operator><macro><name>getIteratorPosition</name><argument_list>(<argument>ProgramStateRef State</argument>,
<argument>const SVal &amp;Val</argument>)</argument_list></macro></expr>;
<expr><name>ProgramStateRef</name> <macro><name>setIteratorPosition</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>const SVal &amp;Val</argument>,
<argument>const IteratorPosition &amp;Pos</argument>)</argument_list></macro></expr>;
<expr><name>ProgramStateRef</name> <macro><name>createIteratorPosition</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>const SVal &amp;Val</argument>,
<argument>const MemRegion *Cont</argument>, <argument>const Stmt* S</argument>,
<argument>const LocationContext *LCtx</argument>,
<argument>unsigned blockCount</argument>)</argument_list></macro></expr>;
<expr><name>ProgramStateRef</name> <macro><name>advancePosition</name><argument_list>(<argument>ProgramStateRef State</argument>,
<argument>const SVal &amp;Iter</argument>,
<argument>OverloadedOperatorKind Op</argument>,
<argument>const SVal &amp;Distance</argument>)</argument_list></macro></expr>;
<expr><name>ProgramStateRef</name> <macro><name>assumeNoOverflow</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>long Scale</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>compare</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym1</argument>, <argument>SymbolRef Sym2</argument>,
<argument>BinaryOperator::Opcode Opc</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>compare</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>NonLoc NL1</argument>, <argument>NonLoc NL2</argument>,
<argument>BinaryOperator::Opcode Opc</argument>)</argument_list></macro></expr>;

}</block></expr>
}</block></expr>
}</block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
