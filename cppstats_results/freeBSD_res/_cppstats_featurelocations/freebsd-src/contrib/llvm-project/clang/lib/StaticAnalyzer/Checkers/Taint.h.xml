<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/Taint.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_TAINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_TAINT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>taint</name> <block>{<block_content>



<decl_stmt><decl><type><name>using</name></type> <name>TaintTagType</name> <init>= <expr><name>unsigned</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>TaintTagType</name></type> <name>TaintTagGeneric</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><name>LLVM_NODISCARD</name> <name>ProgramStateRef</name></type> <name>addTaint</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>TaintTagType</name></type> <name>Kind</name> <init>= <expr><name>TaintTagGeneric</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>LLVM_NODISCARD</name> <name>ProgramStateRef</name></type> <name>addTaint</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>V</name></decl></parameter>,
<parameter><decl><type><name>TaintTagType</name></type> <name>Kind</name> <init>= <expr><name>TaintTagGeneric</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>LLVM_NODISCARD</name> <name>ProgramStateRef</name></type> <name>addTaint</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SymbolRef</name></type> <name>Sym</name></decl></parameter>,
<parameter><decl><type><name>TaintTagType</name></type> <name>Kind</name> <init>= <expr><name>TaintTagGeneric</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>LLVM_NODISCARD</name> <name>ProgramStateRef</name></type> <name>addTaint</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><name>TaintTagType</name></type> <name>Kind</name> <init>= <expr><name>TaintTagGeneric</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LLVM_NODISCARD</name> <name>ProgramStateRef</name></type> <name>removeTaint</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>V</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LLVM_NODISCARD</name> <name>ProgramStateRef</name></type> <name>removeTaint</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LLVM_NODISCARD</name> <name>ProgramStateRef</name></type> <name>removeTaint</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>SymbolRef</name></type> <name>Sym</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>LLVM_NODISCARD</name> <name>ProgramStateRef</name></type> <name>addPartialTaint</name><parameter_list>(
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SymbolRef</name></type> <name>ParentSym</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SubRegion</name> <modifier>*</modifier></type><name>SubRegion</name></decl></parameter>,
<parameter><decl><type><name>TaintTagType</name></type> <name>Kind</name> <init>= <expr><name>TaintTagGeneric</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isTainted</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>TaintTagType</name></type> <name>Kind</name> <init>= <expr><name>TaintTagGeneric</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isTainted</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>V</name></decl></parameter>,
<parameter><decl><type><name>TaintTagType</name></type> <name>Kind</name> <init>= <expr><name>TaintTagGeneric</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isTainted</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SymbolRef</name></type> <name>Sym</name></decl></parameter>,
<parameter><decl><type><name>TaintTagType</name></type> <name>Kind</name> <init>= <expr><name>TaintTagGeneric</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>isTainted</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>Reg</name></decl></parameter>,
<parameter><decl><type><name>TaintTagType</name></type> <name>Kind</name> <init>= <expr><name>TaintTagGeneric</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>printTaint</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nl</name> <init>= <expr><literal type="string">"\n"</literal></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LLVM_DUMP_METHOD</name> <name>void</name></type> <name>dumpTaint</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>class</name> <name>TaintBugVisitor</name></type> <name>final</name> <range>: <expr><name>public</name> <name>BugReporterVisitor</name> <block>{
<expr><name>private</name><operator>:</operator>
<specifier>const</specifier> <name>SVal</name> <name>V</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>TaintBugVisitor</name><argument_list>(<argument>const SVal V</argument>)</argument_list></macro> <operator>:</operator> <macro><name>V</name><argument_list>(<argument>V</argument>)</argument_list></macro> <block>{}</block>
<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <expr><call><name><name>ID</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>PathDiagnosticPieceRef</name> <macro><name>VisitNode</name><argument_list>(<argument>const ExplodedNode *N</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;BR</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
