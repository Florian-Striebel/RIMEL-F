<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Sema/CoroutineStmtBuilder.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_SEMA_COROUTINESTMTBUILDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_SEMA_COROUTINESTMTBUILDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Preprocessor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/SemaInternal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CoroutineStmtBuilder</name> <range>: <expr><name>public</name> <name>CoroutineBodyStmt</name><operator>::</operator><name>CtorArgs</name> <block>{
<expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr>;
<expr><name>FunctionDecl</name> <operator>&amp;</operator><name>FD</name></expr>;
<expr><name>sema</name><operator>::</operator><name>FunctionScopeInfo</name> <operator>&amp;</operator><name>Fn</name></expr>;
<expr><name>bool</name> <name>IsValid</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>SourceLocation</name> <name>Loc</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>ParamMovesVector</name></expr>;
<expr><specifier>const</specifier> <name>bool</name> <name>IsPromiseDependentType</name></expr>;
<expr><name>CXXRecordDecl</name> <operator>*</operator><name>PromiseRecordDecl</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>public</name><operator>:</operator>


<call><name>CoroutineStmtBuilder</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>FunctionDecl</name> <operator>&amp;</operator><name>FD</name></expr></argument>, <argument><expr><name>sema</name><operator>::</operator><name>FunctionScopeInfo</name> <operator>&amp;</operator><name>Fn</name></expr></argument>,
<argument><expr><name>Stmt</name> <operator>*</operator><name>Body</name></expr></argument>)</argument_list></call></expr>;



<expr><name>bool</name> <call><name>buildStatements</name><argument_list>()</argument_list></call></expr>;








<expr><name>bool</name> <call><name>buildDependentStatements</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>IsValid</name></name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>bool</name> <call><name>makePromiseStmt</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <call><name>makeInitialAndFinalSuspend</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <call><name>makeNewAndDeleteExpr</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <call><name>makeOnFallthrough</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <call><name>makeOnException</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <call><name>makeReturnObject</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <call><name>makeGroDeclAndReturnStmt</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <call><name>makeReturnOnAllocFailure</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
