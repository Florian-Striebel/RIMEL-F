<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/MSVCSetupApi.h">



























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>E_NOTFOUND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_NOTFOUND</name></cpp:macro> <cpp:value>HRESULT_FROM_WIN32(ERROR_NOT_FOUND)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>E_FILENOTFOUND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_FILENOTFOUND</name></cpp:macro> <cpp:value>HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<enum>enum <name>InstanceState</name> : <type><name>unsigned</name></type> <block>{



<decl><name>eNone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,




<decl><name>eLocal</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,




<decl><name>eRegistered</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,




<decl><name>eNoRebootRequired</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,




<decl><name>eComplete</name> <init>= <expr><name>MAXUINT</name></expr></init></decl>,
}</block>;</enum>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ISetupInstance_FWD_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ISetupInstance_FWD_DEFINED__</name></cpp:macro></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>ISetupInstance</name></name></type> <name>ISetupInstance</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ISetupInstance2_FWD_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ISetupInstance2_FWD_DEFINED__</name></cpp:macro></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>ISetupInstance2</name></name></type> <name>ISetupInstance2</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IEnumSetupInstances_FWD_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__IEnumSetupInstances_FWD_DEFINED__</name></cpp:macro></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>IEnumSetupInstances</name></name></type> <name>IEnumSetupInstances</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ISetupConfiguration_FWD_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ISetupConfiguration_FWD_DEFINED__</name></cpp:macro></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>ISetupConfiguration</name></name></type> <name>ISetupConfiguration</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ISetupConfiguration2_FWD_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ISetupConfiguration2_FWD_DEFINED__</name></cpp:macro></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>ISetupConfiguration2</name></name></type> <name>ISetupConfiguration2</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ISetupPackageReference_FWD_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ISetupPackageReference_FWD_DEFINED__</name></cpp:macro></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>ISetupPackageReference</name></name></type> <name>ISetupPackageReference</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ISetupHelper_FWD_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ISetupHelper_FWD_DEFINED__</name></cpp:macro></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>ISetupHelper</name></name></type> <name>ISetupHelper</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SetupConfiguration_FWD_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SetupConfiguration_FWD_DEFINED__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>class</name> <name>SetupConfiguration</name></type> <name>SetupConfiguration</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>IID</name></type> <name>IID_ISetupInstance</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name><name>struct</name> <name>DECLSPEC_UUID</name></name></type><argument_list>(<argument><expr><literal type="string">"B41463C3-8866-43B5-BC33-2B0676F7F42E"</literal></expr></argument>)</argument_list>
<name>DECLSPEC_NOVTABLE</name> <name>ISetupInstance</name> <range>: <expr><name>public</name> <name>IUnknown</name> <block>{







<macro><name>STDMETHOD</name><argument_list>(<argument>GetInstanceId</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrInstanceId</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;










<macro><name>STDMETHOD</name><argument_list>(<argument>GetInstallDate</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>LPFILETIME</name> <name>pInstallDate</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;











<macro><name>STDMETHOD</name><argument_list>(<argument>GetInstallationName</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrInstallationName</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;









<macro><name>STDMETHOD</name><argument_list>(<argument>GetInstallationPath</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrInstallationPath</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;









<macro><name>STDMETHOD</name><argument_list>(<argument>GetInstallationVersion</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrInstallationVersion</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;










<macro><name>STDMETHOD</name><argument_list>(<argument>GetDisplayName</argument>)</argument_list></macro><expr><operator>(</operator><name>_In_</name> <name>LCID</name> <name>lcid</name>, <name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrDisplayName</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;










<macro><name>STDMETHOD</name><argument_list>(<argument>GetDescription</argument>)</argument_list></macro><expr><operator>(</operator><name>_In_</name> <name>LCID</name> <name>lcid</name>, <name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrDescription</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;












<macro><name>STDMETHOD</name><argument_list>(<argument>ResolvePath</argument>)</argument_list></macro>
<expr><operator>(</operator><name>_In_opt_z_</name> <name>LPCOLESTR</name> <name>pwszRelativePath</name>, <name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrAbsolutePath</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>IID</name></type> <name>IID_ISetupInstance2</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name><name>struct</name> <name>DECLSPEC_UUID</name></name></type><argument_list>(<argument><expr><literal type="string">"89143C9A-05AF-49B0-B717-72E218A2185C"</literal></expr></argument>)</argument_list>
<name>DECLSPEC_NOVTABLE</name> <name>ISetupInstance2</name> <range>: <expr><name>public</name> <name>ISetupInstance</name> <block>{






<macro><name>STDMETHOD</name><argument_list>(<argument>GetState</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>InstanceState</name> <operator>*</operator><name>pState</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;









<macro><name>STDMETHOD</name><argument_list>(<argument>GetPackages</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>LPSAFEARRAY</name> <operator>*</operator><name>ppsaPackages</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;











<macro><name>STDMETHOD</name><argument_list>(<argument>GetProduct</argument>)</argument_list></macro>
<expr><operator>(</operator><name>_Outptr_result_maybenull_</name> <name>ISetupPackageReference</name> <operator>*</operator><operator>*</operator><name>ppPackage</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;








<macro><name>STDMETHOD</name><argument_list>(<argument>GetProductPath</argument>)</argument_list></macro>
<expr><operator>(</operator><name>_Outptr_result_maybenull_</name> <name>BSTR</name> <operator>*</operator><name>pbstrProductPath</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>IID</name></type> <name>IID_IEnumSetupInstances</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name><name>struct</name> <name>DECLSPEC_UUID</name></name></type><argument_list>(<argument><expr><literal type="string">"6380BCFF-41D3-4B2E-8B2E-BF8A6810C848"</literal></expr></argument>)</argument_list>
<name>DECLSPEC_NOVTABLE</name> <name>IEnumSetupInstances</name> <range>: <expr><name>public</name> <name>IUnknown</name> <block>{












<macro><name>STDMETHOD</name><argument_list>(<argument>Next</argument>)</argument_list></macro>
<expr><operator>(</operator><name>_In_</name> <name>ULONG</name> <name>celt</name>, <macro><name>_Out_writes_to_</name><argument_list>(<argument>celt</argument>, <argument>*pceltFetched</argument>)</argument_list></macro> <name>ISetupInstance</name> <operator>*</operator><operator>*</operator><name>rgelt</name>,
<name>_Out_opt_</name> <macro><name>_Deref_out_range_</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>celt</argument>)</argument_list></macro> <name>ULONG</name> <operator>*</operator><name>pceltFetched</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;







<macro><name>STDMETHOD</name><argument_list>(<argument>Skip</argument>)</argument_list></macro><expr><operator>(</operator><name>_In_</name> <name>ULONG</name> <name>celt</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;





<expr><call><call><name>STDMETHOD</name><argument_list>(<argument><expr><name>Reset</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;










<macro><name>STDMETHOD</name><argument_list>(<argument>Clone</argument>)</argument_list></macro><expr><operator>(</operator><name>_Deref_out_opt_</name> <name>IEnumSetupInstances</name> <operator>*</operator><operator>*</operator><name>ppenum</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>IID</name></type> <name>IID_ISetupConfiguration</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name><name>struct</name> <name>DECLSPEC_UUID</name></name></type><argument_list>(<argument><expr><literal type="string">"42843719-DB4C-46C2-8E7C-64F1816EFD5B"</literal></expr></argument>)</argument_list>
<name>DECLSPEC_NOVTABLE</name> <name>ISetupConfiguration</name> <range>: <expr><name>public</name> <name>IUnknown</name> <block>{






<macro><name>STDMETHOD</name><argument_list>(<argument>EnumInstances</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>IEnumSetupInstances</name> <operator>*</operator><operator>*</operator><name>ppEnumInstances</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;








<macro><name>STDMETHOD</name><argument_list>(<argument>GetInstanceForCurrentProcess</argument>)</argument_list></macro>
<expr><operator>(</operator><name>_Out_</name> <name>ISetupInstance</name> <operator>*</operator><operator>*</operator><name>ppInstance</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;







<macro><name>STDMETHOD</name><argument_list>(<argument>GetInstanceForPath</argument>)</argument_list></macro>
<expr><operator>(</operator><name>_In_z_</name> <name>LPCWSTR</name> <name>wzPath</name>, <name>_Out_</name> <name>ISetupInstance</name> <operator>*</operator><operator>*</operator><name>ppInstance</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>IID</name></type> <name>IID_ISetupConfiguration2</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name><name>struct</name> <name>DECLSPEC_UUID</name></name></type><argument_list>(<argument><expr><literal type="string">"26AAB78C-4A60-49D6-AF3B-3C35BC93365D"</literal></expr></argument>)</argument_list>
<name>DECLSPEC_NOVTABLE</name> <name>ISetupConfiguration2</name> <range>: <expr><name>public</name> <name>ISetupConfiguration</name> <block>{






<macro><name>STDMETHOD</name><argument_list>(<argument>EnumAllInstances</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>IEnumSetupInstances</name> <operator>*</operator><operator>*</operator><name>ppEnumInstances</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>IID</name></type> <name>IID_ISetupPackageReference</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name><name>struct</name> <name>DECLSPEC_UUID</name></name></type><argument_list>(<argument><expr><literal type="string">"da8d8a16-b2b6-4487-a2f1-594ccccd6bf5"</literal></expr></argument>)</argument_list>
<name>DECLSPEC_NOVTABLE</name> <name>ISetupPackageReference</name> <range>: <expr><name>public</name> <name>IUnknown</name> <block>{





<macro><name>STDMETHOD</name><argument_list>(<argument>GetId</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrId</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;






<macro><name>STDMETHOD</name><argument_list>(<argument>GetVersion</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrVersion</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;







<macro><name>STDMETHOD</name><argument_list>(<argument>GetChip</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrChip</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;







<macro><name>STDMETHOD</name><argument_list>(<argument>GetLanguage</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrLanguage</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;






<macro><name>STDMETHOD</name><argument_list>(<argument>GetBranch</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrBranch</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;






<macro><name>STDMETHOD</name><argument_list>(<argument>GetType</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrType</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;








<macro><name>STDMETHOD</name><argument_list>(<argument>GetUniqueId</argument>)</argument_list></macro><expr><operator>(</operator><name>_Out_</name> <name>BSTR</name> <operator>*</operator><name>pbstrUniqueId</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>IID</name></type> <name>IID_ISetupHelper</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>







<decl_stmt><decl><type><name><name>struct</name> <name>DECLSPEC_UUID</name></name></type><argument_list>(<argument><expr><literal type="string">"42b21b78-6192-463e-87bf-d577838f1d5c"</literal></expr></argument>)</argument_list>
<name>DECLSPEC_NOVTABLE</name> <name>ISetupHelper</name> <range>: <expr><name>public</name> <name>IUnknown</name> <block>{








<macro><name>STDMETHOD</name><argument_list>(<argument>ParseVersion</argument>)</argument_list></macro>
<expr><operator>(</operator><name>_In_</name> <name>LPCOLESTR</name> <name>pwszVersion</name>, <name>_Out_</name> <name>PULONGLONG</name> <name>pullVersion</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;













<macro><name>STDMETHOD</name><argument_list>(<argument>ParseVersionRange</argument>)</argument_list></macro>
<expr><operator>(</operator><name>_In_</name> <name>LPCOLESTR</name> <name>pwszVersionRange</name>, <name>_Out_</name> <name>PULONGLONG</name> <name>pullMinVersion</name>,
<name>_Out_</name> <name>PULONGLONG</name> <name>pullMaxVersion</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name>EXTERN_C</name> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_SetupConfiguration</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><name>class</name></type> <name>DECLSPEC_UUID</name><argument_list>(<argument><expr><literal type="string">"177F0C4A-1CD3-4DE7-A32C-71DBBB9FA36D"</literal></expr></argument>)</argument_list> <name>SetupConfiguration</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<function_decl><type><name>STDMETHODIMP</name></type> <name>GetSetupConfiguration</name><parameter_list>(<parameter><decl><type><name>_Out_</name> <name>ISetupConfiguration</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppConfiguration</name></decl></parameter>,
<parameter><decl><type><name>_Reserved_</name> <name>LPVOID</name></type> <name>pReserved</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
