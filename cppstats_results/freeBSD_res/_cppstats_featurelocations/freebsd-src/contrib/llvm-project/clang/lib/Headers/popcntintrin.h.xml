<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/popcntintrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__POPCNTINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__POPCNTINTRIN_H</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("popcnt")))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></cpp:macro> <cpp:value>__DEFAULT_FN_ATTRS constexpr</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></cpp:macro> <cpp:value>__DEFAULT_FN_ATTRS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>_mm_popcnt_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__A</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_popcount</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>










<function><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>_mm_popcnt_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__A</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_popcountll</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
