<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/ROCm.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_ROCM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_ROCM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Cuda.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Driver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/ArgList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>RocmInstallationDetector</name> <block>{<block_content>
<label><name>private</name>:</label>
<struct>struct <name>ConditionalLibrary</name> <block>{
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>On</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>Off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>On</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Off</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>get</name><argument_list>(<argument><expr><name>bool</name> <name>Enabled</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>Enabled</name></expr> ?</condition><then> <expr><name>On</name></expr> </then><else>: <expr><name>Off</name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>
}</block>;</struct>


<struct>struct <name>Candidate</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <name>Path</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>StrictChecking</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>SPACKReleaseStr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isSPACK</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>SPACKReleaseStr</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<macro><name>Candidate</name><argument_list>(<argument>std::string Path</argument>, <argument>bool StrictChecking = false</argument>,
<argument>StringRef SPACKReleaseStr = {}</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Path</name><argument_list>(<argument><expr><name>Path</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>StrictChecking</name><argument_list>(<argument><expr><name>StrictChecking</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>SPACKReleaseStr</name><argument_list>(<argument>SPACKReleaseStr.str()</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>Driver</name> <modifier>&amp;</modifier></type><name>D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HasHIPRuntime</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HasDeviceLibrary</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>DefaultVersionMajor</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>DefaultVersionMinor</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DefaultVersionPatch</name> <init>= <expr><literal type="string">"0"</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>DetectedVersion</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>VersionTuple</name> <name>VersionMajorMinor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>VersionPatch</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>RocmPathArg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>RocmDeviceLibPathArg</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>HIPPathArg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>HIPVersionArg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>NoBuiltinLibs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>InstallPath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>BinPath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>LibPath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>LibDevicePath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>IncludePath</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>LibDeviceMap</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>OCML</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>OCKL</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>OpenCL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>HIP</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>AsanRTL</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ConditionalLibrary</name></type> <name>WavefrontSize64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConditionalLibrary</name></type> <name>FiniteOnly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConditionalLibrary</name></type> <name>UnsafeMath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConditionalLibrary</name></type> <name>DenormalsAreZero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConditionalLibrary</name></type> <name>CorrectlyRoundedSqrt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Candidate</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>ROCmSearchDirs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>PrintROCmSearchDirs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Verbose</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>allGenericLibsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><call><name><name>OCML</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>OCKL</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>OpenCL</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>HIP</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>WavefrontSize64</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>FiniteOnly</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>UnsafeMath</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>DenormalsAreZero</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>CorrectlyRoundedSqrt</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>scanLibDevicePath</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>parseHIPVersionFile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>V</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Candidate</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>getInstallationPathCandidates</name><parameter_list>()</parameter_list>;</function_decl>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <macro><name>findSPACKPackage</name><argument_list>(<argument>const Candidate &amp;Cand</argument>,
<argument>StringRef PackageName</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>public</name>:</label>
<macro><name>RocmInstallationDetector</name><argument_list>(<argument>const Driver &amp;D</argument>, <argument>const llvm::Triple &amp;HostTriple</argument>,
<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>bool DetectHIPRuntime = true</argument>,
<argument>bool DetectDeviceLib = false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>&gt;</argument_list></name>
<macro><name>getCommonBitcodeLibs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>StringRef LibDeviceFile</argument>, <argument>bool Wave64</argument>, <argument>bool DAZ</argument>,
<argument>bool FiniteOnly</argument>, <argument>bool UnsafeMathOpt</argument>,
<argument>bool FastRelaxedMath</argument>, <argument>bool CorrectSqrt</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasHIPRuntime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasHIPRuntime</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasDeviceLibrary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasDeviceLibrary</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><name>StringRef</name> <macro><name>getInstallPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>InstallPath</name></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name>StringRef</name> <macro><name>getIncludePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IncludePath</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>getLibPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LibPath</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>getLibDevicePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LibDevicePath</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getOCMLPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>OCML</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>OCML</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getOCKLPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>OCKL</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>OCKL</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getOpenCLPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>OpenCL</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>OpenCL</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getHIPPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>HIP</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>HIP</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>getAsanRTLPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AsanRTL</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>getWavefrontSize64Path</name><argument_list>(<argument><expr><name>bool</name> <name>Enabled</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>WavefrontSize64</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Enabled</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>getFiniteOnlyPath</name><argument_list>(<argument><expr><name>bool</name> <name>Enabled</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>FiniteOnly</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Enabled</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>getUnsafeMathPath</name><argument_list>(<argument><expr><name>bool</name> <name>Enabled</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>UnsafeMath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Enabled</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>getDenormalsAreZeroPath</name><argument_list>(<argument><expr><name>bool</name> <name>Enabled</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>DenormalsAreZero</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Enabled</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>getCorrectlyRoundedSqrtPath</name><argument_list>(<argument><expr><name>bool</name> <name>Enabled</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>CorrectlyRoundedSqrt</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Enabled</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getLibDeviceFile</name><argument_list>(<argument>StringRef Gpu</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>LibDeviceMap</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>Gpu</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>AddHIPIncludeArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>DriverArgs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>detectDeviceLibrary</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>detectHIPRuntime</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getRocmDeviceLibPathArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>RocmDeviceLibPathArg</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>getRocmPathArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RocmPathArg</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>getHIPVersionArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HIPVersionArg</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getHIPVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DetectedVersion</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
