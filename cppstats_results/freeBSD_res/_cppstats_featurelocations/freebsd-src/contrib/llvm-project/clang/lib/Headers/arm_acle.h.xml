<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/arm_acle.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ACLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ARM_ACLE_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ACLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"ACLE intrinsics support not enabled."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__dmb</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__dmb</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_dmb(i)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__dsb</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__dsb</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_dsb(i)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__isb</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__isb</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_isb(i)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__wfi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list> <name>__wfi</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_arm_wfi</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__wfe</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list> <name>__wfe</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_arm_wfe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__sev</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list> <name>__sev</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_arm_sev</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__sevl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list> <name>__sevl</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_arm_sevl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__yield</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list> <name>__yield</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_arm_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_32BIT_STATE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__dbg</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_dbg(t)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__swp</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__x</name></expr></argument>, <argument><expr><specifier>volatile</specifier> <name>uint32_t</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>__builtin_arm_ldrex</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><call><name>__builtin_arm_strex</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__pld</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__pldx(0, 0, 0, addr)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_32BIT_STATE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__pldx</name><parameter_list>(<parameter><type><name>access_kind</name></type></parameter>, <parameter><type><name>cache_level</name></type></parameter>, <parameter><type><name>retention_policy</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_prefetch(addr, access_kind, 1)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__pldx</name><parameter_list>(<parameter><type><name>access_kind</name></type></parameter>, <parameter><type><name>cache_level</name></type></parameter>, <parameter><type><name>retention_policy</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_prefetch(addr, access_kind, cache_level, retention_policy, 1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__pli</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__plix(0, 0, addr)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_32BIT_STATE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__plix</name><parameter_list>(<parameter><type><name>cache_level</name></type></parameter>, <parameter><type><name>retention_policy</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_prefetch(addr, 0, 0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__plix</name><parameter_list>(<parameter><type><name>cache_level</name></type></parameter>, <parameter><type><name>retention_policy</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_prefetch(addr, 0, cache_level, retention_policy, 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list> <name>__nop</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_arm_nop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__ror</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__x</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>__y</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>__y</name> <operator>%=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__x</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>__x</name> <operator>&gt;&gt;</operator> <name>__y</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>__y</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rorll</name><argument_list>(<argument><expr><name>uint64_t</name> <name>__x</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>__y</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>__y</name> <operator>%=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__x</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>__x</name> <operator>&gt;&gt;</operator> <name>__y</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>__y</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rorl</name><argument_list>(<argument><expr><name>unsigned</name> <name>long</name> <name>__x</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>__y</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SIZEOF_LONG__</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<return>return <expr><call><name>__ror</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__rorll</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__clz</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_clz</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__clzl</name><argument_list>(<argument><expr><name>unsigned</name> <name>long</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_clzl</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__clzll</name><argument_list>(<argument><expr><name>uint64_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_clzll</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__cls</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_cls</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__clsl</name><argument_list>(<argument><expr><name>unsigned</name> <name>long</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SIZEOF_LONG__</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<return>return <expr><call><name>__builtin_arm_cls</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_arm_cls64</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__clsll</name><argument_list>(<argument><expr><name>uint64_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_cls64</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rev</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_bswap32</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__revl</name><argument_list>(<argument><expr><name>unsigned</name> <name>long</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SIZEOF_LONG__</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<return>return <expr><call><name>__builtin_bswap32</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_bswap64</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__revll</name><argument_list>(<argument><expr><name>uint64_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_bswap64</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rev16</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__ror</name><argument_list>(<argument><expr><call><name>__rev</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rev16ll</name><argument_list>(<argument><expr><name>uint64_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>__rev16</name><argument_list>(<argument><expr><name>__t</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <call><name>__rev16</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rev16l</name><argument_list>(<argument><expr><name>unsigned</name> <name>long</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SIZEOF_LONG__</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<return>return <expr><call><name>__rev16</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__rev16ll</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__revsh</name><argument_list>(<argument><expr><name>int16_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_bswap16</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rbit</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_rbit</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rbitll</name><argument_list>(<argument><expr><name>uint64_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_32BIT_STATE</name></expr></cpp:if>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>__builtin_arm_rbit</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>
<call><name>__builtin_arm_rbit</name><argument_list>(<argument><expr><name>__t</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_arm_rbit64</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rbitl</name><argument_list>(<argument><expr><name>unsigned</name> <name>long</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__SIZEOF_LONG__</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<return>return <expr><call><name>__rbit</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__rbitll</name><argument_list>(<argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_DSP</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator><name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smulbb</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smulbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator><name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smulbt</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smulbt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator><name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smultb</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smultb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator><name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smultt</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smultt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator><name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smulwb</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smulwb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator><name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smulwt</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smulwt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_SAT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ssat</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_ssat(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__usat</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_usat(x, y)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_DSP</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__qadd</name><argument_list>(<argument><expr><name>int32_t</name> <name>__t</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__v</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_qadd</name><argument_list>(<argument><expr><name>__t</name></expr></argument>, <argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__qsub</name><argument_list>(<argument><expr><name>int32_t</name> <name>__t</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__v</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_qsub</name><argument_list>(<argument><expr><name>__t</name></expr></argument>, <argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__qdbl</name><argument_list>(<argument><expr><name>int32_t</name> <name>__t</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_qadd</name><argument_list>(<argument><expr><name>__t</name></expr></argument>, <argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_DSP</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlabb</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlabb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlabt</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlabt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlatb</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlatb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlatt</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlatt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlawb</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlawb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlawt</name><argument_list>(<argument><expr><name>int32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlawt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_SIMD32</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ssat16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_ssat16(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__usat16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_usat16(x, y)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_SIMD32</name></expr></cpp:if>
<typedef>typedef <type><name>int32_t</name></type> <name>int8x4_t</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>int16x2_t</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>uint8x4_t</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>uint16x2_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__sxtab16</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_sxtab16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__sxtb16</name><argument_list>(<argument><expr><name>int8x4_t</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_sxtb16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uxtab16</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uxtab16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uxtb16</name><argument_list>(<argument><expr><name>int8x4_t</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uxtb16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_SIMD32</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__sel</name><argument_list>(<argument><expr><name>uint8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_sel</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_SIMD32</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__qadd8</name><argument_list>(<argument><expr><name>int8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_qadd8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__qsub8</name><argument_list>(<argument><expr><name>int8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_qsub8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__sadd8</name><argument_list>(<argument><expr><name>int8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_sadd8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__shadd8</name><argument_list>(<argument><expr><name>int8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_shadd8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__shsub8</name><argument_list>(<argument><expr><name>int8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_shsub8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__ssub8</name><argument_list>(<argument><expr><name>int8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_ssub8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uadd8</name><argument_list>(<argument><expr><name>uint8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uadd8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uhadd8</name><argument_list>(<argument><expr><name>uint8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uhadd8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uhsub8</name><argument_list>(<argument><expr><name>uint8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uhsub8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uqadd8</name><argument_list>(<argument><expr><name>uint8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uqadd8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uqsub8</name><argument_list>(<argument><expr><name>uint8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uqsub8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint8x4_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__usub8</name><argument_list>(<argument><expr><name>uint8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_usub8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_SIMD32</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__usad8</name><argument_list>(<argument><expr><name>uint8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8x4_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_usad8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__usada8</name><argument_list>(<argument><expr><name>uint8x4_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8x4_t</name> <name>__b</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_usada8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_SIMD32</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__qadd16</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_qadd16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__qasx</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_qasx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__qsax</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_qsax</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__qsub16</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_qsub16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__sadd16</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_sadd16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__sasx</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_sasx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__shadd16</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_shadd16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__shasx</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_shasx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__shsax</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_shsax</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__shsub16</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_shsub16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__ssax</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_ssax</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__ssub16</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_ssub16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uadd16</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uadd16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uasx</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uasx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uhadd16</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uhadd16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uhasx</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uhasx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uhsax</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uhsax</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uhsub16</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uhsub16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uqadd16</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uqadd16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uqasx</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uqasx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uqsax</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uqsax</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__uqsub16</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_uqsub16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__usax</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_usax</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint16x2_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__usub16</name><argument_list>(<argument><expr><name>uint16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_usub16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_SIMD32</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlad</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlad</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smladx</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smladx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlald</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int64_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlald</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlaldx</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int64_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlaldx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlsd</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlsd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlsdx</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int32_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlsdx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlsld</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int64_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlsld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smlsldx</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>, <argument><expr><name>int64_t</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smlsldx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smuad</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smuad</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smuadx</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smuadx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smusd</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smusd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__smusdx</name><argument_list>(<argument><expr><name>int16x2_t</name> <name>__a</name></expr></argument>, <argument><expr><name>int16x2_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_smusdx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_CRC32</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__crc32b</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_crc32b</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__crc32h</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_crc32h</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__crc32w</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_crc32w</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__crc32d</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_crc32d</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__crc32cb</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_crc32cb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__crc32ch</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint16_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_crc32ch</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__crc32cw</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_crc32cw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__crc32cd</name><argument_list>(<argument><expr><name>uint32_t</name> <name>__a</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_crc32cd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_64BIT_STATE</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_FEATURE_JCVT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int32_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__jcvt</name><argument_list>(<argument><expr><name>double</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_jcvt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_64BIT_STATE</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_FEATURE_FRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__frint32zf</name><argument_list>(<argument><expr><name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_frint32zf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>double</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__frint32z</name><argument_list>(<argument><expr><name>double</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_frint32z</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__frint64zf</name><argument_list>(<argument><expr><name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_frint64zf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>double</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__frint64z</name><argument_list>(<argument><expr><name>double</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_frint64z</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__frint32xf</name><argument_list>(<argument><expr><name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_frint32xf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>double</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__frint32x</name><argument_list>(<argument><expr><name>double</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_frint32x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__frint64xf</name><argument_list>(<argument><expr><name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_frint64xf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>double</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__frint64x</name><argument_list>(<argument><expr><name>double</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_frint64x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_64BIT_STATE</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_FEATURE_LS64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>val</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>data512_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>data512_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__arm_ld64b</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>__addr</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>data512_t</name></type> <name>__value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__builtin_arm_ld64b</name><argument_list>(<argument><expr><name>__addr</name></expr></argument>, <argument><expr><name><name>__value</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>__value</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__arm_st64b</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__addr</name></expr></argument>, <argument><expr><name>data512_t</name> <name>__value</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_arm_st64b</name><argument_list>(<argument><expr><name>__addr</name></expr></argument>, <argument><expr><name><name>__value</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__arm_st64bv</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__addr</name></expr></argument>, <argument><expr><name>data512_t</name> <name>__value</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_st64bv</name><argument_list>(<argument><expr><name>__addr</name></expr></argument>, <argument><expr><name><name>__value</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>uint64_t</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__arm_st64bv0</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__addr</name></expr></argument>, <argument><expr><name>data512_t</name> <name>__value</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_st64bv0</name><argument_list>(<argument><expr><name>__addr</name></expr></argument>, <argument><expr><name><name>__value</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_rsr</name><parameter_list>(<parameter><type><name>sysreg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_rsr(sysreg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_rsr64</name><parameter_list>(<parameter><type><name>sysreg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_rsr64(sysreg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_rsrp</name><parameter_list>(<parameter><type><name>sysreg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_rsrp(sysreg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_rsrf</name><parameter_list>(<parameter><type><name>sysreg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_bit_cast(float, __arm_rsr(sysreg))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_rsrf64</name><parameter_list>(<parameter><type><name>sysreg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_bit_cast(double, __arm_rsr64(sysreg))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_wsr</name><parameter_list>(<parameter><type><name>sysreg</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_wsr(sysreg, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_wsr64</name><parameter_list>(<parameter><type><name>sysreg</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_wsr64(sysreg, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_wsrp</name><parameter_list>(<parameter><type><name>sysreg</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_wsrp(sysreg, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_wsrf</name><parameter_list>(<parameter><type><name>sysreg</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__arm_wsr(sysreg, __builtin_bit_cast(uint32_t, v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_wsrf64</name><parameter_list>(<parameter><type><name>sysreg</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__arm_wsr64(sysreg, __builtin_bit_cast(uint64_t, v))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_MEMORY_TAGGING</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_mte_create_random_tag</name><parameter_list>(<parameter><type><name>__ptr</name></type></parameter>, <parameter><type><name>__mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_irg(__ptr, __mask)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_mte_increment_tag</name><parameter_list>(<parameter><type><name>__ptr</name></type></parameter>, <parameter><type><name>__tag_offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_addg(__ptr, __tag_offset)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_mte_exclude_tag</name><parameter_list>(<parameter><type><name>__ptr</name></type></parameter>, <parameter><type><name>__excluded</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_gmi(__ptr, __excluded)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_mte_get_tag</name><parameter_list>(<parameter><type><name>__ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_ldg(__ptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_mte_set_tag</name><parameter_list>(<parameter><type><name>__ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_stg(__ptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arm_mte_ptrdiff</name><parameter_list>(<parameter><type><name>__ptra</name></type></parameter>, <parameter><type><name>__ptrb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_subp(__ptra, __ptrb)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_FEATURE_TME</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_REASON</name></cpp:macro> <cpp:value>0x00007fffu</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_RTRY</name></cpp:macro> <cpp:value>0x00008000u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_CNCL</name></cpp:macro> <cpp:value>0x00010000u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_MEM</name></cpp:macro> <cpp:value>0x00020000u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_IMP</name></cpp:macro> <cpp:value>0x00040000u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_ERR</name></cpp:macro> <cpp:value>0x00080000u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_SIZE</name></cpp:macro> <cpp:value>0x00100000u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_NEST</name></cpp:macro> <cpp:value>0x00200000u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_DBG</name></cpp:macro> <cpp:value>0x00400000u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_INT</name></cpp:macro> <cpp:value>0x00800000u</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TMFAILURE_TRIVIAL</name></cpp:macro> <cpp:value>0x01000000u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__tstart</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__builtin_arm_tstart()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__tcommit</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__builtin_arm_tcommit()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__tcancel</name><parameter_list>(<parameter><type><name>__arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_arm_tcancel(__arg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ttest</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__builtin_arm_ttest()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__ARM_64BIT_STATE</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_FEATURE_RNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rndr</name><argument_list>(<argument><expr><name>uint64_t</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_rndr</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__rndrrs</name><argument_list>(<argument><expr><name>uint64_t</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_arm_rndrrs</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
