<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/InterpStack.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_INTERPSTACK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_INTERPSTACK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name> <name>InterpStack</name></type> <name>final</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>InterpStack</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>


<expr_stmt><expr><operator>~</operator><call><name>InterpStack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>Tys</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>push</name><argument_list>(<argument><expr><name>Tys</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>Args</name></expr></argument>)</argument_list> <block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>grow(aligned_size&lt;T&gt;())</argument>)</argument_list></macro> <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Tys</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Ptr</name> <operator>=</operator> <operator>&amp;</operator><call><name><name>peek</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>Value</name> <init>= <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><operator>*</operator><name>Ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Ptr</name><operator>-&gt;</operator><name/></name>~<call><name>T</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shrink</name><argument_list>(<argument><expr><call><name><name>aligned_size</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Value</name></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>discard</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Ptr</name> <operator>=</operator> <operator>&amp;</operator><call><name><name>peek</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ptr</name><operator>-&gt;</operator><name/></name>~<call><name>T</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shrink</name><argument_list>(<argument><expr><call><name><name>aligned_size</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <modifier>&amp;</modifier></type><name>peek</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>peek</name><argument_list>(<argument><expr><call><name><name>aligned_size</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>top</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>Chunk</name></expr> ?</condition><then> <expr><call><name>peek</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>StackSize</name></expr>;</return> }</block></expr></expr_stmt>


<function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>constexpr</name> <name>size_t</name> <macro><name>aligned_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>constexpr</name> <name>size_t</name> <name>PtrAlign</name> <operator>=</operator> <call><name>alignof</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>PtrAlign</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>PtrAlign</name><operator>)</operator> <operator>*</operator> <name>PtrAlign</name></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><name>void</name> <modifier>*</modifier></type><name>grow</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>peek</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>shrink</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>ChunkSize</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>







<struct>struct <name>StackChunk</name> <block>{
<decl_stmt><decl><type><name>StackChunk</name> <modifier>*</modifier></type><name>Next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StackChunk</name> <modifier>*</modifier></type><name>Prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>End</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StackChunk</name><argument_list>(<argument><expr><name>StackChunk</name> <operator>*</operator><name>Prev</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Next</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Prev</name><argument_list>(<argument><expr><name>Prev</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>End</name><argument_list>(<argument>reinterpret_cast&lt;char *&gt;(this + <literal type="number">1</literal>)</argument>)</argument_list></macro> <expr><block>{}</block>


<name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>End</name> <operator>-</operator> <call><name>start</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>char</name> <modifier>*</modifier></type><name>start</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
}</block>;</struct>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StackChunk</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>ChunkSize</name></expr></argument>, <argument><expr><literal type="string">"Invalid chunk size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>StackChunk</name> <modifier>*</modifier></type><name>Chunk</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>StackSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
