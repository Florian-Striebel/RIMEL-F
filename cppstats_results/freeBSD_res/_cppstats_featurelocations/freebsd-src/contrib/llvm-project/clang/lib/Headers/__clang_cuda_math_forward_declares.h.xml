<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/__clang_cuda_math_forward_declares.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG__CUDA_MATH_FORWARD_DECLARES_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG__CUDA_MATH_FORWARD_DECLARES_H__</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>__HIP__</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file is for CUDA/HIP compilation only."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__DEVICE__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static __inline__ __attribute__((always_inline)) __attribute__((device))</cpp:value></cpp:define>


<function_decl><type><name>__DEVICE__</name> <name>long</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>int</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>acos</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>acos</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>acosh</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>acosh</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>asin</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>asin</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>asinh</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>asinh</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>atan2</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>atan2</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>atan</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>atan</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>atanh</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>atanh</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>cbrt</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>cbrt</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>ceil</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>ceil</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>copysign</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>copysign</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>cos</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>cos</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>cosh</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>cosh</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>erfc</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>erfc</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>erf</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>erf</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>exp2</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>exp2</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>expm1</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>expm1</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>fabs</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>fabs</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>fdim</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>fdim</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>floor</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>floor</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>fma</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>fma</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>fmax</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>fmax</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>fmin</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>fmin</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>fmod</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>fmod</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>int</name></type> <name>fpclassify</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>int</name></type> <name>fpclassify</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>frexp</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>frexp</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>hypot</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>hypot</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>int</name></type> <name>ilogb</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>int</name></type> <name>ilogb</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isfinite</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isfinite</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isfinite</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isgreater</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isgreaterequal</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isgreaterequal</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isgreater</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isinf</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isinf</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isinf</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isless</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>islessequal</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>islessequal</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isless</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>islessgreater</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>islessgreater</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isnan</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isnan</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isnan</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isnormal</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isnormal</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isunordered</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>isunordered</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>long</name></type> <name>labs</name><parameter_list>(<parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>ldexp</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>ldexp</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>lgamma</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>lgamma</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llabs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llrint</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llrint</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>log10</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>log10</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>log1p</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>log1p</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>log2</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>log2</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>logb</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>logb</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>long</name></type> <name>lrint</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>long</name></type> <name>lrint</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>long</name></type> <name>lround</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>long</name></type> <name>lround</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llround</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>modf</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>modf</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>nan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>nanf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>nearbyint</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>nearbyint</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>nextafter</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>nextafter</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>remainder</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>remainder</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>remquo</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>remquo</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>rint</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>rint</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>round</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>round</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>scalbln</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>scalbln</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>scalbn</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>scalbn</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>signbit</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>signbit</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>bool</name></type> <name>signbit</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>sin</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>sin</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>sinh</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>sinh</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>sqrt</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>sqrt</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>tan</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>tan</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>tanh</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>tanh</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>tgamma</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>tgamma</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>double</name></type> <name>trunc</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__DEVICE__</name> <name>float</name></type> <name>trunc</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_BEGIN_NAMESPACE_STD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>namespace</name></type> <name>std</name> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLIBCXX_BEGIN_NAMESPACE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>_GLIBCXX_BEGIN_NAMESPACE_VERSION</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>using</name> <operator>::</operator><name>abs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>acos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>acosh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>asin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>asinh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>atan</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>atan2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>atanh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>cbrt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>ceil</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>copysign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>cos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>cosh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>erf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>erfc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>exp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>exp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>expm1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fabs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fdim</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>floor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fma</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fmax</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fmin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fmod</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fpclassify</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>frexp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>hypot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>ilogb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isfinite</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isgreater</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isgreaterequal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isinf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isless</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>islessequal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>islessgreater</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isnan</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isnormal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isunordered</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>labs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>ldexp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>lgamma</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>llabs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>llrint</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log1p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>logb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>lrint</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>lround</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>llround</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>modf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>nan</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>nanf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>nearbyint</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>nextafter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>pow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>remainder</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>remquo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>rint</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>round</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>scalbln</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>scalbn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>signbit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>sin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>sinh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>sqrt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>tan</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>tanh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>tgamma</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>trunc</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>_LIBCPP_END_NAMESPACE_STD</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLIBCXX_BEGIN_NAMESPACE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_GLIBCXX_END_NAMESPACE_VERSION</name></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__DEVICE__"</cpp:literal><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
