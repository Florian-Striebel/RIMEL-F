<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/ABIInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_ABIINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_ABIINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/CallingConv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Type.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LLVMContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DataLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TargetInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ABIArgInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CGCXXABI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CGFunctionInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenFunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenTypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SwiftABIInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>swiftcall</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SwiftAggLowering</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>









<decl_stmt><decl><type><name>class</name></type> <name>ABIInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>CodeGen</name><operator>::</operator><name>CodeGenTypes</name> <operator>&amp;</operator><name>CGT</name></expr>;</expr_stmt>
<label><name>protected</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CallingConv</name><operator>::</operator><name>ID</name> <name>RuntimeCC</name></expr>;</expr_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ABIInfo</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenTypes</name> <operator>&amp;</operator><name>cgt</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CGT</name><argument_list>(<argument><expr><name>cgt</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>RuntimeCC</name><argument_list>(<argument>llvm::CallingConv::C</argument>)</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><call><name>ABIInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>supportsSwift</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>allowBFloatArgsAndRet</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>CodeGen</name><operator>::</operator><name>CGCXXABI</name> <operator>&amp;</operator><macro><name>getCXXABI</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>&amp;</operator><macro><name>getVMContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DataLayout</name> <operator>&amp;</operator><macro><name>getDataLayout</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><macro><name>getTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>CodeGenOptions</name> <operator>&amp;</operator><macro><name>getCodeGenOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CallingConv</name><operator>::</operator><name>ID</name> <macro><name>getRuntimeCC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>RuntimeCC</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>computeInfo</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CGFunctionInfo</name> <operator>&amp;</operator><name>FI</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>








<expr_stmt><expr><name>virtual</name> <name>CodeGen</name><operator>::</operator><name>Address</name> <macro><name>EmitVAArg</name><argument_list>(<argument>CodeGen::CodeGenFunction &amp;CGF</argument>,
<argument>CodeGen::Address VAListAddr</argument>,
<argument>QualType Ty</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isAndroid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>CodeGen</name><operator>::</operator><name>Address</name> <macro><name>EmitMSVAArg</name><argument_list>(<argument>CodeGen::CodeGenFunction &amp;CGF</argument>,
<argument>CodeGen::Address VAListAddr</argument>,
<argument>QualType Ty</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isHomogeneousAggregateBaseType</name><argument_list>(<argument><expr><name>QualType</name> <name>Ty</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isHomogeneousAggregateSmallEnough</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><name>Base</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>Members</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isHomogeneousAggregate</name><argument_list>(<argument><expr><name>QualType</name> <name>Ty</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><operator>&amp;</operator><name>Base</name></expr></argument>,
<argument><expr><name>uint64_t</name> <operator>&amp;</operator><name>Members</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isPromotableIntegerTypeForABI</name><argument_list>(<argument><expr><name>QualType</name> <name>Ty</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name>CodeGen</name><operator>::</operator><name>ABIArgInfo</name>
<macro><name>getNaturalAlignIndirect</name><argument_list>(<argument>QualType Ty</argument>, <argument>bool ByVal = true</argument>,
<argument>bool Realign = false</argument>,
<argument>llvm::Type *Padding = nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>CodeGen</name><operator>::</operator><name>ABIArgInfo</name>
<macro><name>getNaturalAlignIndirectInReg</name><argument_list>(<argument>QualType Ty</argument>, <argument>bool Realign = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>SwiftABIInfo</name> <range>: <expr><name>public</name> <name>ABIInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SwiftABIInfo</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenTypes</name> <operator>&amp;</operator><name>cgt</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ABIInfo</name><argument_list>(<argument>cgt</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>supportsSwift</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>final</name> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>virtual</name> <name>bool</name> <macro><name>shouldPassIndirectlyForSwift</name><argument_list>(<argument>ArrayRef&lt;llvm::Type*&gt; types</argument>,
<argument>bool asReturnValue</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>isLegalVectorTypeForSwift</name><argument_list>(<argument>CharUnits totalSize</argument>,
<argument>llvm::Type *eltTy</argument>,
<argument>unsigned elts</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>isSwiftErrorInRegister</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ABIInfo *info</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>info</name><operator>-&gt;</operator><name>supportsSwift</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;
}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
