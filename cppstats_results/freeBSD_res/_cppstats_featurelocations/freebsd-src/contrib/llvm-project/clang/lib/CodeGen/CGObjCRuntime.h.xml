<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGOBJCRUNTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGOBJCRUNTIME_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGCall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGCleanup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclObjC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/IdentifierTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/UniqueVector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Constant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StructLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StructType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Value</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenFunction</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FieldDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCAtTryStmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCAtThrowStmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCAtSynchronizedStmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCContainerDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCCategoryImplDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCImplementationDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCInterfaceDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCMessageExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCProtocolDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Selector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCIvarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCStringLiteral</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BlockDeclRefExpr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CGBlockInfo</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>CGObjCRuntime</name> <block>{<block_content>
<label><name>protected</name>:</label>
<expr_stmt><expr><name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGObjCRuntime</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>CGM</name><argument_list>(<argument>CGM</argument>)</argument_list></macro> <block>{}</block>











<name>uint64_t</name> <call><name>ComputeIvarBaseOffset</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <operator>*</operator><name>OID</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCIvarDecl</name> <operator>*</operator><name>Ivar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ComputeIvarBaseOffset</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCImplementationDecl</name> <operator>*</operator><name>OID</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCIvarDecl</name> <operator>*</operator><name>Ivar</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LValue</name></type> <name>EmitValueForIvarAtOffset</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <operator>*</operator><name>OID</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>BaseValue</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCIvarDecl</name> <operator>*</operator><name>Ivar</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>CVRQualifiers</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>Offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<decl_stmt><decl><type><name>void</name></type> <name>EmitTryCatchStmt</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ObjCAtTryStmt</name> <operator>&amp;</operator><name>S</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>FunctionCallee</name> <name>beginCatchFn</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>FunctionCallee</name> <name>endCatchFn</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>FunctionCallee</name> <name>exceptionRethrowFn</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>EmitInitOfCatchParam</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>exn</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>paramDecl</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>EmitAtSynchronizedStmt</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCAtSynchronizedStmt</name> <operator>&amp;</operator><name>S</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>FunctionCallee</name> <name>syncEnterFn</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>FunctionCallee</name> <name>syncExitFn</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>CGObjCRuntime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getSymbolNameForMethod</name><argument_list>(<argument>const ObjCMethodDecl *method</argument>,
<argument>bool includeCategoryName = true</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><call><name>ModuleInitFunction</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>GetSelector</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>Selector Sel</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<function_decl><type><name>virtual</name> <name>Address</name></type> <name>GetAddrOfSelector</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>, <parameter><decl><type><name>Selector</name></type> <name>Sel</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><call><name>GetSelector</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCMethodDecl</name> <operator>*</operator><name>Method</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>GetEHType</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function><type><name>virtual</name> <name>CatchTypeInfo</name></type> <name>getCatchAllTypeInfo</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><block>{ <expr><name>nullptr</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</return> </block_content>}</block></function>


<function_decl><type><name>virtual</name> <name>ConstantAddress</name></type> <name>GenerateConstantString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringLiteral</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>GenerateCategory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCCategoryImplDecl</name> <modifier>*</modifier></type><name>OCD</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>GenerateClass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCImplementationDecl</name> <modifier>*</modifier></type><name>OID</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>RegisterAlias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCCompatibleAliasDecl</name> <modifier>*</modifier></type><name>OAD</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<expr_stmt><expr><name>virtual</name> <name>CodeGen</name><operator>::</operator><name>RValue</name>
<macro><name>GenerateMessageSend</name><argument_list>(<argument>CodeGen::CodeGenFunction &amp;CGF</argument>,
<argument>ReturnValueSlot ReturnSlot</argument>,
<argument>QualType ResultType</argument>,
<argument>Selector Sel</argument>,
<argument>llvm::Value *Receiver</argument>,
<argument>const CallArgList &amp;CallArgs</argument>,
<argument>const ObjCInterfaceDecl *Class = nullptr</argument>,
<argument>const ObjCMethodDecl *Method = nullptr</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>CodeGen</name><operator>::</operator><name>RValue</name>
<macro><name>GeneratePossiblySpecializedMessageSend</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>,
<argument>ReturnValueSlot Return</argument>,
<argument>QualType ResultType</argument>,
<argument>Selector Sel</argument>,
<argument>llvm::Value *Receiver</argument>,
<argument>const CallArgList&amp; Args</argument>,
<argument>const ObjCInterfaceDecl *OID</argument>,
<argument>const ObjCMethodDecl *Method</argument>,
<argument>bool isClassMessage</argument>)</argument_list></macro></expr>;</expr_stmt>







<expr_stmt><expr><name>virtual</name> <name>CodeGen</name><operator>::</operator><name>RValue</name>
<macro><name>GenerateMessageSendSuper</name><argument_list>(<argument>CodeGen::CodeGenFunction &amp;CGF</argument>,
<argument>ReturnValueSlot ReturnSlot</argument>,
<argument>QualType ResultType</argument>,
<argument>Selector Sel</argument>,
<argument>const ObjCInterfaceDecl *Class</argument>,
<argument>bool isCategoryImpl</argument>,
<argument>llvm::Value *Self</argument>,
<argument>bool IsClassMessage</argument>,
<argument>const CallArgList &amp;CallArgs</argument>,
<argument>const ObjCMethodDecl *Method = nullptr</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ObjCProtocolDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<macro><name>GetRuntimeProtocolList</name><argument_list>(<argument>ObjCProtocolDecl::protocol_iterator begin</argument>,
<argument>ObjCProtocolDecl::protocol_iterator end</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><call><name>GenerateProtocolRef</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCProtocolDecl</name> <operator>*</operator><name>OPD</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>GenerateProtocol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCProtocolDecl</name> <modifier>*</modifier></type><name>OPD</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>GetOrEmitProtocol</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ObjCProtocolDecl</name> <operator>*</operator><name>PD</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><call><name>GenerateMethod</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ObjCMethodDecl</name> <operator>*</operator><name>OMD</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCContainerDecl</name> <operator>*</operator><name>CD</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>GenerateDirectMethodPrologue</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><name>Fn</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCMethodDecl</name> <operator>*</operator><name>OMD</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCContainerDecl</name> <operator>*</operator><name>CD</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>FunctionCallee</name> <call><name>GetPropertyGetFunction</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>FunctionCallee</name> <call><name>GetPropertySetFunction</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>FunctionCallee</name> <macro><name>GetOptimizedPropertySetFunction</name><argument_list>(<argument>bool atomic</argument>,
<argument>bool copy</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>FunctionCallee</name> <call><name>GetGetStructFunction</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>FunctionCallee</name> <call><name>GetSetStructFunction</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>FunctionCallee</name> <call><name>GetCppAtomicObjectSetFunction</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>FunctionCallee</name> <call><name>GetCppAtomicObjectGetFunction</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><call><name>GetClass</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <operator>*</operator><name>OID</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>EmitNSAutoreleasePoolClassRef</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>)</argument_list></macro> <block>{
<expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"autoreleasepool unsupported in this ABI"</literal></expr></argument>)</argument_list></call></expr>;
}</block>



<name>virtual</name> <name>llvm</name><operator>::</operator><name>FunctionCallee</name> <call><name>EnumerationMutationFunction</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>EmitSynchronizedStmt</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCAtSynchronizedStmt</name> <operator>&amp;</operator><name>S</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>EmitTryStmt</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCAtTryStmt</name> <operator>&amp;</operator><name>S</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>EmitThrowStmt</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCAtThrowStmt</name> <operator>&amp;</operator><name>S</name></expr></argument>,
<argument><expr><name>bool</name> <name>ClearInsertionPoint</name><operator>=</operator><name>true</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>EmitObjCWeakRead</name><argument_list>(<argument>CodeGen::CodeGenFunction &amp;CGF</argument>,
<argument>Address AddrWeakObj</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>EmitObjCWeakAssign</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>Address</name> <name>dest</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>EmitObjCGlobalAssign</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>Address</name> <name>dest</name></expr></argument>,
<argument><expr><name>bool</name> <name>threadlocal</name><operator>=</operator><name>false</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>EmitObjCIvarAssign</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>Address</name> <name>dest</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>ivarOffset</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>EmitObjCStrongCastAssign</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>Address</name> <name>dest</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>LValue</name></type> <name>EmitObjCValueForIvar</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>QualType</name> <name>ObjectTy</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>BaseValue</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCIvarDecl</name> <operator>*</operator><name>Ivar</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>CVRQualifiers</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><call><name>EmitIvarOffset</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <operator>*</operator><name>Interface</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCIvarDecl</name> <operator>*</operator><name>Ivar</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>EmitGCMemmoveCollectable</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>Address</name> <name>DestPtr</name></expr></argument>,
<argument><expr><name>Address</name> <name>SrcPtr</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>Size</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>BuildGCBlockLayout</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CodeGen</name><operator>::</operator><name>CGBlockInfo</name> <operator>&amp;</operator><name>blockInfo</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>BuildRCBlockLayout</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CodeGen</name><operator>::</operator><name>CGBlockInfo</name> <operator>&amp;</operator><name>blockInfo</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getRCBlockLayoutStr</name><argument_list>(<argument>CodeGen::CodeGenModule &amp;CGM</argument>,
<argument>const CGBlockInfo &amp;blockInfo</argument>)</argument_list></macro> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>BuildByrefLayout</name><argument_list>(<argument>CodeGen::CodeGenModule &amp;CGM</argument>,
<argument>QualType T</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<struct>struct <name>MessageSendInfo</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>CallInfo</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><name>MessengerType</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageSendInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CGFunctionInfo</name> <operator>&amp;</operator><name>callInfo</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><name>messengerType</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CallInfo</name><argument_list>(<argument><expr><name>callInfo</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>MessengerType</name><argument_list>(<argument>messengerType</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<function_decl><type><name>MessageSendInfo</name></type> <name>getMessageSendInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>method</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>resultType</name></decl></parameter>,
<parameter><decl><type><name>CallArgList</name> <modifier>&amp;</modifier></type><name>callArgs</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>unsigned</name></type> <name>ComputeBitfieldBitOffset</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <operator>*</operator><name>ID</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ObjCIvarDecl</name> <operator>*</operator><name>Ivar</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<function_decl><type><name>CGObjCRuntime</name> <modifier>*</modifier></type><name>CreateGNUObjCRuntime</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CGObjCRuntime</name> <modifier>*</modifier></type><name>CreateMacObjCRuntime</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
