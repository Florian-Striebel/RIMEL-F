<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/Linux.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_LINUX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_LINUX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Gnu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/ToolChain.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>toolchains</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Linux</name> <range>: <expr><name>public</name> <name>Generic_ELF</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Linux</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>HasNativeLLVMSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getMultiarchTriple</name><argument_list>(<argument>const Driver &amp;D</argument>,
<argument>const llvm::Triple &amp;TargetTriple</argument>,
<argument>StringRef SysRoot</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name>
<macro><name>AddClangSystemIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>addLibStdCxxIncludePaths</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>AddCudaIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>AddHIPIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>AddIAMCUIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>RuntimeLibType</name> <macro><name>GetDefaultRuntimeLibType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>CXXStdlibType</name> <macro><name>GetDefaultCXXStdlibType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name>
<macro><name>IsAArch64OutlineAtomicsDefault</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPIEDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isNoExecStackDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>IsMathErrnoDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>SanitizerMask</name> <macro><name>getSupportedSanitizers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>addProfileRTLibs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>computeSysRoot</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getDynamicLinker</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>addExtraOpts</name><argument_list>(<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ExtraOpts</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>DenormalMode</name> <macro><name>getDefaultDenormalModeForType</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const llvm::fltSemantics *FPType = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>Tool</name> <operator>*</operator><macro><name>buildAssembler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Tool</name> <operator>*</operator><macro><name>buildLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Tool</name> <operator>*</operator><macro><name>buildStaticLibTool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
