<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/Mips.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_MIPS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_MIPS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>MipsTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><name>void</name> <macro><name>setDataLayout</name><argument_list>()</argument_list></macro> <block>{
<expr><name>StringRef</name> <name>Layout</name></expr>;

<if_stmt><if>if <condition>(<expr><name>ABI</name> <operator>==</operator> <literal type="string">"o32"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Layout</name> <operator>=</operator> <literal type="string">"m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ABI</name> <operator>==</operator> <literal type="string">"n32"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Layout</name> <operator>=</operator> <literal type="string">"m:e-p:32:32-i8:8:32-i16:16:32-i64:64-n32:64-S128"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ABI</name> <operator>==</operator> <literal type="string">"n64"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Layout</name> <operator>=</operator> <literal type="string">"m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Invalid ABI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr>

<if_stmt><if>if <condition>(<expr><name>BigEndian</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"E-"</literal> <operator>+</operator> <name>Layout</name><operator>)</operator><operator>.</operator><call><name>str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"e-"</literal> <operator>+</operator> <name>Layout</name><operator>)</operator><operator>.</operator><call><name>str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CPU</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsMips16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsMicromips</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsNan2008</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsAbs2008</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsSingleFloat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsNoABICalls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CanUseBSDABICalls</name></decl>;</decl_stmt>
<enum>enum <name>MipsFloatABI</name> <block>{ <decl><name>HardFloat</name></decl>, <decl><name>SoftFloat</name></decl> }</block> <decl><name>FloatABI</name></decl>;</enum>
<enum>enum <name>DspRevEnum</name> <block>{ <decl><name>NoDSP</name></decl>, <decl><name>DSP1</name></decl>, <decl><name>DSP2</name></decl> }</block> <decl><name>DspRev</name></decl>;</enum>
<decl_stmt><decl><type><name>bool</name></type> <name>HasMSA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>DisableMadd4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>UseIndirectJumpHazard</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<enum>enum <name>FPModeEnum</name> <block>{ <decl><name>FPXX</name></decl>, <decl><name>FP32</name></decl>, <decl><name>FP64</name></decl> }</block> <decl><name>FPMode</name></decl>;</enum>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ABI</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MipsTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>TargetInfo</name><argument_list>(<argument><expr><name>Triple</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsMips16</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsMicromips</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsNan2008</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsAbs2008</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsSingleFloat</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsNoABICalls</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CanUseBSDABICalls</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>FloatABI</name><argument_list>(<argument><expr><name>HardFloat</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>DspRev</name><argument_list>(<argument><expr><name>NoDSP</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasMSA</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>DisableMadd4</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UseIndirectJumpHazard</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>FPMode</name><argument_list>(<argument>FPXX</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>TheCXXABI</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>TargetCXXABI</name><operator>::</operator><name>GenericMIPS</name></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>isMIPS32</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setABI</name><argument_list>(<argument><expr><literal type="string">"o32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getEnvironment</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>GNUABIN32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setABI</name><argument_list>(<argument><expr><literal type="string">"n32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setABI</name><argument_list>(<argument><expr><literal type="string">"n64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<name>CPU</name> <operator>=</operator> <ternary><condition><expr><name>ABI</name> <operator>==</operator> <literal type="string">"o32"</literal></expr> ?</condition><then> <expr><literal type="string">"mips32r2"</literal></expr> </then><else>: <expr><literal type="string">"mips64r2"</literal></expr></else></ternary></block></expr>;</expr_stmt>

<expr_stmt><expr><name>CanUseBSDABICalls</name> <operator>=</operator> <call><name><name>Triple</name><operator>.</operator><name>isOSFreeBSD</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name><name>Triple</name><operator>.</operator><name>isOSOpenBSD</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isIEEE754_2008Default</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CPU</name> <operator>==</operator> <literal type="string">"mips32r6"</literal> <operator>||</operator> <name>CPU</name> <operator>==</operator> <literal type="string">"mips64r6"</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isFP64Default</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CPU</name> <operator>==</operator> <literal type="string">"mips32r6"</literal> <operator>||</operator> <name>ABI</name> <operator>==</operator> <literal type="string">"n32"</literal> <operator>||</operator> <name>ABI</name> <operator>==</operator> <literal type="string">"n64"</literal> <operator>||</operator> <name>ABI</name> <operator>==</operator> <literal type="string">"64"</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isNan2008</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>IsNan2008</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>processorSupportsGPR64</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getABI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>ABI</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>setABI</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Name</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Name</name> <operator>==</operator> <literal type="string">"o32"</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setO32ABITypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ABI</name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Name</name> <operator>==</operator> <literal type="string">"n32"</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setN32ABITypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ABI</name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Name</name> <operator>==</operator> <literal type="string">"n64"</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setN64ABITypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ABI</name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>setO32ABITypes</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Int64Type</name> <operator>=</operator> <name>SignedLongLong</name></expr>;</expr_stmt>
<expr_stmt><expr><name>IntMaxType</name> <operator>=</operator> <name>Int64Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleWidth</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedInt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SizeType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setN32N64ABITypes</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>LongDoubleWidth</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEquad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOSFreeBSD</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>LongDoubleWidth</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setN64ABITypes</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>setN32N64ABITypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOSOpenBSD</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Int64Type</name> <operator>=</operator> <name>SignedLongLong</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>Int64Type</name> <operator>=</operator> <name>SignedLong</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>IntMaxType</name> <operator>=</operator> <name>Int64Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedLong</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SizeType</name> <operator>=</operator> <name>UnsignedLong</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setN32ABITypes</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>setN32N64ABITypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Int64Type</name> <operator>=</operator> <name>SignedLongLong</name></expr>;</expr_stmt>
<expr_stmt><expr><name>IntMaxType</name> <operator>=</operator> <name>Int64Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedInt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SizeType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>isValidCPUName</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>fillValidCPUList</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Values</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>setCPU</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Name</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>
<return>return <expr><call><name>isValidCPUName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getCPU</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CPU</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>bool</name></type>
<name>initFeatureMap</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>CPU</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FeaturesVec</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>CPU</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <call><name>getCPU</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>CPU</name> <operator>==</operator> <literal type="string">"octeon"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Features</name><index>[<expr><literal type="string">"mips64r2"</literal></expr>]</index></name> <operator>=</operator> <name><name>Features</name><index>[<expr><literal type="string">"cnmips"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>CPU</name> <operator>==</operator> <literal type="string">"octeon+"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Features</name><index>[<expr><literal type="string">"mips64r2"</literal></expr>]</index></name> <operator>=</operator> <name><name>Features</name><index>[<expr><literal type="string">"cnmips"</literal></expr>]</index></name> <operator>=</operator> <name><name>Features</name><index>[<expr><literal type="string">"cnmipsp"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Features</name><index>[<expr><name>CPU</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>TargetInfo</name><operator>::</operator><call><name>initFeatureMap</name><argument_list>(<argument><expr><name>Features</name></expr></argument>, <argument><expr><name>Diags</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>, <argument><expr><name>FeaturesVec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getISARev</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>getTargetDefines</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>,
<argument><expr><name>MacroBuilder</name> <operator>&amp;</operator><name>Builder</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasFeature</name><argument_list>(<argument><expr><name>StringRef</name> <name>Feature</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>VoidPtrBuiltinVaList</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>GCCRegNames</name><index>[]</index></name> <operator>=</operator> <block>{


<expr><literal type="string">"$0"</literal></expr>, <expr><literal type="string">"$1"</literal></expr>, <expr><literal type="string">"$2"</literal></expr>, <expr><literal type="string">"$3"</literal></expr>, <expr><literal type="string">"$4"</literal></expr>, <expr><literal type="string">"$5"</literal></expr>, <expr><literal type="string">"$6"</literal></expr>, <expr><literal type="string">"$7"</literal></expr>, <expr><literal type="string">"$8"</literal></expr>, <expr><literal type="string">"$9"</literal></expr>, <expr><literal type="string">"$10"</literal></expr>,
<expr><literal type="string">"$11"</literal></expr>, <expr><literal type="string">"$12"</literal></expr>, <expr><literal type="string">"$13"</literal></expr>, <expr><literal type="string">"$14"</literal></expr>, <expr><literal type="string">"$15"</literal></expr>, <expr><literal type="string">"$16"</literal></expr>, <expr><literal type="string">"$17"</literal></expr>, <expr><literal type="string">"$18"</literal></expr>, <expr><literal type="string">"$19"</literal></expr>, <expr><literal type="string">"$20"</literal></expr>,
<expr><literal type="string">"$21"</literal></expr>, <expr><literal type="string">"$22"</literal></expr>, <expr><literal type="string">"$23"</literal></expr>, <expr><literal type="string">"$24"</literal></expr>, <expr><literal type="string">"$25"</literal></expr>, <expr><literal type="string">"$26"</literal></expr>, <expr><literal type="string">"$27"</literal></expr>, <expr><literal type="string">"$28"</literal></expr>, <expr><literal type="string">"$29"</literal></expr>, <expr><literal type="string">"$30"</literal></expr>,
<expr><literal type="string">"$31"</literal></expr>,

<expr><literal type="string">"$f0"</literal></expr>, <expr><literal type="string">"$f1"</literal></expr>, <expr><literal type="string">"$f2"</literal></expr>, <expr><literal type="string">"$f3"</literal></expr>, <expr><literal type="string">"$f4"</literal></expr>, <expr><literal type="string">"$f5"</literal></expr>, <expr><literal type="string">"$f6"</literal></expr>, <expr><literal type="string">"$f7"</literal></expr>, <expr><literal type="string">"$f8"</literal></expr>, <expr><literal type="string">"$f9"</literal></expr>,
<expr><literal type="string">"$f10"</literal></expr>, <expr><literal type="string">"$f11"</literal></expr>, <expr><literal type="string">"$f12"</literal></expr>, <expr><literal type="string">"$f13"</literal></expr>, <expr><literal type="string">"$f14"</literal></expr>, <expr><literal type="string">"$f15"</literal></expr>, <expr><literal type="string">"$f16"</literal></expr>, <expr><literal type="string">"$f17"</literal></expr>, <expr><literal type="string">"$f18"</literal></expr>,
<expr><literal type="string">"$f19"</literal></expr>, <expr><literal type="string">"$f20"</literal></expr>, <expr><literal type="string">"$f21"</literal></expr>, <expr><literal type="string">"$f22"</literal></expr>, <expr><literal type="string">"$f23"</literal></expr>, <expr><literal type="string">"$f24"</literal></expr>, <expr><literal type="string">"$f25"</literal></expr>, <expr><literal type="string">"$f26"</literal></expr>, <expr><literal type="string">"$f27"</literal></expr>,
<expr><literal type="string">"$f28"</literal></expr>, <expr><literal type="string">"$f29"</literal></expr>, <expr><literal type="string">"$f30"</literal></expr>, <expr><literal type="string">"$f31"</literal></expr>,

<expr><literal type="string">"hi"</literal></expr>, <expr><literal type="string">"lo"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"$fcc0"</literal></expr>, <expr><literal type="string">"$fcc1"</literal></expr>, <expr><literal type="string">"$fcc2"</literal></expr>, <expr><literal type="string">"$fcc3"</literal></expr>, <expr><literal type="string">"$fcc4"</literal></expr>, <expr><literal type="string">"$fcc5"</literal></expr>,
<expr><literal type="string">"$fcc6"</literal></expr>, <expr><literal type="string">"$fcc7"</literal></expr>, <expr><literal type="string">"$ac1hi"</literal></expr>, <expr><literal type="string">"$ac1lo"</literal></expr>, <expr><literal type="string">"$ac2hi"</literal></expr>, <expr><literal type="string">"$ac2lo"</literal></expr>, <expr><literal type="string">"$ac3hi"</literal></expr>,
<expr><literal type="string">"$ac3lo"</literal></expr>,

<expr><literal type="string">"$w0"</literal></expr>, <expr><literal type="string">"$w1"</literal></expr>, <expr><literal type="string">"$w2"</literal></expr>, <expr><literal type="string">"$w3"</literal></expr>, <expr><literal type="string">"$w4"</literal></expr>, <expr><literal type="string">"$w5"</literal></expr>, <expr><literal type="string">"$w6"</literal></expr>, <expr><literal type="string">"$w7"</literal></expr>, <expr><literal type="string">"$w8"</literal></expr>, <expr><literal type="string">"$w9"</literal></expr>,
<expr><literal type="string">"$w10"</literal></expr>, <expr><literal type="string">"$w11"</literal></expr>, <expr><literal type="string">"$w12"</literal></expr>, <expr><literal type="string">"$w13"</literal></expr>, <expr><literal type="string">"$w14"</literal></expr>, <expr><literal type="string">"$w15"</literal></expr>, <expr><literal type="string">"$w16"</literal></expr>, <expr><literal type="string">"$w17"</literal></expr>, <expr><literal type="string">"$w18"</literal></expr>,
<expr><literal type="string">"$w19"</literal></expr>, <expr><literal type="string">"$w20"</literal></expr>, <expr><literal type="string">"$w21"</literal></expr>, <expr><literal type="string">"$w22"</literal></expr>, <expr><literal type="string">"$w23"</literal></expr>, <expr><literal type="string">"$w24"</literal></expr>, <expr><literal type="string">"$w25"</literal></expr>, <expr><literal type="string">"$w26"</literal></expr>, <expr><literal type="string">"$w27"</literal></expr>,
<expr><literal type="string">"$w28"</literal></expr>, <expr><literal type="string">"$w29"</literal></expr>, <expr><literal type="string">"$w30"</literal></expr>, <expr><literal type="string">"$w31"</literal></expr>,

<expr><literal type="string">"$msair"</literal></expr>, <expr><literal type="string">"$msacsr"</literal></expr>, <expr><literal type="string">"$msaaccess"</literal></expr>, <expr><literal type="string">"$msasave"</literal></expr>, <expr><literal type="string">"$msamodify"</literal></expr>,
<expr><literal type="string">"$msarequest"</literal></expr>, <expr><literal type="string">"$msamap"</literal></expr>, <expr><literal type="string">"$msaunmap"</literal></expr>
}</block></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>GCCRegNames</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>validateAsmConstraint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>&amp;</operator><name>Name</name></expr></argument>,
<argument><expr><name>TargetInfo</name><operator>::</operator><name>ConstraintInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>Name</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsMemory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>Name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsMemory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Name</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>convertConstraint</name><argument_list>(<argument>const char *&amp;Constraint</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>R</name></expr>;
<switch>switch <condition>(<expr><operator>*</operator><name>Constraint</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>Constraint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>R</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><literal type="string">"^"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Constraint</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>R</name></expr>;</return>
<expr_stmt/>}</block_content>
break</block><empty_stmt>;</empty_stmt></if></if_stmt>
<expr_stmt/>}</block_content>
return TargetInfo::convertConstraint(Constraint</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{





















<return>return <expr><literal type="string">"~{$1}"</literal></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>handleTargetFeatures</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<expr_stmt><expr><name>IsMips16</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>IsMicromips</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>IsNan2008</name> <operator>=</operator> <call><name>isIEEE754_2008Default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IsAbs2008</name> <operator>=</operator> <call><name>isIEEE754_2008Default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IsSingleFloat</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>FloatABI</name> <operator>=</operator> <name>HardFloat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DspRev</name> <operator>=</operator> <name>NoDSP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>FPMode</name> <operator>=</operator> <ternary><condition><expr><call><name>isFP64Default</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>FP64</name></expr> </then><else>: <expr><name>FPXX</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>Feature</name> <range>: <expr><name>Features</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+single-float"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IsSingleFloat</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+soft-float"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>FloatABI</name> <operator>=</operator> <name>SoftFloat</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+mips16"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IsMips16</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+micromips"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IsMicromips</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+dsp"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DspRev</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>max</name><argument_list>(<argument><expr><name>DspRev</name></expr></argument>, <argument><expr><name>DSP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+dspr2"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DspRev</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>max</name><argument_list>(<argument><expr><name>DspRev</name></expr></argument>, <argument><expr><name>DSP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+msa"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>HasMSA</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+nomadd4"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DisableMadd4</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+fp64"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>FPMode</name> <operator>=</operator> <name>FP64</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"-fp64"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>FPMode</name> <operator>=</operator> <name>FP32</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+fpxx"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>FPMode</name> <operator>=</operator> <name>FPXX</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+nan2008"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IsNan2008</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"-nan2008"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IsNan2008</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+abs2008"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IsAbs2008</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"-abs2008"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IsAbs2008</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+noabicalls"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IsNoABICalls</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+use-indirect-jump-hazard"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>UseIndirectJumpHazard</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>setDataLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>getEHDataRegisterNumber</name><argument_list>(<argument><expr><name>unsigned</name> <name>RegNo</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isCLZForZeroUndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name> <name><name>O32RegAliases</name><index>[]</index></name> <operator>=</operator> <block>{
<expr><block>{<expr><block>{<expr><literal type="string">"at"</literal></expr>}</block></expr>, <expr><literal type="string">"$1"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"v0"</literal></expr>}</block></expr>, <expr><literal type="string">"$2"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"v1"</literal></expr>}</block></expr>, <expr><literal type="string">"$3"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"a0"</literal></expr>}</block></expr>, <expr><literal type="string">"$4"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"a1"</literal></expr>}</block></expr>, <expr><literal type="string">"$5"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"a2"</literal></expr>}</block></expr>, <expr><literal type="string">"$6"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"a3"</literal></expr>}</block></expr>, <expr><literal type="string">"$7"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t0"</literal></expr>}</block></expr>, <expr><literal type="string">"$8"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t1"</literal></expr>}</block></expr>, <expr><literal type="string">"$9"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"t2"</literal></expr>}</block></expr>, <expr><literal type="string">"$10"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t3"</literal></expr>}</block></expr>, <expr><literal type="string">"$11"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t4"</literal></expr>}</block></expr>, <expr><literal type="string">"$12"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"t5"</literal></expr>}</block></expr>, <expr><literal type="string">"$13"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t6"</literal></expr>}</block></expr>, <expr><literal type="string">"$14"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t7"</literal></expr>}</block></expr>, <expr><literal type="string">"$15"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s0"</literal></expr>}</block></expr>, <expr><literal type="string">"$16"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"s1"</literal></expr>}</block></expr>, <expr><literal type="string">"$17"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"s2"</literal></expr>}</block></expr>, <expr><literal type="string">"$18"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s3"</literal></expr>}</block></expr>, <expr><literal type="string">"$19"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"s4"</literal></expr>}</block></expr>, <expr><literal type="string">"$20"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"s5"</literal></expr>}</block></expr>, <expr><literal type="string">"$21"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s6"</literal></expr>}</block></expr>, <expr><literal type="string">"$22"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"s7"</literal></expr>}</block></expr>, <expr><literal type="string">"$23"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t8"</literal></expr>}</block></expr>, <expr><literal type="string">"$24"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"t9"</literal></expr>}</block></expr>, <expr><literal type="string">"$25"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"k0"</literal></expr>}</block></expr>, <expr><literal type="string">"$26"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"k1"</literal></expr>}</block></expr>, <expr><literal type="string">"$27"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"gp"</literal></expr>}</block></expr>, <expr><literal type="string">"$28"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"$sp"</literal></expr>}</block></expr>, <expr><literal type="string">"$29"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"fp"</literal></expr>, <expr><literal type="string">"$fp"</literal></expr>}</block></expr>, <expr><literal type="string">"$30"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"ra"</literal></expr>}</block></expr>, <expr><literal type="string">"$31"</literal></expr>}</block></expr>
}</block></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name> <name><name>NewABIRegAliases</name><index>[]</index></name> <operator>=</operator> <block>{
<expr><block>{<expr><block>{<expr><literal type="string">"at"</literal></expr>}</block></expr>, <expr><literal type="string">"$1"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"v0"</literal></expr>}</block></expr>, <expr><literal type="string">"$2"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"v1"</literal></expr>}</block></expr>, <expr><literal type="string">"$3"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"a0"</literal></expr>}</block></expr>, <expr><literal type="string">"$4"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"a1"</literal></expr>}</block></expr>, <expr><literal type="string">"$5"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"a2"</literal></expr>}</block></expr>, <expr><literal type="string">"$6"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"a3"</literal></expr>}</block></expr>, <expr><literal type="string">"$7"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"a4"</literal></expr>}</block></expr>, <expr><literal type="string">"$8"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"a5"</literal></expr>}</block></expr>, <expr><literal type="string">"$9"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"a6"</literal></expr>}</block></expr>, <expr><literal type="string">"$10"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"a7"</literal></expr>}</block></expr>, <expr><literal type="string">"$11"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t0"</literal></expr>}</block></expr>, <expr><literal type="string">"$12"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"t1"</literal></expr>}</block></expr>, <expr><literal type="string">"$13"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t2"</literal></expr>}</block></expr>, <expr><literal type="string">"$14"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t3"</literal></expr>}</block></expr>, <expr><literal type="string">"$15"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s0"</literal></expr>}</block></expr>, <expr><literal type="string">"$16"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"s1"</literal></expr>}</block></expr>, <expr><literal type="string">"$17"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"s2"</literal></expr>}</block></expr>, <expr><literal type="string">"$18"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s3"</literal></expr>}</block></expr>, <expr><literal type="string">"$19"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"s4"</literal></expr>}</block></expr>, <expr><literal type="string">"$20"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"s5"</literal></expr>}</block></expr>, <expr><literal type="string">"$21"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s6"</literal></expr>}</block></expr>, <expr><literal type="string">"$22"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"s7"</literal></expr>}</block></expr>, <expr><literal type="string">"$23"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"t8"</literal></expr>}</block></expr>, <expr><literal type="string">"$24"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"t9"</literal></expr>}</block></expr>, <expr><literal type="string">"$25"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"k0"</literal></expr>}</block></expr>, <expr><literal type="string">"$26"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"k1"</literal></expr>}</block></expr>, <expr><literal type="string">"$27"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"gp"</literal></expr>}</block></expr>, <expr><literal type="string">"$28"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"$sp"</literal></expr>}</block></expr>, <expr><literal type="string">"$29"</literal></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="string">"fp"</literal></expr>, <expr><literal type="string">"$fp"</literal></expr>}</block></expr>, <expr><literal type="string">"$30"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"ra"</literal></expr>}</block></expr>, <expr><literal type="string">"$31"</literal></expr>}</block></expr>
}</block></expr>;
<if_stmt><if>if <condition>(<expr><name>ABI</name> <operator>==</operator> <literal type="string">"o32"</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>O32RegAliases</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>NewABIRegAliases</name></expr></argument>)</argument_list></call></expr>;</return>
}

bool <macro><name>hasInt128Type</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>(</operator><name>ABI</name> <operator>==</operator> <literal type="string">"n32"</literal> <operator>||</operator> <name>ABI</name> <operator>==</operator> <literal type="string">"n64"</literal><operator>)</operator> <operator>||</operator> <call><name>getTargetOpts</name><argument_list>()</argument_list></call><operator>.</operator><name>ForceEnableInt128</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getUnwindWordWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>validateTarget</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>
};
}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
