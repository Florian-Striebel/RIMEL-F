<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/bmiintrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>__X86INTRIN_H</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>__IMMINTRIN_H</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Never use &lt;bmiintrin.h&gt; directly; include &lt;x86intrin.h&gt; instead."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__BMIINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__BMIINTRIN_H</name></cpp:macro></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__RELAXED_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tzcnt_u16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__tzcnt_u16((a)))</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>short</name> <name>__RELAXED_FN_ATTRS</name></type>
<name>__tzcnt_u16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_tzcnt_u16</name><argument_list>(<argument><expr><name>__X</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__RELAXED_FN_ATTRS</name></type>
<name>__tzcnt_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_tzcnt_u32</name><argument_list>(<argument><expr><name>__X</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__RELAXED_FN_ATTRS</name></type>
<name>_mm_tzcnt_32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_tzcnt_u32</name><argument_list>(<argument><expr><name>__X</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tzcnt_u32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__tzcnt_u32((a)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__RELAXED_FN_ATTRS</name></type>
<name>__tzcnt_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_tzcnt_u64</name><argument_list>(<argument><expr><name>__X</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>long</name> <name>__RELAXED_FN_ATTRS</name></type>
<name>_mm_tzcnt_64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_tzcnt_u64</name><argument_list>(<argument><expr><name>__X</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tzcnt_u64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__tzcnt_u64((a)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__RELAXED_FN_ATTRS</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BMI__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("bmi")))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_andn_u32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__andn_u32((a), (b)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_blsi_u32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__blsi_u32((a)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_blsmsk_u32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__blsmsk_u32((a)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_blsr_u32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__blsr_u32((a)))</cpp:value></cpp:define>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__andn_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__Y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>~</operator><name>__X</name> <operator>&amp;</operator> <name>__Y</name></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__bextr_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__Y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_bextr_u32</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__Y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_bextr_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__Y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__Z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_bextr_u32</name> <argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__Y</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>__Z</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_bextr2_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__Y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_bextr_u32</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__Y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__blsi_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>__X</name> <operator>&amp;</operator> <operator>-</operator><name>__X</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__blsmsk_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>__X</name> <operator>^</operator> <operator>(</operator><name>__X</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__blsr_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>__X</name> <operator>&amp;</operator> <operator>(</operator><name>__X</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_andn_u64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__andn_u64((a), (b)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_blsi_u64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__blsi_u64((a)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_blsmsk_u64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__blsmsk_u64((a)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_blsr_u64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__blsr_u64((a)))</cpp:value></cpp:define>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__andn_u64</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__Y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>~</operator><name>__X</name> <operator>&amp;</operator> <name>__Y</name></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__bextr_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__Y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_bextr_u64</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__Y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_bextr_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__Y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__Z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_bextr_u64</name> <argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__Y</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>__Z</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_bextr2_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__Y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_bextr_u64</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__Y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__blsi_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>__X</name> <operator>&amp;</operator> <operator>-</operator><name>__X</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__blsmsk_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>__X</name> <operator>^</operator> <operator>(</operator><name>__X</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__blsr_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>__X</name> <operator>&amp;</operator> <operator>(</operator><name>__X</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
