<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/gfniintrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IMMINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Never use &lt;gfniintrin.h&gt; directly; include &lt;immintrin.h&gt; instead."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GFNIINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__GFNIINTRIN_H</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("gfni"), __min_vector_width__(128)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_Y</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("avx,gfni"), __min_vector_width__(256)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_Z</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("avx512bw,gfni"), __min_vector_width__(512)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_VL128</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("avx512bw,avx512vl,gfni"), __min_vector_width__(128)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_VL256</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("avx512bw,avx512vl,gfni"), __min_vector_width__(256)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_gf2p8affineinv_epi64_epi8</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_vgf2p8affineinvqb_v16qi((__v16qi)(__m128i)(A), (__v16qi)(__m128i)(B), (char)(I))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_gf2p8affine_epi64_epi8</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_vgf2p8affineqb_v16qi((__v16qi)(__m128i)(A), (__v16qi)(__m128i)(B), (char)(I))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_gf2p8mul_epi8</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__A</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_vgf2p8mulb_v16qi</name><argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__A</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AVXINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_gf2p8affineinv_epi64_epi8</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)__builtin_ia32_vgf2p8affineinvqb_v32qi((__v32qi)(__m256i)(A), (__v32qi)(__m256i)(B), (char)(I))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_gf2p8affine_epi64_epi8</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)__builtin_ia32_vgf2p8affineqb_v32qi((__v32qi)(__m256i)(A), (__v32qi)(__m256i)(B), (char)(I))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS_Y</name></type>
<name>_mm256_gf2p8mul_epi8</name><parameter_list>(<parameter><decl><type><name>__m256i</name></type> <name>__A</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256i</name><operator>)</operator> <call><name>__builtin_ia32_vgf2p8mulb_v32qi</name><argument_list>(<argument><expr><operator>(</operator><name>__v32qi</name><operator>)</operator> <name>__A</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v32qi</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512BWINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm512_gf2p8affineinv_epi64_epi8</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m512i)__builtin_ia32_vgf2p8affineinvqb_v64qi((__v64qi)(__m512i)(A), (__v64qi)(__m512i)(B), (char)(I))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm512_mask_gf2p8affineinv_epi64_epi8</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m512i)__builtin_ia32_selectb_512((__mmask64)(U), (__v64qi)_mm512_gf2p8affineinv_epi64_epi8(A, B, I), (__v64qi)(__m512i)(S))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm512_maskz_gf2p8affineinv_epi64_epi8</name><parameter_list>(<parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m512i)_mm512_mask_gf2p8affineinv_epi64_epi8((__m512i)_mm512_setzero_si512(), U, A, B, I)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm512_gf2p8affine_epi64_epi8</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m512i)__builtin_ia32_vgf2p8affineqb_v64qi((__v64qi)(__m512i)(A), (__v64qi)(__m512i)(B), (char)(I))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm512_mask_gf2p8affine_epi64_epi8</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m512i)__builtin_ia32_selectb_512((__mmask64)(U), (__v64qi)_mm512_gf2p8affine_epi64_epi8(A, B, I), (__v64qi)(__m512i)(S))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm512_maskz_gf2p8affine_epi64_epi8</name><parameter_list>(<parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m512i)_mm512_mask_gf2p8affine_epi64_epi8((__m512i)_mm512_setzero_si512(), U, A, B, I)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m512i</name> <name>__DEFAULT_FN_ATTRS_Z</name></type>
<name>_mm512_gf2p8mul_epi8</name><parameter_list>(<parameter><decl><type><name>__m512i</name></type> <name>__A</name></decl></parameter>, <parameter><decl><type><name>__m512i</name></type> <name>__B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m512i</name><operator>)</operator> <call><name>__builtin_ia32_vgf2p8mulb_v64qi</name><argument_list>(<argument><expr><operator>(</operator><name>__v64qi</name><operator>)</operator> <name>__A</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v64qi</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m512i</name> <name>__DEFAULT_FN_ATTRS_Z</name></type>
<name>_mm512_mask_gf2p8mul_epi8</name><parameter_list>(<parameter><decl><type><name>__m512i</name></type> <name>__S</name></decl></parameter>, <parameter><decl><type><name>__mmask64</name></type> <name>__U</name></decl></parameter>, <parameter><decl><type><name>__m512i</name></type> <name>__A</name></decl></parameter>, <parameter><decl><type><name>__m512i</name></type> <name>__B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m512i</name><operator>)</operator> <call><name>__builtin_ia32_selectb_512</name><argument_list>(<argument><expr><name>__U</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v64qi</name><operator>)</operator> <call><name>_mm512_gf2p8mul_epi8</name><argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>__v64qi</name><operator>)</operator> <name>__S</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m512i</name> <name>__DEFAULT_FN_ATTRS_Z</name></type>
<name>_mm512_maskz_gf2p8mul_epi8</name><parameter_list>(<parameter><decl><type><name>__mmask64</name></type> <name>__U</name></decl></parameter>, <parameter><decl><type><name>__m512i</name></type> <name>__A</name></decl></parameter>, <parameter><decl><type><name>__m512i</name></type> <name>__B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm512_mask_gf2p8mul_epi8</name><argument_list>(<argument><expr><operator>(</operator><name>__m512i</name><operator>)</operator><call><name>_mm512_setzero_si512</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>__U</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VLBWINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_mask_gf2p8affineinv_epi64_epi8</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_selectb_128((__mmask16)(U), (__v16qi)_mm_gf2p8affineinv_epi64_epi8(A, B, I), (__v16qi)(__m128i)(S))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_maskz_gf2p8affineinv_epi64_epi8</name><parameter_list>(<parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)_mm_mask_gf2p8affineinv_epi64_epi8((__m128i)_mm_setzero_si128(), U, A, B, I)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_mask_gf2p8affineinv_epi64_epi8</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)__builtin_ia32_selectb_256((__mmask32)(U), (__v32qi)_mm256_gf2p8affineinv_epi64_epi8(A, B, I), (__v32qi)(__m256i)(S))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_maskz_gf2p8affineinv_epi64_epi8</name><parameter_list>(<parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)_mm256_mask_gf2p8affineinv_epi64_epi8((__m256i)_mm256_setzero_si256(), U, A, B, I)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_mask_gf2p8affine_epi64_epi8</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_selectb_128((__mmask16)(U), (__v16qi)_mm_gf2p8affine_epi64_epi8(A, B, I), (__v16qi)(__m128i)(S))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_maskz_gf2p8affine_epi64_epi8</name><parameter_list>(<parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)_mm_mask_gf2p8affine_epi64_epi8((__m128i)_mm_setzero_si128(), U, A, B, I)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_mask_gf2p8affine_epi64_epi8</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)__builtin_ia32_selectb_256((__mmask32)(U), (__v32qi)_mm256_gf2p8affine_epi64_epi8(A, B, I), (__v32qi)(__m256i)(S))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_maskz_gf2p8affine_epi64_epi8</name><parameter_list>(<parameter><type><name>U</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m256i)_mm256_mask_gf2p8affine_epi64_epi8((__m256i)_mm256_setzero_si256(), U, A, B, I)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS_VL128</name></type>
<name>_mm_mask_gf2p8mul_epi8</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__S</name></decl></parameter>, <parameter><decl><type><name>__mmask16</name></type> <name>__U</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__A</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_selectb_128</name><argument_list>(<argument><expr><name>__U</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <call><name>_mm_gf2p8mul_epi8</name><argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__S</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS_VL128</name></type>
<name>_mm_maskz_gf2p8mul_epi8</name><parameter_list>(<parameter><decl><type><name>__mmask16</name></type> <name>__U</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__A</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_mask_gf2p8mul_epi8</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>__U</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS_VL256</name></type>
<name>_mm256_mask_gf2p8mul_epi8</name><parameter_list>(<parameter><decl><type><name>__m256i</name></type> <name>__S</name></decl></parameter>, <parameter><decl><type><name>__mmask32</name></type> <name>__U</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__A</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256i</name><operator>)</operator> <call><name>__builtin_ia32_selectb_256</name><argument_list>(<argument><expr><name>__U</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v32qi</name><operator>)</operator> <call><name>_mm256_gf2p8mul_epi8</name><argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>__v32qi</name><operator>)</operator> <name>__S</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m256i</name> <name>__DEFAULT_FN_ATTRS_VL256</name></type>
<name>_mm256_maskz_gf2p8mul_epi8</name><parameter_list>(<parameter><decl><type><name>__mmask32</name></type> <name>__U</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__A</name></decl></parameter>, <parameter><decl><type><name>__m256i</name></type> <name>__B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm256_mask_gf2p8mul_epi8</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>)</operator><call><name>_mm256_setzero_si256</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>__U</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS_Y</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS_Z</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS_VL128</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS_VL256</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
