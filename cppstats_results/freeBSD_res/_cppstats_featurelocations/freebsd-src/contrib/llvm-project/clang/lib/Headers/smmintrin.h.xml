<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/smmintrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SMMINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SMMINTRIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tmmintrin.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("sse4.1"), __min_vector_width__(128)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_TO_NEAREST_INT</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_TO_NEG_INF</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_TO_POS_INF</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_TO_ZERO</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_CUR_DIRECTION</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_RAISE_EXC</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_NO_EXC</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_NINT</name></cpp:macro> <cpp:value>(_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_NEAREST_INT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_FLOOR</name></cpp:macro> <cpp:value>(_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_NEG_INF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_CEIL</name></cpp:macro> <cpp:value>(_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_POS_INF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_TRUNC</name></cpp:macro> <cpp:value>(_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_ZERO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_RINT</name></cpp:macro> <cpp:value>(_MM_FROUND_RAISE_EXC | _MM_FROUND_CUR_DIRECTION)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FROUND_NEARBYINT</name></cpp:macro> <cpp:value>(_MM_FROUND_NO_EXC | _MM_FROUND_CUR_DIRECTION)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_ceil_ps</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_round_ps((X), _MM_FROUND_CEIL)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_ceil_pd</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_round_pd((X), _MM_FROUND_CEIL)</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_ceil_ss</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_round_ss((X), (Y), _MM_FROUND_CEIL)</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_ceil_sd</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_round_sd((X), (Y), _MM_FROUND_CEIL)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_floor_ps</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_round_ps((X), _MM_FROUND_FLOOR)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_floor_pd</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_round_pd((X), _MM_FROUND_FLOOR)</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_floor_ss</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_round_ss((X), (Y), _MM_FROUND_FLOOR)</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_floor_sd</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_round_sd((X), (Y), _MM_FROUND_FLOOR)</cpp:value></cpp:define>































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_round_ps</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M))</cpp:value></cpp:define>








































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_round_ss</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128)__builtin_ia32_roundss((__v4sf)(__m128)(X), (__v4sf)(__m128)(Y), (M))</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_round_pd</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128d)__builtin_ia32_roundpd((__v2df)(__m128d)(X), (M))</cpp:value></cpp:define>








































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_round_sd</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128d)__builtin_ia32_roundsd((__v2df)(__m128d)(X), (__v2df)(__m128d)(Y), (M))</cpp:value></cpp:define>




























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_blend_pd</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128d) __builtin_ia32_blendpd ((__v2df)(__m128d)(V1), (__v2df)(__m128d)(V2), (int)(M))</cpp:value></cpp:define>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_blend_ps</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128) __builtin_ia32_blendps ((__v4sf)(__m128)(V1), (__v4sf)(__m128)(V2), (int)(M))</cpp:value></cpp:define>























<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128d</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_blendv_pd</name> <parameter_list>(<parameter><decl><type><name>__m128d</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128d</name></type> <name>__V2</name></decl></parameter>, <parameter><decl><type><name>__m128d</name></type> <name>__M</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>__builtin_ia32_blendvpd</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__V2</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__M</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_blendv_ps</name> <parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__V2</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__M</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <call><name>__builtin_ia32_blendvps</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__V2</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__M</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_blendv_epi8</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__M</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_pblendvb128</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__V2</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__M</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_blend_epi16</name><parameter_list>(<parameter><type><name>V1</name></type></parameter>, <parameter><type><name>V2</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i) __builtin_ia32_pblendw128 ((__v8hi)(__m128i)(V1), (__v8hi)(__m128i)(V2), (int)(M))</cpp:value></cpp:define>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_mullo_epi32</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v4su</name><operator>)</operator><name>__V1</name> <operator>*</operator> <operator>(</operator><name>__v4su</name><operator>)</operator><name>__V2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_mul_epi32</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_pmuldq128</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__V2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_dp_ps</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128) __builtin_ia32_dpps((__v4sf)(__m128)(X), (__v4sf)(__m128)(Y), (M))</cpp:value></cpp:define>


































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_dp_pd</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128d) __builtin_ia32_dppd((__v2df)(__m128d)(X), (__v2df)(__m128d)(Y), (M))</cpp:value></cpp:define>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_stream_load_si128</name> <parameter_list>(<parameter><decl><type><name>__m128i</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_nontemporal_load</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__v2di</name> <operator>*</operator><operator>)</operator> <name>__V</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_min_epi8</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_pminsb128</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__V2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_max_epi8</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_pmaxsb128</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__V2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_min_epu16</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_pminuw128</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__V2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_max_epu16</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_pmaxuw128</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__V2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_min_epi32</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_pminsd128</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__V2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_max_epi32</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_pmaxsd128</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__V2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_min_epu32</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_pminud128</name><argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__V2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_max_epu32</name> <parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_pmaxud128</name><argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__V2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_insert_ps</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_ia32_insertps128((X), (Y), (N))</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_extract_ps</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__extension__ ({ union { int __i; float __f; } __t; __t.__f = __builtin_ia32_vec_ext_v4sf((__v4sf)(__m128)(X), (int)(N)); __t.__i;}))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_EXTRACT_FLOAT</name><parameter_list>(<parameter><type><name>D</name></type></parameter>, <parameter><type><name>X</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (D) = __builtin_ia32_vec_ext_v4sf((__v4sf)(__m128)(X), (int)(N)); }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_MK_INSERTPS_NDX</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((X) &lt;&lt; 6) | ((Y) &lt;&lt; 4) | (Z))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_PICK_OUT_PS</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_insert_ps (_mm_setzero_ps(), (X), _MM_MK_INSERTPS_NDX((N), 0, 0x0e))</cpp:value></cpp:define>











































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_insert_epi8</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_vec_set_v16qi((__v16qi)(__m128i)(X), (int)(I), (int)(N))</cpp:value></cpp:define>































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_insert_epi32</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), (int)(I), (int)(N))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>


























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_insert_epi64</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_vec_set_v2di((__v2di)(__m128i)(X), (long long)(I), (int)(N))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_extract_epi8</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)(__m128i)(X), (int)(N))</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_extract_epi32</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_extract_epi64</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(long long)__builtin_ia32_vec_ext_v2di((__v2di)(__m128i)(X), (int)(N))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_testz_si128</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__M</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ptestz128</name><argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__M</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__V</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_testc_si128</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__M</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ptestc128</name><argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__M</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__V</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_testnzc_si128</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__M</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ptestnzc128</name><argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__M</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__V</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_test_all_ones</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_testc_si128((V), _mm_cmpeq_epi32((V), (V)))</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_test_mix_ones_zeros</name><parameter_list>(<parameter><type><name>M</name></type></parameter>, <parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_testnzc_si128((M), (V))</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_test_all_zeros</name><parameter_list>(<parameter><type><name>M</name></type></parameter>, <parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_testz_si128 ((M), (V))</cpp:value></cpp:define>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpeq_epi64</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v2di</name><operator>)</operator><name>__V1</name> <operator>==</operator> <operator>(</operator><name>__v2di</name><operator>)</operator><name>__V2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepi8_epi16</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v16qs</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qs</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v8hi</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepi8_epi32</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v16qs</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qs</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v4si</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepi8_epi64</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v16qs</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qs</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v2di</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepi16_epi32</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v4si</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepi16_epi64</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v2di</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepi32_epi64</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v2di</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepu8_epi16</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v8hi</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepu8_epi32</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v4si</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepu8_epi64</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v2di</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepu16_epi32</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v4si</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepu16_epi64</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v2di</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtepu32_epi64</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>__builtin_convertvector</name><argument_list>(<argument><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__v2di</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_packus_epi32</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_packusdw128</name><argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__V1</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__V2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_mpsadbw_epu8</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i) __builtin_ia32_mpsadbw128((__v16qi)(__m128i)(X), (__v16qi)(__m128i)(Y), (M))</cpp:value></cpp:define>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_minpos_epu16</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>__builtin_ia32_phminposuw128</name><argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__V</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_UBYTE_OPS</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_UWORD_OPS</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_SBYTE_OPS</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_SWORD_OPS</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_CMP_EQUAL_ANY</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_CMP_RANGES</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_CMP_EQUAL_EACH</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_CMP_EQUAL_ORDERED</name></cpp:macro> <cpp:value>0x0c</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_POSITIVE_POLARITY</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_NEGATIVE_POLARITY</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_MASKED_POSITIVE_POLARITY</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_MASKED_NEGATIVE_POLARITY</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_LEAST_SIGNIFICANT</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_MOST_SIGNIFICANT</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_BIT_MASK</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIDD_UNIT_MASK</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>






















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpistrm</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_pcmpistrm128((__v16qi)(__m128i)(A), (__v16qi)(__m128i)(B), (int)(M))</cpp:value></cpp:define>





















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpistri</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpistri128((__v16qi)(__m128i)(A), (__v16qi)(__m128i)(B), (int)(M))</cpp:value></cpp:define>



























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpestrm</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>LA</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>LB</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_pcmpestrm128((__v16qi)(__m128i)(A), (int)(LA), (__v16qi)(__m128i)(B), (int)(LB), (int)(M))</cpp:value></cpp:define>


























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpestri</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>LA</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>LB</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpestri128((__v16qi)(__m128i)(A), (int)(LA), (__v16qi)(__m128i)(B), (int)(LB), (int)(M))</cpp:value></cpp:define>



















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpistra</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpistria128((__v16qi)(__m128i)(A), (__v16qi)(__m128i)(B), (int)(M))</cpp:value></cpp:define>
















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpistrc</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpistric128((__v16qi)(__m128i)(A), (__v16qi)(__m128i)(B), (int)(M))</cpp:value></cpp:define>















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpistro</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpistrio128((__v16qi)(__m128i)(A), (__v16qi)(__m128i)(B), (int)(M))</cpp:value></cpp:define>

















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpistrs</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpistris128((__v16qi)(__m128i)(A), (__v16qi)(__m128i)(B), (int)(M))</cpp:value></cpp:define>

















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpistrz</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpistriz128((__v16qi)(__m128i)(A), (__v16qi)(__m128i)(B), (int)(M))</cpp:value></cpp:define>





















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpestra</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>LA</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>LB</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpestria128((__v16qi)(__m128i)(A), (int)(LA), (__v16qi)(__m128i)(B), (int)(LB), (int)(M))</cpp:value></cpp:define>





















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpestrc</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>LA</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>LB</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpestric128((__v16qi)(__m128i)(A), (int)(LA), (__v16qi)(__m128i)(B), (int)(LB), (int)(M))</cpp:value></cpp:define>




















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpestro</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>LA</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>LB</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpestrio128((__v16qi)(__m128i)(A), (int)(LA), (__v16qi)(__m128i)(B), (int)(LB), (int)(M))</cpp:value></cpp:define>






















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpestrs</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>LA</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>LB</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpestris128((__v16qi)(__m128i)(A), (int)(LA), (__v16qi)(__m128i)(B), (int)(LB), (int)(M))</cpp:value></cpp:define>





















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cmpestrz</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>LA</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>LB</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_pcmpestriz128((__v16qi)(__m128i)(A), (int)(LA), (__v16qi)(__m128i)(B), (int)(LB), (int)(M))</cpp:value></cpp:define>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128i</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpgt_epi64</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__V1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>__V2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v2di</name><operator>)</operator><name>__V1</name> <operator>&gt;</operator> <operator>(</operator><name>__v2di</name><operator>)</operator><name>__V2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_crc32_u8</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_crc32qi</name><argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_crc32_u16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_crc32hi</name><argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_crc32_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_crc32si</name><argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_crc32_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_crc32di</name><argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;popcntintrin.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
