<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_SANITIZERMETADATA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_SANITIZERMETADATA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>GlobalVariable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Instruction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MDNode</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SanitizerMetadata</name> <block>{<block_content>
<expr_stmt><expr><call><name>SanitizerMetadata</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SanitizerMetadata</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SanitizerMetadata</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SanitizerMetadata</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>reportGlobalToASan</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>GV</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>&amp;</operator><name>D</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsDynInit</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>reportGlobalToASan</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>GV</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>, <argument><expr><name>QualType</name> <name>Ty</name></expr></argument>, <argument><expr><name>bool</name> <name>IsDynInit</name> <operator>=</operator> <name>false</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsExcluded</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>disableSanitizerForGlobal</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>GV</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>disableSanitizerForInstruction</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Instruction</name> <operator>*</operator><name>I</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<label><name>private</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><macro><name>getLocationMetadata</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
