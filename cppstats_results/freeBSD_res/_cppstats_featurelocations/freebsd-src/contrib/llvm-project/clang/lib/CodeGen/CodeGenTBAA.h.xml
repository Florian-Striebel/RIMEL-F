<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CODEGENTBAA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CODEGENTBAA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/MDBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Metadata.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MangleContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CGRecordLayout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>TBAAAccessKind</name> <range>: <expr><name>unsigned</name> <block>{
<expr><name>Ordinary</name></expr>,
<expr><name>MayAlias</name></expr>,
<expr><name>Incomplete</name></expr>,
}</block></expr></range></decl>;</decl_stmt>


<struct>struct <name>TBAAAccessInfo</name> <block>{
<macro><name>TBAAAccessInfo</name><argument_list>(<argument>TBAAAccessKind Kind</argument>, <argument>llvm::MDNode *BaseType</argument>,
<argument>llvm::MDNode *AccessType</argument>, <argument>uint64_t Offset</argument>, <argument>uint64_t Size</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Kind</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>BaseType</name><argument_list>(<argument><expr><name>BaseType</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AccessType</name><argument_list>(<argument><expr><name>AccessType</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Offset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Size</name><argument_list>(<argument>Size</argument>)</argument_list></macro>
<expr><block>{}</block>

<macro><name>TBAAAccessInfo</name><argument_list>(<argument>llvm::MDNode *BaseType</argument>, <argument>llvm::MDNode *AccessType</argument>,
<argument>uint64_t Offset</argument>, <argument>uint64_t Size</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>TBAAAccessInfo</name><argument_list>(<argument>TBAAAccessKind::Ordinary</argument>, <argument>BaseType</argument>, <argument>AccessType</argument>,
<argument>Offset</argument>, <argument>Size</argument>)</argument_list></macro>
<block>{}</block>

<name>explicit</name> <macro><name>TBAAAccessInfo</name><argument_list>(<argument>llvm::MDNode *AccessType</argument>, <argument>uint64_t Size</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>TBAAAccessInfo</name><argument_list>( <argument>nullptr</argument>, <argument>AccessType</argument>, <argument><literal type="number">0</literal></argument>, <argument>Size</argument>)</argument_list></macro>
<block>{}</block>

<call><name>TBAAAccessInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <macro><name>TBAAAccessInfo</name><argument_list>( <argument>nullptr</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<block>{}</block>

<specifier>static</specifier> <name>TBAAAccessInfo</name> <macro><name>getMayAliasInfo</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>TBAAAccessInfo</name><argument_list>(<argument><expr><name>TBAAAccessKind</name><operator>::</operator><name>MayAlias</name></expr></argument>,
<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isMayAlias</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>TBAAAccessKind</name><operator>::</operator><name>MayAlias</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>TBAAAccessInfo</name></type> <name>getIncompleteInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>TBAAAccessInfo</name><argument_list>(<argument><expr><name>TBAAAccessKind</name><operator>::</operator><name>Incomplete</name></expr></argument>,
<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isIncomplete</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>TBAAAccessKind</name><operator>::</operator><name>Incomplete</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>TBAAAccessInfo</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Kind</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Kind</name></name> <operator>&amp;&amp;</operator>
<name>BaseType</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>BaseType</name></name> <operator>&amp;&amp;</operator>
<name>AccessType</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>AccessType</name></name> <operator>&amp;&amp;</operator>
<name>Offset</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Offset</name></name> <operator>&amp;&amp;</operator>
<name>Size</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Size</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>TBAAAccessInfo</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>Other</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><name>this</name> <operator>!=</operator> <call><name>TBAAAccessInfo</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>TBAAAccessKind</name></type> <name>Kind</name></decl>;</decl_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><name>BaseType</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><name>AccessType</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>Offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>Size</name></decl>;</decl_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name>class</name></type> <name>CodeGenTBAA</name> <block>{<block_content>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>&amp;</operator><name>Module</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CodeGenOptions</name> <modifier>&amp;</modifier></type><name>CodeGenOpts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>Features</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MangleContext</name> <modifier>&amp;</modifier></type><name>MContext</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDBuilder</name> <name>MDHelper</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>MetadataCache</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>BaseTypeMetadataCache</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>TBAAAccessInfo</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>AccessTagMetadataCache</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>StructMetadataCache</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><name>Root</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><name>Char</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><call><name>getRoot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><call><name>getChar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>bool</name></type> <name>CollectFields</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>BaseOffset</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>Ty</name></decl></parameter>,
<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MDBuilder</name><operator>::</operator><name>TBAAStructField</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Fields</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>MayAlias</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><macro><name>createScalarTypeNode</name><argument_list>(<argument>StringRef Name</argument>, <argument>llvm::MDNode *Parent</argument>,
<argument>uint64_t Size</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><call><name>getTypeInfoHelper</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><name>Ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><call><name>getBaseTypeInfoHelper</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><name>Ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CodeGenTBAA</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CodeGenOptions</name> <operator>&amp;</operator><name>CGO</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Features</name></expr></argument>, <argument><expr><name>MangleContext</name> <operator>&amp;</operator><name>MContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>CodeGenTBAA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><macro><name>getTypeInfo</name><argument_list>(<argument>QualType QTy</argument>)</argument_list></macro></expr>;</expr_stmt>



<function_decl><type><name>TBAAAccessInfo</name></type> <name>getAccessInfo</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>AccessType</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>TBAAAccessInfo</name></type> <name>getVTablePtrAccessInfo</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>VTablePtrType</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><macro><name>getTBAAStructInfo</name><argument_list>(<argument>QualType QTy</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><macro><name>getBaseTypeInfo</name><argument_list>(<argument>QualType QTy</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><macro><name>getAccessTagInfo</name><argument_list>(<argument>TBAAAccessInfo Info</argument>)</argument_list></macro></expr>;</expr_stmt>



<function_decl><type><name>TBAAAccessInfo</name></type> <name>mergeTBAAInfoForCast</name><parameter_list>(<parameter><decl><type><name>TBAAAccessInfo</name></type> <name>SourceInfo</name></decl></parameter>,
<parameter><decl><type><name>TBAAAccessInfo</name></type> <name>TargetInfo</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>TBAAAccessInfo</name></type> <name>mergeTBAAInfoForConditionalOperator</name><parameter_list>(<parameter><decl><type><name>TBAAAccessInfo</name></type> <name>InfoA</name></decl></parameter>,
<parameter><decl><type><name>TBAAAccessInfo</name></type> <name>InfoB</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>TBAAAccessInfo</name></type> <name>mergeTBAAInfoForMemoryTransfer</name><parameter_list>(<parameter><decl><type><name>TBAAAccessInfo</name></type> <name>DestInfo</name></decl></parameter>,
<parameter><decl><type><name>TBAAAccessInfo</name></type> <name>SrcInfo</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><name>TBAAAccessInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><name>TBAAAccessInfo</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<expr><name>unsigned</name> <name>UnsignedKey</name> <operator>=</operator> <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><call><name>TBAAAccessInfo</name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><name>TBAAAccessKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>UnsignedKey</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>MDNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>MDNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><name>TBAAAccessInfo</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<expr><name>unsigned</name> <name>UnsignedKey</name> <operator>=</operator> <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><call><name>TBAAAccessInfo</name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CodeGen</name><operator>::</operator><name>TBAAAccessKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>UnsignedKey</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>MDNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>MDNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>const clang::CodeGen::TBAAAccessInfo &amp;Val</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>KindValue</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Val</name><operator>.</operator><name>Kind</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><name>KindValue</name></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>MDNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><name><name>Val</name><operator>.</operator><name>BaseType</name></name></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>MDNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><name><name>Val</name><operator>.</operator><name>AccessType</name></name></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><name><name>Val</name><operator>.</operator><name>Offset</name></name></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><name><name>Val</name><operator>.</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>const clang::CodeGen::TBAAAccessInfo &amp;LHS</argument>,
<argument>const clang::CodeGen::TBAAAccessInfo &amp;RHS</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
