<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/__clang_hip_libdevice_declares.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_HIP_LIBDEVICE_DECLARES_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_HIP_LIBDEVICE_DECLARES_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_acos_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_acosh_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_asin_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_asinh_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_atan2_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_atan_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_atanh_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_cbrt_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_ceil_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__device__</name> <name>float</name> <name>__ocml_copysign_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>,
<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_cos_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_native_cos_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>__device__</name> <name>float</name> <name>__ocml_cosh_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_cospi_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_i0_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_i1_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_erfc_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_erfcinv_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_erfcx_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_erf_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_erfinv_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_exp10_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_native_exp10_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_exp2_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_exp_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_native_exp_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_expm1_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_fabs_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_fdim_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_floor_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_fma_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_fmax_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_fmin_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__device__</name> <name>float</name> <name>__ocml_fmod_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>,
<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_frexp_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>,
<argument><expr><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>int</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_hypot_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_ilogb_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_isfinite_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_isinf_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_isnan_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_j0_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_j1_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_ldexp_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_lgamma_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_log10_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_native_log10_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_log1p_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_log2_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_native_log2_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_logb_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_log_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_native_log_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_modf_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>,
<argument><expr><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>float</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_nearbyint_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_nextafter_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_len3_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_len4_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>,
<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_ncdf_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_ncdfinv_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_pow_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_pown_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_rcbrt_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_remainder_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_remquo_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>,
<argument><expr><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>int</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_rhypot_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_rint_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_rlen3_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_rlen4_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>,
<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_round_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_rsqrt_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_scalb_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_scalbn_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_signbit_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_sincos_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>,
<argument><expr><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>float</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_sincospi_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>,
<argument><expr><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>float</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_sin_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_native_sin_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_sinh_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_sinpi_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_sqrt_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_native_sqrt_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_tan_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_tanh_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_tgamma_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_trunc_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_y0_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>float</name></type> <name>__ocml_y1_f32</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_add_rte_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_add_rtn_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_add_rtp_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_add_rtz_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_sub_rte_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_sub_rtn_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_sub_rtp_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_sub_rtz_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_mul_rte_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_mul_rtn_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_mul_rtp_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_mul_rtz_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_div_rte_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_div_rtn_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_div_rtp_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_div_rtz_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_sqrt_rte_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_sqrt_rtn_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_sqrt_rtp_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_sqrt_rtz_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_fma_rte_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_fma_rtn_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_fma_rtp_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ocml_fma_rtz_f32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__device__</name> <specifier>inline</specifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name>
<name>__llvm_amdgcn_cos_f32</name><argument_list>(<argument><expr><name>float</name> <name>__x</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_amdgcn_cosf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <specifier>inline</specifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name>
<name>__llvm_amdgcn_rcp_f32</name><argument_list>(<argument><expr><name>float</name> <name>__x</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_amdgcn_rcpf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <specifier>inline</specifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name>
<name>__llvm_amdgcn_rsq_f32</name><argument_list>(<argument><expr><name>float</name> <name>__x</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_amdgcn_rsqf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <specifier>inline</specifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name>
<name>__llvm_amdgcn_sin_f32</name><argument_list>(<argument><expr><name>float</name> <name>__x</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_amdgcn_sinf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_acos_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_acosh_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_asin_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_asinh_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_atan2_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_atan_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_atanh_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_cbrt_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_ceil_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_copysign_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_cos_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_cosh_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_cospi_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_i0_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_i1_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_erfc_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_erfcinv_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_erfcx_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_erf_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_erfinv_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_exp10_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_exp2_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_exp_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_expm1_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_fabs_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_fdim_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_floor_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_fma_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_fmax_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_fmin_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_fmod_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_frexp_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>,
<argument><expr><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>int</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_hypot_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_ilogb_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_isfinite_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_isinf_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_isnan_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_j0_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_j1_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_ldexp_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_lgamma_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_log10_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_log1p_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_log2_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_logb_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_log_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_modf_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>,
<argument><expr><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>double</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_nearbyint_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_nextafter_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_len3_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_len4_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_ncdf_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_ncdfinv_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_pow_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_pown_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_rcbrt_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_remainder_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_remquo_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>,
<argument><expr><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>int</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_rhypot_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_rint_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_rlen3_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_rlen4_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_round_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_rsqrt_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_scalb_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_scalbn_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_signbit_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_sincos_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>,
<argument><expr><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>double</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <name>double</name></type>
<name>__ocml_sincospi_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>double</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_sin_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_sinh_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_sinpi_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_sqrt_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_tan_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_tanh_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_tgamma_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_trunc_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_y0_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>double</name></type> <name>__ocml_y1_f64</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_add_rte_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_add_rtn_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_add_rtp_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_add_rtz_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_sub_rte_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_sub_rtn_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_sub_rtp_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_sub_rtz_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_mul_rte_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_mul_rtn_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_mul_rtp_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_mul_rtz_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_div_rte_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_div_rtn_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_div_rtp_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_div_rtz_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_sqrt_rte_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_sqrt_rtn_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_sqrt_rtp_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_sqrt_rtz_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_fma_rte_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_fma_rtn_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_fma_rtp_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name> <name>__ocml_fma_rtz_f64</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__device__</name> <specifier>inline</specifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name>
<name>__llvm_amdgcn_rcp_f64</name><argument_list>(<argument><expr><name>double</name> <name>__x</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_amdgcn_rcp</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>__device__</name> <specifier>inline</specifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>double</name>
<name>__llvm_amdgcn_rsq_f64</name><argument_list>(<argument><expr><name>double</name> <name>__x</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_amdgcn_rsq</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_ceil_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>_Float16</name></type> <name>__ocml_cos_f16</name><parameter_list>(<parameter><decl><type><name>_Float16</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_exp_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_exp10_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_exp2_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_floor_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_fma_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>, <argument><expr><name>_Float16</name></expr></argument>,
<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_fabs_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_isinf_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>int</name> <name>__ocml_isnan_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_log_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_log10_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_log2_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__llvm_amdgcn_rcp_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_rint_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_rsqrt_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>_Float16</name></type> <name>__ocml_sin_f16</name><parameter_list>(<parameter><decl><type><name>_Float16</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_sqrt_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_trunc_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>_Float16</name> <name>__ocml_pown_f16</name><argument_list>(<argument><expr><name>_Float16</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <type><name>_Float16</name> <name>__2f16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>short</name> <name>__2i16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>

<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>float</name> <name>__ockl_fdot2</name><argument_list>(<argument><expr><name>__2f16</name> <name>a</name></expr></argument>, <argument><expr><name>__2f16</name> <name>b</name></expr></argument>,
<argument><expr><name>float</name> <name>c</name></expr></argument>, <argument><expr><name>bool</name> <name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_ceil_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_fabs_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>__2f16</name></type> <name>__ocml_cos_2f16</name><parameter_list>(<parameter><decl><type><name>__2f16</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_exp_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_exp10_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_exp2_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_floor_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list>
<name>__2f16</name> <name>__ocml_fma_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>, <argument><expr><name>__2f16</name></expr></argument>, <argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__2i16</name> <name>__ocml_isinf_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__2i16</name> <name>__ocml_isnan_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_log_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_log10_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_log2_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>__device__</name> <specifier>inline</specifier> <name>__2f16</name></type>
<name>__llvm_amdgcn_rcp_2f16</name><parameter_list>(<parameter><decl><type><name>__2f16</name></type> <name>__x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__2f16</name><operator>)</operator><operator>(</operator><call><name>__llvm_amdgcn_rcp_f16</name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>__llvm_amdgcn_rcp_f16</name><argument_list>(<argument><expr><name><name>__x</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_rint_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_rsqrt_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>__device__</name> <name>__2f16</name></type> <name>__ocml_sin_2f16</name><parameter_list>(<parameter><decl><type><name>__2f16</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_sqrt_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_trunc_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__device__</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <name>__2f16</name> <name>__ocml_pown_2f16</name><argument_list>(<argument><expr><name>__2f16</name></expr></argument>, <argument><expr><name>__2i16</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
