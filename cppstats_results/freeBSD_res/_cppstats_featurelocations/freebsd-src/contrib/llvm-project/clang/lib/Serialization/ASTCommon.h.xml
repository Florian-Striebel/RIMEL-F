<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Serialization/ASTCommon.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_SERIALIZATION_ASTCOMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_SERIALIZATION_ASTCOMMON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclFriend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ASTBitCodes.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>

<enum>enum <name>DeclUpdateKind</name> <block>{
<decl><name>UPD_CXX_ADDED_IMPLICIT_MEMBER</name></decl>,
<decl><name>UPD_CXX_ADDED_TEMPLATE_SPECIALIZATION</name></decl>,
<decl><name>UPD_CXX_ADDED_ANONYMOUS_NAMESPACE</name></decl>,
<decl><name>UPD_CXX_ADDED_FUNCTION_DEFINITION</name></decl>,
<decl><name>UPD_CXX_ADDED_VAR_DEFINITION</name></decl>,
<decl><name>UPD_CXX_POINT_OF_INSTANTIATION</name></decl>,
<decl><name>UPD_CXX_INSTANTIATED_CLASS_DEFINITION</name></decl>,
<decl><name>UPD_CXX_INSTANTIATED_DEFAULT_ARGUMENT</name></decl>,
<decl><name>UPD_CXX_INSTANTIATED_DEFAULT_MEMBER_INITIALIZER</name></decl>,
<decl><name>UPD_CXX_RESOLVED_DTOR_DELETE</name></decl>,
<decl><name>UPD_CXX_RESOLVED_EXCEPTION_SPEC</name></decl>,
<decl><name>UPD_CXX_DEDUCED_RETURN_TYPE</name></decl>,
<decl><name>UPD_DECL_MARKED_USED</name></decl>,
<decl><name>UPD_MANGLING_NUMBER</name></decl>,
<decl><name>UPD_STATIC_LOCAL_NUMBER</name></decl>,
<decl><name>UPD_DECL_MARKED_OPENMP_THREADPRIVATE</name></decl>,
<decl><name>UPD_DECL_MARKED_OPENMP_ALLOCATE</name></decl>,
<decl><name>UPD_DECL_MARKED_OPENMP_DECLARETARGET</name></decl>,
<decl><name>UPD_DECL_EXPORTED</name></decl>,
<decl><name>UPD_ADDED_ATTR_TO_RECORD</name></decl>
}</block>;</enum>

<function_decl><type><name>TypeIdx</name></type> <name>TypeIdxFromBuiltin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BuiltinType</name> <modifier>*</modifier></type><name>BT</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>IdxForTypeTy</name></expr></argument>&gt;</argument_list></name>
<name>TypeID</name></type> <name>MakeTypeID</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>IdxForTypeTy</name></type> <name>IdxForType</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>T</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PREDEF_TYPE_NULL_ID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>FastQuals</name> <init>= <expr><call><name><name>T</name><operator>.</operator><name>getLocalFastQualifiers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>removeLocalFastQualifiers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>T</name><operator>.</operator><name>hasLocalNonFastQualifiers</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>IdxForType</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>asTypeID</name><argument_list>(<argument><expr><name>FastQuals</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>T</name><operator>.</operator><name>hasLocalQualifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>BuiltinType</name> <modifier>*</modifier></type><name>BT</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>BuiltinType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>T</name><operator>.</operator><name>getTypePtr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TypeIdxFromBuiltin</name><argument_list>(<argument><expr><name>BT</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>asTypeID</name><argument_list>(<argument><expr><name>FastQuals</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <name><name>Context</name><operator>.</operator><name>AutoDeductTy</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TypeIdx</name><argument_list>(<argument><expr><name>PREDEF_TYPE_AUTO_DEDUCT</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>asTypeID</name><argument_list>(<argument><expr><name>FastQuals</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <name><name>Context</name><operator>.</operator><name>AutoRRefDeductTy</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TypeIdx</name><argument_list>(<argument><expr><name>PREDEF_TYPE_AUTO_RREF_DEDUCT</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>asTypeID</name><argument_list>(<argument><expr><name>FastQuals</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>IdxForType</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>asTypeID</name><argument_list>(<argument><expr><name>FastQuals</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>unsigned</name></type> <name>ComputeHash</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>Sel</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>getDefinitiveDeclContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isRedeclarableDeclKind</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Kind</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>needsAnonymousDeclarationNumber</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Fn</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>numberAnonymousDeclsWithin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>,
<parameter><decl><type><name>Fn</name></type> <name>Visit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>Decl</name> <modifier>*</modifier></type><name>LexicalD</name> <range>: <expr><call><name><name>DC</name><operator>-&gt;</operator><name>decls</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>FD</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>FriendDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LexicalD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>LexicalD</name> <operator>=</operator> <call><name><name>FD</name><operator>-&gt;</operator><name>getFriendDecl</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>auto</name> <operator>*</operator><name>ND</name> <operator>=</operator> <call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>LexicalD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ND</name> <operator>||</operator> <operator>!</operator><call><name>needsAnonymousDeclarationNumber</name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Visit</name><argument_list>(<argument><expr><name>ND</name></expr></argument>, <argument><expr><name>Index</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isPartOfPerModuleInitializer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>ImportDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>VD</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>VarDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>!</operator><call><name>isTemplateInstantiation</name><argument_list>(<argument><expr><call><name><name>VD</name><operator>-&gt;</operator><name>getTemplateSpecializationKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
