<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/UnwrappedLineParser.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_UNWRAPPEDLINEPARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_UNWRAPPEDLINEPARSER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FormatToken.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/IdentifierTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Format/Format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>

<struct_decl>struct <name>UnwrappedLineNode</name>;</struct_decl>







<struct>struct <name>UnwrappedLine</name> <block>{
<expr_stmt><expr><call><name>UnwrappedLine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>UnwrappedLineNode</name></expr></argument>&gt;</argument_list></name> <name>Tokens</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Level</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>InPPDirective</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>MustBeDeclaration</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>MatchingOpeningBlockLineIndex</name> <init>= <expr><name>kInvalidIndex</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>MatchingClosingBlockLineIndex</name> <init>= <expr><name>kInvalidIndex</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kInvalidIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>FirstStartColumn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>UnwrappedLineConsumer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>UnwrappedLineConsumer</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <name>void</name> <call><name>consumeUnwrappedLine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UnwrappedLine</name> <operator>&amp;</operator><name>Line</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>finishRun</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FormatTokenSource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>UnwrappedLineParser</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>UnwrappedLineParser</name><argument_list>(<argument>const FormatStyle &amp;Style</argument>,
<argument>const AdditionalKeywords &amp;Keywords</argument>,
<argument>unsigned FirstStartColumn</argument>, <argument>ArrayRef&lt;FormatToken *&gt; Tokens</argument>,
<argument>UnwrappedLineConsumer &amp;Callback</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>parse</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseFile</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseLevel</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>HasOpeningBrace</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseBlock</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>MustBeDeclaration</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>AddLevels</name> <init>= <expr><literal type="number">1u</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>MunchSemi</name> <init>= <expr><name>true</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>UnindentWhitesmithsBraces</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseChildBlock</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parsePPDirective</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parsePPDefine</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parsePPIf</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>IfDef</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parsePPElIf</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parsePPElse</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parsePPEndIf</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parsePPUnknown</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>readTokenWithJavaScriptASI</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseStructuralElement</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>IsTopLevel</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryToParseBracedList</name><parameter_list>()</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>parseBracedList</name><argument_list>(<argument><expr><name>bool</name> <name>ContinueOnSemicolons</name> <operator>=</operator> <name>false</name></expr></argument>, <argument><expr><name>bool</name> <name>IsEnum</name> <operator>=</operator> <name>false</name></expr></argument>,
<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>ClosingBraceKind</name> <operator>=</operator> <name>tok</name><operator>::</operator><name>r_brace</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>parseParens</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseSquare</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>LambdaIntroducer</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseIfThenElse</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseTryCatch</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseForOrWhileLoop</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseDoWhile</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseLabel</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>LeftAlignLabel</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseCaseLabel</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseSwitch</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseNamespace</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseNew</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseAccessSpecifier</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>parseEnum</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>parseStructLike</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseConcept</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseRequires</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseRequiresExpression</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>OriginalLevel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseConstraintExpression</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>OriginalLevel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseJavaEnumBody</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>parseRecord</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ParseAsExpr</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseObjCLightweightGenerics</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseObjCMethod</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseObjCProtocolList</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseObjCUntilAtEnd</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseObjCInterfaceOrImplementation</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>parseObjCProtocol</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseJavaScriptEs6ImportExport</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseStatementMacro</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parseCSharpAttribute</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>parseCSharpGenericTypeConstraint</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryToParseLambda</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryToParseLambdaIntroducer</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryToParsePropertyAccessor</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tryToParseJSFunction</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryToParseSimpleAttribute</name><parameter_list>()</parameter_list>;</function_decl>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>LineLevel</name> <block>{<block_content> <expr_stmt><expr><name>Remove</name></expr><operator>,</operator> <expr><name>Keep</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>addUnwrappedLine</name><parameter_list>(<parameter><decl><type><name>LineLevel</name></type> <name>AdjustLevel</name> <init>= <expr><name>LineLevel</name><operator>::</operator><name>Remove</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>bool</name> <macro><name>eof</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<function_decl><type><name>void</name></type> <name>nextToken</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>LevelDifference</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>readToken</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>LevelDifference</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>distributeComments</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>FormatToken</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Comments</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>*</modifier></type><name>NextTok</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>flushComments</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>NewlineBeforeNext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>pushToken</name><parameter_list>(<parameter><decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>Tok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>calculateBraceTypes</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ExpectClassBody</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>conditionalCompilationCondition</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Unreachable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>conditionalCompilationStart</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Unreachable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>conditionalCompilationAlternative</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>conditionalCompilationEnd</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>isOnNewLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>FormatTok</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>size_t</name> <macro><name>computePPHash</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>UnwrappedLine</name></expr></argument>&gt;</argument_list></name> <name>Line</name></expr>;</expr_stmt>





<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>FormatToken</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>CommentsBeforeNextToken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>FormatTok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>MustBreakBeforeNextToken</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>UnwrappedLine</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>Lines</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>UnwrappedLine</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>PreprocessorDirectives</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>UnwrappedLine</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>CurrentLines</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>DeclarationScopeStack</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>FormatStyle</name> <modifier>&amp;</modifier></type><name>Style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AdditionalKeywords</name> <modifier>&amp;</modifier></type><name>Keywords</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Regex</name> <name>CommentPragmasRegex</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FormatTokenSource</name> <modifier>*</modifier></type><name>Tokens</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UnwrappedLineConsumer</name> <modifier>&amp;</modifier></type><name>Callback</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FormatToken</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>AllTokens</name></decl>;</decl_stmt>



<enum>enum <name>PPBranchKind</name> <block>{
<decl><name>PP_Conditional</name></decl>,
<decl><name>PP_Unreachable</name></decl>
}</block>;</enum>

<struct>struct <name>PPBranch</name> <block>{
<macro><name>PPBranch</name><argument_list>(<argument>PPBranchKind Kind</argument>, <argument>size_t Line</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>Kind</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Line</name><argument_list>(<argument>Line</argument>)</argument_list></macro> <expr><block>{}</block>
<name>PPBranchKind</name> <name>Kind</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Line</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>PPBranch</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></type> <name>PPStack</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>int</name></type> <name>PPBranchLevel</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>PPLevelBranchIndex</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>PPLevelBranchCount</name></decl>;</decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>PPChainBranchIndex</name></expr>;</expr_stmt>



<enum>enum <name>IncludeGuardState</name> <block>{
<decl><name>IG_Inited</name></decl>,
<decl><name>IG_IfNdefed</name></decl>,
<decl><name>IG_Defined</name></decl>,
<decl><name>IG_Found</name></decl>,
<decl><name>IG_Rejected</name></decl>,
}</block>;</enum>


<decl_stmt><decl><type><name>IncludeGuardState</name></type> <name>IncludeGuard</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>IncludeGuardToken</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>FirstStartColumn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ScopedLineState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CompoundStatementIndenter</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>UnwrappedLineNode</name> <block>{
<expr_stmt><expr><call><name>UnwrappedLineNode</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Tok</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>
<call><name>UnwrappedLineNode</name><argument_list>(<argument><expr><name>FormatToken</name> <operator>*</operator><name>Tok</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Tok</name><argument_list>(<argument>Tok</argument>)</argument_list></macro> <block>{}</block>

<name>FormatToken</name> <operator>*</operator><name>Tok</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>UnwrappedLine</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>Children</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><specifier>inline</specifier> <name>UnwrappedLine</name><operator>::</operator><call><name>UnwrappedLine</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>Level</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>InPPDirective</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MustBeDeclaration</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>MatchingOpeningBlockLineIndex</name><argument_list>(<argument>kInvalidIndex</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
