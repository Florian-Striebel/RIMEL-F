<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_BYTECODEEXPRGEN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_BYTECODEEXPRGEN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ByteCodeEmitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EvalEmitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Pointer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"PrimType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Record.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>State</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>LocalScope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>RecordScope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>VariableScope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>DeclScope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>OptionScope</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ByteCodeExprGen</name> <range>: <expr><name>public</name> <name><name>ConstStmtVisitor</name><argument_list type="generic">&lt;<argument><expr><name><name>ByteCodeExprGen</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>Emitter</name> <block>{<block_content>
<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>using</name></type> <name>NullaryFn</name> <init>= <expr><call><call><name>bool</name> <argument_list>(<argument><expr><name>ByteCodeExprGen</name><operator>::</operator><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceInfo</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>UnaryFn</name> <init>= <expr><call><call><name>bool</name> <argument_list>(<argument><expr><name>ByteCodeExprGen</name><operator>::</operator><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>PrimType</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceInfo</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>BinaryFn</name> <init>= <expr><call><call><name>bool</name> <argument_list>(<argument><expr><name>ByteCodeExprGen</name><operator>::</operator><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>PrimType</name></expr></argument>, <argument><expr><name>PrimType</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceInfo</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>LabelTy</name> <init>= <expr><name>typename</name> <name>Emitter</name><operator>::</operator><name>LabelTy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddrTy</name> <init>= <expr><name>typename</name> <name>Emitter</name><operator>::</operator><name>AddrTy</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>InitFnRef</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Context</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Program</name> <modifier>&amp;</modifier></type><name>P</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Tys</name></expr></argument>&gt;</argument_list></name></type>
<name>ByteCodeExprGen</name><argument_list>(<argument><expr><name>Context</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>, <argument><expr><name>Program</name> <operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>Tys</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>Args</name></expr></argument>)</argument_list>
<range>: <expr><call><name>Emitter</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>Args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></range></decl>, <decl><type ref="prev"/><name>Ctx</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>P</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>


<function_decl><type><name>bool</name></type> <name>VisitCastExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CastExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>VisitIntegerLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IntegerLiteral</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>VisitParenExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParenExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>VisitBinaryOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BinaryOperator</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>visitExpr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>visitDecl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>VD</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>

<function_decl><type><name>void</name></type> <name>emitCleanup</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>RecordType</name> <modifier>*</modifier></type><name>getRecordTy</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>Ty</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>Record</name> <modifier>*</modifier></type><name>getRecord</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>Ty</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Record</name> <modifier>*</modifier></type><name>getRecord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>unsigned</name></type> <name>getIntWidth</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>Ty</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>ASTContext</name> <operator>=</operator> <call><name><name>Ctx</name><operator>.</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>ASTContext</name><operator>.</operator><name>getIntWidth</name></name><argument_list>(<argument><expr><name>Ty</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>unsigned</name> <macro><name>getCharBit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <operator>&amp;</operator><name>ASTContext</name> <operator>=</operator> <call><name><name>Ctx</name><operator>.</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><call><name><name>ASTContext</name><operator>.</operator><name>getTargetInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCharWidth</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>PrimType</name></expr></argument>&gt;</argument_list></name> <macro><name>classify</name><argument_list>(<argument>const Expr *E</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>E</name><operator>-&gt;</operator><name>isGLValue</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name>PT_Ptr</name> <operator>:</operator> <call><name>classify</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>PrimType</name></expr></argument>&gt;</argument_list></name> <macro><name>classify</name><argument_list>(<argument>QualType Ty</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Ctx</name><operator>.</operator><name>classify</name></name><argument_list>(<argument><expr><name>Ty</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>needsAdjust</name><argument_list>(<argument><expr><name>QualType</name> <name>Ty</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>PrimType</name></type> <name>classifyPrim</name><argument_list>(<argument><expr><name>QualType</name> <name>Ty</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>T</name> <init>= <expr><call><name>classify</name><argument_list>(<argument><expr><name>Ty</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<return>return <expr><operator>*</operator><name>T</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"not a primitive type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<function_decl><type><name>bool</name></type> <name>discard</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>visitInitializer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>InitFnRef</name></type> <name>GenPtr</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>visitBool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>bool</name></type> <name>visitLocalInitializer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Init</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>visitInitializer</name><argument_list>(<argument><expr><name>Init</name></expr></argument>, <argument><expr><index>[<expr><name>this</name></expr><operator>,</operator> <name>I</name><operator>,</operator> <name>Init</name>]</index> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>emitGetPtrLocal</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>Init</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></argument></argument_list></call></expr></return>)</block_content></block>;</function>
</block_content>}</block></decl></decl_stmt>


<function><type><name>bool</name></type> <name>visitGlobalInitializer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Init</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>visitInitializer</name><argument_list>(<argument><expr><name>Init</name></expr></argument>, <argument><expr><index>[<expr><name>this</name></expr><operator>,</operator> <name>I</name><operator>,</operator> <name>Init</name>]</index> <block>{
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>emitGetPtrGlobal</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>Init</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></argument></argument_list></call></expr></return>)</block_content></block>;</function>
</block_content>}</block></decl></decl_stmt>


<function><type><name>bool</name></type> <name>visitThisInitializer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>I</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>visitInitializer</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><index>[<expr><name>this</name></expr><operator>,</operator> <name>I</name>]</index> <block>{ <return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>emitThis</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></argument></argument_list></call></expr></return>)</block_content></block>;</function>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>allocateLocalPrimitive</name><argument_list>(<argument><expr><name>DeclTy</name> <operator>&amp;&amp;</operator><name>Decl</name></expr></argument>, <argument><expr><name>PrimType</name> <name>Ty</name></expr></argument>, <argument><expr><name>bool</name> <name>IsMutable</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsExtended</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>allocateLocal</name><argument_list>(<argument>DeclTy &amp;&amp;Decl</argument>,
<argument>bool IsExtended = false</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>VariableScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>LocalScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>RecordScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>DeclScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name><name>OptionScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>


<function_decl><type><name>bool</name></type> <name>visitZeroInitializer</name><parameter_list>(<parameter><decl><type><name>PrimType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>DerefKind</name> <block>{<block_content>

<expr_stmt><expr><name>Read</name></expr><operator>,</operator>

<expr><name>Write</name></expr><operator>,</operator>

<expr><name>ReadWrite</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>dereference</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>LV</name></expr></argument>, <argument><expr><name>DerefKind</name> <name>AK</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>PrimType</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Direct</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>PrimType</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Indirect</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dereferenceParam</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>LV</name></expr></argument>, <argument><expr><name>PrimType</name> <name>T</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ParmVarDecl</name> <operator>*</operator><name>PD</name></expr></argument>,
<argument><expr><name>DerefKind</name> <name>AK</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>PrimType</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Direct</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>PrimType</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Indirect</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dereferenceVar</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>LV</name></expr></argument>, <argument><expr><name>PrimType</name> <name>T</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>PD</name></expr></argument>,
<argument><expr><name>DerefKind</name> <name>AK</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>PrimType</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Direct</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>PrimType</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Indirect</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>emitConst</name><argument_list>(<argument><expr><name>PrimType</name> <name>T</name></expr></argument>, <argument><expr><name>unsigned</name> <name>NumBits</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APInt</name> <operator>&amp;</operator><name>Value</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>bool</name></type> <name>emitConst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>QualType</name></type> <name>Ty</name> <init>= <expr><call><name><name>E</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumBits</name> <init>= <expr><call><name>getIntWidth</name><argument_list>(<argument><expr><name>Ty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>APInt</name></type> <name>WrappedValue</name><argument_list>(<argument><expr><name>NumBits</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>is_signed</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><call><name>emitConst</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>Ctx</name><operator>.</operator><name>classify</name></name><argument_list>(<argument><expr><name>Ty</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NumBits</name></expr></argument>, <argument><expr><name>WrappedValue</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>bool</name></type> <name>getPtrVarDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>VD</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <call><name>getGlobalIdx</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>VD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function><type><name>bool</name></type> <name>emitInitFn</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>InitFn</name> <operator>&amp;&amp;</operator> <literal type="string">"missing initializer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call>(<modifier>*</modifier><name>InitFn</name>)<argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>protected</name>:</label>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ValueDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Scope</name><operator>::</operator><name>Local</name></expr></argument>&gt;</argument_list></name> <name>Locals</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>OpaqueValueExpr</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>OpaqueExprs</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>VariableScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>VarScope</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>ArrayIndex</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>DiscardResult</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>InitFnRef</name></expr></argument>&gt;</argument_list></name> <name>InitFn</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
};

<decl_stmt><decl><type><specifier>extern</specifier> <name>template</name> <name>class</name></type> <name><name>ByteCodeExprGen</name><argument_list type="generic">&lt;<argument><expr><name>ByteCodeEmitter</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>template</name> <name>class</name></type> <name><name>ByteCodeExprGen</name><argument_list type="generic">&lt;<argument><expr><name>EvalEmitter</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>VariableScope</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>VariableScope</name><argument_list>()</argument_list></macro> <block>{ <expr><name><name>Ctx</name><operator>-&gt;</operator><name>VarScope</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>Parent</name></name></expr>; }</block>

<name>void</name> <macro><name>add</name><argument_list>(<argument>const Scope::Local &amp;Local</argument>, <argument>bool IsExtended</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>IsExtended</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>addExtended</name></name><argument_list>(<argument><expr><name>Local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>addLocal</name></name><argument_list>(<argument><expr><name>Local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>addLocal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Scope</name><operator>::</operator><name>Local</name> <operator>&amp;</operator><name>Local</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>Parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>Parent</name><operator>-&gt;</operator><name>addLocal</name></name><argument_list>(<argument><expr><name>Local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>addExtended</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Scope</name><operator>::</operator><name>Local</name> <operator>&amp;</operator><name>Local</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>Parent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>Parent</name><operator>-&gt;</operator><name>addExtended</name></name><argument_list>(<argument><expr><name>Local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>emitDestruction</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>VariableScope</name> <modifier>*</modifier></type><name>getParent</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Parent</name></expr>;</return> </block_content>}</block></function>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>VariableScope</name><argument_list>(<argument><expr><name><name>ByteCodeExprGen</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>Ctx</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Ctx</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Parent</name><argument_list>(<argument>Ctx-&gt;VarScope</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>Ctx</name><operator>-&gt;</operator><name>VarScope</name></name> <operator>=</operator> <name>this</name></expr>;
}</block>


<name><name>ByteCodeExprGen</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>Ctx</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VariableScope</name> <modifier>*</modifier></type><name>Parent</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>LocalScope</name> <range>: <expr><name>public</name> <name><name>VariableScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>LocalScope</name><argument_list>(<argument><expr><name><name>ByteCodeExprGen</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>Ctx</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>VariableScope</name></macro><operator>&lt;</operator><name>Emitter</name><operator>&gt;</operator><operator>(</operator><name>Ctx</name><operator>)</operator> <block>{}</block>

<operator>~</operator><macro><name>LocalScope</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <expr><call><name><name>this</name><operator>-&gt;</operator><name>emitDestruction</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>void</name> <macro><name>addLocal</name><argument_list>(<argument>const Scope::Local &amp;Local</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Idx</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Idx</name> <operator>=</operator> <call><name><name>this</name><operator>-&gt;</operator><name>Ctx</name><operator>-&gt;</operator><name>Descriptors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>Ctx</name><operator>-&gt;</operator><name>Descriptors</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

this-&gt;Ctx-&gt;Descriptors[*Idx].emplace_back(Local</block></if></if_stmt>)</block></expr>;
}</block>

<name>void</name> <macro><name>emitDestruction</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Idx</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<macro><name>this</name></macro><operator>-&gt;</operator><macro><name>Ctx</name></macro><operator>-&gt;</operator><macro><name>emitDestroy</name><argument_list>(<argument>*Idx</argument>, <argument>SourceInfo{}</argument>)</argument_list></macro></block></expr></range></decl>;</decl_stmt>
}

protected:

<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></type> <name>Idx</name></decl>;</decl_stmt>
};


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>BlockScope</name></type> <name>final</name> <range>: <expr><name>public</name> <name><name>LocalScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>BlockScope</name><argument_list>(<argument><expr><name><name>ByteCodeExprGen</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>Ctx</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>LocalScope</name></macro><operator>&lt;</operator><name>Emitter</name><operator>&gt;</operator><operator>(</operator><name>Ctx</name><operator>)</operator> <block>{}</block>

<name>void</name> <macro><name>addExtended</name><argument_list>(<argument>const Scope::Local &amp;Local</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Cannot create temporaries in full scopes"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>ExprScope</name></type> <name>final</name> <range>: <expr><name>public</name> <name><name>LocalScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ExprScope</name><argument_list>(<argument><expr><name><name>ByteCodeExprGen</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>Ctx</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>LocalScope</name></macro><operator>&lt;</operator><name>Emitter</name><operator>&gt;</operator><operator>(</operator><name>Ctx</name><operator>)</operator> <block>{}</block>

<name>void</name> <macro><name>addExtended</name><argument_list>(<argument>const Scope::Local &amp;Local</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>this</name><operator>-&gt;</operator><name>Parent</name><operator>-&gt;</operator><name>addLocal</name></name><argument_list>(<argument><expr><name>Local</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
