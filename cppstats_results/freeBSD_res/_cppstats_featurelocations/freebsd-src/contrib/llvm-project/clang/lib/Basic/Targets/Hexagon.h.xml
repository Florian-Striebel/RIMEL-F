<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/Hexagon.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_HEXAGON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_HEXAGON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>HexagonTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{

<expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>GCCRegNames</name><index>[]</index></name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name> <name><name>GCCRegAliases</name><index>[]</index></name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>CPU</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>HVXVersion</name></expr>;
<expr><name>bool</name> <name>HasHVX</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasHVX64B</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasHVX128B</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAudio</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>UseLongCalls</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>HexagonTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TargetInfo</name><argument_list>(<argument>Triple</argument>)</argument_list></macro> <block>{



<expr><call><name>resetDataLayout</name><argument_list>(
<argument><expr><literal type="string">"e-m:e-p:32:32:32-a:0-n16:32-"</literal>
<literal type="string">"i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-"</literal>
<literal type="string">"v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedInt</name></expr>;



<expr><name>NoAsmVariants</name> <operator>=</operator> <name>true</name></expr>;

<expr><name>LargeArrayMinWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LargeArrayAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>UseBitFieldTypeAlignment</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>ZeroLengthBitfieldBoundary</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;





<expr><name>BoolWidth</name> <operator>=</operator> <name>BoolAlign</name> <operator>=</operator> <literal type="number">8</literal></expr>;
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;Info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<switch>switch <condition>(<expr><operator>*</operator><name>Name</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>HasHVX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
break</block><empty_stmt>;</empty_stmt></if></if_stmt>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></switch>
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isCLZForZeroUndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>hasFeature</name><argument_list>(<argument>StringRef Feature</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name>
<macro><name>initFeatureMap</name><argument_list>(<argument>llvm::StringMap&lt;bool&gt; &amp;Features</argument>, <argument>DiagnosticsEngine &amp;Diags</argument>,
<argument>StringRef CPU</argument>,
<argument>const std::vector&lt;std::string&gt; &amp;FeaturesVec</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>handleTargetFeatures</name><argument_list>(<argument>std::vector&lt;std::string&gt; &amp;Features</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isMusl</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>HexagonBuiltinVaList</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>CharPtrBuiltinVaList</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getHexagonCPUSuffix</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>isValidCPUName</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<return>return <expr><call><name>getHexagonCPUSuffix</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>fillValidCPUList</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Values</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>setCPU</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Name</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidCPUName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>getEHDataRegisterNumber</name><argument_list>(<argument><expr><name>unsigned</name> <name>RegNo</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>RegNo</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>RegNo</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isTinyCore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><call><name><name>CPU</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
