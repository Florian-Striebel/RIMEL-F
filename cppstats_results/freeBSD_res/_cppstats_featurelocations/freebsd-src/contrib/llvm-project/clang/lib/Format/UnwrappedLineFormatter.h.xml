<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/UnwrappedLineFormatter.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_UNWRAPPEDLINEFORMATTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_UNWRAPPEDLINEFORMATTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ContinuationIndenter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Format/Format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ContinuationIndenter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WhitespaceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>UnwrappedLineFormatter</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>UnwrappedLineFormatter</name><argument_list>(<argument><expr><name>ContinuationIndenter</name> <operator>*</operator><name>Indenter</name></expr></argument>,
<argument><expr><name>WhitespaceManager</name> <operator>*</operator><name>Whitespaces</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FormatStyle</name> <operator>&amp;</operator><name>Style</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>AdditionalKeywords</name> <operator>&amp;</operator><name>Keywords</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>,
<argument><expr><name>FormattingAttemptStatus</name> <operator>*</operator><name>Status</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Indenter</name><argument_list>(<argument><expr><name>Indenter</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Whitespaces</name><argument_list>(<argument><expr><name>Whitespaces</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Style</name><argument_list>(<argument><expr><name>Style</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Keywords</name><argument_list>(<argument><expr><name>Keywords</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SourceMgr</name><argument_list>(<argument><expr><name>SourceMgr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Status</name><argument_list>(<argument>Status</argument>)</argument_list></macro> <expr><block>{}</block>


<name>unsigned</name> <macro><name>format</name><argument_list>(<argument>const SmallVectorImpl&lt;AnnotatedLine *&gt; &amp;Lines</argument>,
<argument>bool DryRun = false</argument>, <argument>int AdditionalIndent = <literal type="number">0</literal></argument>,
<argument>bool FixBadIndentation = false</argument>, <argument>unsigned FirstStartColumn = <literal type="number">0</literal></argument>,
<argument>unsigned NextStartColumn = <literal type="number">0</literal></argument>, <argument>unsigned LastStartColumn = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>


<function_decl><type><name>void</name></type> <name>formatFirstToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>*</modifier></type><name>PreviousLine</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>*</modifier></type><name>PrevPrevLine</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>AnnotatedLine</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Lines</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Indent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NewlineIndent</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>unsigned</name></type> <name>getColumnLimit</name><argument_list>(<argument><expr><name>bool</name> <name>InPPDirective</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>AnnotatedLine</name> <operator>*</operator><name>NextLine</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>AnnotatedLine</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<name>PenaltyCache</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ContinuationIndenter</name> <modifier>*</modifier></type><name>Indenter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WhitespaceManager</name> <modifier>*</modifier></type><name>Whitespaces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FormatStyle</name> <modifier>&amp;</modifier></type><name>Style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AdditionalKeywords</name> <modifier>&amp;</modifier></type><name>Keywords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FormattingAttemptStatus</name> <modifier>*</modifier></type><name>Status</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
