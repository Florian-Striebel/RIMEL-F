<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_LINKEMITTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_LINKEMITTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ByteCodeGenError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InterpStack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InterpState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"PrimType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Program.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Source.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceInfo</name></decl>;</decl_stmt>
<enum_decl>enum <name>Opcode</name> : <type><name>uint32_t</name></type>;</enum_decl>


<decl_stmt><decl><type><name>class</name></type> <name>ByteCodeEmitter</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>LabelTy</name> <init>= <expr><name>uint32_t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>AddrTy</name> <init>= <expr><name>uintptr_t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>Local</name> <init>= <expr><name>Scope</name><operator>::</operator><name>Local</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Function</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>compileFunc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>ByteCodeEmitter</name><argument_list>(<argument><expr><name>Context</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>, <argument><expr><name>Program</name> <operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>Ctx</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>P</name><argument_list>(<argument>P</argument>)</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><macro><name>ByteCodeEmitter</name><argument_list>()</argument_list></macro> <block>{}</block>


<name>void</name> <macro><name>emitLabel</name><argument_list>(<argument>LabelTy Label</argument>)</argument_list></macro></expr>;</expr_stmt>

<function><type><name>LabelTy</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>++</operator><name>NextLabel</name></expr>;</return> </block_content>}</block></function>


<function_decl><type><name>virtual</name> <name>bool</name></type> <name>visitFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>visitExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>visitDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function><type><name>bool</name></type> <name>bail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>bail</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>bail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>bail</name><argument_list>(<argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function_decl><type><name>bool</name></type> <name>bail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceLocation</name> <modifier>&amp;</modifier></type><name>Loc</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>jumpTrue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LabelTy</name> <modifier>&amp;</modifier></type><name>Label</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>jumpFalse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LabelTy</name> <modifier>&amp;</modifier></type><name>Label</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>jump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LabelTy</name> <modifier>&amp;</modifier></type><name>Label</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>fallthrough</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LabelTy</name> <modifier>&amp;</modifier></type><name>Label</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>Local</name></type> <name>createLocal</name><parameter_list>(<parameter><decl><type><name>Descriptor</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ParmVarDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>Params</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Local</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>Descriptors</name></expr>;</expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>Context</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Program</name> <modifier>&amp;</modifier></type><name>P</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LabelTy</name></type> <name>NextLabel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>NextLocalOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <name>BailLocation</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>LabelTy</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>LabelOffsets</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>LabelTy</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>LabelRelocs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <name>Code</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SourceMap</name></type> <name>SrcMap</name></decl>;</decl_stmt>


<function_decl><type><name>int32_t</name></type> <name>getOffset</name><parameter_list>(<parameter><decl><type><name>LabelTy</name></type> <name>Label</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Tys</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>emitOp</name><parameter_list>(<parameter><decl><type><name>Opcode</name></type> <name>Op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Tys</name> <modifier>&amp;</modifier><modifier>...</modifier></type> <name>Args</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SourceInfo</name> <modifier>&amp;</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LINK_PROTO</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Opcodes.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_LINK_PROTO</name></cpp:undef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
