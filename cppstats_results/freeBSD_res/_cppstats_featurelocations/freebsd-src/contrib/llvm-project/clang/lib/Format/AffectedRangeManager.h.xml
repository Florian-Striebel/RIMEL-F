<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/AffectedRangeManager.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_AFFECTEDRANGEMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_AFFECTEDRANGEMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>

<struct_decl>struct <name>FormatToken</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>AnnotatedLine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AffectedRangeManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>AffectedRangeManager</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <name>Ranges</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SourceMgr</name><argument_list>(<argument><expr><name>SourceMgr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Ranges</name><argument_list>(<argument>Ranges.begin()</argument>, <argument>Ranges.end()</argument>)</argument_list></macro> <expr><block>{}</block>




<name>bool</name> <call><name>computeAffectedLines</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>AnnotatedLine</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>affectsCharSourceRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CharSourceRange</name> <modifier>&amp;</modifier></type><name>Range</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>


<function_decl><type><name>bool</name></type> <name>affectsTokenRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>First</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Last</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IncludeLeadingNewlines</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>affectsLeadingEmptyLines</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>markAllAsAffected</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>AnnotatedLine</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>I</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>AnnotatedLine</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>E</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>bool</name></type> <name>nonPPLineAffected</name><parameter_list>(<parameter><decl><type><name>AnnotatedLine</name> <modifier>*</modifier></type><name>Line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>*</modifier></type><name>PreviousLine</name></decl></parameter>,
<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>AnnotatedLine</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Lines</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>Ranges</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
