<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/xmmintrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__XMMINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__XMMINTRIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmintrin.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>int</name> <name>__v4si</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(16)));</typedef>
<typedef>typedef <type><name>float</name> <name>__v4sf</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(16)));</typedef>
<typedef>typedef <type><name>float</name> <name>__m128</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(16)<operator>,</operator> __aligned__(16)));</typedef>

<typedef>typedef <type><name>float</name> <name>__m128_u</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(16)<operator>,</operator> __aligned__(1)));</typedef>


<typedef>typedef <type><name>unsigned</name> <name>int</name> <name>__v4su</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(16)));</typedef>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_HOSTED__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mm_malloc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("sse"), __min_vector_width__(128)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_MMX</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("mmx,sse"), __min_vector_width__(64)))</cpp:value></cpp:define>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_add_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_add_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name> <operator>+</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_sub_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_sub_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name> <operator>-</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_mul_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_mul_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name> <operator>*</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_div_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/=</operator> <name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_div_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name> <operator>/</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_sqrt_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_sqrtss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_sqrt_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_sqrtps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_rcp_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_rcpss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_rcp_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_rcpps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_rsqrt_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rsqrtss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_rsqrt_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rsqrtps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_min_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_minss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_min_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_minps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_max_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_maxss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_max_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_maxps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_and_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4su</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>__v4su</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_andnot_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>__v4su</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>__v4su</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_or_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4su</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>__v4su</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_xor_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v4su</name><operator>)</operator><name>__a</name> <operator>^</operator> <operator>(</operator><name>__v4su</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpeq_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpeqss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpeq_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpeqps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmplt_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpltss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmplt_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpltps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmple_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpless</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmple_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpleps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpgt_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><call><name>__builtin_ia32_cmpltss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpgt_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpltps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpge_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><call><name>__builtin_ia32_cmpless</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpge_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpleps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpneq_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpneqss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpneq_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpneqps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpnlt_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpnltss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpnlt_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpnltps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpnle_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpnless</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpnle_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpnleps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpngt_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><call><name>__builtin_ia32_cmpnltss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpngt_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpnltps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpnge_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><call><name>__builtin_ia32_cmpnless</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpnge_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpnleps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpord_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpordss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpord_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpordps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpunord_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpunordss</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cmpunord_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_cmpunordps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_comieq_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_comieq</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_comilt_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_comilt</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_comile_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_comile</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_comigt_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_comigt</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_comige_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_comige</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_comineq_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_comineq</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_ucomieq_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ucomieq</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_ucomilt_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ucomilt</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_ucomile_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ucomile</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_ucomigt_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ucomigt</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_ucomige_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ucomige</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_ucomineq_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_ucomineq</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtss_si32</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_cvtss2si</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvt_ss2si</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtss_si32</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtss_si64</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_cvtss2si64</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvtps_pi32</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><call><name>__builtin_ia32_cvtps2pi</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvt_ps2pi</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtps_pi32</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvttss_si32</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_cvttss2si</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtt_ss2si</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvttss_si32</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvttss_si64</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_cvttss2si64</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvttps_pi32</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><call><name>__builtin_ia32_cvttps2pi</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvtt_ps2pi</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvttps_pi32</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtsi32_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>__b</name></expr>;</expr_stmt>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvt_si2ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtsi32_ss</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtsi64_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>__b</name></expr>;</expr_stmt>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvtpi32_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_cvtpi2ps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2si</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvt_pi2ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtpi32_ps</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>float</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_cvtss_f32</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_loadh_pi</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__m64</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <type><name>float</name> <name>__mm_loadh_pi_v2f32</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(8)));</typedef>
<struct>struct <name>__mm_loadh_pi_struct</name> <block>{
<decl_stmt><decl><type><name>__mm_loadh_pi_v2f32</name></type> <name>__u</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<decl_stmt><decl><type><name>__mm_loadh_pi_v2f32</name></type> <name>__b</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__mm_loadh_pi_struct</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__u</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>__bb</name> <init>= <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__bb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_loadl_pi</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__m64</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <type><name>float</name> <name>__mm_loadl_pi_v2f32</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(8)));</typedef>
<struct>struct <name>__mm_loadl_pi_struct</name> <block>{
<decl_stmt><decl><type><name>__mm_loadl_pi_v2f32</name></type> <name>__u</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<decl_stmt><decl><type><name>__mm_loadl_pi_v2f32</name></type> <name>__b</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__mm_loadl_pi_struct</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__u</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>__bb</name> <init>= <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__bb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_load_ss</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__mm_load_ss_struct</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>__u</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<decl_stmt><decl><type><name>float</name></type> <name>__u</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__mm_load_ss_struct</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__u</name></expr></init></decl>;</decl_stmt>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><block>{ <expr><name>__u</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_load1_ps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__mm_load1_ps_struct</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>__u</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<decl_stmt><decl><type><name>float</name></type> <name>__u</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__mm_load1_ps_struct</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__u</name></expr></init></decl>;</decl_stmt>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><block>{ <expr><name>__u</name></expr>, <expr><name>__u</name></expr>, <expr><name>__u</name></expr>, <expr><name>__u</name></expr> }</block></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_load_ps1</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mm_load1_ps(p)</cpp:value></cpp:define>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_load_ps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>__m128</name><operator>*</operator><operator>)</operator><name>__p</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_loadu_ps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__loadu_ps</name> <block>{
<decl_stmt><decl><type><name>__m128_u</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__loadu_ps</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__v</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_loadr_ps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128</name></type> <name>__a</name> <init>= <expr><call><name>_mm_load_ps</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_undefined_ps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_undef128</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_set_ss</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><block>{ <expr><name>__w</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_set1_ps</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><block>{ <expr><name>__w</name></expr>, <expr><name>__w</name></expr>, <expr><name>__w</name></expr>, <expr><name>__w</name></expr> }</block></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_set_ps1</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set1_ps</name><argument_list>(<argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_set_ps</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><block>{ <expr><name>__w</name></expr>, <expr><name>__x</name></expr>, <expr><name>__y</name></expr>, <expr><name>__z</name></expr> }</block></expr>;</return>
</block_content>}</block></function>























<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_setr_ps</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><block>{ <expr><name>__z</name></expr>, <expr><name>__y</name></expr>, <expr><name>__x</name></expr>, <expr><name>__w</name></expr> }</block></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_setzero_ps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_storeh_pi</name><parameter_list>(<parameter><decl><type><name>__m64</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <type><name>float</name> <name>__mm_storeh_pi_v2f32</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(8)));</typedef>
<struct>struct <name>__mm_storeh_pi_struct</name> <block>{
<decl_stmt><decl><type><name>__mm_storeh_pi_v2f32</name></type> <name>__u</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>__mm_storeh_pi_struct</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__u</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_storel_pi</name><parameter_list>(<parameter><decl><type><name>__m64</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <type><name>float</name> <name>__mm_storeh_pi_v2f32</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(8)));</typedef>
<struct>struct <name>__mm_storeh_pi_struct</name> <block>{
<decl_stmt><decl><type><name>__mm_storeh_pi_v2f32</name></type> <name>__u</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>__mm_storeh_pi_struct</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__u</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_store_ss</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__mm_store_ss_struct</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>__u</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>__mm_store_ss_struct</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__u</name> <operator>=</operator> <name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_storeu_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <name>__storeu_ps</name> <block>{
<decl_stmt><decl><type><name>__m128_u</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>__storeu_ps</name><operator>*</operator><operator>)</operator><name>__p</name><operator>)</operator><operator>-&gt;</operator><name>__v</name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_store_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__m128</name><operator>*</operator><operator>)</operator><name>__p</name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_store1_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_store_ps</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_store_ps1</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_mm_store1_ps</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_storer_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_store_ps</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_HINT_ET0</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_HINT_ET1</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_HINT_T0</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_HINT_T1</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_HINT_T2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_HINT_NTA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_prefetch</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>sel</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_prefetch((const void *)(a), ((sel) &gt;&gt; 2) &amp; 1, (sel) &amp; 0x3))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_stream_pi</name><parameter_list>(<parameter><decl><type><name>__m64</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_movntq</name><argument_list>(<argument><expr><name>__p</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_stream_ps</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_nontemporal_store</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>*</operator><operator>)</operator><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function_decl><type><name>void</name></type> <name>_mm_sfence</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_extract_pi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)__builtin_ia32_vec_ext_v4hi((__v4hi)a, (int)n)</cpp:value></cpp:define>






























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_insert_pi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m64)__builtin_ia32_vec_set_v4hi((__v4hi)a, (int)d, (int)n)</cpp:value></cpp:define>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_max_pi16</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><call><name>__builtin_ia32_pmaxsw</name><argument_list>(<argument><expr><operator>(</operator><name>__v4hi</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4hi</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_max_pu8</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><call><name>__builtin_ia32_pmaxub</name><argument_list>(<argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_min_pi16</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><call><name>__builtin_ia32_pminsw</name><argument_list>(<argument><expr><operator>(</operator><name>__v4hi</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4hi</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_min_pu8</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><call><name>__builtin_ia32_pminub</name><argument_list>(<argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_movemask_pi8</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_pmovmskb</name><argument_list>(<argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_mulhi_pu16</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><call><name>__builtin_ia32_pmulhuw</name><argument_list>(<argument><expr><operator>(</operator><name>__v4hi</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4hi</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_shuffle_pi16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m64)__builtin_ia32_pshufw((__v4hi)(__m64)(a), (n))</cpp:value></cpp:define>

























<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_maskmove_si64</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__d</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>__p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_maskmovq</name><argument_list>(<argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__d</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__n</name></expr></argument>, <argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_avg_pu8</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><call><name>__builtin_ia32_pavgb</name><argument_list>(<argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_avg_pu16</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><call><name>__builtin_ia32_pavgw</name><argument_list>(<argument><expr><operator>(</operator><name>__v4hi</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4hi</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_sad_pu8</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><call><name>__builtin_ia32_psadbw</name><argument_list>(<argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8qi</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



















































<function_decl><type><name>unsigned</name> <name>int</name></type> <name>_mm_getcsr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





















































<function_decl><type><name>void</name></type> <name>_mm_setcsr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__i</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_shuffle_ps</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128)__builtin_ia32_shufps((__v4sf)(__m128)(a), (__v4sf)(__m128)(b), (int)(mask))</cpp:value></cpp:define>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_unpackhi_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_unpacklo_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_move_ss</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_movehl_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_movelh_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m128</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvtpi16_ps</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m64</name></type> <name>__b</name></decl>, <decl><type ref="prev"/><name>__c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>__r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_mm_setzero_si64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_mm_cmpgt_pi16</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_mm_unpackhi_pi16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <call><name>_mm_setzero_ps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <call><name>_mm_cvtpi32_ps</name><argument_list>(<argument><expr><name>__r</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <call><name>_mm_movelh_ps</name><argument_list>(<argument><expr><name>__r</name></expr></argument>, <argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_mm_unpacklo_pi16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <call><name>_mm_cvtpi32_ps</name><argument_list>(<argument><expr><name>__r</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvtpu16_ps</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m64</name></type> <name>__b</name></decl>, <decl><type ref="prev"/><name>__c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>__r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_mm_setzero_si64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_mm_unpackhi_pi16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <call><name>_mm_setzero_ps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <call><name>_mm_cvtpi32_ps</name><argument_list>(<argument><expr><name>__r</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <call><name>_mm_movelh_ps</name><argument_list>(<argument><expr><name>__r</name></expr></argument>, <argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_mm_unpacklo_pi16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <call><name>_mm_cvtpi32_ps</name><argument_list>(<argument><expr><name>__r</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvtpi8_ps</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m64</name></type> <name>__b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_mm_setzero_si64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_mm_cmpgt_pi8</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_mm_unpacklo_pi8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_mm_cvtpi16_ps</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvtpu8_ps</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m64</name></type> <name>__b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_mm_setzero_si64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_mm_unpacklo_pi8</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_mm_cvtpi16_ps</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvtpi32x2_ps</name><parameter_list>(<parameter><decl><type><name>__m64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__m64</name></type> <name>__b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128</name></type> <name>__c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_mm_setzero_ps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_mm_cvtpi32_ps</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_mm_movelh_ps</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_mm_cvtpi32_ps</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvtps_pi16</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m64</name></type> <name>__b</name></decl>, <decl><type ref="prev"/><name>__c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_mm_cvtps_pi32</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>_mm_movehl_ps</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_mm_cvtps_pi32</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_mm_packs_pi32</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>__inline__</name> <name>__m64</name> <name>__DEFAULT_FN_ATTRS_MMX</name></type>
<name>_mm_cvtps_pi8</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m64</name></type> <name>__b</name></decl>, <decl><type ref="prev"/><name>__c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_mm_cvtps_pi16</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_mm_setzero_si64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>_mm_packs_pi16</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_mm_movemask_ps</name><parameter_list>(<parameter><decl><type><name>__m128</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_movmskps</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_ALIGN16</name></cpp:macro> <cpp:value>__attribute__((aligned(16)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_SHUFFLE</name><parameter_list>(<parameter><type><name>z</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((z) &lt;&lt; 6) | ((y) &lt;&lt; 4) | ((x) &lt;&lt; 2) | (w))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_EXCEPT_INVALID</name></cpp:macro> <cpp:value>(0x0001U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_EXCEPT_DENORM</name></cpp:macro> <cpp:value>(0x0002U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_EXCEPT_DIV_ZERO</name></cpp:macro> <cpp:value>(0x0004U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_EXCEPT_OVERFLOW</name></cpp:macro> <cpp:value>(0x0008U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_EXCEPT_UNDERFLOW</name></cpp:macro> <cpp:value>(0x0010U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_EXCEPT_INEXACT</name></cpp:macro> <cpp:value>(0x0020U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_EXCEPT_MASK</name></cpp:macro> <cpp:value>(0x003fU)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_MASK_INVALID</name></cpp:macro> <cpp:value>(0x0080U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_MASK_DENORM</name></cpp:macro> <cpp:value>(0x0100U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_MASK_DIV_ZERO</name></cpp:macro> <cpp:value>(0x0200U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_MASK_OVERFLOW</name></cpp:macro> <cpp:value>(0x0400U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_MASK_UNDERFLOW</name></cpp:macro> <cpp:value>(0x0800U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_MASK_INEXACT</name></cpp:macro> <cpp:value>(0x1000U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_MASK_MASK</name></cpp:macro> <cpp:value>(0x1f80U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_ROUND_NEAREST</name></cpp:macro> <cpp:value>(0x0000U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_ROUND_DOWN</name></cpp:macro> <cpp:value>(0x2000U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_ROUND_UP</name></cpp:macro> <cpp:value>(0x4000U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_ROUND_TOWARD_ZERO</name></cpp:macro> <cpp:value>(0x6000U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_ROUND_MASK</name></cpp:macro> <cpp:value>(0x6000U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FLUSH_ZERO_MASK</name></cpp:macro> <cpp:value>(0x8000U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FLUSH_ZERO_ON</name></cpp:macro> <cpp:value>(0x8000U)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_FLUSH_ZERO_OFF</name></cpp:macro> <cpp:value>(0x0000U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_GET_EXCEPTION_MASK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(_mm_getcsr() &amp; _MM_MASK_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_GET_EXCEPTION_STATE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(_mm_getcsr() &amp; _MM_EXCEPT_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_GET_FLUSH_ZERO_MODE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(_mm_getcsr() &amp; _MM_FLUSH_ZERO_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_GET_ROUNDING_MODE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(_mm_getcsr() &amp; _MM_ROUND_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_SET_EXCEPTION_MASK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_mm_setcsr((_mm_getcsr() &amp; ~_MM_MASK_MASK) | (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_SET_EXCEPTION_STATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_mm_setcsr((_mm_getcsr() &amp; ~_MM_EXCEPT_MASK) | (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_SET_FLUSH_ZERO_MODE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_mm_setcsr((_mm_getcsr() &amp; ~_MM_FLUSH_ZERO_MASK) | (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_SET_ROUNDING_MODE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_mm_setcsr((_mm_getcsr() &amp; ~_MM_ROUND_MASK) | (x)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_TRANSPOSE4_PS</name><parameter_list>(<parameter><type><name>row0</name></type></parameter>, <parameter><type><name>row1</name></type></parameter>, <parameter><type><name>row2</name></type></parameter>, <parameter><type><name>row3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __m128 tmp3, tmp2, tmp1, tmp0; tmp0 = _mm_unpacklo_ps((row0), (row1)); tmp2 = _mm_unpacklo_ps((row2), (row3)); tmp1 = _mm_unpackhi_ps((row0), (row1)); tmp3 = _mm_unpackhi_ps((row2), (row3)); (row0) = _mm_movelh_ps(tmp0, tmp2); (row1) = _mm_movehl_ps(tmp2, tmp0); (row2) = _mm_movelh_ps(tmp1, tmp3); (row3) = _mm_movehl_ps(tmp3, tmp1); } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pextrw</name></cpp:macro> <cpp:value>_mm_extract_pi16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pinsrw</name></cpp:macro> <cpp:value>_mm_insert_pi16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pmaxsw</name></cpp:macro> <cpp:value>_mm_max_pi16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pmaxub</name></cpp:macro> <cpp:value>_mm_max_pu8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pminsw</name></cpp:macro> <cpp:value>_mm_min_pi16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pminub</name></cpp:macro> <cpp:value>_mm_min_pu8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pmovmskb</name></cpp:macro> <cpp:value>_mm_movemask_pi8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pmulhuw</name></cpp:macro> <cpp:value>_mm_mulhi_pu16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pshufw</name></cpp:macro> <cpp:value>_mm_shuffle_pi16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_maskmovq</name></cpp:macro> <cpp:value>_mm_maskmove_si64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pavgb</name></cpp:macro> <cpp:value>_mm_avg_pu8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_pavgw</name></cpp:macro> <cpp:value>_mm_avg_pu16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_psadbw</name></cpp:macro> <cpp:value>_mm_sad_pu8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_</name></cpp:macro> <cpp:value>_mm_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_m_</name></cpp:macro> <cpp:value>_mm_</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS_MMX</name></cpp:undef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SSE2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>__building_module</name><argument_list>(<argument><expr><name>_Builtin_intrinsics</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emmintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
