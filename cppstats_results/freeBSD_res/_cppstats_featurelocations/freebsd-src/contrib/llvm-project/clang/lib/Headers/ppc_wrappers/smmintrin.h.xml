<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/ppc_wrappers/smmintrin.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_WARN_X86_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:if>









<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please read comment above. Use -DNO_WARN_X86_INTRINSICS to disable this error."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SMMINTRIN_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMMINTRIN_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;altivec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emmintrin.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_extract_epi8</name><argument_list>(<argument><expr><name>__m128i</name> <name>__X</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__N</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__X</name><operator>)</operator><index>[<expr><name>__N</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_extract_epi32</name><argument_list>(<argument><expr><name>__m128i</name> <name>__X</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__N</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__v4si</name><operator>)</operator><name>__X</name><operator>)</operator><index>[<expr><name>__N</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_extract_epi64</name><argument_list>(<argument><expr><name>__m128i</name> <name>__X</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__N</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__v2di</name><operator>)</operator><name>__X</name><operator>)</operator><index>[<expr><name>__N</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_extract_ps</name><argument_list>(<argument><expr><name>__m128</name> <name>__X</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__N</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__v4si</name><operator>)</operator><name>__X</name><operator>)</operator><index>[<expr><name>__N</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_blend_epi16</name><argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__imm8</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>__charmask</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><name>__imm8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__charmask</name> <operator>=</operator> <call><name>vec_gb</name><argument_list>(<argument><expr><name>__charmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__v8hu</name></type> <name>__shortmask</name> <init>= <expr><operator>(</operator><name>__v8hu</name><operator>)</operator><call><name>vec_unpackh</name><argument_list>(<argument><expr><name>__charmask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BIG_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__shortmask</name> <operator>=</operator> <call><name>vec_reve</name><argument_list>(<argument><expr><name>__shortmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>vec_sel</name><argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><name>__shortmask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_blendv_epi8</name><argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__mask</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__seven</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0x07</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qu</name></type> <name>__lmask</name> <init>= <expr><call><name>vec_sra</name><argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__mask</name></expr></argument>, <argument><expr><name>__seven</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>vec_sel</name><argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><name>__lmask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_insert_epi8</name><argument_list>(<argument><expr><name>__m128i</name> <specifier>const</specifier> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__D</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><name>__N</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name> <operator>=</operator> <name>__D</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_insert_epi32</name><argument_list>(<argument><expr><name>__m128i</name> <specifier>const</specifier> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__D</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__v4si</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><name>__N</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>__D</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_insert_epi64</name><argument_list>(<argument><expr><name>__m128i</name> <specifier>const</specifier> <name>__A</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <specifier>const</specifier> <name>__D</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__v2di</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__v2di</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><name>__N</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>__D</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:empty>#include_next &lt;smmintrin.h&gt;</cpp:empty>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
