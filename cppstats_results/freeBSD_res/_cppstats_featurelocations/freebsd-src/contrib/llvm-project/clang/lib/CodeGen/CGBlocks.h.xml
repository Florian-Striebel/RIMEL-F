<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGBlocks.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGBLOCKS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGBLOCKS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGCall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CodeGenFunction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CodeGenTypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprObjC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Constant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>GlobalValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DataLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PointerType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LLVMContext</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CGBlockInfo</name></decl>;</decl_stmt>


<enum>enum <name>BlockByrefFlags</name> <block>{
<decl><name>BLOCK_BYREF_HAS_COPY_DISPOSE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_BYREF_LAYOUT_MASK</name> <init>= <expr><operator>(</operator><literal type="number">0xF</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_BYREF_LAYOUT_EXTENDED</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_BYREF_LAYOUT_NON_OBJECT</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_BYREF_LAYOUT_STRONG</name> <init>= <expr><operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_BYREF_LAYOUT_WEAK</name> <init>= <expr><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_BYREF_LAYOUT_UNRETAINED</name> <init>= <expr><operator>(</operator><literal type="number">5</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<enum>enum <name>BlockLiteralFlags</name> <block>{
<decl><name>BLOCK_IS_NOESCAPE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_HAS_COPY_DISPOSE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_HAS_CXX_OBJ</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_IS_GLOBAL</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_USE_STRET</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_HAS_SIGNATURE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr></init></decl>,
<decl><name>BLOCK_HAS_EXTENDED_LAYOUT</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>
<decl_stmt><decl><type><name>class</name></type> <name>BlockFlags</name> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>BlockFlags</name><argument_list>(<argument>uint32_t flags</argument>)</argument_list></macro> : <macro><name>flags</name><argument_list>(<argument>flags</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><call><name>BlockFlags</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>flags</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<macro><name>BlockFlags</name><argument_list>(<argument>BlockLiteralFlags flag</argument>)</argument_list></macro> <operator>:</operator> <macro><name>flags</name><argument_list>(<argument>flag</argument>)</argument_list></macro> <block>{}</block>
<macro><name>BlockFlags</name><argument_list>(<argument>BlockByrefFlags flag</argument>)</argument_list></macro> <operator>:</operator> <macro><name>flags</name><argument_list>(<argument>flag</argument>)</argument_list></macro> <block>{}</block>

<name>uint32_t</name> <macro><name>getBitMask</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flags</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>BlockFlags</name> <name>operator</name><operator>|</operator><operator>(</operator><name>BlockFlags</name> <name>l</name><operator>,</operator> <name>BlockFlags</name> <name>r</name><operator>)</operator> <block>{
<return>return <expr><call><name>BlockFlags</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>flags</name></name> <operator>|</operator> <name><name>r</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>BlockFlags</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><name>BlockFlags</name> <operator>&amp;</operator><name>l</name><operator>,</operator> <name>BlockFlags</name> <name>r</name><operator>)</operator> <block>{
<expr><name><name>l</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name><name>r</name><operator>.</operator><name>flags</name></name></expr>;
<return>return <expr><name>l</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>friend</name> <name>bool</name> <name>operator</name></type>&amp;(<name>BlockFlags</name> <name>l</name>, <name>BlockFlags</name> r</function>)</block_content> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>l</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>r</name><operator>.</operator><name>flags</name></name><operator>)</operator></expr>;</return>
</block_content>}</block>
bool operator==(BlockFlags r</block></decl>) <block>{<block_content>
<return>return <expr><operator>(</operator><name>flags</name> <operator>==</operator> <name><name>r</name><operator>.</operator><name>flags</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>BlockFlags</name> <name>operator</name><operator>|</operator><operator>(</operator><name>BlockLiteralFlags</name> <name>l</name><operator>,</operator> <name>BlockLiteralFlags</name> <name>r</name><operator>)</operator> <block>{
<return>return <expr><call><name>BlockFlags</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>BlockFlags</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<enum>enum <name>BlockFieldFlag_t</name> <block>{
<decl><name>BLOCK_FIELD_IS_OBJECT</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>BLOCK_FIELD_IS_BLOCK</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,

<decl><name>BLOCK_FIELD_IS_BYREF</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,

<decl><name>BLOCK_FIELD_IS_WEAK</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,

<decl><name>BLOCK_FIELD_IS_ARC</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,
<decl><name>BLOCK_BYREF_CALLER</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,

<decl><name>BLOCK_BYREF_CURRENT_MAX</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>BlockFieldFlags</name> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

<macro><name>BlockFieldFlags</name><argument_list>(<argument>uint32_t flags</argument>)</argument_list></macro> : <macro><name>flags</name><argument_list>(<argument>flags</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>BlockFieldFlags</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>flags</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>
<macro><name>BlockFieldFlags</name><argument_list>(<argument>BlockFieldFlag_t flag</argument>)</argument_list></macro> <operator>:</operator> <macro><name>flags</name><argument_list>(<argument>flag</argument>)</argument_list></macro> <block>{}</block>

<name>uint32_t</name> <macro><name>getBitMask</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flags</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isSpecialPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flags</name> <operator>&amp;</operator> <name>BLOCK_FIELD_IS_OBJECT</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>BlockFieldFlags</name> <name>operator</name><operator>|</operator><operator>(</operator><name>BlockFieldFlags</name> <name>l</name><operator>,</operator> <name>BlockFieldFlags</name> <name>r</name><operator>)</operator> <block>{
<return>return <expr><call><name>BlockFieldFlags</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>flags</name></name> <operator>|</operator> <name><name>r</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>BlockFieldFlags</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><name>BlockFieldFlags</name> <operator>&amp;</operator><name>l</name><operator>,</operator> <name>BlockFieldFlags</name> <name>r</name><operator>)</operator> <block>{
<expr><name><name>l</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name><name>r</name><operator>.</operator><name>flags</name></name></expr>;
<return>return <expr><name>l</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>friend</name> <name>bool</name> <name>operator</name></type>&amp;(<name>BlockFieldFlags</name> <name>l</name>, <name>BlockFieldFlags</name> r</function>)</block_content> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>l</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>r</name><operator>.</operator><name>flags</name></name><operator>)</operator></expr>;</return>
</block_content>}</block>
bool operator==(BlockFieldFlags Other</block></decl>) const <block>{<block_content>
<return>return <expr><name>flags</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>flags</name></name></expr>;</return>
</block_content>}</block></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>BlockFieldFlags</name> <name>operator</name><operator>|</operator><operator>(</operator><name>BlockFieldFlag_t</name> <name>l</name><operator>,</operator> <name>BlockFieldFlag_t</name> <name>r</name><operator>)</operator> <block>{
<return>return <expr><call><name>BlockFieldFlags</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>BlockFieldFlags</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>BlockByrefInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>Type</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>FieldIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharUnits</name></type> <name>ByrefAlignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharUnits</name></type> <name>FieldOffset</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CGBlockInfo</name> <block>{<block_content>
<label><name>public</name>:</label>

<decl_stmt><decl><type><name>StringRef</name></type> <name>Name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>CXXThisIndex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Capture</name> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>Data</name></decl>;</decl_stmt>
<expr_stmt><expr><name>EHScopeStack</name><operator>::</operator><name>stable_iterator</name> <name>Cleanup</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CharUnits</name><operator>::</operator><name>QuantityType</name> <name>Offset</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>QualType</name></type> <name>FieldType</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>isIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>Data</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isConstant</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>isIndex</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Data</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <macro><name>getOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>EHScopeStack</name><operator>::</operator><name>stable_iterator</name> <macro><name>getCleanup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Cleanup</name></expr>;</return>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setCleanup</name><argument_list>(<argument><expr><name>EHScopeStack</name><operator>::</operator><name>stable_iterator</name> <name>cleanup</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Cleanup</name> <operator>=</operator> <name>cleanup</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getConstant</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isConstant</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>QualType</name> <macro><name>fieldType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>FieldType</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>Capture</name></type> <name>makeIndex</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>CharUnits</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>FieldType</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Capture</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <operator>(</operator><name>index</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <call><name><name>offset</name><operator>.</operator><name>getQuantity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>FieldType</name></name> <operator>=</operator> <name>FieldType</name></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Capture</name></type> <name>makeConstant</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>value</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>Capture</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>CanBeGlobal</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>NeedsCopyDispose</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>HasCXXObject</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>mutable</name> <name>bool</name></type> <name>UsesStret</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>HasCapturedVariableLayout</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>CapturesNonExternalType</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VarDecl</name><operator>*</operator></expr></argument>, <argument><expr><name>Capture</name></expr></argument>&gt;</argument_list></name> <name>Captures</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Address</name></type> <name>LocalAddress</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>StructureType</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BlockDecl</name> <modifier>*</modifier></type><name>Block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BlockExpr</name> <modifier>*</modifier></type><name>BlockExpression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharUnits</name></type> <name>BlockSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharUnits</name></type> <name>BlockAlign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharUnits</name></type> <name>CXXThisOffset</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>CharUnits</name></type> <name>BlockHeaderForcedGapOffset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>BlockHeaderForcedGapSize</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>CGBlockInfo</name> <modifier>*</modifier></type><name>NextBlockInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Capture</name> <modifier>&amp;</modifier></type><name>getCapture</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>var</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>CGBlockInfo</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getCapture</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><name>Capture</name> <modifier>&amp;</modifier></type><name>getCapture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VarDecl</name><operator>*</operator></expr></argument>, <argument><expr><name>Capture</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name>
<name>it</name> <operator>=</operator> <call><name><name>Captures</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>it</name> <operator>!=</operator> <call><name><name>Captures</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"no entry for variable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>BlockDecl</name> <operator>*</operator><macro><name>getBlockDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Block</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>BlockExpr</name> <operator>*</operator><macro><name>getBlockExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>BlockExpression</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>BlockExpression</name><operator>-&gt;</operator><name>getBlockDecl</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Block</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>BlockExpression</name></expr>;</return>
}</block></expr></expr_stmt>

<macro><name>CGBlockInfo</name><argument_list>(<argument>const BlockDecl *blockDecl</argument>, <argument>StringRef Name</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>needsCopyDisposeHelpers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NeedsCopyDispose</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Block</name><operator>-&gt;</operator><name>doesNotEscape</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
