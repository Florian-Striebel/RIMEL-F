<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/MacroPPCallbacks.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_MACROPPCALLBACKS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_MACROPPCALLBACKS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/PPCallbacks.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DIMacroFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DIMacroNode</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MacroInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenerator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MacroPPCallbacks</name> <range>: <expr><name>public</name> <name>PPCallbacks</name> <block>{

<expr><name>CodeGenerator</name> <operator>*</operator><name>Gen</name></expr>;


<expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr>;


<expr><name>SourceLocation</name> <name>LastHashLoc</name></expr>;



<expr><name>int</name> <name>EnteredCommandLineIncludeFiles</name> <operator>=</operator> <literal type="number">0</literal></expr>;

enum <expr><name>FileScopeStatus</name> <block>{
<expr><name>NoScope</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>InitializedScope</name></expr>,
<expr><name>BuiltinScope</name></expr>,
<expr><name>CommandLineIncludeScope</name></expr>,
<expr><name>MainFileScope</name></expr>
}</block></expr>;
<expr><name>FileScopeStatus</name> <name>Status</name></expr>;



<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>DIMacroFile</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Scopes</name></expr>;



<expr><name>llvm</name><operator>::</operator><name>DIMacroFile</name> <operator>*</operator><call><name>getCurrentScope</name><argument_list>()</argument_list></call></expr>;





<expr><name>SourceLocation</name> <macro><name>getCorrectLocation</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro></expr>;










<expr><specifier>static</specifier> <name>void</name> <call><name>writeMacroDefinition</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>&amp;</operator><name>II</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>MacroInfo</name> <operator>&amp;</operator><name>MI</name></expr></argument>, <argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Name</name></expr></argument>, <argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list></call></expr>;


<expr><name>void</name> <call><name>updateStatusToNextScope</name><argument_list>()</argument_list></call></expr>;




<expr><name>void</name> <macro><name>FileEntered</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro></expr>;




<expr><name>void</name> <macro><name>FileExited</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>MacroPPCallbacks</name><argument_list>(<argument><expr><name>CodeGenerator</name> <operator>*</operator><name>Gen</name></expr></argument>, <argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>)</argument_list></call></expr>;





<expr><name>void</name> <macro><name>FileChanged</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>FileChangeReason Reason</argument>,
<argument>SrcMgr::CharacteristicKind FileType</argument>,
<argument>FileID PrevFID = FileID()</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>void</name> <macro><name>InclusionDirective</name><argument_list>(<argument>SourceLocation HashLoc</argument>, <argument>const Token &amp;IncludeTok</argument>,
<argument>StringRef FileName</argument>, <argument>bool IsAngled</argument>,
<argument>CharSourceRange FilenameRange</argument>, <argument>const FileEntry *File</argument>,
<argument>StringRef SearchPath</argument>, <argument>StringRef RelativePath</argument>,
<argument>const Module *Imported</argument>,
<argument>SrcMgr::CharacteristicKind FileType</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>void</name> <macro><name>MacroDefined</name><argument_list>(<argument>const Token &amp;MacroNameTok</argument>,
<argument>const MacroDirective *MD</argument>)</argument_list></macro> <name>override</name></expr>;




<expr><name>void</name> <macro><name>MacroUndefined</name><argument_list>(<argument>const Token &amp;MacroNameTok</argument>, <argument>const MacroDefinition &amp;MD</argument>,
<argument>const MacroDirective *Undef</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
