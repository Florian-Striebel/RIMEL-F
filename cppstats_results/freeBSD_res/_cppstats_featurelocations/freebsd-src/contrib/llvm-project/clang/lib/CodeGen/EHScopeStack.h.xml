<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/EHScopeStack.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_EHSCOPESTACK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_EHSCOPESTACK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/BasicBlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Instructions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Value.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CodeGenFunction</name></decl>;</decl_stmt>







<struct>struct <name>BranchFixup</name> <block>{



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>OptimisticBranchBlock</name></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>Destination</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>DestinationIndex</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BranchInst</name> <operator>*</operator><name>InitialBranch</name></expr>;</expr_stmt>
}</block>;</struct>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name><operator>&gt;</operator> struct <name>InvariantValue</name> <block>{
<typedef>typedef <type><name>T</name></type> <name>type</name>;</typedef></block></expr></expr_stmt>
<typedef>typedef <type><name>T</name></type> <name>saved_type</name>;</typedef>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>needsSaving</name><parameter_list>(<parameter><decl><type><name>type</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>saved_type</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>, <parameter><decl><type><name>type</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>value</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>type</name></type> <name>restore</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>, <parameter><decl><type><name>saved_type</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>value</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> struct</type> <name>DominatingValue</name> <range>: <expr><name><name>InvariantValue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name></expr><operator>,</operator> <expr><name>bool</name> <name>mightBeInstruction</name> <operator>=</operator>
<name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name><operator>&gt;</operator>
struct <name>DominatingPointer</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> struct</type> <name><name>DominatingPointer</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name><name>InvariantValue</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> struct</type> <name><name>DominatingValue</name><argument_list type="generic">&lt;<argument><expr><name>T</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name> <range>: <expr><name><name>DominatingPointer</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<enum>enum <name>CleanupKind</name> : <type><name>unsigned</name></type> <block>{


<decl><name>EHCleanup</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,



<decl><name>NormalCleanup</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,

<decl><name>NormalAndEHCleanup</name> <init>= <expr><name>EHCleanup</name> <operator>|</operator> <name>NormalCleanup</name></expr></init></decl>,

<decl><name>LifetimeMarker</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,
<decl><name>NormalEHLifetimeMarker</name> <init>= <expr><name>LifetimeMarker</name> <operator>|</operator> <name>NormalAndEHCleanup</name></expr></init></decl>,
}</block>;</enum>



<decl_stmt><decl><type><name>class</name></type> <name>EHScopeStack</name> <block>{<block_content>
<label><name>public</name>:</label>

<enum>enum <block>{ <decl><name>ScopeStackAlignment</name> <init>= <expr><literal type="number">8</literal></expr></init></decl> }</block>;</enum>



<decl_stmt><decl><type><name>class</name></type> <name>stable_iterator</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>EHScopeStack</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>Size</name></decl>;</decl_stmt>

<macro><name>stable_iterator</name><argument_list>(<argument>ptrdiff_t Size</argument>)</argument_list></macro> : <macro><name>Size</name><argument_list>(<argument>Size</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>stable_iterator</name></type> <name>invalid</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>stable_iterator</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><call><name>stable_iterator</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Size</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>encloses</name><argument_list>(<argument><expr><name>stable_iterator</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>Size</name> <operator>&lt;=</operator> <name><name>I</name><operator>.</operator><name>Size</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>strictlyEncloses</name><argument_list>(<argument><expr><name>stable_iterator</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>Size</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>Size</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>stable_iterator</name> <name>A</name><operator>,</operator> <name>stable_iterator</name> <name>B</name><operator>)</operator> <block>{
<return>return <expr><name><name>A</name><operator>.</operator><name>Size</name></name> <operator>==</operator> <name><name>B</name><operator>.</operator><name>Size</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>stable_iterator</name> <name>A</name><operator>,</operator> <name>stable_iterator</name> <name>B</name><operator>)</operator> <block>{
<return>return <expr><name><name>A</name><operator>.</operator><name>Size</name></name> <operator>!=</operator> <name><name>B</name><operator>.</operator><name>Size</name></name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>Cleanup</name> <block>{<block_content>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<expr_stmt><expr><operator>~</operator><call><name>Cleanup</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Cleanup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Cleanup</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>Cleanup</name><argument_list>(<argument>Cleanup &amp;&amp;</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><call><name>Cleanup</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><name>virtual</name> <name>bool</name></type> <name>isRedundantBeforeReturn</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>


<decl_stmt><decl><type><name>class</name></type> <name>Flags</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>F_IsForEH</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>F_IsNormalCleanupKind</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>F_IsEHCleanupKind</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>F_HasExitSwitch</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,
}</block>;</enum>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Flags</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>flags</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>


<name>bool</name> <macro><name>isForEHCleanup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flags</name> <operator>&amp;</operator> <name>F_IsForEH</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isForNormalCleanup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>isForEHCleanup</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setIsForEHCleanup</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_IsForEH</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isNormalCleanupKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flags</name> <operator>&amp;</operator> <name>F_IsNormalCleanupKind</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setIsNormalCleanupKind</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_IsNormalCleanupKind</name></expr>;</expr_stmt> </block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>isEHCleanupKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flags</name> <operator>&amp;</operator> <name>F_IsEHCleanupKind</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setIsEHCleanupKind</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_IsEHCleanupKind</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>hasExitSwitch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flags</name> <operator>&amp;</operator> <name>F_HasExitSwitch</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setHasExitSwitch</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_HasExitSwitch</name></expr>;</expr_stmt> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<function_decl><type><name>virtual</name> <name>void</name></type> <name>Emit</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>, <parameter><decl><type><name>Flags</name></type> <name>flags</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>As</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>ConditionalCleanup</name></type> <name>final</name> <range>: <expr><name>public</name> <name>Cleanup</name> <block>{
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name><name>DominatingValue</name><argument_list type="generic">&lt;<argument><expr><name>As</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>saved_type</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <name>SavedTuple</name></expr>;</expr_stmt></typedef>
<name>SavedTuple</name> <name>Saved</name></block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>size_t</name><modifier>...</modifier> <name>Is</name></expr></argument>&gt;</argument_list></name>
<name>T</name></type> <name>restore</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>index_sequence</name><argument_list type="generic">&lt;<argument><expr><name>Is</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> <block>{<block_content>


<return>return <expr><name>T</name><block>{<expr><name><name>DominatingValue</name><argument_list type="generic">&lt;<argument><expr><name>As</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>restore</name><argument_list>(<argument><expr><name>CGF</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>Is</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Saved</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>...</operator></expr>}</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>Emit</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>, <parameter><decl><type><name>Flags</name></type> <name>flags</name></decl></parameter>)</parameter_list> override <block>{<block_content>
<expr_stmt><expr><call><name>restore</name><argument_list>(<argument><expr><name>CGF</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>index_sequence_for</name><argument_list type="generic">&lt;<argument><expr><name>As</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Emit</name><argument_list>(<argument><expr><name>CGF</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<macro><name>ConditionalCleanup</name><argument_list>(<argument>typename DominatingValue&lt;As&gt;::saved_type... A</argument>)</argument_list></macro>
: <macro><name>Saved</name><argument_list>(<argument>A...</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<macro><name>ConditionalCleanup</name><argument_list>(<argument>SavedTuple Tuple</argument>)</argument_list></macro> : <macro><name>Saved</name><argument_list>(<argument>std::move(Tuple)</argument>)</argument_list></macro> <block>{<block_content/>}</block>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>







<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>StartOfBuffer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>EndOfBuffer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>StartOfData</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>stable_iterator</name></type> <name>InnermostNormalCleanup</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>stable_iterator</name></type> <name>InnermostEHScope</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CodeGenFunction</name><modifier>*</modifier></type> <name>CGF</name></decl>;</decl_stmt>


















<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BranchFixup</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>BranchFixups</name></decl>;</decl_stmt>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>allocate</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>deallocate</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>pushCleanup</name><parameter_list>(<parameter><decl><type><name>CleanupKind</name></type> <name>K</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>DataSize</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>EHScopeStack</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>StartOfBuffer</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>EndOfBuffer</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>StartOfData</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>InnermostNormalCleanup</name><argument_list>(<argument><expr><call><name>stable_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>InnermostEHScope</name><argument_list>(<argument><expr><call><name>stable_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>CGF</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block>
<operator>~</operator><macro><name>EHScopeStack</name><argument_list>()</argument_list></macro> <block>{ <expr><name><name>delete</name><index>[]</index></name> <name>StartOfBuffer</name></expr>; }</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>As</name></expr></argument>&gt;</argument_list></name> <name>void</name> <macro><name>pushCleanup</name><argument_list>(<argument>CleanupKind Kind</argument>, <argument>As... A</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ScopeStackAlignment</name></expr></argument>,
<argument><expr><literal type="string">"Cleanup's alignment is too large."</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <operator>*</operator><name>Buffer</name> <operator>=</operator> <call><name>pushCleanup</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
<expr><name>Cleanup</name> <operator>*</operator><name>Obj</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>Buffer</argument>)</argument_list></macro> <call><name>T</name><argument_list>(<argument><expr><name>A</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;
<expr><operator>(</operator><name>void</name><operator>)</operator> <name>Obj</name></expr>;
}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>As</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <macro><name>pushCleanupTuple</name><argument_list>(<argument>CleanupKind Kind</argument>, <argument>std::tuple&lt;As...&gt; A</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ScopeStackAlignment</name></expr></argument>,
<argument><expr><literal type="string">"Cleanup's alignment is too large."</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <operator>*</operator><name>Buffer</name> <operator>=</operator> <call><name>pushCleanup</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
<expr><name>Cleanup</name> <operator>*</operator><name>Obj</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>Buffer</argument>)</argument_list></macro> <call><name>T</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>(</operator><name>void</name><operator>)</operator> <name>Obj</name></expr>;
}</block>














<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>As</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <operator>*</operator><macro><name>pushCleanupWithExtra</name><argument_list>(<argument>CleanupKind Kind</argument>, <argument>size_t N</argument>, <argument>As... A</argument>)</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ScopeStackAlignment</name></expr></argument>,
<argument><expr><literal type="string">"Cleanup's alignment is too large."</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <operator>*</operator><name>Buffer</name> <operator>=</operator> <call><name>pushCleanup</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>T</name><operator>::</operator><call><name>getExtraSize</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <macro><name>new</name> <argument_list>(<argument>Buffer</argument>)</argument_list></macro> <expr><call><name>T</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>A</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>pushCopyOfCleanup</name><parameter_list>(<parameter><decl><type><name>CleanupKind</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Cleanup</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Buffer</name> <init>= <expr><call><name>pushCleanup</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>memcpy</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr><name>Cleanup</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setCGF</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>*</modifier></type><name>inCGF</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>CGF</name> <operator>=</operator> <name>inCGF</name></expr>;</expr_stmt> </block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>popCleanup</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>class</name> <name>EHCatchScope</name> <modifier>*</modifier></type><name>pushCatch</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>NumHandlers</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>popCatch</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>class</name> <name>EHFilterScope</name> <modifier>*</modifier></type><name>pushFilter</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>NumFilters</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>popFilter</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>pushTerminate</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>popTerminate</name><parameter_list>()</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>bool</name></type> <name>containsOnlyLifetimeMarkers</name><argument_list>(<argument><expr><name>stable_iterator</name> <name>Old</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>StartOfData</name> <operator>==</operator> <name>EndOfBuffer</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>requiresLandingPad</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasNormalCleanups</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>InnermostNormalCleanup</name> <operator>!=</operator> <call><name>stable_end</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>stable_iterator</name> <macro><name>getInnermostNormalCleanup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>InnermostNormalCleanup</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>stable_iterator</name> <macro><name>getInnermostActiveNormalCleanup</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>stable_iterator</name> <macro><name>getInnermostEHScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>InnermostEHScope</name></expr>;</return>
}</block></expr></expr_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>iterator</name></decl>;</decl_stmt>


<expr_stmt><expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>stable_iterator</name> <macro><name>stable_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>stable_iterator</name><argument_list>(<argument><expr><name>EndOfBuffer</name> <operator>-</operator> <name>StartOfData</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function><type><specifier>static</specifier> <name>stable_iterator</name></type> <name>stable_end</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>stable_iterator</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>stable_iterator</name></type> <name>stabilize</name><argument_list>(<argument><expr><name>iterator</name> <name>it</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>iterator</name></type> <name>find</name><argument_list>(<argument><expr><name>stable_iterator</name> <name>save</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function><type><name>BranchFixup</name> <modifier>&amp;</modifier></type><name>addBranchFixup</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasNormalCleanups</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"adding fixup in scope without cleanups"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>BranchFixups</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>BranchFixup</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>BranchFixups</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumBranchFixups</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>BranchFixups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>BranchFixup</name> <modifier>&amp;</modifier></type><name>getBranchFixup</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&lt;</operator> <call><name>getNumBranchFixups</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>BranchFixups</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function_decl><type><name>void</name></type> <name>popNullFixups</name><parameter_list>()</parameter_list>;</function_decl>



<function><type><name>void</name></type> <name>clearFixups</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>BranchFixups</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
