<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CodeGenTypes.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CODEGENTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CODEGENTYPES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGCall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/ABI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/CodeGen/CGFunctionInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Module.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DataLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LLVMContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StructType</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>CanQual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXConstructorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXDestructorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FieldDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionProtoType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCInterfaceDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCIvarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PointerType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TagDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TargetInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
<typedef>typedef <type><name><name>CanQual</name><argument_list type="generic">&lt;<argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name></type> <name>CanQualType</name>;</typedef>
<decl_stmt><decl><type><name>class</name></type> <name>GlobalDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ABIInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CGCXXABI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CGRecordLayout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RequiredArgs</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CodeGenTypes</name> <block>{<block_content>
<decl_stmt><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Module</name> <operator>&amp;</operator><name>TheModule</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TargetInfo</name> <modifier>&amp;</modifier></type><name>Target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGCXXABI</name> <modifier>&amp;</modifier></type><name>TheCXXABI</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>ABIInfo</name> <modifier>&amp;</modifier></type><name>TheABIInfo</name></decl>;</decl_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ObjCInterfaceType</name><operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>InterfaceTypes</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Type</name><operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CGRecordLayout</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>CGRecordLayouts</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Type</name><operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>RecordDeclTypes</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>FoldingSet</name><argument_list type="generic">&lt;<argument><expr><name>CGFunctionInfo</name></expr></argument>&gt;</argument_list></name> <name>FunctionInfos</name></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Type</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>RecordsBeingLaidOut</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CGFunctionInfo</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>FunctionsBeingProcessed</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>SkippedLayout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>DeferredRecords</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>TypeCache</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>RecordsWithOpaqueMemberPointers</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>ConvertFunctionTypeInternal</name><argument_list>(<argument>QualType FT</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CodeGenTypes</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>cgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>CodeGenTypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DataLayout</name> <operator>&amp;</operator><macro><name>getDataLayout</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>TheModule</name><operator>.</operator><name>getDataLayout</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Context</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>ABIInfo</name> <operator>&amp;</operator><macro><name>getABIInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TheABIInfo</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><macro><name>getTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Target</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>CGCXXABI</name> <operator>&amp;</operator><macro><name>getCXXABI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TheCXXABI</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>&amp;</operator><macro><name>getLLVMContext</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>TheModule</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>CodeGenOptions</name> <operator>&amp;</operator><macro><name>getCodeGenOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><name>unsigned</name></type> <name>ClangCallConvToLLVMCallConv</name><parameter_list>(<parameter><decl><type><name>CallingConv</name></type> <name>CC</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>CanQualType</name></type> <name>DeriveThisType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>ConvertType</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>ConvertTypeForMem</name><argument_list>(<argument>QualType T</argument>, <argument>bool ForBitField = false</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>FunctionType</name> <operator>*</operator><call><name>GetFunctionType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CGFunctionInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>FunctionType</name> <operator>*</operator><macro><name>GetFunctionType</name><argument_list>(<argument>GlobalDecl GD</argument>)</argument_list></macro></expr>;</expr_stmt>




<function_decl><type><name>bool</name></type> <name>isFuncTypeConvertible</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionType</name> <modifier>*</modifier></type><name>FT</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isFuncParamTypeConvertible</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>Ty</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>inheritingCtorHasParams</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InheritedConstructor</name> <modifier>&amp;</modifier></type><name>Inherited</name></decl></parameter>,
<parameter><decl><type><name>CXXCtorType</name></type> <name>Type</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>GetFunctionTypeForVTable</name><argument_list>(<argument>GlobalDecl GD</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><specifier>const</specifier> <name>CGRecordLayout</name> <modifier>&amp;</modifier></type><name>getCGRecordLayout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RecordDecl</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>UpdateCompletedType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TagDecl</name> <modifier>*</modifier></type><name>TD</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>RefreshTypeCacheForClass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeGlobalDeclaration</name><parameter_list>(<parameter><decl><type><name>GlobalDecl</name></type> <name>GD</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>declFI</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallArgList</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeFunctionDeclaration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeFreeFunctionCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallArgList</name> <modifier>&amp;</modifier></type><name>Args</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionType</name> <modifier>*</modifier></type><name>Ty</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ChainCall</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeFreeFunctionType</name><parameter_list>(<parameter><decl><type><name><name>CanQual</name><argument_list type="generic">&lt;<argument><expr><name>FunctionProtoType</name></expr></argument>&gt;</argument_list></name></type> <name>Ty</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeFreeFunctionType</name><parameter_list>(<parameter><decl><type><name><name>CanQual</name><argument_list type="generic">&lt;<argument><expr><name>FunctionNoProtoType</name></expr></argument>&gt;</argument_list></name></type> <name>Ty</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeNullaryFunction</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type>
<name>arrangeBuiltinFunctionDeclaration</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>resultType</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionArgList</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type>
<name>arrangeBuiltinFunctionDeclaration</name><parameter_list>(<parameter><decl><type><name>CanQualType</name></type> <name>resultType</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CanQualType</name></expr></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeBuiltinFunctionCall</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>resultType</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallArgList</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeObjCMethodDeclaration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeObjCMessageSendSignature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>receiverType</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeUnprototypedObjCMessageSend</name><parameter_list>(
<parameter><decl><type><name>QualType</name></type> <name>returnType</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallArgList</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeBlockFunctionDeclaration</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>FunctionProtoType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionArgList</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeBlockFunctionCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallArgList</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeCXXMethodDeclaration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeCXXStructorDeclaration</name><parameter_list>(<parameter><decl><type><name>GlobalDecl</name></type> <name>GD</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeCXXConstructorCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallArgList</name> <modifier>&amp;</modifier></type><name>Args</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXConstructorDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name>CXXCtorType</name></type> <name>CtorKind</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ExtraPrefixArgs</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ExtraSuffixArgs</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>PassProtoArgs</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeCXXMethodCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallArgList</name> <modifier>&amp;</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionProtoType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>RequiredArgs</name></type> <name>required</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>numPrefixArgs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type>
<name>arrangeUnprototypedMustTailThunk</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeMSCtorClosure</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXConstructorDecl</name> <modifier>*</modifier></type><name>CD</name></decl></parameter>,
<parameter><decl><type><name>CXXCtorType</name></type> <name>CT</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeCXXMethodType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionProtoType</name> <modifier>*</modifier></type><name>FTP</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>)</parameter_list>;</function_decl>







<decl_stmt><decl><type><specifier>const</specifier> <name>CGFunctionInfo</name> <modifier>&amp;</modifier></type><name>arrangeLLVMFunctionInfo</name><argument_list>(<argument><expr><name>CanQualType</name> <name>returnType</name></expr></argument>,
<argument><expr><name>bool</name> <name>instanceMethod</name></expr></argument>,
<argument><expr><name>bool</name> <name>chainCall</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CanQualType</name></expr></argument>&gt;</argument_list></name> <name>argTypes</name></expr></argument>,
<argument><expr><name>FunctionType</name><operator>::</operator><name>ExtInfo</name> <name>info</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FunctionProtoType</name><operator>::</operator><name>ExtParameterInfo</name></expr></argument>&gt;</argument_list></name> <name>paramInfos</name></expr></argument>,
<argument><expr><name>RequiredArgs</name> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CGRecordLayout</name></expr></argument>&gt;</argument_list></name> <call><name>ComputeRecordLayout</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>Ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>addRecordTypeName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>Ty</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>suffix</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<label><name>public</name>:</label>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><call><name>ConvertRecordDeclType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator><name>TD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>getExpandedTypes</name><argument_list>(<argument><expr><name>QualType</name> <name>Ty</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <operator>&amp;</operator><name>TI</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>bool</name></type> <name>isZeroInitializable</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>isPointerZeroInitializable</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>isZeroInitializable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>isRecordLayoutComplete</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><name>Ty</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>noRecordsBeingLaidOut</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>RecordsBeingLaidOut</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isRecordBeingLaidOut</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><name>Ty</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>RecordsBeingLaidOut</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>Ty</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
