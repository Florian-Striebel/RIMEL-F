<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/SystemZ.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_SYSTEMZ_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_SYSTEMZ_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>SystemZTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{

<expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>GCCRegNames</name><index>[]</index></name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>CPU</name></expr>;
<expr><name>int</name> <name>ISARevision</name></expr>;
<expr><name>bool</name> <name>HasTransactionalExecution</name></expr>;
<expr><name>bool</name> <name>HasVector</name></expr>;
<expr><name>bool</name> <name>SoftFloat</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>SystemZTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>TargetInfo</name><argument_list>(<argument><expr><name>Triple</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>CPU</name><argument_list>(<argument><expr><literal type="string">"z10"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>ISARevision</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HasTransactionalExecution</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>HasVector</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <macro><name>SoftFloat</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><name>IntMaxType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>Int64Type</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>TLSSupported</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>IntWidth</name> <operator>=</operator> <name>IntAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>LongWidth</name> <operator>=</operator> <name>LongLongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <name>LongLongAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEquad</name><argument_list>()</argument_list></call></expr>;
<expr><name>DefaultAlignForAttributeAligned</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>MinGlobalAlign</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>HasStrictFP</name> <operator>=</operator> <name>true</name></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>None</name></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>AddlRegName</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCAddlRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isSPRegName</name><argument_list>(<argument>StringRef RegName</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>RegName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"r15"</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><literal type="string">""</literal></expr>;</return>
}</block>

<name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>SystemZBuiltinVaList</name></expr>;</return>
}</block>

<name>int</name> <macro><name>getISARevision</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>isValidCPUName</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>getISARevision</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block>

<name>void</name> <macro><name>fillValidCPUList</name><argument_list>(<argument>SmallVectorImpl&lt;StringRef&gt; &amp;Values</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>setCPU</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><name>CPU</name> <operator>=</operator> <name>Name</name></expr>;
<expr><name>ISARevision</name> <operator>=</operator> <call><name>getISARevision</name><argument_list>(<argument><expr><name>CPU</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>ISARevision</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block>

<name>bool</name>
<macro><name>initFeatureMap</name><argument_list>(<argument>llvm::StringMap&lt;bool&gt; &amp;Features</argument>, <argument>DiagnosticsEngine &amp;Diags</argument>,
<argument>StringRef CPU</argument>,
<argument>const std::vector&lt;std::string&gt; &amp;FeaturesVec</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>int</name> <name>ISARevision</name> <operator>=</operator> <call><name>getISARevision</name><argument_list>(<argument><expr><name>CPU</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>ISARevision</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Features</name><index>[<expr><literal type="string">"transactional-execution"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>ISARevision</name> <operator>&gt;=</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Features</name><index>[<expr><literal type="string">"vector"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ISARevision</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Features</name><index>[<expr><literal type="string">"vector-enhancements-1"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ISARevision</name> <operator>&gt;=</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Features</name><index>[<expr><literal type="string">"vector-enhancements-2"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ISARevision</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Features</name><index>[<expr><literal type="string">"nnp-assist"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>TargetInfo</name><operator>::</operator><call><name>initFeatureMap</name><argument_list>(<argument><expr><name>Features</name></expr></argument>, <argument><expr><name>Diags</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>, <argument><expr><name>FeaturesVec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>handleTargetFeatures</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<expr_stmt><expr><name>HasTransactionalExecution</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>HasVector</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SoftFloat</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>Feature</name> <range>: <expr><name>Features</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+transactional-execution"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>HasTransactionalExecution</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+vector"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>HasVector</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Feature</name> <operator>==</operator> <literal type="string">"+soft-float"</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SoftFloat</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>HasVector</name> <operator>&amp;=</operator> <operator>!</operator><name>SoftFloat</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>HasVector</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>MaxVectorAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"E-m:e-i1:8:16-i8:8:16-i64:64-f128:64"</literal>
<literal type="string">"-v128:64-a:8:16-n32:64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasFeature</name><argument_list>(<argument><expr><name>StringRef</name> <name>Feature</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CallingConvCheckResult</name></type> <name>checkCallingConvention</name><argument_list>(<argument><expr><name>CallingConv</name> <name>CC</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<switch>switch <condition>(<expr><name>CC</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CC_C</name></expr>:</case>
<case>case <expr><name>CC_Swift</name></expr>:</case>
<case>case <expr><name>CC_OpenCLKernel</name></expr>:</case>
<return>return <expr><name>CCCR_OK</name></expr>;</return>
<case>case <expr><name>CC_SwiftAsync</name></expr>:</case>
<return>return <expr><name>CCCR_Error</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>CCCR_Warning</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getABI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>HasVector</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"vector"</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getLongDoubleMangling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"g"</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>getEHDataRegisterNumber</name><argument_list>(<argument><expr><name>unsigned</name> <name>RegNo</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>RegNo</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">6</literal> <operator>+</operator> <name>RegNo</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>
};
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
