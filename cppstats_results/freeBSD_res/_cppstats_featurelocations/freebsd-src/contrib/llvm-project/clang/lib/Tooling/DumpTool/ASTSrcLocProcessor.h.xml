<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Tooling/DumpTool/ASTSrcLocProcessor.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_DUMPTOOL_ASTSRCLOCPROCESSOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_DUMPTOOL_ASTSRCLOCPROCESSOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"APIData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchFinder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTSrcLocProcessor</name> <range>: <expr><name>public</name> <name>ast_matchers</name><operator>::</operator><name>MatchFinder</name><operator>::</operator><name>MatchCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>ASTSrcLocProcessor</name><argument_list>(<argument>StringRef JsonPath</argument>)</argument_list></macro></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>createASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;Compiler</argument>,
<argument>StringRef File</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>generate</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>generateEmpty</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>run</name><argument_list>(<argument>const ast_matchers::MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>TraversalKind</name></expr></argument>&gt;</argument_list></name> <macro><name>getCheckTraversalKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TK_IgnoreUnlessSpelledInSource</name></expr>;</return>
}</block>

<name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ClassInheritance</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ClassesInClade</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>ClassData</name></expr></argument>&gt;</argument_list></name> <name>ClassEntries</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>JsonPath</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>ast_matchers</name><operator>::</operator><name>MatchFinder</name></expr></argument>&gt;</argument_list></name> <name>Finder</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
