<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGBuilder.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGBUILDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGBUILDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/DataLayout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/IRBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CodeGenTypeCache.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CodeGenFunction</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name> <name>CGBuilderInserter</name></type> <name>final</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>IRBuilderDefaultInserter</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>CGBuilderInserter</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <call><name>CGBuilderInserter</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>*</operator><name>CGF</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>CGF</name><argument_list>(<argument>CGF</argument>)</argument_list></macro> <block>{}</block>


<name>void</name> <macro><name>InsertHelper</name><argument_list>(<argument>llvm::Instruction *I</argument>, <argument>const llvm::Twine &amp;Name</argument>,
<argument>llvm::BasicBlock *BB</argument>,
<argument>llvm::BasicBlock::iterator InsertPt</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>private</name><operator>:</operator>
<name>CodeGenFunction</name> <operator>*</operator><name>CGF</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <type><name>CGBuilderInserter</name></type> <name>CGBuilderInserterTy</name>;</typedef>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IRBuilder</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>ConstantFolder</name></expr></argument>, <argument><expr><name>CGBuilderInserterTy</name></expr></argument>&gt;</argument_list></name>
<name>CGBuilderBaseTy</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>CGBuilderTy</name> <range>: <expr><name>public</name> <name>CGBuilderBaseTy</name> <block>{


<expr><specifier>const</specifier> <name>CodeGenTypeCache</name> <operator>&amp;</operator><name>TypeCache</name></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>CGBuilderTy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CodeGenTypeCache</name> <operator>&amp;</operator><name>TypeCache</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CGBuilderBaseTy</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>, <macro><name>TypeCache</name><argument_list>(<argument>TypeCache</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>CGBuilderTy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CodeGenTypeCache</name> <operator>&amp;</operator><name>TypeCache</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>LLVMContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>ConstantFolder</name> <operator>&amp;</operator><name>F</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CGBuilderInserterTy</name> <operator>&amp;</operator><name>Inserter</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CGBuilderBaseTy</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>Inserter</name></expr></argument>)</argument_list></call></expr>, <macro><name>TypeCache</name><argument_list>(<argument>TypeCache</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>CGBuilderTy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CodeGenTypeCache</name> <operator>&amp;</operator><name>TypeCache</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Instruction</name> <operator>*</operator><name>I</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CGBuilderBaseTy</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>, <macro><name>TypeCache</name><argument_list>(<argument>TypeCache</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>CGBuilderTy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CodeGenTypeCache</name> <operator>&amp;</operator><name>TypeCache</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>BB</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CGBuilderBaseTy</name><argument_list>(<argument><expr><name>BB</name></expr></argument>)</argument_list></call></expr>, <macro><name>TypeCache</name><argument_list>(<argument>TypeCache</argument>)</argument_list></macro> <expr><block>{}</block>

<name>llvm</name><operator>::</operator><name>ConstantInt</name> <operator>*</operator><macro><name>getSize</name><argument_list>(<argument>CharUnits N</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>ConstantInt</name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name><name>TypeCache</name><operator>.</operator><name>SizeTy</name></name></expr></argument>, <argument><expr><call><name><name>N</name><operator>.</operator><name>getQuantity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>llvm</name><operator>::</operator><name>ConstantInt</name> <operator>*</operator><macro><name>getSize</name><argument_list>(<argument>uint64_t N</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>ConstantInt</name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name><name>TypeCache</name><operator>.</operator><name>SizeTy</name></name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>llvm</name><operator>::</operator><name>LoadInst</name> <operator>*</operator><macro><name>CreateLoad</name><argument_list>(<argument>Address Addr</argument>, <argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CreateAlignedLoad</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>llvm</name><operator>::</operator><name>LoadInst</name> <operator>*</operator><macro><name>CreateLoad</name><argument_list>(<argument>Address Addr</argument>, <argument>const char *Name</argument>)</argument_list></macro> <block>{


<return>return <expr><call><name>CreateAlignedLoad</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>llvm</name><operator>::</operator><name>LoadInst</name> <operator>*</operator><macro><name>CreateLoad</name><argument_list>(<argument>Address Addr</argument>, <argument>bool IsVolatile</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CreateAlignedLoad</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>IsVolatile</name></expr></argument>,
<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreateAlignedLoad</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>LoadInst</name> <operator>*</operator><macro><name>CreateAlignedLoad</name><argument_list>(<argument>llvm::Type *Ty</argument>, <argument>llvm::Value *Addr</argument>,
<argument>CharUnits Align</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getPointerElementType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Ty</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>CreateAlignedLoad</name><argument_list>(<argument><expr><name>Ty</name></expr></argument>, <argument><expr><name>Addr</name></expr></argument>, <argument><expr><call><name><name>Align</name><operator>.</operator><name>getAsAlign</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>llvm</name><operator>::</operator><name>StoreInst</name> <operator>*</operator><macro><name>CreateStore</name><argument_list>(<argument>llvm::Value *Val</argument>, <argument>Address Addr</argument>,
<argument>bool IsVolatile = false</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CreateAlignedStore</name><argument_list>(<argument><expr><name>Val</name></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>IsVolatile</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreateAlignedStore</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>StoreInst</name> <operator>*</operator><macro><name>CreateAlignedStore</name><argument_list>(<argument>llvm::Value *Val</argument>, <argument>llvm::Value *Addr</argument>,
<argument>CharUnits Align</argument>, <argument>bool IsVolatile = false</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CreateAlignedStore</name><argument_list>(<argument><expr><name>Val</name></expr></argument>, <argument><expr><name>Addr</name></expr></argument>, <argument><expr><call><name><name>Align</name><operator>.</operator><name>getAsAlign</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>IsVolatile</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>llvm</name><operator>::</operator><name>StoreInst</name> <operator>*</operator><macro><name>CreateDefaultAlignedStore</name><argument_list>(<argument>llvm::Value *Val</argument>,
<argument>llvm::Value *Addr</argument>,
<argument>bool IsVolatile = false</argument>)</argument_list></macro> <block>{
<return>return <expr><name>CGBuilderBaseTy</name><operator>::</operator><call><name>CreateStore</name><argument_list>(<argument><expr><name>Val</name></expr></argument>, <argument><expr><name>Addr</name></expr></argument>, <argument><expr><name>IsVolatile</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>llvm</name><operator>::</operator><name>LoadInst</name> <operator>*</operator><macro><name>CreateFlagLoad</name><argument_list>(<argument>llvm::Value *Addr</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getPointerElementType</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>getInt1Ty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>CreateAlignedLoad</name><argument_list>(<argument><expr><call><name>getInt1Ty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Addr</name></expr></argument>, <argument><expr><name>CharUnits</name><operator>::</operator><call><name>One</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>llvm</name><operator>::</operator><name>StoreInst</name> <operator>*</operator><macro><name>CreateFlagStore</name><argument_list>(<argument>bool Value</argument>, <argument>llvm::Value *Addr</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getPointerElementType</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>getInt1Ty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>CreateAlignedStore</name><argument_list>(<argument><expr><call><name>getInt1</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Addr</name></expr></argument>, <argument><expr><name>CharUnits</name><operator>::</operator><call><name>One</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>llvm</name><operator>::</operator><name>AtomicCmpXchgInst</name> <operator>*</operator>
<macro><name>CreateAtomicCmpXchg</name><argument_list>(<argument>llvm::Value *Ptr</argument>, <argument>llvm::Value *Cmp</argument>, <argument>llvm::Value *New</argument>,
<argument>llvm::AtomicOrdering SuccessOrdering</argument>,
<argument>llvm::AtomicOrdering FailureOrdering</argument>,
<argument>llvm::SyncScope::ID SSID = llvm::SyncScope::System</argument>)</argument_list></macro> <block>{
<return>return <expr><name>CGBuilderBaseTy</name><operator>::</operator><call><name>CreateAtomicCmpXchg</name><argument_list>(
<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Cmp</name></expr></argument>, <argument><expr><name>New</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>MaybeAlign</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SuccessOrdering</name></expr></argument>, <argument><expr><name>FailureOrdering</name></expr></argument>,
<argument><expr><name>SSID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>llvm</name><operator>::</operator><name>AtomicRMWInst</name> <operator>*</operator>
<macro><name>CreateAtomicRMW</name><argument_list>(<argument>llvm::AtomicRMWInst::BinOp Op</argument>, <argument>llvm::Value *Ptr</argument>,
<argument>llvm::Value *Val</argument>, <argument>llvm::AtomicOrdering Ordering</argument>,
<argument>llvm::SyncScope::ID SSID = llvm::SyncScope::System</argument>)</argument_list></macro> <block>{
<return>return <expr><name>CGBuilderBaseTy</name><operator>::</operator><call><name>CreateAtomicRMW</name><argument_list>(<argument><expr><name>Op</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Val</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><call><name>MaybeAlign</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>Ordering</name></expr></argument>, <argument><expr><name>SSID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreateBitCast</name></expr>;
<expr><name>Address</name> <macro><name>CreateBitCast</name><argument_list>(<argument>Address Addr</argument>, <argument>llvm::Type *Ty</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>CreateBitCast</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Ty</name></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreateAddrSpaceCast</name></expr>;
<expr><name>Address</name> <macro><name>CreateAddrSpaceCast</name><argument_list>(<argument>Address Addr</argument>, <argument>llvm::Type *Ty</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>CreateAddrSpaceCast</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Ty</name></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>Address</name> <macro><name>CreateElementBitCast</name><argument_list>(<argument>Address Addr</argument>, <argument>llvm::Type *Ty</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>PtrTy</name> <operator>=</operator> <call><name><name>Ty</name><operator>-&gt;</operator><name>getPointerTo</name></name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAddressSpace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>CreateBitCast</name><argument_list>(<argument><expr><name>Addr</name></expr></argument>, <argument><expr><name>PtrTy</name></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreatePointerBitCastOrAddrSpaceCast</name></expr>;
<expr><name>Address</name> <macro><name>CreatePointerBitCastOrAddrSpaceCast</name><argument_list>(<argument>Address Addr</argument>, <argument>llvm::Type *Ty</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>Ptr</name> <operator>=</operator>
<call><name>CreatePointerBitCastOrAddrSpaceCast</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Ty</name></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>








<name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreateStructGEP</name></expr>;
<expr><name>Address</name> <macro><name>CreateStructGEP</name><argument_list>(<argument>Address Addr</argument>, <argument>unsigned Index</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>ElTy</name> <operator>=</operator> <call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StructType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DataLayout</name> <operator>&amp;</operator><name>DL</name> <operator>=</operator> <call><name><name>BB</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getParent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDataLayout</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StructLayout</name> <operator>*</operator><name>Layout</name> <operator>=</operator> <call><name><name>DL</name><operator>.</operator><name>getStructLayout</name></name><argument_list>(<argument><expr><name>ElTy</name></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>Offset</name> <operator>=</operator> <name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><call><name><name>Layout</name><operator>-&gt;</operator><name>getElementOffset</name></name><argument_list>(<argument><expr><name>Index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>CreateStructGEP</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Index</name></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>alignmentAtOffset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>









<name>Address</name> <macro><name>CreateConstArrayGEP</name><argument_list>(<argument>Address Addr</argument>, <argument>uint64_t Index</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><name>llvm</name><operator>::</operator><name>ArrayType</name> <operator>*</operator><name>ElTy</name> <operator>=</operator> <call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>ArrayType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DataLayout</name> <operator>&amp;</operator><name>DL</name> <operator>=</operator> <call><name><name>BB</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getParent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDataLayout</name><argument_list>()</argument_list></call></expr>;
<expr><name>CharUnits</name> <name>EltSize</name> <operator>=</operator>
<name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><call><name><name>DL</name><operator>.</operator><name>getTypeAllocSize</name></name><argument_list>(<argument><expr><call><name><name>ElTy</name><operator>-&gt;</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

<return>return <macro><name>Address</name><argument_list>(
<argument>CreateInBoundsGEP(Addr.getElementType(), Addr.getPointer(),
{getSize(CharUnits::Zero()), getSize(Index)}, Name)</argument>,
<argument>Addr.getAlignment().alignmentAtOffset(Index * EltSize)</argument>)</argument_list></macro>;</return>
}</block>






<name>Address</name> <macro><name>CreateConstInBoundsGEP</name><argument_list>(<argument>Address Addr</argument>, <argument>uint64_t Index</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>ElTy</name> <operator>=</operator> <call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DataLayout</name> <operator>&amp;</operator><name>DL</name> <operator>=</operator> <call><name><name>BB</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getParent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDataLayout</name><argument_list>()</argument_list></call></expr>;
<expr><name>CharUnits</name> <name>EltSize</name> <operator>=</operator> <name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><call><name><name>DL</name><operator>.</operator><name>getTypeAllocSize</name></name><argument_list>(<argument><expr><name>ElTy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>CreateInBoundsGEP</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>getSize</name><argument_list>(<argument><expr><name>Index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>alignmentAtOffset</name><argument_list>(<argument><expr><name>Index</name> <operator>*</operator> <name>EltSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>






<name>Address</name> <macro><name>CreateConstGEP</name><argument_list>(<argument>Address Addr</argument>, <argument>uint64_t Index</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DataLayout</name> <operator>&amp;</operator><name>DL</name> <operator>=</operator> <call><name><name>BB</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getParent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDataLayout</name><argument_list>()</argument_list></call></expr>;
<expr><name>CharUnits</name> <name>EltSize</name> <operator>=</operator>
<name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><call><name><name>DL</name><operator>.</operator><name>getTypeAllocSize</name></name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>CreateGEP</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>getSize</name><argument_list>(<argument><expr><name>Index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>alignmentAtOffset</name><argument_list>(<argument><expr><name>Index</name> <operator>*</operator> <name>EltSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>Address</name> <macro><name>CreateConstInBoundsByteGEP</name><argument_list>(<argument>Address Addr</argument>, <argument>CharUnits Offset</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>TypeCache</name><operator>.</operator><name>Int8Ty</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>CreateInBoundsGEP</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>getSize</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>alignmentAtOffset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>Address</name> <macro><name>CreateConstByteGEP</name><argument_list>(<argument>Address Addr</argument>, <argument>CharUnits Offset</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>TypeCache</name><operator>.</operator><name>Int8Ty</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>CreateGEP</name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>getSize</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>alignmentAtOffset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreateConstInBoundsGEP2_32</name></expr>;
<expr><name>Address</name> <macro><name>CreateConstInBoundsGEP2_32</name><argument_list>(<argument>Address Addr</argument>, <argument>unsigned Idx0</argument>, <argument>unsigned Idx1</argument>,
<argument>const llvm::Twine &amp;Name = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DataLayout</name> <operator>&amp;</operator><name>DL</name> <operator>=</operator> <call><name><name>BB</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getParent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDataLayout</name><argument_list>()</argument_list></call></expr>;

<expr><name>auto</name> <operator>*</operator><name>GEP</name> <operator>=</operator> <call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>GetElementPtrInst</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>CreateConstInBoundsGEP2_32</name><argument_list>(
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Idx0</name></expr></argument>, <argument><expr><name>Idx1</name></expr></argument>, <argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>llvm</name><operator>::</operator><name>APInt</name> <call><name>Offset</name><argument_list>(
<argument><expr><call><name><name>DL</name><operator>.</operator><name>getIndexSizeInBits</name></name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getPointerAddressSpace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>GEP</name><operator>-&gt;</operator><name>accumulateConstantOffset</name></name><argument_list>(<argument><expr><name>DL</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"offset of GEP with constants is always computable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><name>GEP</name></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>alignmentAtOffset</name><argument_list>(
<argument><expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><call><name><name>Offset</name><operator>.</operator><name>getSExtValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreateMemCpy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CallInst</name> <operator>*</operator><macro><name>CreateMemCpy</name><argument_list>(<argument>Address Dest</argument>, <argument>Address Src</argument>, <argument>llvm::Value *Size</argument>,
<argument>bool IsVolatile = false</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CreateMemCpy</name><argument_list>(<argument><expr><call><name><name>Dest</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Dest</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Src</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Src</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Size</name></expr></argument>,
<argument><expr><name>IsVolatile</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CallInst</name> <operator>*</operator><macro><name>CreateMemCpy</name><argument_list>(<argument>Address Dest</argument>, <argument>Address Src</argument>, <argument>uint64_t Size</argument>,
<argument>bool IsVolatile = false</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CreateMemCpy</name><argument_list>(<argument><expr><call><name><name>Dest</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Dest</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Src</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Src</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Size</name></expr></argument>,
<argument><expr><name>IsVolatile</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreateMemCpyInline</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CallInst</name> <operator>*</operator><macro><name>CreateMemCpyInline</name><argument_list>(<argument>Address Dest</argument>, <argument>Address Src</argument>, <argument>uint64_t Size</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CreateMemCpyInline</name><argument_list>(
<argument><expr><call><name><name>Dest</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Dest</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Src</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Src</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getInt64</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreateMemMove</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CallInst</name> <operator>*</operator><macro><name>CreateMemMove</name><argument_list>(<argument>Address Dest</argument>, <argument>Address Src</argument>, <argument>llvm::Value *Size</argument>,
<argument>bool IsVolatile = false</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CreateMemMove</name><argument_list>(<argument><expr><call><name><name>Dest</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Dest</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Src</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Src</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>Size</name></expr></argument>, <argument><expr><name>IsVolatile</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreateMemSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CallInst</name> <operator>*</operator><macro><name>CreateMemSet</name><argument_list>(<argument>Address Dest</argument>, <argument>llvm::Value *Value</argument>,
<argument>llvm::Value *Size</argument>, <argument>bool IsVolatile = false</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>CreateMemSet</name><argument_list>(<argument><expr><call><name><name>Dest</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Value</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>,
<argument><expr><call><name><name>Dest</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsAlign</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>IsVolatile</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>using</name> <name>CGBuilderBaseTy</name><operator>::</operator><name>CreatePreserveStructAccessIndex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Address</name></type> <name>CreatePreserveStructAccessIndex</name><argument_list>(<argument><expr><name>Address</name> <name>Addr</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>Index</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>FieldIndex</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><name>DbgInfo</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>ElTy</name> <operator>=</operator> <call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StructType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getElementType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DataLayout</name> <operator>&amp;</operator><name>DL</name> <operator>=</operator> <call><name><name>BB</name><operator>-&gt;</operator><name>getParent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getParent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDataLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>StructLayout</name> <operator>*</operator><name>Layout</name> <operator>=</operator> <call><name><name>DL</name><operator>.</operator><name>getStructLayout</name></name><argument_list>(<argument><expr><name>ElTy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>Offset</name> <init>= <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><call><name><name>Layout</name><operator>-&gt;</operator><name>getElementOffset</name></name><argument_list>(<argument><expr><name>Index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>CreatePreserveStructAccessIndex</name><argument_list>(<argument><expr><name>ElTy</name></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>Index</name></expr></argument>, <argument><expr><name>FieldIndex</name></expr></argument>, <argument><expr><name>DbgInfo</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>alignmentAtOffset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
