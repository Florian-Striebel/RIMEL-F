<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/Context.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_CONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_CONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InterpStack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/APValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>State</name></decl>;</decl_stmt>
<enum_decl>enum <name>PrimType</name> : <type><name>unsigned</name></type>;</enum_decl>


<decl_stmt><decl><type><name>class</name></type> <name>Context</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>Context</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>~</operator><call><name>Context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>isPotentialConstantExpr</name><parameter_list>(<parameter><decl><type><name>State</name> <modifier>&amp;</modifier></type><name>Parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FnDecl</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>evaluateAsRValue</name><parameter_list>(<parameter><decl><type><name>State</name> <modifier>&amp;</modifier></type><name>Parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>APValue</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>evaluateAsInitializer</name><parameter_list>(<parameter><decl><type><name>State</name> <modifier>&amp;</modifier></type><name>Parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>VD</name></decl></parameter>, <parameter><decl><type><name>APValue</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getASTContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ctx</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><macro><name>getLangOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><name>InterpStack</name> <modifier>&amp;</modifier></type><name>getStack</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Stk</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getCharBit</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>PrimType</name></expr></argument>&gt;</argument_list></name> <macro><name>classify</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>

<function_decl><type><name>bool</name></type> <name>Run</name><parameter_list>(<parameter><decl><type><name>State</name> <modifier>&amp;</modifier></type><name>Parent</name></decl></parameter>, <parameter><decl><type><name>Function</name> <modifier>*</modifier></type><name>Func</name></decl></parameter>, <parameter><decl><type><name>APValue</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>bool</name></type> <name>Check</name><argument_list>(<argument><expr><name>State</name> <operator>&amp;</operator><name>Parent</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>R</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InterpStack</name></type> <name>Stk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Program</name></expr></argument>&gt;</argument_list></name> <name>P</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
