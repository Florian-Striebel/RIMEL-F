<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/cpuid.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CPUID_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CPUID_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>__x86_64__</name> <operator>||</operator> <name>__i386__</name><operator>)</operator></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> this header is for x86 only</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_AMD_ebx</name></cpp:macro> <cpp:value>0x68747541</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_AMD_edx</name></cpp:macro> <cpp:value>0x69746e65</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_AMD_ecx</name></cpp:macro> <cpp:value>0x444d4163</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_CENTAUR_ebx</name></cpp:macro> <cpp:value>0x746e6543</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_CENTAUR_edx</name></cpp:macro> <cpp:value>0x48727561</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_CENTAUR_ecx</name></cpp:macro> <cpp:value>0x736c7561</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_CYRIX_ebx</name></cpp:macro> <cpp:value>0x69727943</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_CYRIX_edx</name></cpp:macro> <cpp:value>0x736e4978</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_CYRIX_ecx</name></cpp:macro> <cpp:value>0x64616574</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_HYGON_ebx</name></cpp:macro> <cpp:value>0x6f677948</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_HYGON_edx</name></cpp:macro> <cpp:value>0x6e65476e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_HYGON_ecx</name></cpp:macro> <cpp:value>0x656e6975</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_INTEL_ebx</name></cpp:macro> <cpp:value>0x756e6547</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_INTEL_edx</name></cpp:macro> <cpp:value>0x49656e69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_INTEL_ecx</name></cpp:macro> <cpp:value>0x6c65746e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_TM1_ebx</name></cpp:macro> <cpp:value>0x6e617254</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_TM1_edx</name></cpp:macro> <cpp:value>0x74656d73</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_TM1_ecx</name></cpp:macro> <cpp:value>0x55504361</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_TM2_ebx</name></cpp:macro> <cpp:value>0x756e6547</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_TM2_edx</name></cpp:macro> <cpp:value>0x54656e69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_TM2_ecx</name></cpp:macro> <cpp:value>0x3638784d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_NSC_ebx</name></cpp:macro> <cpp:value>0x646f6547</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_NSC_edx</name></cpp:macro> <cpp:value>0x79622065</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_NSC_ecx</name></cpp:macro> <cpp:value>0x43534e20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_NEXGEN_ebx</name></cpp:macro> <cpp:value>0x4778654e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_NEXGEN_edx</name></cpp:macro> <cpp:value>0x72446e65</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_NEXGEN_ecx</name></cpp:macro> <cpp:value>0x6e657669</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_RISE_ebx</name></cpp:macro> <cpp:value>0x65736952</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_RISE_edx</name></cpp:macro> <cpp:value>0x65736952</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_RISE_ecx</name></cpp:macro> <cpp:value>0x65736952</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_SIS_ebx</name></cpp:macro> <cpp:value>0x20536953</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_SIS_edx</name></cpp:macro> <cpp:value>0x20536953</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_SIS_ecx</name></cpp:macro> <cpp:value>0x20536953</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_UMC_ebx</name></cpp:macro> <cpp:value>0x20434d55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_UMC_edx</name></cpp:macro> <cpp:value>0x20434d55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_UMC_ecx</name></cpp:macro> <cpp:value>0x20434d55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_VIA_ebx</name></cpp:macro> <cpp:value>0x20414956</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_VIA_edx</name></cpp:macro> <cpp:value>0x20414956</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_VIA_ecx</name></cpp:macro> <cpp:value>0x20414956</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_VORTEX_ebx</name></cpp:macro> <cpp:value>0x74726f56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_VORTEX_edx</name></cpp:macro> <cpp:value>0x36387865</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signature_VORTEX_ecx</name></cpp:macro> <cpp:value>0x436f5320</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SSE3</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PCLMULQDQ</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PCLMUL</name></cpp:macro> <cpp:value>bit_PCLMULQDQ</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_DTES64</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MONITOR</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_DSCPL</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_VMX</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SMX</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_EIST</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_TM2</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SSSE3</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_CNXTID</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_FMA</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_CMPXCHG16B</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_xTPR</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PDCM</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PCID</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_DCA</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SSE41</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SSE4_1</name></cpp:macro> <cpp:value>bit_SSE41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SSE42</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SSE4_2</name></cpp:macro> <cpp:value>bit_SSE42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_x2APIC</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MOVBE</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_POPCNT</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_TSCDeadline</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AESNI</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AES</name></cpp:macro> <cpp:value>bit_AESNI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_XSAVE</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_OSXSAVE</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_F16C</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_RDRND</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_FPU</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_VME</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_DE</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PSE</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_TSC</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MSR</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PAE</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MCE</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_CX8</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_CMPXCHG8B</name></cpp:macro> <cpp:value>bit_CX8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_APIC</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SEP</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MTRR</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PGE</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MCA</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_CMOV</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PAT</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PSE36</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PSN</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_CLFSH</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_DS</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_ACPI</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MMX</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_FXSR</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_FXSAVE</name></cpp:macro> <cpp:value>bit_FXSR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SSE</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SSE2</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SS</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_HTT</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_TM</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PBE</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_FSGSBASE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SGX</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_BMI</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_HLE</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX2</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SMEP</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_BMI2</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_ENH_MOVSB</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_INVPCID</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_RTM</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MPX</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512F</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512DQ</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_RDSEED</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_ADX</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512IFMA</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_CLFLUSHOPT</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_CLWB</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512PF</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512ER</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512CD</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SHA</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512BW</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512VL</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PREFTCHWT1</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512VBMI</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PKU</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_OSPKE</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_WAITPKG</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512VBMI2</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SHSTK</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_GFNI</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_VAES</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_VPCLMULQDQ</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512VNNI</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512BITALG</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512VPOPCNTDQ</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_RDPID</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_CLDEMOTE</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MOVDIRI</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MOVDIR64B</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_ENQCMD</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX5124VNNIW</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX5124FMAPS</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_UINTR</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SERIALIZE</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_TSXLDTRK</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PCONFIG</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_IBT</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AMXBF16</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AMXTILE</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AMXINT8</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVXVNNI</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_AVX512BF16</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_HRESET</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_XSAVEOPT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_XSAVEC</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_XSAVES</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PTWRITE</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_LAHF_LM</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_ABM</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_LZCNT</name></cpp:macro> <cpp:value>bit_ABM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_SSE4a</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_PRFCHW</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_XOP</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_LWP</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_FMA4</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_TBM</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MWAITX</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_MMXEXT</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_LM</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_3DNOWP</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_3DNOW</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_CLZERO</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit_WBNOINVD</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__cpuid</name><parameter_list>(<parameter><type><name>__leaf</name></type></parameter>, <parameter><type><name>__eax</name></type></parameter>, <parameter><type><name>__ebx</name></type></parameter>, <parameter><type><name>__ecx</name></type></parameter>, <parameter><type><name>__edx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm("cpuid" : "=a"(__eax), "=b" (__ebx), "=c"(__ecx), "=d"(__edx) : "0"(__leaf))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__cpuid_count</name><parameter_list>(<parameter><type><name>__leaf</name></type></parameter>, <parameter><type><name>__count</name></type></parameter>, <parameter><type><name>__eax</name></type></parameter>, <parameter><type><name>__ebx</name></type></parameter>, <parameter><type><name>__ecx</name></type></parameter>, <parameter><type><name>__edx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm("cpuid" : "=a"(__eax), "=b" (__ebx), "=c"(__ecx), "=d"(__edx) : "0"(__leaf), "2"(__count))</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__cpuid</name><parameter_list>(<parameter><type><name>__leaf</name></type></parameter>, <parameter><type><name>__eax</name></type></parameter>, <parameter><type><name>__ebx</name></type></parameter>, <parameter><type><name>__ecx</name></type></parameter>, <parameter><type><name>__edx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm(" xchgq %%rbx,%q1\n" " cpuid\n" " xchgq %%rbx,%q1" : "=a"(__eax), "=r" (__ebx), "=c"(__ecx), "=d"(__edx) : "0"(__leaf))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__cpuid_count</name><parameter_list>(<parameter><type><name>__leaf</name></type></parameter>, <parameter><type><name>__count</name></type></parameter>, <parameter><type><name>__eax</name></type></parameter>, <parameter><type><name>__ebx</name></type></parameter>, <parameter><type><name>__ecx</name></type></parameter>, <parameter><type><name>__edx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm(" xchgq %%rbx,%q1\n" " cpuid\n" " xchgq %%rbx,%q1" : "=a"(__eax), "=r" (__ebx), "=c"(__ecx), "=d"(__edx) : "0"(__leaf), "2"(__count))</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>__get_cpuid_max</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__leaf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__eax</name></decl>, <decl><type ref="prev"/><name>__ebx</name></decl>, <decl><type ref="prev"/><name>__ecx</name></decl>, <decl><type ref="prev"/><name>__edx</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>__cpuid_supported</name></decl>;</decl_stmt>

<asm>__asm(" pushfl\n"</asm>
<expr_stmt><expr><literal type="string">" popl %%eax\n"</literal>
<literal type="string">" movl %%eax,%%ecx\n"</literal>
<literal type="string">" xorl $0x00200000,%%eax\n"</literal>
<literal type="string">" pushl %%eax\n"</literal>
<literal type="string">" popfl\n"</literal>
<literal type="string">" pushfl\n"</literal>
<literal type="string">" popl %%eax\n"</literal>
<literal type="string">" movl $0,%0\n"</literal>
<literal type="string">" cmpl %%eax,%%ecx\n"</literal>
<literal type="string">" je 1f\n"</literal>
<literal type="string">" movl $1,%0\n"</literal>
<literal type="string">"1:"</literal>
<operator>:</operator> <literal type="string">"=r"</literal> <operator>(</operator><name>__cpuid_supported</name><operator>)</operator> <operator>:</operator> <operator>:</operator> <literal type="string">"eax"</literal></expr><operator>,</operator> <expr><literal type="string">"ecx"</literal></expr></expr_stmt>)</block_content></block>;</function>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>__cpuid_supported</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>__cpuid</name><argument_list>(<argument><expr><name>__leaf</name></expr></argument>, <argument><expr><name>__eax</name></expr></argument>, <argument><expr><name>__ebx</name></expr></argument>, <argument><expr><name>__ecx</name></expr></argument>, <argument><expr><name>__edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>__sig</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>__sig</name> <operator>=</operator> <name>__ebx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>__eax</name></expr>;</return>
}

static <function><type><name>__inline</name> <name>int</name></type> <name>__get_cpuid</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__leaf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__eax</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ebx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ecx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__edx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__max_leaf</name> <init>= <expr><call><name>__get_cpuid_max</name><argument_list>(<argument><expr><name>__leaf</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__max_leaf</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>__max_leaf</name> <operator>&lt;</operator> <name>__leaf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>__cpuid</name><argument_list>(<argument><expr><name>__leaf</name></expr></argument>, <argument><expr><operator>*</operator><name>__eax</name></expr></argument>, <argument><expr><operator>*</operator><name>__ebx</name></expr></argument>, <argument><expr><operator>*</operator><name>__ecx</name></expr></argument>, <argument><expr><operator>*</operator><name>__edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>__get_cpuid_count</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__leaf</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__subleaf</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__eax</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ebx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ecx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__edx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__max_leaf</name> <init>= <expr><call><name>__get_cpuid_max</name><argument_list>(<argument><expr><name>__leaf</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__max_leaf</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>__max_leaf</name> <operator>&lt;</operator> <name>__leaf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>__cpuid_count</name><argument_list>(<argument><expr><name>__leaf</name></expr></argument>, <argument><expr><name>__subleaf</name></expr></argument>, <argument><expr><operator>*</operator><name>__eax</name></expr></argument>, <argument><expr><operator>*</operator><name>__ebx</name></expr></argument>, <argument><expr><operator>*</operator><name>__ecx</name></expr></argument>, <argument><expr><operator>*</operator><name>__edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
