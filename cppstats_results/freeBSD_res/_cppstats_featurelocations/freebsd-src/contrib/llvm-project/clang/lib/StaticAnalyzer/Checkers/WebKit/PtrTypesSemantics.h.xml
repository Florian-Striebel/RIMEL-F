<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/PtrTypesSemantics.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYZER_WEBKIT_PTRTYPESEMANTICS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYZER_WEBKIT_PTRTYPESEMANTICS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APInt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBaseSpecifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>










<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CXXRecordDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<call><name>isRefCountable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CXXBaseSpecifier</name> <operator>*</operator><name>Base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <call><name>isRefCountable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CXXRecordDecl</name> <operator>*</operator><name>Class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isRefCounted</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CXXRecordDecl</name> <operator>*</operator><name>Class</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <call><name>isUncounted</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CXXRecordDecl</name> <operator>*</operator><name>Class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <call><name>isUncountedPtr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>Type</name> <operator>*</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isCtorOfRefCounted</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>FunctionDecl</name> <operator>*</operator><name>F</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <call><name>isGetterOfRefCounted</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CXXMethodDecl</name> <operator>*</operator><name>Method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>bool</name></type> <name>isPtrConversion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
