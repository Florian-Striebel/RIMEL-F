<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/VEToolchain.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_VE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_VE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Linux.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/ToolChain.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>toolchains</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>VEToolChain</name> <range>: <expr><name>public</name> <name>Linux</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>VEToolChain</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>Tool</name> <operator>*</operator><macro><name>buildAssembler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Tool</name> <operator>*</operator><macro><name>buildLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>IsIntegratedAssemblerDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isPICDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPIEDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPICDefaultForced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>SupportsProfiling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasBlocksRuntime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name>
<macro><name>AddClangSystemIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name>
<macro><name>addClangTargetOptions</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>AddClangCXXStdlibIncludeArgs</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>AddCXXStdlibLibArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>ExceptionHandling</name>
<macro><name>GetExceptionModel</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>CXXStdlibType</name>
<macro><name>GetCXXStdlibType</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>ToolChain</name><operator>::</operator><name>CST_Libcxx</name></expr>;</return>
}</block>

<name>RuntimeLibType</name> <macro><name>GetDefaultRuntimeLibType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>ToolChain</name><operator>::</operator><name>RLT_CompilerRT</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getDefaultLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"nld"</literal></expr>;</return> }</block>
}</expr>;

}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
