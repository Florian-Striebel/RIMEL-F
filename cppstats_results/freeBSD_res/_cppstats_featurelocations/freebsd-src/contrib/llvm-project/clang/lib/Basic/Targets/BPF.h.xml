<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/BPF.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_BPF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_BPF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>BPFTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;
<expr><name>bool</name> <name>HasAlu32</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>BPFTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TargetInfo</name><argument_list>(<argument>Triple</argument>)</argument_list></macro> <block>{
<expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedLong</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>IntMaxType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>Int64Type</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>RegParmMax</name> <operator>=</operator> <literal type="number">5</literal></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>bpfeb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"E-m:e-p:64:64-i64:64-i128:128-n32:64-S128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
MaxAtomicPromoteWidth = 64</block></block><empty_stmt>;</empty_stmt></if></if_stmt>
<name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></block></expr>;
<expr><name>TLSSupported</name> <operator>=</operator> <name>false</name></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasFeature</name><argument_list>(<argument><expr><name>StringRef</name> <name>Feature</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<return>return <expr><name>Feature</name> <operator>==</operator> <literal type="string">"bpf"</literal> <operator>||</operator> <name>Feature</name> <operator>==</operator> <literal type="string">"alu32"</literal> <operator>||</operator> <name>Feature</name> <operator>==</operator> <literal type="string">"dwarfris"</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setFeatureEnabled</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Name</name></expr></argument>,
<argument><expr><name>bool</name> <name>Enabled</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<expr_stmt><expr><name><name>Features</name><index>[<expr><name>Name</name></expr>]</index></name> <operator>=</operator> <name>Enabled</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>handleTargetFeatures</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>VoidPtrBuiltinVaList</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isValidGCCRegisterName</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>None</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>validateAsmConstraint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>&amp;</operator><name>Name</name></expr></argument>,
<argument><expr><name>TargetInfo</name><operator>::</operator><name>ConstraintInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>Name</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>HasAlu32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>None</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>allowDebugInfoForExternalRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>CallingConvCheckResult</name></type> <name>checkCallingConvention</name><argument_list>(<argument><expr><name>CallingConv</name> <name>CC</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<switch>switch <condition>(<expr><name>CC</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>CCCR_Warning</name></expr>;</return>
<case>case <expr><name>CC_C</name></expr>:</case>
<case>case <expr><name>CC_OpenCLKernel</name></expr>:</case>
<return>return <expr><name>CCCR_OK</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isValidCPUName</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>fillValidCPUList</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Values</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>setCPU</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Name</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Name</name> <operator>==</operator> <literal type="string">"v3"</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>HasAlu32</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<function_decl><type><name>StringRef</name></type> <name>CPUName</name><parameter_list>(<parameter><decl><type><name>Name</name></type></decl></parameter>)</parameter_list>;</function_decl>
<return>return <expr><call><name>isValidCPUName</name><argument_list>(<argument><expr><name>CPUName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
