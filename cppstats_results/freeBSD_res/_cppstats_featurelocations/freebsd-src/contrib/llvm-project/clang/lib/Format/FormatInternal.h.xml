<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/FormatInternal.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_FORMATINTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_FORMATINTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"BreakableToken.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>















































<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>tooling</name><operator>::</operator><name>Replacements</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>reformat</name><argument_list>(<argument>const FormatStyle &amp;Style</argument>, <argument>StringRef Code</argument>,
<argument>ArrayRef&lt;tooling::Range&gt; Ranges</argument>, <argument>unsigned FirstStartColumn</argument>,
<argument>unsigned NextStartColumn</argument>, <argument>unsigned LastStartColumn</argument>, <argument>StringRef FileName</argument>,
<argument>FormattingAttemptStatus *Status</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
