<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Serialization/MultiOnDiskHashTable.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_SERIALIZATION_MULTIONDISKHASHTABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_SERIALIZATION_MULTIONDISKHASHTABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/TinyPtrVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/EndianStream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/OnDiskHashTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Info</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>MultiOnDiskHashTable</name> <block>{<block_content>
<label><name>public</name>:</label>

<decl_stmt><decl><type><name>using</name></type> <name>file_type</name> <init>= <expr><name>typename</name> <name>Info</name><operator>::</operator><name>file_type</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>storage_type</name> <init>= <expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>external_key_type</name> <init>= <expr><name>typename</name> <name>Info</name><operator>::</operator><name>external_key_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>internal_key_type</name> <init>= <expr><name>typename</name> <name>Info</name><operator>::</operator><name>internal_key_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>data_type</name> <init>= <expr><name>typename</name> <name>Info</name><operator>::</operator><name>data_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>data_type_builder</name> <init>= <expr><name>typename</name> <name>Info</name><operator>::</operator><name>data_type_builder</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>hash_value_type</name> <init>= <expr><name>unsigned</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ReaderInfo</name></expr></argument>, <argument><expr><name>typename</name> <name>WriterInfo</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name></type> <name>MultiOnDiskHashTableGenerator</name></decl>;</decl_stmt>


<struct>struct <name>OnDiskTable</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>HashTable</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>OnDiskIterableChainedHashTable</name><argument_list type="generic">&lt;<argument><expr><name>Info</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>file_type</name></type> <name>File</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashTable</name></type> <name>Table</name></decl>;</decl_stmt>

<macro><name>OnDiskTable</name><argument_list>(<argument>file_type File</argument>, <argument>unsigned NumBuckets</argument>, <argument>unsigned NumEntries</argument>,
<argument>storage_type Buckets</argument>, <argument>storage_type Payload</argument>, <argument>storage_type Base</argument>,
<argument>const Info &amp;InfoObj</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>File</name><argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Table</name><argument_list>(<argument>NumBuckets</argument>, <argument>NumEntries</argument>, <argument>Buckets</argument>, <argument>Payload</argument>, <argument>Base</argument>, <argument>InfoObj</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>MergedTable</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>file_type</name></expr></argument>&gt;</argument_list></name> <name>Files</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>internal_key_type</name></expr></argument>, <argument><expr><name>data_type</name></expr></argument>&gt;</argument_list></name> <name>Data</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>Table</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>OnDiskTable</name> <operator>*</operator></expr></argument>, <argument><expr><name>MergedTable</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>TableVector</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>TinyPtrVector</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>TableVector</name></type> <name>Tables</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>TinyPtrVector</name><argument_list type="generic">&lt;<argument><expr><name>file_type</name></expr></argument>&gt;</argument_list></name> <name>PendingOverrides</name></expr>;</expr_stmt>

<struct>struct <name>AsOnDiskTable</name> <block>{
<decl_stmt><decl><type><name>using</name></type> <name>result_type</name> <init>= <expr><name>OnDiskTable</name> <operator>*</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result_type</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><name>void</name> <operator>*</operator><name>P</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Table</name><operator>::</operator><call><name>getFromOpaqueValue</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>.</operator><name>template</name> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>OnDiskTable</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>table_iterator</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>mapped_iterator</name><argument_list type="generic">&lt;<argument><expr><name>TableVector</name><operator>::</operator><name>iterator</name></expr></argument>, <argument><expr><name>AsOnDiskTable</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>table_range</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>table_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<function><type><name>table_range</name></type> <name>tables</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>Begin</name> <init>= <expr><call><name><name>Tables</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>End</name> <init>= <expr><call><name><name>Tables</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getMergedTable</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>Begin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>map_iterator</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>, <argument><expr><call><name>AsOnDiskTable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><call><name>map_iterator</name><argument_list>(<argument><expr><name>End</name></expr></argument>, <argument><expr><call><name>AsOnDiskTable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>MergedTable</name> <operator>*</operator><macro><name>getMergedTable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><call><name><name>Tables</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name>nullptr</name> <operator>:</operator> <name>Table</name><operator>::</operator><call><name>getFromOpaqueValue</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>Tables</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><name>template</name> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>MergedTable</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>*</operator><name>T</name> <operator>:</operator> <call><name>tables</name><argument_list>()</argument_list></call></expr></init>)</control><block type="pseudo"><block_content>
<decl_stmt><decl><type><name>delete</name></type> <name>T</name></decl>;</decl_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>M</name> <operator>=</operator> <call><name>getMergedTable</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<decl_stmt><decl><type><name>delete</name></type> <name>M</name></decl>;</decl_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Tables</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>removeOverriddenTables</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>file_type</name></expr></argument>&gt;</argument_list></name> <name>Files</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>PendingOverrides</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>PendingOverrides</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>ShouldRemove</name> <init>= <expr><index>[<expr><operator>&amp;</operator><name>Files</name></expr>]</index><operator>(</operator><name>void</name> <operator>*</operator><name>T</name><operator>)</operator> <operator>-&gt;</operator> <name>bool</name> <block>{
<expr><name>auto</name> <operator>*</operator><name>ODT</name> <operator>=</operator> <name>Table</name><operator>::</operator><call><name>getFromOpaqueValue</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call><operator>.</operator><name>template</name> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>OnDiskTable</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <name>Remove</name> <operator>=</operator> <call><name><name>Files</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>ODT</name><operator>-&gt;</operator><name>File</name></name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Remove</name></expr>)</condition><block type="pseudo"><block_content>
<decl_stmt><decl><type><name>delete</name></type> <name>ODT</name></decl>;</decl_stmt></block_content></block></if></if_stmt></block></expr></init></decl></decl_stmt>
<return>return <expr><name>Remove</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name><name>Tables</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>remove_if</name><argument_list>(<argument><expr><call><name>tables</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Tables</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ShouldRemove</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Tables</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>PendingOverrides</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>condense</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>MergedTable</name> <modifier>*</modifier></type><name>Merged</name> <init>= <expr><call><name>getMergedTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Merged</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Merged</name> <operator>=</operator> <name>new</name> <name>MergedTable</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>auto</name> <operator>*</operator><name>ODT</name> <operator>:</operator> <call><name>tables</name><argument_list>()</argument_list></call></expr></init>)</control> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>HT</name> <operator>=</operator> <name><name>ODT</name><operator>-&gt;</operator><name>Table</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Info</name> <modifier>&amp;</modifier></type><name>InfoObj</name> <init>= <expr><call><name><name>HT</name><operator>.</operator><name>getInfoObj</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>auto</name></type> <name>I</name> <init>= <expr><call><name><name>HT</name><operator>.</operator><name>data_begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>E</name> <init>= <expr><call><name><name>HT</name><operator>.</operator><name>data_end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>LocalPtr</name> <operator>=</operator> <call><name><name>I</name><operator>.</operator><name>getItem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>auto</name></type> <name>L</name> <init>= <expr><call><name><name>InfoObj</name><operator>.</operator><name>ReadKeyDataLength</name></name><argument_list>(<argument><expr><name>LocalPtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>internal_key_type</name> <modifier>&amp;</modifier></type><name>Key</name> <init>= <expr><call><name><name>InfoObj</name><operator>.</operator><name>ReadKey</name></name><argument_list>(<argument><expr><name>LocalPtr</name></expr></argument>, <argument><expr><name><name>L</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>data_type_builder</name></type> <name>ValueBuilder</name><argument_list>(<argument><expr><name><name>Merged</name><operator>-&gt;</operator><name>Data</name><index>[<expr><name>Key</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>InfoObj</name><operator>.</operator><name>ReadDataInto</name></name><argument_list>(<argument><expr><name>Key</name></expr></argument>, <argument><expr><name>LocalPtr</name> <operator>+</operator> <name><name>L</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>.</operator><name>second</name></name></expr></argument>,
<argument><expr><name>ValueBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>Merged</name><operator>-&gt;</operator><name>Files</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>ODT</name><operator>-&gt;</operator><name>File</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>delete</name></type> <name>ODT</name></decl>;</decl_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>Tables</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Tables</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>Table</name><argument_list>(<argument><expr><name>Merged</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getOpaqueValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MultiOnDiskHashTable</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><call><name>MultiOnDiskHashTable</name><argument_list>(<argument><expr><name>MultiOnDiskHashTable</name> <operator>&amp;&amp;</operator><name>O</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Tables</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>Tables</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>PendingOverrides</name><argument_list>(<argument>std::move(O.PendingOverrides)</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>O</name><operator>.</operator><name>Tables</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>MultiOnDiskHashTable</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>MultiOnDiskHashTable</name> <operator>&amp;&amp;</operator><name>O</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name>O</name> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return></block_content></block></if></if_stmt>
<call><name>clear</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><name>Tables</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>Tables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>O</name><operator>.</operator><name>Tables</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PendingOverrides</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>O</name><operator>.</operator><name>PendingOverrides</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>MultiOnDiskHashTable</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>clear</name><argument_list>()</argument_list></call></expr>; }</block>


<name>void</name> <macro><name>add</name><argument_list>(<argument>file_type File</argument>, <argument>storage_type Data</argument>, <argument>Info InfoObj = Info()</argument>)</argument_list></macro> <block>{
<expr><name>using</name> <name>namespace</name> <name>llvm</name><operator>::</operator><name>support</name></expr>;

<expr><name>storage_type</name> <name>Ptr</name> <operator>=</operator> <name>Data</name></expr>;

<expr><name>uint32_t</name> <name>BucketOffset</name> <operator>=</operator> <name>endian</name><operator>::</operator><call><name><name>readNext</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>little</name></expr></argument>, <argument><expr><name>unaligned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;


<expr><name>uint32_t</name> <name>NumFiles</name> <operator>=</operator> <name>endian</name><operator>::</operator><call><name><name>readNext</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>little</name></expr></argument>, <argument><expr><name>unaligned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>file_type</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>OverriddenFiles</name></expr>;
<expr><call><name><name>OverriddenFiles</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>NumFiles</name></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init>;</init> <condition><expr><name>NumFiles</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>NumFiles</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>OverriddenFiles</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>InfoObj</name><operator>.</operator><name>ReadFileRef</name></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<call><name><name>PendingOverrides</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>PendingOverrides</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>OverriddenFiles</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>OverriddenFiles</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>


<decl_stmt><decl><type><name>storage_type</name></type> <name>Buckets</name> <init>= <expr><name>Data</name> <operator>+</operator> <name>BucketOffset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>NumBucketsAndEntries</name> <init>=
<expr><name>OnDiskTable</name><operator>::</operator><name>HashTable</name><operator>::</operator><call><name>readNumBucketsAndEntries</name><argument_list>(<argument><expr><name>Buckets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Table</name></type> <name>NewTable</name> <init>= <expr><name>new</name> <call><name>OnDiskTable</name><argument_list>(<argument><expr><name>File</name></expr></argument>, <argument><expr><name><name>NumBucketsAndEntries</name><operator>.</operator><name>first</name></name></expr></argument>,
<argument><expr><name><name>NumBucketsAndEntries</name><operator>.</operator><name>second</name></name></expr></argument>,
<argument><expr><name>Buckets</name></expr></argument>, <argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>InfoObj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Tables</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>NewTable</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<function><type><name>data_type</name></type> <name>find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>external_key_type</name> <modifier>&amp;</modifier></type><name>EKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>data_type</name></type> <name>Result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>PendingOverrides</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>removeOverriddenTables</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>Tables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Info</name><operator>::</operator><name>MaxTables</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>condense</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>internal_key_type</name></type> <name>Key</name> <init>= <expr><name>Info</name><operator>::</operator><call><name>GetInternalKey</name><argument_list>(<argument><expr><name>EKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>KeyHash</name> <init>= <expr><name>Info</name><operator>::</operator><call><name>ComputeHash</name><argument_list>(<argument><expr><name>Key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<decl><type><name>MergedTable</name> <modifier>*</modifier></type><name>M</name> <init>= <expr><call><name>getMergedTable</name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>It</name> <init>= <expr><call><name><name>M</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>Key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>It</name> <operator>!=</operator> <call><name><name>M</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Result</name> <operator>=</operator> <name><name>It</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>data_type_builder</name></type> <name>ResultBuilder</name><argument_list>(<argument><expr><name>Result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>auto</name> <operator>*</operator><name>ODT</name> <operator>:</operator> <call><name>tables</name><argument_list>()</argument_list></call></expr></init>)</control> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>HT</name> <operator>=</operator> <name><name>ODT</name><operator>-&gt;</operator><name>Table</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>It</name> <init>= <expr><call><name><name>HT</name><operator>.</operator><name>find_hashed</name></name><argument_list>(<argument><expr><name>Key</name></expr></argument>, <argument><expr><name>KeyHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>It</name> <operator>!=</operator> <call><name><name>HT</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>HT</name><operator>.</operator><name>getInfoObj</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ReadDataInto</name><argument_list>(<argument><expr><name>Key</name></expr></argument>, <argument><expr><call><name><name>It</name><operator>.</operator><name>getDataPtr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>It</name><operator>.</operator><name>getDataLen</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ResultBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>data_type</name></type> <name>findAll</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>data_type</name></type> <name>Result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>data_type_builder</name></type> <name>ResultBuilder</name><argument_list>(<argument><expr><name>Result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>PendingOverrides</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>removeOverriddenTables</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<decl><type><name>MergedTable</name> <modifier>*</modifier></type><name>M</name> <init>= <expr><call><name>getMergedTable</name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>KV</name> <operator>:</operator> <name><name>M</name><operator>-&gt;</operator><name>Data</name></name></expr></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>Info</name><operator>::</operator><call><name>MergeDataInto</name><argument_list>(<argument><expr><name><name>KV</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>ResultBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>auto</name> <operator>*</operator><name>ODT</name> <operator>:</operator> <call><name>tables</name><argument_list>()</argument_list></call></expr></init>)</control> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>HT</name> <operator>=</operator> <name><name>ODT</name><operator>-&gt;</operator><name>Table</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Info</name> <modifier>&amp;</modifier></type><name>InfoObj</name> <init>= <expr><call><name><name>HT</name><operator>.</operator><name>getInfoObj</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>I</name> <init>= <expr><call><name><name>HT</name><operator>.</operator><name>data_begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>E</name> <init>= <expr><call><name><name>HT</name><operator>.</operator><name>data_end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>LocalPtr</name> <operator>=</operator> <call><name><name>I</name><operator>.</operator><name>getItem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>auto</name></type> <name>L</name> <init>= <expr><call><name><name>InfoObj</name><operator>.</operator><name>ReadKeyDataLength</name></name><argument_list>(<argument><expr><name>LocalPtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>internal_key_type</name> <modifier>&amp;</modifier></type><name>Key</name> <init>= <expr><call><name><name>InfoObj</name><operator>.</operator><name>ReadKey</name></name><argument_list>(<argument><expr><name>LocalPtr</name></expr></argument>, <argument><expr><name><name>L</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>InfoObj</name><operator>.</operator><name>ReadDataInto</name></name><argument_list>(<argument><expr><name>Key</name></expr></argument>, <argument><expr><name>LocalPtr</name> <operator>+</operator> <name><name>L</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>ResultBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>
};


<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ReaderInfo</name></expr></argument>, <argument><expr><name>typename</name> <name>WriterInfo</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>MultiOnDiskHashTableGenerator</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>BaseTable</name> <init>= <expr><name><name>MultiOnDiskHashTable</name><argument_list type="generic">&lt;<argument><expr><name>ReaderInfo</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>Generator</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>OnDiskChainedHashTableGenerator</name><argument_list type="generic">&lt;<argument><expr><name>WriterInfo</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Generator</name></type> <name>Gen</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MultiOnDiskHashTableGenerator</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Gen</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>insert</name><argument_list>(<argument>typename WriterInfo::key_type_ref Key</argument>,
<argument>typename WriterInfo::data_type_ref Data</argument>, <argument>WriterInfo &amp;Info</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Gen</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>Key</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Info</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>emit</name><argument_list>(<argument>llvm::SmallVectorImpl&lt;char&gt; &amp;Out</argument>, <argument>WriterInfo &amp;Info</argument>,
<argument>const BaseTable *Base</argument>)</argument_list></macro> <block>{
<expr><name>using</name> <name>namespace</name> <name>llvm</name><operator>::</operator><name>support</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>raw_svector_ostream</name> <call><name>OutStream</name><argument_list>(<argument><expr><name>Out</name></expr></argument>)</argument_list></call></expr>;


<expr><block>{
<expr><name>endian</name><operator>::</operator><name>Writer</name> <call><name>Writer</name><argument_list>(<argument><expr><name>OutStream</name></expr></argument>, <argument><expr><name>little</name></expr></argument>)</argument_list></call></expr>;


<expr><name><name>Writer</name><operator>.</operator><name>write</name></name><operator>&lt;</operator><name>uint32_t</name><operator>&gt;</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Merged</name> <operator>=</operator> <ternary><condition><expr><name>Base</name></expr> ?</condition><then> <expr><call><name><name>Base</name><operator>-&gt;</operator><name>getMergedTable</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>Writer</name><operator>.</operator><name>write</name></name><operator>&lt;</operator><name>uint32_t</name><operator>&gt;</operator><operator>(</operator><call><name><name>Merged</name><operator>-&gt;</operator><name>Files</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>F</name> <range>: <expr><name><name>Merged</name><operator>-&gt;</operator><name>Files</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>EmitFileRef</name></name><argument_list>(<argument><expr><name>OutStream</name></expr></argument>, <argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>KV</name> <operator>:</operator> <name><name>Merged</name><operator>-&gt;</operator><name>Data</name></name></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Gen</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>KV</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>Info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Gen</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>KV</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><call><name><name>Info</name><operator>.</operator><name>ImportData</name></name><argument_list>(<argument><expr><name><name>KV</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
} else <block>{<block_content>
<expr_stmt><expr><name><name>Writer</name><operator>.</operator><name>write</name></name><operator>&lt;</operator><name>uint32_t</name><operator>&gt;</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}


uint32_t BucketOffset = Gen.Emit(OutStream</block></block><operator>,</operator> <expr_stmt><expr><name>Info</name></expr></expr_stmt></for>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>


<name>endian</name><operator>::</operator><call><name>write32le</name><argument_list>(<argument><expr><call><name><name>Out</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BucketOffset</name></expr></argument>)</argument_list></call></block></expr>;
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
