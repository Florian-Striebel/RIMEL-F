<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/openmp_wrappers/__clang_openmp_device_functions.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_OPENMP_DEVICE_FUNCTIONS_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_OPENMP_DEVICE_FUNCTIONS_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file is for OpenMP compilation only."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>begin</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name> <omp:clause><omp:name>match</omp:name><omp:argument_list>( <omp:argument><omp:expr>device = {arch(nvptx</omp:expr></omp:argument>, <omp:argument><omp:expr>nvptx64</omp:expr></omp:argument>)</omp:argument_list></omp:clause><omp:name>}</omp:name>, <omp:name>implementation</omp:name> <omp:name>=</omp:name> <omp:name>{</omp:name><omp:clause><omp:name>extension</omp:name><omp:argument_list>(<omp:argument><omp:expr>match_any</omp:expr></omp:argument>)</omp:argument_list></omp:clause><omp:name>}</omp:name><omp:name>)</omp:name></omp:directive></cpp:pragma>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA__</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__OPENMP_NVPTX__</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_libdevice_declares.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_device_functions.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__OPENMP_NVPTX__</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDA__</name></cpp:undef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>end</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name></omp:directive></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>begin</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name> <omp:clause><omp:name>match</omp:name><omp:argument_list>(<omp:argument><omp:expr>device = {arch(amdgcn</omp:expr></omp:argument>)</omp:argument_list></omp:clause><omp:name>}</omp:name><omp:name>)</omp:name></omp:directive></cpp:pragma>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__OPENMP_AMDGCN__</name></cpp:macro></cpp:define>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__device__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__device__</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_hip_libdevice_declares.h&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__device__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__OPENMP_AMDGCN__</name></cpp:undef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>end</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"OPENMP_NOEXCEPT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_NOEXCEPT</name></cpp:macro> <cpp:value>noexcept</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMP_NOEXCEPT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>inline</specifier> <name>void</name> <modifier>*</modifier><name>operator</name></type> <name>new</name><parameter_list>(<parameter><decl><type><name>__SIZE_TYPE__</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>::</operator><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name> <modifier>*</modifier><name>operator</name></type> <name>new</name>[]<parameter_list>(<parameter><decl><type><name>__SIZE_TYPE__</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><name>operator</name> <call><name>new</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name> <name>operator</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>OPENMP_NOEXCEPT <block>{<block_content> <expr_stmt><expr><operator>::</operator><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name> <name>operator</name></type> <name>delete</name>[]<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> OPENMP_NOEXCEPT <block>{<block_content>
<expr_stmt><expr><operator>::</operator><name>operator</name> <call><name>delete</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201402L</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>void</name> <name>operator</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>__SIZE_TYPE__</name></type> <name>size</name></decl></parameter>)</parameter_list>OPENMP_NOEXCEPT <block>{<block_content>
<expr_stmt><expr><operator>::</operator><name>operator</name> <call><name>delete</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>void</name> <name>operator</name></type> <name>delete</name>[]<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>__SIZE_TYPE__</name></type> <name>size</name></decl></parameter>)</parameter_list> OPENMP_NOEXCEPT <block>{<block_content>
<expr_stmt><expr><operator>::</operator><name>operator</name> <call><name>delete</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"OPENMP_NOEXCEPT"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
