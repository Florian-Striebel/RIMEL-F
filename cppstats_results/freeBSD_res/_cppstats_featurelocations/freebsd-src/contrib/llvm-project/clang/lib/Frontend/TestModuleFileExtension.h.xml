<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Frontend/TestModuleFileExtension.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_TESTMODULEFILEEXTENSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_TESTMODULEFILEEXTENSION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ModuleFileExtension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Bitstream/BitstreamReader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>TestModuleFileExtension</name>
<range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>RTTIExtends</name><argument_list type="generic">&lt;<argument><expr><name>TestModuleFileExtension</name></expr></argument>, <argument><expr><name>ModuleFileExtension</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>BlockName</name></expr>;
<expr><name>unsigned</name> <name>MajorVersion</name></expr>;
<expr><name>unsigned</name> <name>MinorVersion</name></expr>;
<expr><name>bool</name> <name>Hashed</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>UserInfo</name></expr>;

<expr><name>class</name> <name>Writer</name> <operator>:</operator> <name>public</name> <name>ModuleFileExtensionWriter</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Writer</name><argument_list>(<argument><expr><name>ModuleFileExtension</name> <operator>*</operator><name>Ext</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ModuleFileExtensionWriter</name><argument_list>(<argument>Ext</argument>)</argument_list></macro> <block>{ }</block>
<operator>~</operator><macro><name>Writer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>writeExtensionContents</name><argument_list>(<argument>Sema &amp;SemaRef</argument>,
<argument>llvm::BitstreamWriter &amp;Stream</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>Reader</name> <operator>:</operator> <name>public</name> <name>ModuleFileExtensionReader</name> <block>{
<expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <name>Stream</name></expr>;

<expr><name>public</name><operator>:</operator>
<operator>~</operator><macro><name>Reader</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><call><name>Reader</name><argument_list>(<argument><expr><name>ModuleFileExtension</name> <operator>*</operator><name>Ext</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <operator>&amp;</operator><name>InStream</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;

<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<macro><name>TestModuleFileExtension</name><argument_list>(<argument>StringRef BlockName</argument>, <argument>unsigned MajorVersion</argument>,
<argument>unsigned MinorVersion</argument>, <argument>bool Hashed</argument>,
<argument>StringRef UserInfo</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>BlockName</name><argument_list>(<argument><expr><name>BlockName</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>MajorVersion</name><argument_list>(<argument><expr><name>MajorVersion</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MinorVersion</name><argument_list>(<argument><expr><name>MinorVersion</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Hashed</name><argument_list>(<argument><expr><name>Hashed</name></expr></argument>)</argument_list></call></expr>, <macro><name>UserInfo</name><argument_list>(<argument>UserInfo</argument>)</argument_list></macro> <expr><block>{}</block>
<operator>~</operator><macro><name>TestModuleFileExtension</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>ModuleFileExtensionMetadata</name> <macro><name>getExtensionMetadata</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>hash_code</name> <macro><name>hashExtension</name><argument_list>(<argument>llvm::hash_code Code</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFileExtensionWriter</name></expr></argument>&gt;</argument_list></name>
<macro><name>createExtensionWriter</name><argument_list>(<argument>ASTWriter &amp;Writer</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFileExtensionReader</name></expr></argument>&gt;</argument_list></name>
<macro><name>createExtensionReader</name><argument_list>(<argument>const ModuleFileExtensionMetadata &amp;Metadata</argument>,
<argument>ASTReader &amp;Reader</argument>, <argument>serialization::ModuleFile &amp;Mod</argument>,
<argument>const llvm::BitstreamCursor &amp;Stream</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>str</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
