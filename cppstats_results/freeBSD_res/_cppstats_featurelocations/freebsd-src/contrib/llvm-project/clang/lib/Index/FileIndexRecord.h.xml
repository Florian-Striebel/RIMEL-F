<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Index/FileIndexRecord.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_INDEX_FILEINDEXRECORD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_INDEX_FILEINDEXRECORD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Index/DeclOccurrence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Index/IndexSymbol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>index</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>FileIndexRecord</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>FileID</name></type> <name>FID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsSystem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>bool</name></type> <name>IsSorted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DeclOccurrence</name></expr></argument>&gt;</argument_list></name> <name>Decls</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<macro><name>FileIndexRecord</name><argument_list>(<argument>FileID FID</argument>, <argument>bool IsSystem</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>FID</name><argument_list>(<argument><expr><name>FID</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsSystem</name><argument_list>(<argument>IsSystem</argument>)</argument_list></macro> <expr><block>{}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>DeclOccurrence</name></expr></argument>&gt;</argument_list></name> <macro><name>getDeclOccurrencesSortedByOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>FileID</name> <macro><name>getFileID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FID</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isSystem</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsSystem</name></expr>;</return> }</block></expr></expr_stmt>








<function_decl><type><name>void</name></type> <name>addDeclOccurence</name><parameter_list>(<parameter><decl><type><name>SymbolRoleSet</name></type> <name>Roles</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SymbolRelation</name></expr></argument>&gt;</argument_list></name></type> <name>Relations</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>addMacroOccurence</name><parameter_list>(<parameter><decl><type><name>SymbolRoleSet</name></type> <name>Roles</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MacroInfo</name> <modifier>*</modifier></type><name>MI</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>removeHeaderGuardMacros</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
