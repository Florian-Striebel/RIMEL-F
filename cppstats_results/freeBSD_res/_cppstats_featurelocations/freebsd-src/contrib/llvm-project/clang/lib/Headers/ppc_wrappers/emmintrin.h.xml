<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/ppc_wrappers/emmintrin.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_WARN_X86_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:if>


















<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please read comment above. Use -DNO_WARN_X86_INTRINSICS to disable this error."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EMMINTRIN_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMMINTRIN_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;altivec.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xmmintrin.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><name>__vector</name> <name>double</name></type> <name>__v2df</name>;</typedef>
<typedef>typedef <type><name>__vector</name> <name>long</name> <name>long</name></type> <name>__v2di</name>;</typedef>
<typedef>typedef <type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__v2du</name>;</typedef>
<typedef>typedef <type><name>__vector</name> <name>int</name></type> <name>__v4si</name>;</typedef>
<typedef>typedef <type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>__v4su</name>;</typedef>
<typedef>typedef <type><name>__vector</name> <name>short</name></type> <name>__v8hi</name>;</typedef>
<typedef>typedef <type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>__v8hu</name>;</typedef>
<typedef>typedef <type><name>__vector</name> <name>signed</name> <name>char</name></type> <name>__v16qi</name>;</typedef>
<typedef>typedef <type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>__v16qu</name>;</typedef>



<typedef>typedef <type><name>long</name> <name>long</name> <name>__m128i</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (16)<operator>,</operator> __may_alias__));</typedef>
<typedef>typedef <type><name>double</name> <name>__m128d</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (16)<operator>,</operator> __may_alias__));</typedef>


<typedef>typedef <type><name>long</name> <name>long</name> <name>__m128i_u</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (16)<operator>,</operator> __may_alias__<operator>,</operator> __aligned__ (1)));</typedef>
<typedef>typedef <type><name>double</name> <name>__m128d_u</name></type> <name>__attribute__</name> ((<name>__vector_size__</name> (16)<operator>,</operator> __may_alias__<operator>,</operator> __aligned__ (1)));</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_SHUFFLE2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; 1) | (y))</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_sd</name> <argument_list>(<argument><expr><name>double</name> <name>__F</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128d</argument>)</argument_list></macro><expr><block>{ <expr><name>__F</name></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set1_pd</name> <argument_list>(<argument><expr><name>double</name> <name>__F</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128d</argument>)</argument_list></macro><expr><block>{ <expr><name>__F</name></expr>, <expr><name>__F</name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_pd1</name> <argument_list>(<argument><expr><name>double</name> <name>__F</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set1_pd</name> <argument_list>(<argument><expr><name>__F</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_pd</name> <argument_list>(<argument><expr><name>double</name> <name>__W</name></expr></argument>, <argument><expr><name>double</name> <name>__X</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128d</argument>)</argument_list></macro><expr><block>{ <expr><name>__X</name></expr>, <expr><name>__W</name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setr_pd</name> <argument_list>(<argument><expr><name>double</name> <name>__W</name></expr></argument>, <argument><expr><name>double</name> <name>__X</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128d</argument>)</argument_list></macro><expr><block>{ <expr><name>__W</name></expr>, <expr><name>__X</name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_undefined_pd</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128d</name></type> <name>__Y</name> <init>= <expr><name>__Y</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__Y</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setzero_pd</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_move_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_load_pd</name> <argument_list>(<argument><expr><name>double</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>*</operator><operator>)</operator><name>__P</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loadu_pd</name> <argument_list>(<argument><expr><name>double</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_load1_pd</name> <argument_list>(<argument><expr><name>double</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><operator>*</operator><name>__P</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_load_sd</name> <argument_list>(<argument><expr><name>double</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_sd</name> <argument_list>(<argument><expr><operator>*</operator><name>__P</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_load_pd1</name> <argument_list>(<argument><expr><name>double</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_load1_pd</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loadr_pd</name> <argument_list>(<argument><expr><name>double</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>__tmp</name> <init>= <expr><call><name>_mm_load_pd</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_xxpermdi</name> <argument_list>(<argument><expr><name>__tmp</name></expr></argument>, <argument><expr><name>__tmp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_store_pd</name> <argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>*</operator><operator>)</operator><name>__P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_storeu_pd</name> <argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__m128d_u</name> <operator>*</operator><operator>)</operator><name>__P</name> <operator>=</operator> <name>__A</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_store_sd</name> <argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__P</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>double</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsd_f64</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_storel_pd</name> <argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_mm_store_sd</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_storeh_pd</name> <argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__P</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_store1_pd</name> <argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_mm_store_pd</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>, <argument><expr><call><name>vec_splat</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_store_pd1</name> <argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_mm_store1_pd</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_storer_pd</name> <argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_mm_store_pd</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>, <argument><expr><call><name>vec_xxpermdi</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi128_si64</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__v2di</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi128_si64x</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__v2di</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name> <operator>+</operator> <operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__A</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name> <operator>-</operator> <operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__A</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mul_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name> <operator>*</operator> <operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mul_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__A</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_div_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name> <operator>/</operator> <operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_div_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__A</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sqrt_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_sqrt</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sqrt_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_sqrt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>_mm_set1_pd</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_min_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_min</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_min_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_min</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_max_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_max</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_max_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_max</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpeq_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmplt_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmple_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_cmple</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpgt_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpge_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_cmpge</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>,<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpneq_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>temp</name> <init>= <expr><operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_nor</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnlt_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_cmpge</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnle_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpngt_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_cmple</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnge_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpord_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__v2du</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_cmpeq</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_cmpeq</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__v2du</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2du</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v2du</name></type> <name>double_exp_mask</name> <init>= <expr><block>{<expr><literal type="number">0x7ff0000000000000</literal></expr>, <expr><literal type="number">0x7ff0000000000000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>double_exp_mask</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>double_exp_mask</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_and</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpunord_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__v2du</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_nor</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_orc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__v2du</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_nor</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>vec_nor</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_or</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpeq_sd</name><argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmplt_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmplt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmple_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmple</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpgt_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpge_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmpge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpneq_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_nor</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnlt_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmpge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnle_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmpge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpngt_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmple</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnge_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator> <call><name>vec_cmplt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpord_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>__v2df</name><operator>)</operator><call><name>_mm_cmpord_pd</name> <argument_list>(<argument><expr><call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpunord_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_mm_cmpunord_pd</name> <argument_list>(<argument><expr><call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>_mm_setr_pd</name> <argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>








<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comieq_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comilt_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comile_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comigt_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comige_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comineq_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomieq_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomilt_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomile_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomigt_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomige_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomineq_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_epi64x</name> <argument_list>(<argument><expr><name>long</name> <name>long</name> <name>__q1</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>__q0</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v2di</name><operator>)</operator><block>{ <expr><name>__q0</name></expr>, <expr><name>__q1</name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_epi64</name> <argument_list>(<argument><expr><name>__m64</name> <name>__q1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__q0</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi64x</name> <argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>__q1</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>__q0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_epi32</name> <argument_list>(<argument><expr><name>int</name> <name>__q3</name></expr></argument>, <argument><expr><name>int</name> <name>__q2</name></expr></argument>, <argument><expr><name>int</name> <name>__q1</name></expr></argument>, <argument><expr><name>int</name> <name>__q0</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v4si</name><operator>)</operator><block>{ <expr><name>__q0</name></expr>, <expr><name>__q1</name></expr>, <expr><name>__q2</name></expr>, <expr><name>__q3</name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_epi16</name> <argument_list>(<argument><expr><name>short</name> <name>__q7</name></expr></argument>, <argument><expr><name>short</name> <name>__q6</name></expr></argument>, <argument><expr><name>short</name> <name>__q5</name></expr></argument>, <argument><expr><name>short</name> <name>__q4</name></expr></argument>,
<argument><expr><name>short</name> <name>__q3</name></expr></argument>, <argument><expr><name>short</name> <name>__q2</name></expr></argument>, <argument><expr><name>short</name> <name>__q1</name></expr></argument>, <argument><expr><name>short</name> <name>__q0</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><block>{
<expr><name>__q0</name></expr>, <expr><name>__q1</name></expr>, <expr><name>__q2</name></expr>, <expr><name>__q3</name></expr>, <expr><name>__q4</name></expr>, <expr><name>__q5</name></expr>, <expr><name>__q6</name></expr>, <expr><name>__q7</name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_epi8</name> <argument_list>(<argument><expr><name>char</name> <name>__q15</name></expr></argument>, <argument><expr><name>char</name> <name>__q14</name></expr></argument>, <argument><expr><name>char</name> <name>__q13</name></expr></argument>, <argument><expr><name>char</name> <name>__q12</name></expr></argument>,
<argument><expr><name>char</name> <name>__q11</name></expr></argument>, <argument><expr><name>char</name> <name>__q10</name></expr></argument>, <argument><expr><name>char</name> <name>__q09</name></expr></argument>, <argument><expr><name>char</name> <name>__q08</name></expr></argument>,
<argument><expr><name>char</name> <name>__q07</name></expr></argument>, <argument><expr><name>char</name> <name>__q06</name></expr></argument>, <argument><expr><name>char</name> <name>__q05</name></expr></argument>, <argument><expr><name>char</name> <name>__q04</name></expr></argument>,
<argument><expr><name>char</name> <name>__q03</name></expr></argument>, <argument><expr><name>char</name> <name>__q02</name></expr></argument>, <argument><expr><name>char</name> <name>__q01</name></expr></argument>, <argument><expr><name>char</name> <name>__q00</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><block>{
<expr><name>__q00</name></expr>, <expr><name>__q01</name></expr>, <expr><name>__q02</name></expr>, <expr><name>__q03</name></expr>, <expr><name>__q04</name></expr>, <expr><name>__q05</name></expr>, <expr><name>__q06</name></expr>, <expr><name>__q07</name></expr>,
<expr><name>__q08</name></expr>, <expr><name>__q09</name></expr>, <expr><name>__q10</name></expr>, <expr><name>__q11</name></expr>, <expr><name>__q12</name></expr>, <expr><name>__q13</name></expr>, <expr><name>__q14</name></expr>, <expr><name>__q15</name></expr>
}</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set1_epi64x</name> <argument_list>(<argument><expr><name>long</name> <name>long</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi64x</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set1_epi64</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi64</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set1_epi32</name> <argument_list>(<argument><expr><name>int</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi32</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set1_epi16</name> <argument_list>(<argument><expr><name>short</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi16</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set1_epi8</name> <argument_list>(<argument><expr><name>char</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi8</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>,
<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setr_epi64</name> <argument_list>(<argument><expr><name>__m64</name> <name>__q0</name></expr></argument>, <argument><expr><name>__m64</name> <name>__q1</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi64</name> <argument_list>(<argument><expr><name>__q1</name></expr></argument>, <argument><expr><name>__q0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setr_epi32</name> <argument_list>(<argument><expr><name>int</name> <name>__q0</name></expr></argument>, <argument><expr><name>int</name> <name>__q1</name></expr></argument>, <argument><expr><name>int</name> <name>__q2</name></expr></argument>, <argument><expr><name>int</name> <name>__q3</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi32</name> <argument_list>(<argument><expr><name>__q3</name></expr></argument>, <argument><expr><name>__q2</name></expr></argument>, <argument><expr><name>__q1</name></expr></argument>, <argument><expr><name>__q0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setr_epi16</name> <argument_list>(<argument><expr><name>short</name> <name>__q0</name></expr></argument>, <argument><expr><name>short</name> <name>__q1</name></expr></argument>, <argument><expr><name>short</name> <name>__q2</name></expr></argument>, <argument><expr><name>short</name> <name>__q3</name></expr></argument>,
<argument><expr><name>short</name> <name>__q4</name></expr></argument>, <argument><expr><name>short</name> <name>__q5</name></expr></argument>, <argument><expr><name>short</name> <name>__q6</name></expr></argument>, <argument><expr><name>short</name> <name>__q7</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi16</name> <argument_list>(<argument><expr><name>__q7</name></expr></argument>, <argument><expr><name>__q6</name></expr></argument>, <argument><expr><name>__q5</name></expr></argument>, <argument><expr><name>__q4</name></expr></argument>, <argument><expr><name>__q3</name></expr></argument>, <argument><expr><name>__q2</name></expr></argument>, <argument><expr><name>__q1</name></expr></argument>, <argument><expr><name>__q0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setr_epi8</name> <argument_list>(<argument><expr><name>char</name> <name>__q00</name></expr></argument>, <argument><expr><name>char</name> <name>__q01</name></expr></argument>, <argument><expr><name>char</name> <name>__q02</name></expr></argument>, <argument><expr><name>char</name> <name>__q03</name></expr></argument>,
<argument><expr><name>char</name> <name>__q04</name></expr></argument>, <argument><expr><name>char</name> <name>__q05</name></expr></argument>, <argument><expr><name>char</name> <name>__q06</name></expr></argument>, <argument><expr><name>char</name> <name>__q07</name></expr></argument>,
<argument><expr><name>char</name> <name>__q08</name></expr></argument>, <argument><expr><name>char</name> <name>__q09</name></expr></argument>, <argument><expr><name>char</name> <name>__q10</name></expr></argument>, <argument><expr><name>char</name> <name>__q11</name></expr></argument>,
<argument><expr><name>char</name> <name>__q12</name></expr></argument>, <argument><expr><name>char</name> <name>__q13</name></expr></argument>, <argument><expr><name>char</name> <name>__q14</name></expr></argument>, <argument><expr><name>char</name> <name>__q15</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi8</name> <argument_list>(<argument><expr><name>__q15</name></expr></argument>, <argument><expr><name>__q14</name></expr></argument>, <argument><expr><name>__q13</name></expr></argument>, <argument><expr><name>__q12</name></expr></argument>, <argument><expr><name>__q11</name></expr></argument>, <argument><expr><name>__q10</name></expr></argument>, <argument><expr><name>__q09</name></expr></argument>, <argument><expr><name>__q08</name></expr></argument>,
<argument><expr><name>__q07</name></expr></argument>, <argument><expr><name>__q06</name></expr></argument>, <argument><expr><name>__q05</name></expr></argument>, <argument><expr><name>__q04</name></expr></argument>, <argument><expr><name>__q03</name></expr></argument>, <argument><expr><name>__q02</name></expr></argument>, <argument><expr><name>__q01</name></expr></argument>, <argument><expr><name>__q00</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_load_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><name>__P</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loadu_si128</name> <argument_list>(<argument><expr><name>__m128i_u</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>signed</name> <name>int</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>__P</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loadl_epi64</name> <argument_list>(<argument><expr><name>__m128i_u</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi64</name> <argument_list>(<argument><expr><operator>(</operator><name>__m64</name><operator>)</operator><literal type="number">0LL</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>__m64</name> <operator>*</operator><operator>)</operator><name>__P</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_store_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec_st</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>*</operator><operator>)</operator><name>__P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_storeu_si128</name> <argument_list>(<argument><expr><name>__m128i_u</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__P</name> <operator>=</operator> <name>__B</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_storel_epi64</name> <argument_list>(<argument><expr><name>__m128i_u</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><name>__P</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__v2di</name><operator>)</operator><name>__B</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_movepi64_pi64</name> <argument_list>(<argument><expr><name>__m128i_u</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2di</name><operator>)</operator><name>__B</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_movpi64_epi64</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi64</name> <argument_list>(<argument><expr><operator>(</operator><name>__m64</name><operator>)</operator><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_move_epi64</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi64</name> <argument_list>(<argument><expr><operator>(</operator><name>__m64</name><operator>)</operator><literal type="number">0LL</literal></expr></argument>, <argument><expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_undefined_si128</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128i</name></type> <name>__Y</name> <init>= <expr><name>__Y</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__Y</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setzero_si128</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v4si</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtepi32_pd</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2di</name></type> <name>val</name></decl>;</decl_stmt>


<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>__v2di</name><operator>)</operator><call><name>vec_unpackh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator><call><name>vec_ctf</name> <argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtepi32_ps</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_ctf</name><argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtpd_epi32</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>rounded</name> <init>= <expr><call><name>vec_rint</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4si</name></type> <name>vzero</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<asm>__asm__(
"xvcvdpsxws %x0,%x1"
: "=wa" (temp)
: "wa" (rounded)
: );</asm>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>vec_mergeo</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__v4si</name><operator>)</operator> <call><name>vec_vpkudum</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>temp</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>pkperm</name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>,
<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__v4si</name><operator>)</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>vzero</name></expr></argument>, <argument><expr><name>pkperm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtpd_pi32</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128i</name></type> <name>result</name> <init>= <expr><call><name>_mm_cvtpd_epi32</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtpd_ps</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4si</name></type> <name>vzero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<asm>__asm__(
"xvcvdpsp %x0,%x1"
: "=wa" (temp)
: "wa" (__A)
: );</asm>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>vec_mergeo</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_vpkudum</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>temp</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>pkperm</name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>,
<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>vzero</name></expr></argument>, <argument><expr><name>pkperm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvttpd_epi32</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4si</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4si</name></type> <name>vzero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<asm>__asm__(
"xvcvdpsxws %x0,%x1"
: "=wa" (temp)
: "wa" (__A)
: );</asm>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>vec_mergeo</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__v4si</name><operator>)</operator> <call><name>vec_vpkudum</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>temp</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>pkperm</name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>,
<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__v4si</name><operator>)</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>vzero</name></expr></argument>, <argument><expr><name>pkperm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvttpd_pi32</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128i</name></type> <name>result</name> <init>= <expr><call><name>_mm_cvttpd_epi32</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi128_si32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__v4si</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtpi32_pd</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4si</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2di</name></type> <name>tmp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2df</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>__v4si</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>(</operator><name>__v2di</name><operator>)</operator><call><name>vec_unpackl</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_ctf</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator> <name>tmp2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtps_epi32</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>rounded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rounded</name> <operator>=</operator> <call><name>vec_rint</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_cts</name> <argument_list>(<argument><expr><name>rounded</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvttps_epi32</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4si</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_cts</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtps_pd</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>vec_doubleh</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>vec_doubleh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2df</name></type> <name>result</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>__builtin_vsx_xxsldwi</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>__builtin_vsx_xxsldwi</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>vec_vmrghw</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<asm>__asm__(
" xvcvspdp %x0,%x1"
: "=wa" (result)
: "wa" (temp)
: );</asm>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <name>result</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsd_si32</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>rounded</name> <init>= <expr><call><name>vec_rint</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>rounded</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsd_si64</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>rounded</name> <init>= <expr><call><name>vec_rint</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>result</name> <init>= <expr><operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator> <name>rounded</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsd_si64x</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtsd_si64</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvttsd_si32</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvttsd_si64</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>result</name> <init>= <expr><operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvttsd_si64x</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvttsd_si64</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsd_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>temp_s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__v2df</name></type> <name>temp_b</name> <init>= <expr><call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>__builtin_vsx_xxsldwi</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>__asm__(
"xscvdpsp %x0,%x1"
: "=wa" (temp_s)
: "wa" (temp_b)
: );</asm>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>__builtin_vsx_xxsldwi</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>temp_s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>result</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi32_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>db</name> <init>= <expr><name>__B</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi64_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>db</name> <init>= <expr><name>__B</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi64x_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtsi64_sd</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtss_sd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>__v4sf</name></type> <name>temp</name> <init>= <expr><call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2df</name></type> <name>res</name></decl>;</decl_stmt>

<asm>__asm__(
"xscvspdp %x0,%x1"
: "=wa" (res)
: "wa" (temp)
: );</asm>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>vec_mergel</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__v2df</name></type> <name>res</name> <init>= <expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>res</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name><operator>)</operator> <index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <name>res</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_shuffle_pd</name><argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__mask</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>double</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>litmsk</name> <init>= <expr><name>__mask</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>litmsk</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">6</literal></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>litmsk</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_xxpermdi</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>litmsk</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_xxpermdi</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if type="elseif">else if <condition>(<expr><name>litmsk</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_xxpermdi</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>litmsk</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_xxpermdi</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_mergel</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpackhi_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>vec_mergel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpacklo_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loadh_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>double</name> <specifier>const</specifier> <operator>*</operator><name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>__B</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loadl_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>double</name> <specifier>const</specifier> <operator>*</operator><name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2df</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>__B</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_movemask_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>perm_mask</name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x80800040</literal></expr>, <expr><literal type="number">0x80808080</literal></expr>, <expr><literal type="number">0x80808080</literal></expr>, <expr><literal type="number">0x80808080</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x80808080</literal></expr>, <expr><literal type="number">0x80808080</literal></expr>, <expr><literal type="number">0x80808080</literal></expr>, <expr><literal type="number">0x80804000</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator>
<call><name>vec_vbpermq</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <name>__A</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <name>perm_mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_packs_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_packs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_packs_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_packs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_packus_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_packsu</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpackhi_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mergel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpackhi_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mergel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpackhi_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mergel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpackhi_epi64</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mergel</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>__A</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpacklo_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpacklo_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpacklo_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpacklo_epi64</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>__A</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name> <operator>+</operator> <operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__A</name> <operator>+</operator> <operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v4su</name><operator>)</operator><name>__A</name> <operator>+</operator> <operator>(</operator><name>__v4su</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_epi64</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator><name>__A</name> <operator>+</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_adds_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_adds</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_adds_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_adds</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_adds_epu8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_adds</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_adds_epu16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_adds</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name> <operator>-</operator> <operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__A</name> <operator>-</operator> <operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v4su</name><operator>)</operator><name>__A</name> <operator>-</operator> <operator>(</operator><name>__v4su</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_epi64</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator><name>__A</name> <operator>-</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_subs_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_subs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_subs_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_subs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_subs_epu8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_subs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_subs_epu16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_subs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_madd_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>zero</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_vmsumshm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mulhi_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>w0</name></decl>, <decl><type ref="prev"/><name>w1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>xform1</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>w0</name> <operator>=</operator> <call><name>vec_vmulesh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w1</name> <operator>=</operator> <call><name>vec_vmulosh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>xform1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mullo_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__A</name> <operator>*</operator> <operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mul_su32</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name> <init>= <expr><name>__A</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name> <init>= <expr><name>__B</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>__m64</name><operator>)</operator><name>a</name> <operator>*</operator> <operator>(</operator><name>__m64</name><operator>)</operator><name>b</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mul_epu32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></cpp:if>
<decl_stmt><decl><type><name>__v2du</name></type> <name>result</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<asm>__asm__(
"vmulouw %0,%1,%2"
: "=v" (result)
: "v" (__A), "v" (__B)
: );</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<asm>__asm__(
"vmuleuw %0,%1,%2"
: "=v" (result)
: "v" (__A), "v" (__B)
: );</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mule</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_slli_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hu</name></type> <name>lshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>__B</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_constant_p</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lshift</name> <operator>=</operator> <operator>(</operator><name>__v8hu</name><operator>)</operator> <call><name>vec_splat_s16</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>lshift</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>lshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_slli_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4su</name></type> <name>lshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>__B</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_constant_p</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__B</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lshift</name> <operator>=</operator> <operator>(</operator><name>__v4su</name><operator>)</operator> <call><name>vec_splat_s32</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>lshift</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>lshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_slli_epi64</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2du</name></type> <name>lshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2di</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>__B</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_constant_p</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__B</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lshift</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <call><name>vec_splat_s32</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>lshift</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>lshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srai_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hu</name></type> <name>rshift</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_constant_p</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <operator>(</operator><name>__v8hu</name><operator>)</operator> <call><name>vec_splat_s16</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sra</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srai_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4su</name></type> <name>rshift</name> <init>= <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_constant_p</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <operator>(</operator><name>__v4su</name><operator>)</operator> <call><name>vec_splat_s32</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <operator>(</operator><name>__v4su</name><operator>)</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sra</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_bslli_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v16qu</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__N</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sld</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>__N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>zeros</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_bsrli_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v16qu</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__N</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_constant_p</name><argument_list>(<argument><expr><name>__N</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sld</name> <argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__N</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>__v16qu</name></type> <name>shift</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__N</name><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sro</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_slo</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>zeros</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srli_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_bsrli_si128</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__N</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_slli_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>_imm5</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v16qu</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>_imm5</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sld</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>_imm5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sld</name> <argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>_imm5</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>zeros</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>

<name>_mm_srli_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hu</name></type> <name>rshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_constant_p</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <operator>(</operator><name>__v8hu</name><operator>)</operator> <call><name>vec_splat_s16</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srli_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4su</name></type> <name>rshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_constant_p</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <operator>(</operator><name>__v4su</name><operator>)</operator> <call><name>vec_splat_s32</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <operator>(</operator><name>__v4su</name><operator>)</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srli_epi64</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2du</name></type> <name>rshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2di</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_constant_p</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__B</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <call><name>vec_splat_s32</name><argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sll_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hu</name></type> <name>lshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>short</name></type> <name>shmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v8hu</name></type> <name>shmax</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hu</name></type> <name>result</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>lshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>lshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>shmask</name> <operator>=</operator> <call><name>vec_cmple</name> <argument_list>(<argument><expr><name>lshift</name></expr></argument>, <argument><expr><name>shmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>lshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator> <name>shmask</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>shmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sll_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4su</name></type> <name>lshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>int</name></type> <name>shmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4su</name></type> <name>shmax</name> <init>= <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4su</name></type> <name>result</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>lshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>lshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>shmask</name> <operator>=</operator> <call><name>vec_cmplt</name> <argument_list>(<argument><expr><name>lshift</name></expr></argument>, <argument><expr><name>shmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>lshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>shmask</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>shmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sll_epi64</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2du</name></type> <name>lshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>long</name> <name>long</name></type> <name>shmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v2du</name></type> <name>shmax</name> <init>= <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2du</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2du</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shmask</name> <operator>=</operator> <call><name>vec_cmplt</name> <argument_list>(<argument><expr><name>lshift</name></expr></argument>, <argument><expr><name>shmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2du</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>lshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>shmask</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>result</name></expr></argument>, <argument><expr><name>shmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sra_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v8hu</name></type> <name>rshmax</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hu</name></type> <name>rshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>result</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_min</name> <argument_list>(<argument><expr><name>rshift</name></expr></argument>, <argument><expr><name>rshmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sra</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sra_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4su</name></type> <name>rshmax</name> <init>= <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4su</name></type> <name>rshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>result</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_min</name> <argument_list>(<argument><expr><name>rshift</name></expr></argument>, <argument><expr><name>rshmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sra</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srl_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hu</name></type> <name>rshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>short</name></type> <name>shmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v8hu</name></type> <name>shmax</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hu</name></type> <name>result</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>shmask</name> <operator>=</operator> <call><name>vec_cmple</name> <argument_list>(<argument><expr><name>rshift</name></expr></argument>, <argument><expr><name>shmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator> <name>shmask</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>shmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srl_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4su</name></type> <name>rshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>int</name></type> <name>shmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4su</name></type> <name>shmax</name> <init>= <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4su</name></type> <name>result</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>shmask</name> <operator>=</operator> <call><name>vec_cmplt</name> <argument_list>(<argument><expr><name>rshift</name></expr></argument>, <argument><expr><name>shmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>shmask</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>shmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srl_epi64</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2du</name></type> <name>rshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>long</name> <name>long</name></type> <name>shmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v2du</name></type> <name>shmax</name> <init>= <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2du</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rshift</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2du</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shmask</name> <operator>=</operator> <call><name>vec_cmplt</name> <argument_list>(<argument><expr><name>rshift</name></expr></argument>, <argument><expr><name>shmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2du</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>rshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>shmask</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>result</name></expr></argument>, <argument><expr><name>shmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_and_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_and</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_andnot_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_andc</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_or_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_or</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_xor_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_xor</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_and_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>vec_and</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_andnot_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>vec_andc</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_or_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>vec_or</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_xor_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>vec_xor</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2di</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpeq_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpeq_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpeq_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmplt_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmplt_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmplt_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpgt_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpgt_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpgt_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_extract_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <specifier>const</specifier> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><name>__N</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_insert_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <specifier>const</specifier> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__D</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name> <index>[<expr><operator>(</operator><name>__N</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>__D</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_max_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_max</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_max_epu8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_max</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_min_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_min</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_min_epu8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_min</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_movemask_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>perm_mask</name> <init>=
<expr><block>{
<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator>
<call><name>vec_vbpermq</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <name>__A</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <name>perm_mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mulhi_epu16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4su</name></type> <name>w0</name></decl>, <decl><type ref="prev"/><name>w1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qu</name></type> <name>xform1</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>w0</name> <operator>=</operator> <call><name>vec_vmuleuh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w1</name> <operator>=</operator> <call><name>vec_vmulouh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>xform1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_shufflehi_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__mask</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_98</name> <init>= <expr><name>__mask</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_BA</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_DC</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_FE</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>permute_selectors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x0908</literal></expr>, <expr><literal type="number">0x0B0A</literal></expr>, <expr><literal type="number">0x0D0C</literal></expr>, <expr><literal type="number">0x0F0E</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x0809</literal></expr>, <expr><literal type="number">0x0A0B</literal></expr>, <expr><literal type="number">0x0C0D</literal></expr>, <expr><literal type="number">0x0E0F</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2du</name></type> <name>pmask</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="number">0x1716151413121110UL</literal></expr>, <expr><literal type="number">0UL</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content> <expr><literal type="number">0x1011121314151617UL</literal></expr><operator>,</operator> <expr><literal type="number">0UL</literal></expr></block_content>}</block><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2du</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_98</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_BA</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_DC</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_FE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pmask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>as_m64</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><name>__A</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>pmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>r</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_shufflelo_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__mask</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_10</name> <init>= <expr><name>__mask</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_32</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_54</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_76</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>permute_selectors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x0100</literal></expr>, <expr><literal type="number">0x0302</literal></expr>, <expr><literal type="number">0x0504</literal></expr>, <expr><literal type="number">0x0706</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x0001</literal></expr>, <expr><literal type="number">0x0203</literal></expr>, <expr><literal type="number">0x0405</literal></expr>, <expr><literal type="number">0x0607</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2du</name></type> <name>pmask</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="number">0UL</literal></expr>, <expr><literal type="number">0x1f1e1d1c1b1a1918UL</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content> <expr><literal type="number">0UL</literal></expr><operator>,</operator> <expr><literal type="number">0x18191a1b1c1d1e1fUL</literal></expr></block_content>}</block><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2du</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_10</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_32</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_54</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_76</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pmask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>as_m64</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator><name>__A</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>pmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>r</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_shuffle_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__mask</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_10</name> <init>= <expr><name>__mask</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_32</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_54</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_76</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>permute_selectors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x03020100</literal></expr>, <expr><literal type="number">0x07060504</literal></expr>, <expr><literal type="number">0x0B0A0908</literal></expr>, <expr><literal type="number">0x0F0E0D0C</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x00010203</literal></expr>, <expr><literal type="number">0x04050607</literal></expr>, <expr><literal type="number">0x08090A0B</literal></expr>, <expr><literal type="number">0x0C0D0E0F</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4su</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_10</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_32</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_54</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x10101010</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_76</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x10101010</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_maskmoveu_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>__C</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2du</name></type> <name>hibit</name> <init>= <expr><block>{ <expr><literal type="number">0x7f7f7f7f7f7f7f7fUL</literal></expr>, <expr><literal type="number">0x7f7f7f7f7f7f7f7fUL</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qu</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>__m128i_u</name><operator>*</operator><operator>)</operator><name>__C</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>__v16qu</name><operator>)</operator><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><name>__v16qu</name><operator>)</operator><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>hibit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_mm_storeu_si128</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>__m128i</name><operator>)</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_avg_epu8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_avg</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_avg_epu16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_avg</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hu</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sad_epu8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v16qu</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qu</name></type> <name>vmin</name></decl>, <decl><type ref="prev"/><name>vmax</name></decl>, <decl><type ref="prev"/><name>vabsdiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>vsum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4su</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__B</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vmin</name> <operator>=</operator> <call><name>vec_min</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <call><name>vec_max</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vabsdiff</name> <operator>=</operator> <call><name>vec_sub</name> <argument_list>(<argument><expr><name>vmax</name></expr></argument>, <argument><expr><name>vmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator> <call><name>vec_sum4s</name> <argument_list>(<argument><expr><name>vabsdiff</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sum2s</name> <argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sld</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vec_sld</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_stream_si32</name> <argument_list>(<argument><expr><name>int</name> <operator>*</operator><name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>

<asm>__asm__ (
"dcbtstt 0,%0"
:
: "b" (__A)
: "memory"
);</asm>
<expr_stmt><expr><operator>*</operator><name>__A</name> <operator>=</operator> <name>__B</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_stream_si64</name> <argument_list>(<argument><expr><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><name>__A</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>

<asm>__asm__ (
" dcbtstt 0,%0"
:
: "b" (__A)
: "memory"
);</asm>
<expr_stmt><expr><operator>*</operator><name>__A</name> <operator>=</operator> <name>__B</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_stream_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <operator>*</operator><name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>

<asm>__asm__ (
"dcbtstt 0,%0"
:
: "b" (__A)
: "memory"
);</asm>
<expr_stmt><expr><operator>*</operator><name>__A</name> <operator>=</operator> <name>__B</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_stream_pd</name> <argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>__A</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>

<asm>__asm__ (
"dcbtstt 0,%0"
:
: "b" (__A)
: "memory"
);</asm>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__m128d</name><operator>*</operator><operator>)</operator><name>__A</name> <operator>=</operator> <name>__B</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_clflush</name> <argument_list>(<argument><expr><name>void</name> <specifier>const</specifier> <operator>*</operator><name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>

<asm>__asm__ (
"dcbf 0,%0"
:
: "b" (__A)
: "memory"
);</asm>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_lfence</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><call><name>__atomic_thread_fence</name> <argument_list>(<argument><expr><name>__ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mfence</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><call><name>__atomic_thread_fence</name> <argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi32_si128</name> <argument_list>(<argument><expr><name>int</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_epi32</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi64_si128</name> <argument_list>(<argument><expr><name>long</name> <name>long</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v2di</name><operator>)</operator><block>{ <expr><name>__A</name></expr>, <expr><literal type="number">0LL</literal></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi64x_si128</name> <argument_list>(<argument><expr><name>long</name> <name>long</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128i</argument>)</argument_list></macro><expr><operator>(</operator><name>__v2di</name><operator>)</operator><block>{ <expr><name>__A</name></expr>, <expr><literal type="number">0LL</literal></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_castpd_ps</name><argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <name>__A</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_castpd_si128</name><argument_list>(<argument><expr><name>__m128d</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>__A</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_castps_pd</name><argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <name>__A</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_castps_si128</name><argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>__A</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_castsi128_ps</name><argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <name>__A</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_castsi128_pd</name><argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <name>__A</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:empty>#include_next &lt;emmintrin.h&gt;</cpp:empty>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
