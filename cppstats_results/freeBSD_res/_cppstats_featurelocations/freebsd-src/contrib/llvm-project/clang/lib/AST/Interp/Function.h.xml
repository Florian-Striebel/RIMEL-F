<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/Function.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_FUNCTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_FUNCTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Pointer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Source.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ByteCodeEmitter</name></decl>;</decl_stmt>
<enum_decl>enum <name>PrimType</name> : <type><name>uint32_t</name></type>;</enum_decl>




<decl_stmt><decl><type><name>class</name></type> <name>Scope</name> <block>{<block_content>
<label><name>public</name>:</label>

<struct>struct <name>Local</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Descriptor</name> <modifier>*</modifier></type><name>Desc</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>LocalVectorTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Local</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Scope</name><argument_list>(<argument><expr><name>LocalVectorTy</name> <operator>&amp;&amp;</operator><name>Descriptors</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Descriptors</name><argument_list>(<argument>std::move(Descriptors)</argument>)</argument_list></macro> <block>{}</block>

<name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>LocalVectorTy</name><operator>::</operator><name>iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>locals</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name><name>Descriptors</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Descriptors</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>LocalVectorTy</name></type> <name>Descriptors</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>Function</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>ParamDescriptor</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>PrimType</name></expr></argument>, <argument><expr><name>Descriptor</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getFrameSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FrameSize</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getArgSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ArgSize</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>CodePtr</name> <macro><name>getCodeBegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>CodePtr</name> <macro><name>getCodeEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><macro><name>getDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>F</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Loc</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>ParamDescriptor</name></type> <name>getParamDescriptor</name><argument_list>(<argument><expr><name>unsigned</name> <name>Offset</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasRVO</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ParamTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>Params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Scope</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>scopes</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name><name>Scopes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Scopes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>arg_reverse_iterator</name> <init>= <expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>PrimType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>reverse_iterator</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>arg_reverse_iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>args_reverse</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name><name>ParamTypes</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ParamTypes</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>Scope</name> <modifier>&amp;</modifier></type><name>getScope</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Idx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>Scopes</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>


<decl_stmt><decl><type><name>SourceInfo</name></type> <name>getSource</name><argument_list>(<argument><expr><name>CodePtr</name> <name>PC</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isConstexpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsValid</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isVirtual</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isConstructor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>

<macro><name>Function</name><argument_list>(<argument>Program &amp;P</argument>, <argument>const FunctionDecl *F</argument>, <argument>unsigned ArgSize</argument>,
<argument>llvm::SmallVector&lt;PrimType</argument>, <argument><literal type="number">8</literal>&gt; &amp;&amp;ParamTypes</argument>,
<argument>llvm::DenseMap&lt;unsigned</argument>, <argument>ParamDescriptor&gt; &amp;&amp;Params</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>setCode</name><argument_list>(<argument><expr><name>unsigned</name> <name>NewFrameSize</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>NewCode</name></expr></argument>, <argument><expr><name>SourceMap</name> <operator>&amp;&amp;</operator><name>NewSrcMap</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Scope</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>NewScopes</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>FrameSize</name> <operator>=</operator> <name>NewFrameSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Code</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>NewCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SrcMap</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>NewSrcMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Scopes</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>NewScopes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IsValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ByteCodeEmitter</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Program</name> <modifier>&amp;</modifier></type><name>P</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>F</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>FrameSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ArgSize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <name>Code</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SourceMap</name></type> <name>SrcMap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Scope</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>Scopes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>PrimType</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>ParamTypes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>ParamDescriptor</name></expr></argument>&gt;</argument_list></name> <name>Params</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsValid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
