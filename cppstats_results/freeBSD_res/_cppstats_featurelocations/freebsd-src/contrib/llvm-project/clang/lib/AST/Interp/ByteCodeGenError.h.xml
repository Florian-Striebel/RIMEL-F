<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_BYTECODEGENERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_BYTECODEGENERROR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Stmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>ByteCodeGenError</name></name></type> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>ErrorInfo</name><argument_list type="generic">&lt;<argument><expr><name>ByteCodeGenError</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>ByteCodeGenError</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Loc</name><argument_list>(<argument>Loc</argument>)</argument_list></macro> <block>{}</block>
<call><name>ByteCodeGenError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ByteCodeGenError</name><argument_list>(<argument>S-&gt;getBeginLoc()</argument>)</argument_list></macro> <block>{}</block>
<call><name>ByteCodeGenError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ByteCodeGenError</name><argument_list>(<argument>D-&gt;getBeginLoc()</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>log</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"unimplemented feature"</literal></expr>; }</block>

<specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><macro><name>getLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Loc</name></expr>;</return> }</block>

<specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><name>private</name><operator>:</operator>

<name>SourceLocation</name> <name>Loc</name></expr>;


<expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>convertToErrorCode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
