<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/ppc_wrappers/pmmintrin.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_WARN_X86_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:if>





















<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please read comment above. Use -DNO_WARN_X86_INTRINSICS to disable this warning."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PMMINTRIN_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMMINTRIN_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emmintrin.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_addsub_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__X</name></expr></argument>, <argument><expr><name>__m128</name> <name>__Y</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4sf</name></type> <name>even_n0</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><operator>-</operator><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>even_neg_Y</name> <init>= <expr><call><name>vec_xor</name><argument_list>(<argument><expr><name>__Y</name></expr></argument>, <argument><expr><name>even_n0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>even_neg_Y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_addsub_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__X</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__Y</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v2df</name></type> <name>even_n0</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v2df</name></type> <name>even_neg_Y</name> <init>= <expr><call><name>vec_xor</name><argument_list>(<argument><expr><name>__Y</name></expr></argument>, <argument><expr><name>even_n0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>even_neg_Y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hadd_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__X</name></expr></argument>, <argument><expr><name>__m128</name> <name>__Y</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>xform2</name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>xform1</name> <init>= <expr><block>{
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__X</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__Y</name></expr></argument>, <argument><expr><name>xform2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__X</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__Y</name></expr></argument>, <argument><expr><name>xform1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hsub_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__X</name></expr></argument>, <argument><expr><name>__m128</name> <name>__Y</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>xform2</name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>xform1</name> <init>= <expr><block>{
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <call><name>vec_sub</name> <argument_list>(<argument><expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__X</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__Y</name></expr></argument>, <argument><expr><name>xform2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__X</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__Y</name></expr></argument>, <argument><expr><name>xform1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hadd_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__X</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__Y</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><call><name>vec_mergeh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__X</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__Y</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_mergel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__X</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__Y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hsub_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__X</name></expr></argument>, <argument><expr><name>__m128d</name> <name>__Y</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>vec_sub</name> <argument_list>(<argument><expr><call><name>vec_mergeh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__X</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__Y</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_mergel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator> <name>__X</name></expr></argument>, <argument><expr><operator>(</operator><name>__v2df</name><operator>)</operator><name>__Y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_movehdup_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__X</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_mergeo</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__X</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__X</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_moveldup_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__X</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_mergee</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__X</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator><name>__X</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loaddup_pd</name> <argument_list>(<argument><expr><name>double</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128d</name><operator>)</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><operator>*</operator><name>__P</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128d</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_movedup_pd</name> <argument_list>(<argument><expr><name>__m128d</name> <name>__X</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_shuffle_pd</name> <argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__X</name></expr></argument>, <argument><expr><call><name>_MM_SHUFFLE2</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_lddqu_si128</name> <argument_list>(<argument><expr><name>__m128i</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <operator>(</operator><call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>signed</name> <name>int</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>__P</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:empty>#include_next &lt;pmmintrin.h&gt;</cpp:empty>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
