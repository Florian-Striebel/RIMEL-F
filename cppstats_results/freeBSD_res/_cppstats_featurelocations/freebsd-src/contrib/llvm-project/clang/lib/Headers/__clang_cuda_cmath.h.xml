<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/__clang_cuda_cmath.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_CUDA_CMATH_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_CUDA_CMATH_H__</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file is for CUDA compilation only."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static constexpr __attribute__((always_inline, nothrow))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static __device__ __inline__ __attribute__((always_inline))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>llabs</name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>labs</name><argument_list>(<argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>fabsf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>fabs</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>acos</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>acosf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>asin</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>asinf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>atan</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>atanf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>atan2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>atan2f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>ceil</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>ceilf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>cos</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>cosf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>cosh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>coshf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>expf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>fabs</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>fabsf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>floor</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>floorf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>fmod</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>fmodf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>fpclassify</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_fpclassify</name><argument_list>(<argument><expr><name>FP_NAN</name></expr></argument>, <argument><expr><name>FP_INFINITE</name></expr></argument>, <argument><expr><name>FP_NORMAL</name></expr></argument>, <argument><expr><name>FP_SUBNORMAL</name></expr></argument>,
<argument><expr><name>FP_ZERO</name></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>fpclassify</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_fpclassify</name><argument_list>(<argument><expr><name>FP_NAN</name></expr></argument>, <argument><expr><name>FP_INFINITE</name></expr></argument>, <argument><expr><name>FP_NORMAL</name></expr></argument>, <argument><expr><name>FP_SUBNORMAL</name></expr></argument>,
<argument><expr><name>FP_ZERO</name></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>frexp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>frexpf</name><argument_list>(<argument><expr><name>__arg</name></expr></argument>, <argument><expr><name>__exp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>begin</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name> <omp:clause><omp:name>match</omp:name><omp:argument_list>( <omp:argument><omp:expr>implementation = {extension(disable_implicit_base</omp:expr></omp:argument>)</omp:argument_list></omp:clause><omp:name>}</omp:name><omp:name>)</omp:name></omp:directive></cpp:pragma>








<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>begin</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name> <omp:clause><omp:name>match</omp:name><omp:argument_list>(<omp:argument><omp:expr>implementation = {vendor(llvm</omp:expr></omp:argument>)</omp:argument_list></omp:clause><omp:name>}</omp:name><omp:name>)</omp:name></omp:directive></cpp:pragma>

<function><type><name>__DEVICE__</name> <name>int</name></type> <name>isinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__isinff</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>isinf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__isinf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>isfinite</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__finitef</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>isfinite</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__isfinited</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>isnan</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__isnanf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>isnan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__isnan</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>end</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name></omp:directive></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__isinff</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isinf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__isinf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isfinite</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__finitef</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>



<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isfinite</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__isfinited</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isnan</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__isnanf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isnan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__isnan</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>end</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isgreater</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_isgreater</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isgreater</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_isgreater</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isgreaterequal</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_isgreaterequal</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isgreaterequal</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_isgreaterequal</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isless</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_isless</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isless</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_isless</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>islessequal</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_islessequal</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>islessequal</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_islessequal</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>islessgreater</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_islessgreater</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>islessgreater</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_islessgreater</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isnormal</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_isnormal</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isnormal</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_isnormal</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isunordered</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_isunordered</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>isunordered</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_isunordered</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>ldexp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>ldexpf</name><argument_list>(<argument><expr><name>__arg</name></expr></argument>, <argument><expr><name>__exp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>logf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>log10</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>log10f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>modf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__iptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>modff</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__iptr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__base</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>powf</name><argument_list>(<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>__exp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__iexp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>powif</name><argument_list>(<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>__iexp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__iexp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>powi</name><argument_list>(<argument><expr><name>__base</name></expr></argument>, <argument><expr><name>__iexp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>signbit</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__signbitf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>bool</name></type> <name>signbit</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>__signbitd</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>sin</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>sinf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>sinh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>sinhf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>sqrt</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>tan</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>tanf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>tanh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>::</operator><call><name>tanhf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>remquo</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__d</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__q</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>remquof</name><argument_list>(<argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>, <argument><expr><name>__q</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
















<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>bool</name> <name>__B</name></expr><operator>,</operator> <expr><name>class</name> <name>__T</name> <operator>=</operator> <name>void</name><operator>&gt;</operator>
struct <name>__clang_cuda_enable_if</name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>__T</name><operator>&gt;</operator> struct <name><name>__clang_cuda_enable_if</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>, <argument><expr><name>__T</name></expr></argument>&gt;</argument_list></name> <block>{
<typedef>typedef <type><name>__T</name></type> <name>type</name>;</typedef>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><parameter_list>(<parameter><type><name>__retty</name></type></parameter>, <parameter><type><name>__fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>template &lt;typename __T&gt; __DEVICE__ typename __clang_cuda_enable_if&lt;std::numeric_limits&lt;__T&gt;::is_integer, __retty&gt;::type __fn(__T __x) { return ::__fn((double)__x); }</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><parameter_list>(<parameter><type><name>__retty</name></type></parameter>, <parameter><type><name>__fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>template &lt;typename __T1, typename __T2&gt; __DEVICE__ typename __clang_cuda_enable_if&lt; std::numeric_limits&lt;__T1&gt;::is_specialized &amp;&amp; std::numeric_limits&lt;__T2&gt;::is_specialized, __retty&gt;::type __fn(__T1 __x, __T2 __y) { return __fn((double)__x, (double)__y); }</cpp:value></cpp:define>









<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>acos</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>acosh</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>asin</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>asinh</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>atan</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>atan2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>atanh</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>cbrt</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>ceil</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>copysign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>cos</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>cosh</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>erf</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>erfc</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>exp</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>exp2</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>expm1</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>fabs</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>fdim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>floor</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>fmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>fmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>fmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>int</argument>, <argument>fpclassify</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>hypot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>int</argument>, <argument>ilogb</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>bool</argument>, <argument>isfinite</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>isgreater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>isgreaterequal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>isinf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>isless</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>islessequal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>islessgreater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>isnan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>bool</argument>, <argument>isnormal</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>isunordered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>lgamma</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>log</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>log10</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>log1p</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>log2</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>logb</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>long long</argument>, <argument>llrint</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>long long</argument>, <argument>llround</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>long</argument>, <argument>lrint</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>long</argument>, <argument>lround</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>nearbyint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>nextafter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>pow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>rint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>round</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>bool</argument>, <argument>signbit</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>sin</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>sinh</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>sqrt</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>tan</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>tanh</argument>)</argument_list></macro>
<macro><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument>double</argument>, <argument>tgamma</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>trunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDA_CLANG_FN_INTEGER_OVERLOAD_2</name></cpp:undef>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>__T1</name></expr></argument>, <argument><expr><name>typename</name> <name>__T2</name></expr></argument>, <argument><expr><name>typename</name> <name>__T3</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>typename</name> <name><name>__clang_cuda_enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>__T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_specialized</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>__T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_specialized</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>__T3</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_specialized</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>fma</name><argument_list>(<argument>__T1 __x</argument>, <argument>__T2 __y</argument>, <argument>__T3 __z</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>fma</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__x</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__y</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>__T</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>typename</name> <name><name>__clang_cuda_enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>__T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_integer</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>frexp</name><argument_list>(<argument>__T __x</argument>, <argument>int *__exp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>frexp</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__x</name></expr></argument>, <argument><expr><name>__exp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>__T</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>typename</name> <name><name>__clang_cuda_enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>__T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_integer</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>ldexp</name><argument_list>(<argument>__T __x</argument>, <argument>int __exp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>ldexp</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__x</name></expr></argument>, <argument><expr><name>__exp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>__T1</name></expr></argument>, <argument><expr><name>typename</name> <name>__T2</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>typename</name> <name><name>__clang_cuda_enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>__T1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_specialized</name> <operator>&amp;&amp;</operator>
<name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>__T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_specialized</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>remquo</name><argument_list>(<argument>__T1 __x</argument>, <argument>__T2 __y</argument>, <argument>int *__quo</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>remquo</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__x</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__y</name></expr></argument>, <argument><expr><name>__quo</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>__T</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>typename</name> <name><name>__clang_cuda_enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>__T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_integer</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>scalbln</name><argument_list>(<argument>__T __x</argument>, <argument>long __exp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>scalbln</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__x</name></expr></argument>, <argument><expr><name>__exp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>__T</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>typename</name> <name><name>__clang_cuda_enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>__T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_integer</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>scalbn</name><argument_list>(<argument>__T __x</argument>, <argument>int __exp</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>scalbn</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>__x</name></expr></argument>, <argument><expr><name>__exp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_BEGIN_NAMESPACE_STD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>_LIBCPP_BEGIN_NAMESPACE_STD</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>namespace</name></type> <name>std</name> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLIBCXX_BEGIN_NAMESPACE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>_GLIBCXX_BEGIN_NAMESPACE_VERSION</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<name>using</name> <operator>::</operator><name>acos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>acosh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>asin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>asinh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>atan</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>atan2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>atanh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>cbrt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>ceil</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>copysign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>cos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>cosh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>erf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>erfc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>exp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>exp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>expm1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fabs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fdim</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>floor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fma</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fmax</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fmin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fmod</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fpclassify</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>frexp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>hypot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>ilogb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isfinite</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isgreater</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isgreaterequal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isless</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>islessequal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>islessgreater</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isnormal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isunordered</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>ldexp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>lgamma</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>llrint</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>llround</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log1p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>logb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>lrint</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>lround</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>nearbyint</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>nextafter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>pow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>remainder</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>remquo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>rint</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>round</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>scalbln</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>scalbn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>signbit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>sin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>sinh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>sqrt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>tan</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>tanh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>tgamma</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>trunc</name></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBCXX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isinf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>isnan</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>using</name> <operator>::</operator><name>acosf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>acoshf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>asinf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>asinhf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>atan2f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>atanf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>atanhf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>cbrtf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>ceilf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>copysignf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>cosf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>coshf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>erfcf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>erff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>exp2f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>expf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>expm1f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fabsf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fdimf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>floorf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fmaf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fmaxf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fminf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>fmodf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>frexpf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>hypotf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>ilogbf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>ldexpf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>lgammaf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>llrintf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>llroundf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log10f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log1pf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>log2f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>logbf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>logf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>lrintf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>lroundf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>modff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>nearbyintf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>nextafterf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>powf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>remainderf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>remquof</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>rintf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>roundf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>scalblnf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>scalbnf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>sinf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>sinhf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>sqrtf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>tanf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>tanhf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>tgammaf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <operator>::</operator><name>truncf</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_END_NAMESPACE_STD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>_LIBCPP_END_NAMESPACE_STD</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLIBCXX_BEGIN_NAMESPACE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_GLIBCXX_END_NAMESPACE_VERSION</name></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEVICE__</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
