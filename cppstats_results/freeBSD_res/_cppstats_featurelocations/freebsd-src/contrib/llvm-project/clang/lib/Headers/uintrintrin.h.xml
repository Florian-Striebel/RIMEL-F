<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/uintrintrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__X86GPRINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Never use &lt;uintrintrin.h&gt; directly; include &lt;x86gprintrin.h&gt; instead."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__UINTRINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINTRINTRIN_H</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("uintr")))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>__uintr_frame</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>rip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>rflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>rsp</name></decl>;</decl_stmt>
}</block>;</struct>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_clui</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_clui</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_stui</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_stui</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>char</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_testui</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_testui</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

















































<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_senduipi</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_senduipi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
