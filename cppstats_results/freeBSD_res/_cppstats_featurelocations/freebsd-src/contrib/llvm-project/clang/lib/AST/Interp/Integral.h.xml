<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/Integral.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_INTEGRAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_INTEGRAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ComparisonCategories.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/APValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MathExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>

<decl_stmt><decl><type><name>using</name></type> <name>APInt</name> <init>= <expr><name>llvm</name><operator>::</operator><name>APInt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>APSInt</name> <init>= <expr><name>llvm</name><operator>::</operator><name>APSInt</name></expr></init></decl>;</decl_stmt>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>ComparisonCategoryResult</name></type> <name>Compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>&lt;</operator> <name>Y</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ComparisonCategoryResult</name><operator>::</operator><name>Less</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>&gt;</operator> <name>Y</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ComparisonCategoryResult</name><operator>::</operator><name>Greater</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ComparisonCategoryResult</name><operator>::</operator><name>Equal</name></expr>;</return>
</block_content>}</block></function>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>unsigned</name> <name>Bits</name></expr><operator>,</operator> <expr><name>bool</name> <name>Signed</name><operator>&gt;</operator> struct <name>Repr</name></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>Repr</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>Type</name> <operator>=</operator> <name>uint8_t</name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>Repr</name><argument_list type="generic">&lt;<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>Type</name> <operator>=</operator> <name>uint16_t</name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>Repr</name><argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>Type</name> <operator>=</operator> <name>uint32_t</name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>Repr</name><argument_list type="generic">&lt;<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>Type</name> <operator>=</operator> <name>uint64_t</name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>Repr</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>Type</name> <operator>=</operator> <name>int8_t</name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>Repr</name><argument_list type="generic">&lt;<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>Type</name> <operator>=</operator> <name>int16_t</name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>Repr</name><argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>Type</name> <operator>=</operator> <name>int32_t</name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>Repr</name><argument_list type="generic">&lt;<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>Type</name> <operator>=</operator> <name>int64_t</name></expr>; }</block></expr>;</expr_stmt>






<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>Bits</name></expr></argument>, <argument><expr><name>bool</name> <name>Signed</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>Integral</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>OtherBits</name></expr></argument>, <argument><expr><name>bool</name> <name>OtherSigned</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name></type> <name>Integral</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>T</name> <init>= <expr><name>typename</name> <name><name>Repr</name><argument_list type="generic">&lt;<argument><expr><name>Bits</name></expr></argument>, <argument><expr><name>Signed</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name></type> <name>V</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <specifier>auto</specifier></type> <name>Min</name> <init>= <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <specifier>auto</specifier></type> <name>Max</name> <init>= <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> <name>explicit</name> <macro><name>Integral</name><argument_list>(<argument>T V</argument>)</argument_list></macro> <operator>:</operator> <macro><name>V</name><argument_list>(<argument>V</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>

<call><name>Integral</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>V</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>SrcBits</name></expr></argument>, <argument><expr><name>bool</name> <name>SrcSign</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <call><name>Integral</name><argument_list>(<argument><expr><name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><name>SrcBits</name></expr></argument>, <argument><expr><name>SrcSign</name></expr></argument>&gt;</argument_list></name> <name>V</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>V</name><argument_list>(<argument>V.V</argument>)</argument_list></macro> <block>{}</block>


<name>explicit</name> <call><name>Integral</name><argument_list>(<argument><expr><specifier>const</specifier> <name>APSInt</name> <operator>&amp;</operator><name>V</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>V</name><argument_list>(<argument>V.isSigned() ? V.getSExtValue() : V.getZExtValue()</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><name>Integral</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>&lt;</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><name>Integral</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>&gt;</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><name>Integral</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>&lt;=</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><name>Integral</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>&gt;=</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>Integral</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>Integral</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>!=</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><name>unsigned</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>V</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>RHS</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Integral</name> <name>operator</name><operator>-</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Integral</name><argument_list>(<argument><expr><operator>-</operator><name>V</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Integral</name> <name>operator</name><operator>~</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Integral</name><argument_list>(<argument><expr><operator>~</operator><name>V</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>DstBits</name></expr></argument>, <argument><expr><name>bool</name> <name>DstSign</name></expr></argument>&gt;</argument_list></name>
<name>explicit</name> <name>operator</name> <macro><name>Integral</name></macro><operator>&lt;</operator><name>DstBits</name></expr><operator>,</operator> <expr><name>DstSign</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><name>DstBits</name></expr></argument>, <argument><expr><name>DstSign</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>unsigned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>int64_t</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>uint64_t</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>APSInt</name> <macro><name>toAPSInt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>APSInt</name><argument_list>(<argument><expr><call><name>APInt</name><argument_list>(<argument><expr><name>Bits</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Signed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><name>Signed</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>APSInt</name></type> <name>toAPSInt</name><argument_list>(<argument><expr><name>unsigned</name> <name>NumBits</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Signed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>APSInt</name><argument_list>(<argument><expr><call><name>toAPSInt</name><argument_list>()</argument_list></call><operator>.</operator><call><name>sextOrTrunc</name><argument_list>(<argument><expr><name>NumBits</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><name>Signed</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>APSInt</name><argument_list>(<argument><expr><call><name>toAPSInt</name><argument_list>()</argument_list></call><operator>.</operator><call><name>zextOrTrunc</name><argument_list>(<argument><expr><name>NumBits</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><name>Signed</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>APValue</name> <macro><name>toAPValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>APValue</name><argument_list>(<argument><expr><call><name>toAPSInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><name>Bits</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name> <macro><name>toUnsigned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><name>Bits</name></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>constexpr</name> <specifier>static</specifier> <name>unsigned</name></type> <name>bitWidth</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Bits</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isZero</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>V</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isMin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>==</operator> <call><name>min</name><argument_list>(<argument><expr><call><name>bitWidth</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isMinusOne</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Signed</name> <operator>&amp;&amp;</operator> <name>V</name> <operator>==</operator> <call><name>T</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>constexpr</name> <specifier>static</specifier> <name>bool</name></type> <name>isSigned</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Signed</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isNegative</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>&lt;</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isPositive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>isNegative</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>ComparisonCategoryResult</name></type> <name>compare</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Integral</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>Compare</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name><name>RHS</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>countLeadingZeros</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>llvm</name><operator>::</operator><call><name><name>countLeadingZeros</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>Integral</name></type> <name>truncate</name><argument_list>(<argument><expr><name>unsigned</name> <name>TruncBits</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>TruncBits</name> <operator>&gt;=</operator> <name>Bits</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>T</name></type> <name>BitMask</name> <init>= <expr><operator>(</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>T</name><argument_list>(<argument><expr><name>TruncBits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>T</name></type> <name>SignBit</name> <init>= <expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>TruncBits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>T</name></type> <name>ExtMask</name> <init>= <expr><operator>~</operator><name>BitMask</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>Integral</name><argument_list>(<argument><expr><operator>(</operator><name>V</name> <operator>&amp;</operator> <name>BitMask</name><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>Signed</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>V</name> <operator>&amp;</operator> <name>SignBit</name><operator>)</operator></expr> ?</condition><then> <expr><name>ExtMask</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const <block>{<block_content> <expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <name>V</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>Integral</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>NumBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Integral</name><argument_list>(<argument><expr><name>Min</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>Integral</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>NumBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Integral</name><argument_list>(<argument><expr><name>Max</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>Integral</name></expr></argument>&gt;</argument_list></name> <macro><name>from</name><argument_list>(<argument>T Value</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>Integral</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>SrcBits</name></expr></argument>, <argument><expr><name>bool</name> <name>SrcSign</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>SrcBits</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>Integral</name></expr></argument>&gt;</argument_list></name>
<macro><name>from</name><argument_list>(<argument>Integral&lt;SrcBits</argument>, <argument>SrcSign&gt; Value</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>Integral</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>SrcSign</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>Integral</name></type> <name>from</name><parameter_list>(<parameter><decl><type><name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SrcSign</name></expr></argument>&gt;</argument_list></name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SrcSign</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Integral</name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>V</name><operator>.</operator><name>getSExtValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>Integral</name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>V</name><operator>.</operator><name>getZExtValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Integral</name></type> <name>zero</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>from</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>Integral</name></type> <name>from</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>Value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NumBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Integral</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>inRange</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>Value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NumBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>CheckRange</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Min</name></expr></argument>, <argument><expr><name>Max</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>increment</name><parameter_list>(<parameter><decl><type><name>Integral</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Integral</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>add</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>Integral</name><argument_list>(<argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>A</name><operator>.</operator><name>bitWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>decrement</name><parameter_list>(<parameter><decl><type><name>Integral</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Integral</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sub</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>Integral</name><argument_list>(<argument><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>A</name><operator>.</operator><name>bitWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Integral</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Integral</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>OpBits</name></decl></parameter>, <parameter><decl><type><name>Integral</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CheckAddUB</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>V</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>V</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>Integral</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Integral</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>OpBits</name></decl></parameter>, <parameter><decl><type><name>Integral</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CheckSubUB</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>V</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>V</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>Integral</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Integral</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>OpBits</name></decl></parameter>, <parameter><decl><type><name>Integral</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CheckMulUB</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>V</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>V</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_signed</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>CheckAddUB</name><argument_list>(<argument>T A</argument>, <argument>T B</argument>,
<argument>T &amp;R</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>AddOverflow</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_unsigned</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>CheckAddUB</name><argument_list>(<argument>T A</argument>, <argument>T B</argument>,
<argument>T &amp;R</argument>)</argument_list></macro> <block>{
<expr><name>R</name> <operator>=</operator> <name>A</name> <operator>+</operator> <name>B</name></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_signed</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>CheckSubUB</name><argument_list>(<argument>T A</argument>, <argument>T B</argument>,
<argument>T &amp;R</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>SubOverflow</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_unsigned</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>CheckSubUB</name><argument_list>(<argument>T A</argument>, <argument>T B</argument>,
<argument>T &amp;R</argument>)</argument_list></macro> <block>{
<expr><name>R</name> <operator>=</operator> <name>A</name> <operator>-</operator> <name>B</name></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_signed</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>CheckMulUB</name><argument_list>(<argument>T A</argument>, <argument>T B</argument>,
<argument>T &amp;R</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>MulOverflow</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_unsigned</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>CheckMulUB</name><argument_list>(<argument>T A</argument>, <argument>T B</argument>,
<argument>T &amp;R</argument>)</argument_list></macro> <block>{
<expr><name>R</name> <operator>=</operator> <name>A</name> <operator>*</operator> <name>B</name></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>T</name> <name>Min</name></expr></argument>, <argument><expr><name>T</name> <name>Max</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_signed</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<macro><name>CheckRange</name><argument_list>(<argument>int64_t V</argument>)</argument_list></macro> <block>{
<return>return <expr><name>Min</name> <operator>&lt;=</operator> <name>V</name> <operator>&amp;&amp;</operator> <name>V</name> <operator>&lt;=</operator> <name>Max</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>T</name> <name>Min</name></expr></argument>, <argument><expr><name>T</name> <name>Max</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_unsigned</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<macro><name>CheckRange</name><argument_list>(<argument>int64_t V</argument>)</argument_list></macro> <block>{
<return>return <expr><name>V</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>Max</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>Bits</name></expr></argument>, <argument><expr><name>bool</name> <name>Signed</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name><operator>,</operator> <name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><name>Bits</name></expr></argument>, <argument><expr><name>Signed</name></expr></argument>&gt;</argument_list></name> <name>I</name><operator>)</operator> <block>{
<expr><call><name><name>I</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>OS</name></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
