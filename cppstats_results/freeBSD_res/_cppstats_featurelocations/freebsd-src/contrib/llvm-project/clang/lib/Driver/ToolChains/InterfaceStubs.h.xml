<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/InterfaceStubs.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_IFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_IFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Tool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/ToolChain.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tools</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ifstool</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Merger</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Merger</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"IFS::Merger"</literal></argument>, <argument><literal type="string">"llvm-ifs"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isLinkJob</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
