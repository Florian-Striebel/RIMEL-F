<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/ARCMigrate/Transforms.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_ARCMIGRATE_TRANSFORMS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_ARCMIGRATE_TRANSFORMS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ParentMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/RecursiveASTVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/SaveAndRestore.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BlockDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>arcmt</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MigrationPass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>trans</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MigrationContext</name></decl>;</decl_stmt>





<function_decl><type><name>void</name></type> <name>rewriteAutoreleasePool</name><parameter_list>(<parameter><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>pass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rewriteUnbridgedCasts</name><parameter_list>(<parameter><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>pass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>makeAssignARCSafe</name><parameter_list>(<parameter><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>pass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>removeRetainReleaseDeallocFinalize</name><parameter_list>(<parameter><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>pass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>removeZeroOutPropsInDeallocFinalize</name><parameter_list>(<parameter><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>pass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rewriteUnusedInitDelegate</name><parameter_list>(<parameter><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>pass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkAPIUses</name><parameter_list>(<parameter><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>pass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>removeEmptyStatementsAndDeallocFinalize</name><parameter_list>(<parameter><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>pass</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>BodyContext</name> <block>{<block_content>
<decl_stmt><decl><type><name>MigrationContext</name> <modifier>&amp;</modifier></type><name>MigrateCtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParentMap</name></type> <name>PMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>TopStmt</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>BodyContext</name><argument_list>(<argument><expr><name>MigrationContext</name> <operator>&amp;</operator><name>MigrateCtx</name></expr></argument>, <argument><expr><name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>MigrateCtx</name><argument_list>(<argument><expr><name>MigrateCtx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>PMap</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>TopStmt</name><argument_list>(<argument>S</argument>)</argument_list></macro> <expr><block>{}</block>

<name>MigrationContext</name> <operator>&amp;</operator><macro><name>getMigrationContext</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>MigrateCtx</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>ParentMap</name> <modifier>&amp;</modifier></type><name>getParentMap</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>PMap</name></expr>;</return> </block_content>}</block></function>
<function><type><name>Stmt</name> <modifier>*</modifier></type><name>getTopStmt</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>TopStmt</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ObjCImplementationContext</name> <block>{<block_content>
<decl_stmt><decl><type><name>MigrationContext</name> <modifier>&amp;</modifier></type><name>MigrateCtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ObjCImplementationDecl</name> <modifier>*</modifier></type><name>ImpD</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ObjCImplementationContext</name><argument_list>(<argument><expr><name>MigrationContext</name> <operator>&amp;</operator><name>MigrateCtx</name></expr></argument>,
<argument><expr><name>ObjCImplementationDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>MigrateCtx</name><argument_list>(<argument><expr><name>MigrateCtx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>ImpD</name><argument_list>(<argument>D</argument>)</argument_list></macro> <expr><block>{}</block>

<name>MigrationContext</name> <operator>&amp;</operator><macro><name>getMigrationContext</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>MigrateCtx</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>ObjCImplementationDecl</name> <modifier>*</modifier></type><name>getImplementationDecl</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>ImpD</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ASTTraverser</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ASTTraverser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function><type><name>virtual</name> <name>void</name></type> <name>traverseTU</name><parameter_list>(<parameter><decl><type><name>MigrationContext</name> <modifier>&amp;</modifier></type><name>MigrateCtx</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>traverseBody</name><parameter_list>(<parameter><decl><type><name>BodyContext</name> <modifier>&amp;</modifier></type><name>BodyCtx</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>
<function><type><name>virtual</name> <name>void</name></type> <name>traverseObjCImplementation</name><parameter_list>(<parameter><decl><type><name>ObjCImplementationContext</name> <modifier>&amp;</modifier></type><name>ImplCtx</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MigrationContext</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ASTTraverser</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Traversers</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>Pass</name></decl>;</decl_stmt>

<struct>struct <name>GCAttrOccurrence</name> <block>{
<enum>enum <name>AttrKind</name> <block>{ <decl><name>Weak</name></decl>, <decl><name>Strong</name></decl> }</block> <decl><name>Kind</name></decl>;</enum>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QualType</name></type> <name>ModifiedType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Decl</name> <modifier>*</modifier></type><name>Dcl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>FullyMigratable</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>GCAttrOccurrence</name></expr></argument>&gt;</argument_list></name> <name>GCAttrs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <name>AttrSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <name>RemovedAttrSet</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <name>AtPropsWeak</name></expr>;</expr_stmt>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>MigrationContext</name><argument_list>(<argument><expr><name>MigrationPass</name> <operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Pass</name><argument_list>(<argument>pass</argument>)</argument_list></macro> <block>{}</block>
<operator>~</operator><call><name>MigrationContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ASTTraverser</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>traverser_iterator</name></expr>;</expr_stmt></typedef>
<function><type><name>traverser_iterator</name></type> <name>traversers_begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Traversers</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>traverser_iterator</name></type> <name>traversers_end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Traversers</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>addTraverser</name><parameter_list>(<parameter><decl><type><name>ASTTraverser</name> <modifier>*</modifier></type><name>traverser</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Traversers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>traverser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>isGCOwnedNonObjC</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>bool</name></type> <name>removePropertyAttribute</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>fromAttr</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>atLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>rewritePropertyAttribute</name><argument_list>(<argument><expr><name>fromAttr</name></expr></argument>, <argument><expr><call><name>StringRef</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>atLoc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function_decl><type><name>bool</name></type> <name>rewritePropertyAttribute</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>fromAttr</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>toAttr</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>atLoc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>addPropertyAttribute</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>atLoc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>traverse</name><parameter_list>(<parameter><decl><type><name>TranslationUnitDecl</name> <modifier>*</modifier></type><name>TU</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dumpGCAttrs</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PropertyRewriteTraverser</name> <range>: <expr><name>public</name> <name>ASTTraverser</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>traverseObjCImplementation</name><argument_list>(<argument>ObjCImplementationContext &amp;ImplCtx</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BlockObjCVariableTraverser</name> <range>: <expr><name>public</name> <name>ASTTraverser</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>traverseBody</name><argument_list>(<argument>BodyContext &amp;BodyCtx</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ProtectedScopeTraverser</name> <range>: <expr><name>public</name> <name>ASTTraverser</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>traverseBody</name><argument_list>(<argument>BodyContext &amp;BodyCtx</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>GCAttrsTraverser</name> <range>: <expr><name>public</name> <name>ASTTraverser</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>traverseTU</name><argument_list>(<argument>MigrationContext &amp;MigrateCtx</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>GCCollectableCallsTraverser</name> <range>: <expr><name>public</name> <name>ASTTraverser</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>traverseBody</name><argument_list>(<argument>BodyContext &amp;BodyCtx</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>






<function_decl><type><name>bool</name></type> <name>canApplyWeak</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>AllowOnUnknownClass</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>isPlusOneAssign</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BinaryOperator</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isPlusOne</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>SourceLocation</name></type> <name>findLocationAfterSemi</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsDecl</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>SourceLocation</name></type> <name>findSemiAfterLocation</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsDecl</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>hasSideEffects</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isGlobalVar</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>StringRef</name></type> <name>getNilString</name><parameter_list>(<parameter><decl><type><name>MigrationPass</name> <modifier>&amp;</modifier></type><name>Pass</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>BODY_TRANS</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>BodyTransform</name> <range>: <expr><name>public</name> <name><name>RecursiveASTVisitor</name><argument_list type="generic">&lt;<argument><expr><name><name>BodyTransform</name><argument_list type="generic">&lt;<argument><expr><name>BODY_TRANS</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <block>{
<expr><name>MigrationPass</name> <operator>&amp;</operator><name>Pass</name></expr>;
<expr><name>Decl</name> <operator>*</operator><name>ParentD</name></expr>;

<typedef>typedef <type><name><name>RecursiveASTVisitor</name><argument_list type="generic">&lt;<argument><expr><name><name>BodyTransform</name><argument_list type="generic">&lt;<argument><expr><name>BODY_TRANS</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>base</name>;</typedef>
<name>public</name><operator>:</operator>
<call><name>BodyTransform</name><argument_list>(<argument><expr><name>MigrationPass</name> <operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>Pass</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call>, <macro><name>ParentD</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{ }</block></block>

<name>bool</name> <macro><name>TraverseStmt</name><argument_list>(<argument>Stmt *rootS</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>rootS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BODY_TRANS</name><argument_list>(<argument><expr><name>Pass</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>transformBody</name><argument_list>(<argument><expr><name>rootS</name></expr></argument>, <argument><expr><name>ParentD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>TraverseObjCMethodDecl</name><parameter_list>(<parameter><decl><type><name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>SaveAndRestore</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>SetParent</name><argument_list>(<argument><expr><name>ParentD</name></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><name>base</name><operator>::</operator><call><name>TraverseObjCMethodDecl</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ExprSet</name></expr>;</expr_stmt></typedef>

<function_decl><type><name>void</name></type> <name>clearRefsIn</name><parameter_list>(<parameter><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>ExprSet</name> <modifier>&amp;</modifier></type><name>refs</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>iterator</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>clearRefsIn</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>iterator</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>ExprSet</name> <modifier>&amp;</modifier></type><name>refs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>begin</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>begin</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearRefsIn</name><argument_list>(<argument><expr><operator>*</operator><name>begin</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>collectRefs</name><parameter_list>(<parameter><decl><type><name>ValueDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>ExprSet</name> <modifier>&amp;</modifier></type><name>refs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>collectRemovables</name><parameter_list>(<parameter><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>ExprSet</name> <modifier>&amp;</modifier></type><name>exprs</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
