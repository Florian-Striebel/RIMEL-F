<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/openmp_wrappers/math.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_OPENMP_MATH_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_OPENMP_MATH_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file is for OpenMP compilation only."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:empty>#include_next &lt;math.h&gt;</cpp:empty>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>begin</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name> <omp:clause><omp:name>match</omp:name><omp:argument_list>( <omp:argument><omp:expr>device = {arch(nvptx</omp:expr></omp:argument>, <omp:argument><omp:expr>nvptx64</omp:expr></omp:argument>)</omp:argument_list></omp:clause><omp:name>}</omp:name>, <omp:name>implementation</omp:name> <omp:name>=</omp:name> <omp:name>{</omp:name><omp:clause><omp:name>extension</omp:name><omp:argument_list>(<omp:argument><omp:expr>match_any</omp:expr></omp:argument>)</omp:argument_list></omp:clause><omp:name>}</omp:name><omp:name>)</omp:name></omp:directive></cpp:pragma>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA__</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__OPENMP_NVPTX__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_math.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__OPENMP_NVPTX__</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDA__</name></cpp:undef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>end</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name></omp:directive></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>begin</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name> <omp:clause><omp:name>match</omp:name><omp:argument_list>(<omp:argument><omp:expr>device = {arch(amdgcn</omp:expr></omp:argument>)</omp:argument_list></omp:clause><omp:name>}</omp:name><omp:name>)</omp:name></omp:directive></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__OPENMP_AMDGCN__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_hip_math.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__OPENMP_AMDGCN__</name></cpp:undef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>end</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
