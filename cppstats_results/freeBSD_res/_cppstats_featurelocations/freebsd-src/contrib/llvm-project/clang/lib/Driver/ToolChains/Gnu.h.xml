<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/Gnu.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_GNU_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_GNU_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Cuda.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ROCm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Tool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/ToolChain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>

<struct>struct <name>DetectedMultilibs</name> <block>{

<decl_stmt><decl><type><name>MultilibSet</name></type> <name>Multilibs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Multilib</name></type> <name>SelectedMultilib</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Multilib</name></expr></argument>&gt;</argument_list></name> <name>BiarchSibling</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>bool</name></type> <name>findMIPSMultilibs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>TargetTriple</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>Path</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>DetectedMultilibs</name> <operator>&amp;</operator><name>Result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tools</name> <block>{<block_content>


<decl_stmt><decl><type><name>namespace</name></type> <name>gnutools</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Assembler</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Assembler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"GNU::Assembler"</literal></argument>, <argument><literal type="string">"assembler"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Linker</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Linker</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"GNU::Linker"</literal></argument>, <argument><literal type="string">"linker"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isLinkJob</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>StaticLibTool</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>StaticLibTool</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"GNU::StaticLibTool"</literal></argument>, <argument><literal type="string">"static-lib-linker"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isLinkJob</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>gcc</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Common</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Common</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ShortName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Tool</name><argument_list>(<argument>Name</argument>, <argument>ShortName</argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>




<name>bool</name> <macro><name>hasIntegratedAssembler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><name>virtual</name> <name>void</name> <macro><name>RenderExtraToolArgs</name><argument_list>(<argument>const JobAction &amp;JA</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Preprocessor</name> <range>: <expr><name>public</name> <name>Common</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Preprocessor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Common</name><argument_list>(<argument><literal type="string">"gcc::Preprocessor"</literal></argument>, <argument><literal type="string">"gcc preprocessor"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasGoodDiagnostics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>RenderExtraToolArgs</name><argument_list>(<argument>const JobAction &amp;JA</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Compiler</name> <range>: <expr><name>public</name> <name>Common</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Compiler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Common</name><argument_list>(<argument><literal type="string">"gcc::Compiler"</literal></argument>, <argument><literal type="string">"gcc frontend"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasGoodDiagnostics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>void</name> <macro><name>RenderExtraToolArgs</name><argument_list>(<argument>const JobAction &amp;JA</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Linker</name> <range>: <expr><name>public</name> <name>Common</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Linker</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Common</name><argument_list>(<argument><literal type="string">"gcc::Linker"</literal></argument>, <argument><literal type="string">"linker (via gcc)"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isLinkJob</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>void</name> <macro><name>RenderExtraToolArgs</name><argument_list>(<argument>const JobAction &amp;JA</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>toolchains</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Generic_GCC</name> <range>: <expr><name>public</name> <name>ToolChain</name> <block>{
<expr><name>public</name><operator>:</operator>















struct <name>GCCVersion</name> <block>{

<expr><name>std</name><operator>::</operator><name>string</name> <name>Text</name></expr>;


<expr><name>int</name> <name>Major</name></expr>, <expr><name>Minor</name></expr>, <expr><name>Patch</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>MajorStr</name></expr>, <expr><name>MinorStr</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>PatchSuffix</name></expr>;

<expr><specifier>static</specifier> <name>GCCVersion</name> <macro><name>Parse</name><argument_list>(<argument>StringRef VersionText</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>isOlderThan</name><argument_list>(<argument>int RHSMajor</argument>, <argument>int RHSMinor</argument>, <argument>int RHSPatch</argument>,
<argument>StringRef RHSPatchSuffix = StringRef()</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>GCCVersion</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isOlderThan</name><argument_list>(<argument><expr><name><name>RHS</name><operator>.</operator><name>Major</name></name></expr></argument>, <argument><expr><name><name>RHS</name><operator>.</operator><name>Minor</name></name></expr></argument>, <argument><expr><name><name>RHS</name><operator>.</operator><name>Patch</name></name></expr></argument>, <argument><expr><name><name>RHS</name><operator>.</operator><name>PatchSuffix</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>GCCVersion</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>RHS</name> <operator>&lt;</operator> <operator>*</operator><name>this</name></expr>;</return> }</block>
<name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>GCCVersion</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>&gt;</operator> <name>RHS</name><operator>)</operator></expr>;</return> }</block>
<name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>GCCVersion</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>&lt;</operator> <name>RHS</name><operator>)</operator></expr>;</return> }</block>
}</expr>;







<expr><name>class</name> <name>GCCInstallationDetector</name> <block>{
<expr><name>bool</name> <name>IsValid</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>Triple</name> <name>GCCTriple</name></expr>;
<expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>GCCInstallPath</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>GCCParentLibPath</name></expr>;


<expr><name>Multilib</name> <name>SelectedMultilib</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Multilib</name></expr></argument>&gt;</argument_list></name> <name>BiarchSibling</name></expr>;

<expr><name>GCCVersion</name> <name>Version</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>CandidateGCCInstallPaths</name></expr>;


<expr><name>MultilibSet</name> <name>Multilibs</name></expr>;


<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>GentooConfigDir</name> <operator>=</operator> <literal type="string">"/etc/env.d/gcc"</literal></expr>;

<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>GCCInstallationDetector</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>IsValid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <macro><name>D</name><argument_list>(<argument>D</argument>)</argument_list></macro> <expr><block>{}</block>
<name>void</name> <call><name>init</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>TargetTriple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ExtraTripleAliases</name> <operator>=</operator> <name>None</name></expr></argument>)</argument_list></call></expr>;


<expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsValid</name></expr>;</return> }</block>


<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><macro><name>getTriple</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>GCCTriple</name></expr>;</return> }</block>


<name>StringRef</name> <macro><name>getInstallPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>GCCInstallPath</name></expr>;</return> }</block>


<name>StringRef</name> <macro><name>getParentLibPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>GCCParentLibPath</name></expr>;</return> }</block>


<specifier>const</specifier> <name>Multilib</name> <operator>&amp;</operator><macro><name>getMultilib</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SelectedMultilib</name></expr>;</return> }</block>


<specifier>const</specifier> <name>MultilibSet</name> <operator>&amp;</operator><macro><name>getMultilibs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Multilibs</name></expr>;</return> }</block>



<name>bool</name> <macro><name>getBiarchSibling</name><argument_list>(<argument>Multilib &amp;M</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><specifier>const</specifier> <name>GCCVersion</name> <operator>&amp;</operator><macro><name>getVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Version</name></expr>;</return> }</block>


<name>void</name> <macro><name>print</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
<specifier>static</specifier> <name>void</name>
<call><name>CollectLibDirsAndTriples</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>TargetTriple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>BiarchTriple</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>LibDirs</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>TripleAliases</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>BiarchLibDirs</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>BiarchTripleAliases</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>AddDefaultGCCPrefixes</name><argument_list>(<argument>const llvm::Triple &amp;TargetTriple</argument>,
<argument>SmallVectorImpl&lt;std::string&gt; &amp;Prefixes</argument>,
<argument>StringRef SysRoot</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>ScanGCCForMultilibs</name><argument_list>(<argument>const llvm::Triple &amp;TargetTriple</argument>,
<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>StringRef Path</argument>,
<argument>bool NeedsBiarchSuffix = false</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>ScanLibDirForGCCTriple</name><argument_list>(<argument>const llvm::Triple &amp;TargetArch</argument>,
<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>const std::string &amp;LibDir</argument>,
<argument>StringRef CandidateTriple</argument>,
<argument>bool NeedsBiarchSuffix</argument>, <argument>bool GCCDirExists</argument>,
<argument>bool GCCCrossDirExists</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <call><name>ScanGentooConfigs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>TargetTriple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CandidateTriples</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>BiarchTriples</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>ScanGentooGccConfig</name><argument_list>(<argument>const llvm::Triple &amp;TargetTriple</argument>,
<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>StringRef CandidateTriple</argument>,
<argument>bool NeedsBiarchSuffix = false</argument>)</argument_list></macro></expr>;
}</block></expr>;

<expr><name>protected</name><operator>:</operator>
<name>GCCInstallationDetector</name> <name>GCCInstallation</name></expr>;
<expr><name>CudaInstallationDetector</name> <name>CudaInstallation</name></expr>;
<expr><name>RocmInstallationDetector</name> <name>RocmInstallation</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>Generic_GCC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><macro><name>Generic_GCC</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>printVerboseInfo</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsUnwindTablesDefault</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPICDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPIEDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPICDefaultForced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>IsIntegratedAssemblerDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator>
<macro><name>TranslateArgs</name><argument_list>(<argument>const llvm::opt::DerivedArgList &amp;Args</argument>, <argument>StringRef BoundArch</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>Tool</name> <operator>*</operator><macro><name>getTool</name><argument_list>(<argument>Action::ActionClass AC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Tool</name> <operator>*</operator><macro><name>buildAssembler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Tool</name> <operator>*</operator><macro><name>buildLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;





<expr><name>bool</name> <macro><name>isTarget64Bit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isArch64Bit</name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>bool</name> <macro><name>isTarget32Bit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isArch32Bit</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <call><name>PushPPaths</name><argument_list>(<argument><expr><name>ToolChain</name><operator>::</operator><name>path_list</name> <operator>&amp;</operator><name>PPaths</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>AddMultilibPaths</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>SysRoot</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>OSLibDir</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>MultiarchTriple</name></expr></argument>,
<argument><expr><name>path_list</name> <operator>&amp;</operator><name>Paths</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>AddMultiarchPaths</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>SysRoot</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>OSLibDir</name></expr></argument>, <argument><expr><name>path_list</name> <operator>&amp;</operator><name>Paths</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <macro><name>AddMultilibIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>void</name> <macro><name>AddClangCXXStdlibIncludeArgs</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>virtual</name> <name>void</name>
<macro><name>addLibCxxIncludePaths</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name>
<macro><name>addLibStdCxxIncludePaths</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>addGCCLibStdCxxIncludePaths</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>StringRef DebianMultiarch</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>addLibStdCXXIncludePaths</name><argument_list>(<argument>Twine IncludeDir</argument>, <argument>StringRef Triple</argument>,
<argument>Twine IncludeSuffix</argument>,
<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>bool DetectDebian = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>private</name><operator>:</operator>
<name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>tools</name><operator>::</operator><name>gcc</name><operator>::</operator><name>Preprocessor</name></expr></argument>&gt;</argument_list></name> <name>Preprocess</name></expr>;
<expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>tools</name><operator>::</operator><name>gcc</name><operator>::</operator><name>Compiler</name></expr></argument>&gt;</argument_list></name> <name>Compile</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>Generic_ELF</name> <operator>:</operator> <name>public</name> <name>Generic_GCC</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>Generic_ELF</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Generic_GCC</name><argument_list>(<argument>D</argument>, <argument>Triple</argument>, <argument>Args</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>addClangTargetOptions</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getDynamicLinker</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{}</block></expr>;</return>
}</block>

<name>virtual</name> <name>void</name> <macro><name>addExtraOpts</name><argument_list>(<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <block>{}</block>
}</expr>;

}</block></expr>
}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
