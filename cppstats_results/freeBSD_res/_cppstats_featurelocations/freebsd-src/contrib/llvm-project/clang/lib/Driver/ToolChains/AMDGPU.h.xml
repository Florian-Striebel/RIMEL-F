<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AMDGPU_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_AMDGPU_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Gnu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ROCm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Tool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/ToolChain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TargetParser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>tools</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>amdgpu</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Linker</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Linker</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"amdgpu::Linker"</literal></argument>, <argument><literal type="string">"ld.lld"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>isLinkJob</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>getAMDGPUTargetFeatures</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>toolchains</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>AMDGPUToolChain</name> <range>: <expr><name>public</name> <name>Generic_ELF</name> <block>{
<expr><name>protected</name><operator>:</operator>
<specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>options</name><operator>::</operator><name>ID</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>OptionsDefault</name></expr>;

<expr><name>Tool</name> <operator>*</operator><macro><name>buildLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>StringRef</name> <macro><name>getOptionDefault</name><argument_list>(<argument>options::ID OptID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>opt</name> <operator>=</operator> <call><name><name>OptionsDefault</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>OptID</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>opt</name> <operator>!=</operator> <call><name><name>OptionsDefault</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No Default for Option"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>opt</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<call><name>AMDGPUToolChain</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;
<expr><name>unsigned</name> <macro><name>GetDefaultDwarfVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="number">4</literal></expr>;</return> }</block>
<name>bool</name> <macro><name>IsIntegratedAssemblerDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>IsMathErrnoDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>useIntegratedAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isCrossCompiling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isPICDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isPIEDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isPICDefaultForced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>SupportsProfiling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator>
<macro><name>TranslateArgs</name><argument_list>(<argument>const llvm::opt::DerivedArgList &amp;Args</argument>, <argument>StringRef BoundArch</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>addClangTargetOptions</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><specifier>static</specifier> <name>bool</name> <macro><name>getDefaultDenormsAreZeroForTarget</name><argument_list>(<argument>llvm::AMDGPU::GPUKind GPUKind</argument>)</argument_list></macro></expr>;

<expr><name>llvm</name><operator>::</operator><name>DenormalMode</name> <macro><name>getDefaultDenormalModeForType</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const llvm::fltSemantics *FPType = nullptr</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isWave64</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::AMDGPU::GPUKind Kind</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>HasNativeLLVMSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>


<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getDefaultLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"ld.lld"</literal></expr>;</return> }</block>


<name>bool</name> <macro><name>shouldSkipArgument</name><argument_list>(<argument>const llvm::opt::Arg *Arg</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>getSystemGPUArch</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>std::string &amp;GPUArch</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <name>void</name> <macro><name>checkTargetID</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


struct <expr><name>ParsedTargetIDType</name> <block>{
<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>OptionalTargetID</name></expr>;
<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>OptionalGPUArch</name></expr>;
<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>OptionalFeatures</name></expr>;
}</block></expr>;



<expr><name>ParsedTargetIDType</name>
<macro><name>getParsedTargetID</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>StringRef</name> <macro><name>getGPUArch</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>detectSystemGPUs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>SmallVector&lt;std::string</argument>, <argument><literal type="number">1</literal>&gt; &amp;GPUArchs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>ROCMToolChain</name> <range>: <expr><name>public</name> <name>AMDGPUToolChain</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ROCMToolChain</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name>
<macro><name>addClangTargetOptions</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>&gt;</argument_list></name>
<macro><name>getCommonDeviceLibNames</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>const std::string &amp;GPUArch</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
