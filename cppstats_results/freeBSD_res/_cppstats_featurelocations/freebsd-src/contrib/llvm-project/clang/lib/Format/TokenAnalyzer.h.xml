<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/TokenAnalyzer.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_TOKENANALYZER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_TOKENANALYZER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"AffectedRangeManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FormatToken.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FormatTokenLexer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TokenAnnotator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"UnwrappedLineParser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Format/Format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Debug.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Environment</name> <block>{<block_content>
<label><name>public</name>:</label>





<macro><name>Environment</name><argument_list>(<argument>StringRef Code</argument>, <argument>StringRef FileName</argument>,
<argument>ArrayRef&lt;tooling::Range&gt; Ranges</argument>, <argument>unsigned FirstStartColumn = <literal type="number">0</literal></argument>,
<argument>unsigned NextStartColumn = <literal type="number">0</literal></argument>, <argument>unsigned LastStartColumn = <literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>FileID</name> <macro><name>getFileID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ID</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><macro><name>getSourceManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SM</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <macro><name>getCharRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CharRanges</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>getFirstStartColumn</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FirstStartColumn</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>getNextStartColumn</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NextStartColumn</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>getLastStartColumn</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LastStartColumn</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SourceManagerForFile</name></expr></argument>&gt;</argument_list></name> <name>VirtualSM</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileID</name></type> <name>ID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>CharRanges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>FirstStartColumn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NextStartColumn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>LastStartColumn</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TokenAnalyzer</name> <range>: <expr><name>public</name> <name>UnwrappedLineConsumer</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>TokenAnalyzer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Environment</name> <operator>&amp;</operator><name>Env</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FormatStyle</name> <operator>&amp;</operator><name>Style</name></expr></argument>)</argument_list></call></expr>;

<expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>tooling</name><operator>::</operator><name>Replacements</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <call><name>process</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>tooling</name><operator>::</operator><name>Replacements</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<call><name>analyze</name><argument_list>(<argument><expr><name>TokenAnnotator</name> <operator>&amp;</operator><name>Annotator</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>AnnotatedLine</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>AnnotatedLines</name></expr></argument>,
<argument><expr><name>FormatTokenLexer</name> <operator>&amp;</operator><name>Tokens</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>void</name> <macro><name>consumeUnwrappedLine</name><argument_list>(<argument>const UnwrappedLine &amp;TheLine</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>finishRun</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>FormatStyle</name> <name>Style</name></expr>;

<expr><specifier>const</specifier> <name>Environment</name> <operator>&amp;</operator><name>Env</name></expr>;

<expr><name>AffectedRangeManager</name> <name>AffectedRangeMgr</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>UnwrappedLine</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>UnwrappedLines</name></expr>;
<expr><name>encoding</name><operator>::</operator><name>Encoding</name> <name>Encoding</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
