<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGCall.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGCALL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGCALL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EHScopeStack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTFwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CanonicalType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/GlobalDecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Value.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ABIInfo.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>AttributeList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Value</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>CGCalleeInfo</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>FunctionProtoType</name> <modifier>*</modifier></type><name>CalleeProtoTy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GlobalDecl</name></type> <name>CalleeDecl</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>CGCalleeInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>CalleeProtoTy</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CalleeDecl</name><argument_list>()</argument_list></macro> <expr><block>{}</block>
<macro><name>CGCalleeInfo</name><argument_list>(<argument>const FunctionProtoType *calleeProtoTy</argument>, <argument>GlobalDecl calleeDecl</argument>)</argument_list></macro>
<operator>:</operator> <call><name>CalleeProtoTy</name><argument_list>(<argument><expr><name>calleeProtoTy</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CalleeDecl</name><argument_list>(<argument>calleeDecl</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>CGCalleeInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionProtoType</name> <operator>*</operator><name>calleeProtoTy</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CalleeProtoTy</name><argument_list>(<argument><expr><name>calleeProtoTy</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CalleeDecl</name><argument_list>()</argument_list></macro> <expr><block>{}</block>
<macro><name>CGCalleeInfo</name><argument_list>(<argument>GlobalDecl calleeDecl</argument>)</argument_list></macro>
<operator>:</operator> <call><name>CalleeProtoTy</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CalleeDecl</name><argument_list>(<argument>calleeDecl</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>FunctionProtoType</name> <operator>*</operator><macro><name>getCalleeFunctionProtoType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CalleeProtoTy</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>GlobalDecl</name> <macro><name>getCalleeDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CalleeDecl</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CGCallee</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SpecialKind</name> <range>: <expr><name>uintptr_t</name> <block>{
<expr><name>Invalid</name></expr>,
<expr><name>Builtin</name></expr>,
<expr><name>PseudoDestructor</name></expr>,
<expr><name>Virtual</name></expr>,

<expr><name>Last</name> <operator>=</operator> <name>Virtual</name></expr>
}</block></expr></range></decl>;</decl_stmt>

<struct>struct <name>BuiltinInfoStorage</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ID</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>PseudoDestructorInfoStorage</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXXPseudoDestructorExpr</name> <modifier>*</modifier></type><name>Expr</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>VirtualInfoStorage</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CallExpr</name> <modifier>*</modifier></type><name>CE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GlobalDecl</name></type> <name>MD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Address</name></type> <name>Addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>FunctionType</name> <operator>*</operator><name>FTy</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>SpecialKind</name></type> <name>KindOrFunctionPointer</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>CGCalleeInfo</name></type> <name>AbstractInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BuiltinInfoStorage</name></type> <name>BuiltinInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PseudoDestructorInfoStorage</name></type> <name>PseudoDestructorInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VirtualInfoStorage</name></type> <name>VirtualInfo</name></decl>;</decl_stmt>
}</block>;</union>

<macro><name>explicit</name></macro> <macro><name>CGCallee</name><argument_list>(<argument>SpecialKind kind</argument>)</argument_list></macro> : <macro><name>KindOrFunctionPointer</name><argument_list>(<argument>kind</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<macro><name>CGCallee</name><argument_list>(<argument>const FunctionDecl *builtinDecl</argument>, <argument>unsigned builtinID</argument>)</argument_list></macro>
: <macro><name>KindOrFunctionPointer</name><argument_list>(<argument>SpecialKind::Builtin</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>BuiltinInfo</name><operator>.</operator><name>Decl</name></name> <operator>=</operator> <name>builtinDecl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BuiltinInfo</name><operator>.</operator><name>ID</name></name> <operator>=</operator> <name>builtinID</name></expr>;</expr_stmt>
</block_content>}</block>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CGCallee</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>KindOrFunctionPointer</name><argument_list>(<argument>SpecialKind::Invalid</argument>)</argument_list></macro> <block>{}</block>



<call><name>CGCallee</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CGCalleeInfo</name> <operator>&amp;</operator><name>abstractInfo</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>functionPtr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>KindOrFunctionPointer</name><argument_list>(
<argument>SpecialKind(reinterpret_cast&lt;uintptr_t&gt;(functionPtr))</argument>)</argument_list></macro> <block>{
<expr><name>AbstractInfo</name> <operator>=</operator> <name>abstractInfo</name></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>functionPtr</name> <operator>&amp;&amp;</operator> <literal type="string">"configuring callee without function pointer"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>functionPtr</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isPointerTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>functionPtr</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getPointerElementType</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isFunctionTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <name>CGCallee</name> <macro><name>forBuiltin</name><argument_list>(<argument>unsigned builtinID</argument>,
<argument>const FunctionDecl *builtinDecl</argument>)</argument_list></macro> <block>{
<expr><name>CGCallee</name> <call><name>result</name><argument_list>(<argument><expr><name>SpecialKind</name><operator>::</operator><name>Builtin</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>result</name><operator>.</operator><name>BuiltinInfo</name><operator>.</operator><name>Decl</name></name> <operator>=</operator> <name>builtinDecl</name></expr>;
<expr><name><name>result</name><operator>.</operator><name>BuiltinInfo</name><operator>.</operator><name>ID</name></name> <operator>=</operator> <name>builtinID</name></expr>;
<return>return <expr><name>result</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>CGCallee</name></type> <name>forPseudoDestructor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXPseudoDestructorExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>CGCallee</name></type> <name>result</name><argument_list>(<argument><expr><name>SpecialKind</name><operator>::</operator><name>PseudoDestructor</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>PseudoDestructorInfo</name><operator>.</operator><name>Expr</name></name> <operator>=</operator> <name>E</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>CGCallee</name></type> <name>forDirect</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>functionPtr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CGCalleeInfo</name> <operator>&amp;</operator><name>abstractInfo</name> <operator>=</operator> <call><name>CGCalleeInfo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>CGCallee</name><argument_list>(<argument><expr><name>abstractInfo</name></expr></argument>, <argument><expr><name>functionPtr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CGCallee</name></type> <name>forDirect</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FunctionCallee</name> <name>functionPtr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CGCalleeInfo</name> <operator>&amp;</operator><name>abstractInfo</name> <operator>=</operator> <call><name>CGCalleeInfo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>CGCallee</name><argument_list>(<argument><expr><name>abstractInfo</name></expr></argument>, <argument><expr><call><name><name>functionPtr</name><operator>.</operator><name>getCallee</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CGCallee</name></type> <name>forVirtual</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CallExpr</name> <operator>*</operator><name>CE</name></expr></argument>, <argument><expr><name>GlobalDecl</name> <name>MD</name></expr></argument>, <argument><expr><name>Address</name> <name>Addr</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>FunctionType</name> <operator>*</operator><name>FTy</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>CGCallee</name></type> <name>result</name><argument_list>(<argument><expr><name>SpecialKind</name><operator>::</operator><name>Virtual</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>VirtualInfo</name><operator>.</operator><name>CE</name></name> <operator>=</operator> <name>CE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>VirtualInfo</name><operator>.</operator><name>MD</name></name> <operator>=</operator> <name>MD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>VirtualInfo</name><operator>.</operator><name>Addr</name></name> <operator>=</operator> <name>Addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>VirtualInfo</name><operator>.</operator><name>FTy</name></name> <operator>=</operator> <name>FTy</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isBuiltin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>KindOrFunctionPointer</name> <operator>==</operator> <name>SpecialKind</name><operator>::</operator><name>Builtin</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><macro><name>getBuiltinDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isBuiltin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>BuiltinInfo</name><operator>.</operator><name>Decl</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getBuiltinID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isBuiltin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>BuiltinInfo</name><operator>.</operator><name>ID</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isPseudoDestructor</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>KindOrFunctionPointer</name> <operator>==</operator> <name>SpecialKind</name><operator>::</operator><name>PseudoDestructor</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>CXXPseudoDestructorExpr</name> <operator>*</operator><macro><name>getPseudoDestructorExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isPseudoDestructor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>PseudoDestructorInfo</name><operator>.</operator><name>Expr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isOrdinary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>uintptr_t</name><argument_list>(<argument><expr><name>KindOrFunctionPointer</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>uintptr_t</name><argument_list>(<argument><expr><name>SpecialKind</name><operator>::</operator><name>Last</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CGCalleeInfo</name> <macro><name>getAbstractInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isVirtual</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>VirtualInfo</name><operator>.</operator><name>MD</name></name></expr>;</return></block_content></block></if></if_stmt>
<call><name>assert</name><argument_list>(<argument><expr><call><name>isOrdinary</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><name>AbstractInfo</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getFunctionPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isOrdinary</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>uintptr_t</name><argument_list>(<argument><expr><name>KindOrFunctionPointer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setFunctionPointer</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>functionPtr</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isOrdinary</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>KindOrFunctionPointer</name> <operator>=</operator>
<call><name>SpecialKind</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>functionPtr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isVirtual</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>KindOrFunctionPointer</name> <operator>==</operator> <name>SpecialKind</name><operator>::</operator><name>Virtual</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>CallExpr</name> <operator>*</operator><macro><name>getVirtualCallExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isVirtual</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>VirtualInfo</name><operator>.</operator><name>CE</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>GlobalDecl</name> <macro><name>getVirtualMethodDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isVirtual</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>VirtualInfo</name><operator>.</operator><name>MD</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>Address</name> <macro><name>getThisAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isVirtual</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>VirtualInfo</name><operator>.</operator><name>Addr</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>FunctionType</name> <operator>*</operator><macro><name>getVirtualFunctionType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isVirtual</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>VirtualInfo</name><operator>.</operator><name>FTy</name></name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>CGCallee</name></type> <name>prepareConcreteCallee</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>CallArg</name> <block>{
<label><name>private</name>:</label>
<union>union <block>{
<decl_stmt><decl><type><name>RValue</name></type> <name>RV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LValue</name></type> <name>LV</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>bool</name></type> <name>HasLV</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>mutable</name> <name>bool</name></type> <name>IsUsed</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>QualType</name></type> <name>Ty</name></decl>;</decl_stmt>
<macro><name>CallArg</name><argument_list>(<argument>RValue rv</argument>, <argument>QualType ty</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>RV</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasLV</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsUsed</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Ty</name><argument_list>(<argument>ty</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>CallArg</name><argument_list>(<argument>LValue lv</argument>, <argument>QualType ty</argument>)</argument_list></macro>
<operator>:</operator> <call><name>LV</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasLV</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsUsed</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Ty</name><argument_list>(<argument>ty</argument>)</argument_list></macro> <expr><block>{}</block>
<name>bool</name> <macro><name>hasLValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasLV</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>QualType</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ty</name></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>RValue</name></type> <name>getRValue</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>LValue</name> <macro><name>getKnownLValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>HasLV</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>IsUsed</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>LV</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>RValue</name> <macro><name>getKnownRValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>HasLV</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>IsUsed</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>RV</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setRValue</name><parameter_list>(<parameter><decl><type><name>RValue</name></type> <name>_RV</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>HasLV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RV</name> <operator>=</operator> <name>_RV</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isAggregate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasLV</name> <operator>||</operator> <call><name><name>RV</name><operator>.</operator><name>isAggregate</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>copyInto</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>, <argument><expr><name>Address</name> <name>A</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name>class</name></type> <name>CallArgList</name> <range>: <expr><name>public</name> <name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CallArg</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>CallArgList</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>StackBase</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>

struct <name>Writeback</name> <block>{


<expr><name>LValue</name> <name>Source</name></expr>;


<expr><name>Address</name> <name>Temporary</name></expr>;


<expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>ToUse</name></expr>;
}</block></expr>;

struct <expr><name>CallArgCleanup</name> <block>{
<expr><name>EHScopeStack</name><operator>::</operator><name>stable_iterator</name> <name>Cleanup</name></expr>;



<expr><name>llvm</name><operator>::</operator><name>Instruction</name> <operator>*</operator><name>IsActiveIP</name></expr>;
}</block></expr>;

<expr><name>void</name> <macro><name>add</name><argument_list>(<argument>RValue rvalue</argument>, <argument>QualType type</argument>)</argument_list></macro> <block>{ <expr><call><name>push_back</name><argument_list>(<argument><expr><call><name>CallArg</name><argument_list>(<argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>; }</block>

<name>void</name> <macro><name>addUncopiedAggregate</name><argument_list>(<argument>LValue LV</argument>, <argument>QualType type</argument>)</argument_list></macro> <block>{
<expr><call><name>push_back</name><argument_list>(<argument><expr><call><name>CallArg</name><argument_list>(<argument><expr><name>LV</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>




<name>void</name> <macro><name>addFrom</name><argument_list>(<argument>const CallArgList &amp;other</argument>)</argument_list></macro> <block>{
<expr><call><name>insert</name><argument_list>(<argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Writebacks</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>Writebacks</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>Writebacks</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>other</name><operator>.</operator><name>Writebacks</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>CleanupsToDeactivate</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>CleanupsToDeactivate</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>other</name><operator>.</operator><name>CleanupsToDeactivate</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>other</name><operator>.</operator><name>CleanupsToDeactivate</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>StackBase</name> <operator>&amp;&amp;</operator> <name><name>other</name><operator>.</operator><name>StackBase</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"can't merge stackbases"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>StackBase</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>StackBase</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>StackBase</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>void</name> <macro><name>addWriteback</name><argument_list>(<argument>LValue srcLV</argument>, <argument>Address temporary</argument>, <argument>llvm::Value *toUse</argument>)</argument_list></macro> <block>{
<expr><name>Writeback</name> <name>writeback</name> <operator>=</operator> <block>{<expr><name>srcLV</name></expr>, <expr><name>temporary</name></expr>, <expr><name>toUse</name></expr>}</block></expr>;
<expr><call><name><name>Writebacks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>writeback</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>hasWritebacks</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>Writebacks</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Writeback</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></argument>&gt;</argument_list></name>
<name>writeback_const_range</name></expr>;</expr_stmt></typedef>

<name>writeback_const_range</name> <macro><name>writebacks</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>writeback_const_range</name><argument_list>(<argument><expr><call><name><name>Writebacks</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Writebacks</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>addArgCleanupDeactivation</name><argument_list>(<argument>EHScopeStack::stable_iterator Cleanup</argument>,
<argument>llvm::Instruction *IsActiveIP</argument>)</argument_list></macro> <block>{
<expr><name>CallArgCleanup</name> <name>ArgCleanup</name></expr>;
<expr><name><name>ArgCleanup</name><operator>.</operator><name>Cleanup</name></name> <operator>=</operator> <name>Cleanup</name></expr>;
<expr><name><name>ArgCleanup</name><operator>.</operator><name>IsActiveIP</name></name> <operator>=</operator> <name>IsActiveIP</name></expr>;
<expr><call><name><name>CleanupsToDeactivate</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ArgCleanup</name></expr></argument>)</argument_list></call></expr>;
}</block></block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CallArgCleanup</name></expr></argument>&gt;</argument_list></name> <macro><name>getCleanupsToDeactivate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CleanupsToDeactivate</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<function_decl><type><name>void</name></type> <name>allocateArgumentMemory</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Instruction</name> <operator>*</operator><macro><name>getStackBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>StackBase</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>freeArgumentMemory</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isUsingInAlloca</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>StackBase</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Writeback</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>Writebacks</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CallArgCleanup</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>CleanupsToDeactivate</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CallInst</name> <operator>*</operator><name>StackBase</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>FunctionArgList</name> <range>: <expr><name>public</name> <name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ReturnValueSlot</name> <block>{<block_content>
<decl_stmt><decl><type><name>Address</name></type> <name>Addr</name> <init>= <expr><name>Address</name><operator>::</operator><call><name>invalid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsVolatile</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IsUnused</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IsExternallyDestructed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ReturnValueSlot</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>IsVolatile</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsUnused</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsExternallyDestructed</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>ReturnValueSlot</name><argument_list>(<argument>Address Addr</argument>, <argument>bool IsVolatile</argument>, <argument>bool IsUnused = false</argument>,
<argument>bool IsExternallyDestructed = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Addr</name><argument_list>(<argument><expr><name>Addr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsVolatile</name><argument_list>(<argument><expr><name>IsVolatile</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsUnused</name><argument_list>(<argument><expr><name>IsUnused</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>IsExternallyDestructed</name><argument_list>(<argument>IsExternallyDestructed</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>Addr</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isVolatile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsVolatile</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Address</name> <macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Addr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUnused</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsUnused</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isExternallyDestructed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsExternallyDestructed</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
