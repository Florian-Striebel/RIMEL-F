<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/__clang_cuda_math.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_CUDA_MATH_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_CUDA_MATH_H__</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file is for CUDA compilation only."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&lt;</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This file is intended to be used with CUDA-9+ only.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__DEVICE__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static constexpr __attribute__((always_inline, nothrow))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static __attribute__((always_inline, nothrow))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static __device__ __forceinline__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__DEVICE_VOID__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__cplusplus</name> <operator>&lt;</operator> <literal type="number">201402L</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE_VOID__</name></cpp:macro> <cpp:value>static __attribute__((always_inline, nothrow))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE_VOID__</name></cpp:macro> <cpp:value>__DEVICE__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__FAST_OR_SLOW"</cpp:literal><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_CUDA_APPROX_TRANSCENDENTALS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FAST_OR_SLOW</name><parameter_list>(<parameter><type><name>fast</name></type></parameter>, <parameter><type><name>slow</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fast</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FAST_OR_SLOW</name><parameter_list>(<parameter><type><name>fast</name></type></parameter>, <parameter><type><name>slow</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>slow</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__DEVICE__</name> <name>int</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_abs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>fabs</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_fabs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>acos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_acos</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>acosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_acosf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>acosh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_acosh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>acoshf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_acoshf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>asin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_asin</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>asinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_asinf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>asinh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_asinh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>asinhf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_asinhf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>atan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_atan</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>atan2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_atan2</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>atan2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_atan2f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>atanf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_atanf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>atanh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_atanh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>atanhf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_atanhf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>cbrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_cbrt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>cbrtf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_cbrtf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>ceil</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_ceil</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>ceilf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_ceilf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>copysign</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_copysign</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>copysignf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_copysignf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>cos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_cos</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>cosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>__FAST_OR_SLOW</name><argument_list>(<argument><expr><name>__nv_fast_cosf</name></expr></argument>, <argument><expr><name>__nv_cosf</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>cosh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_cosh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>coshf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_coshf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>cospi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_cospi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>cospif</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_cospif</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>cyl_bessel_i0</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_cyl_bessel_i0</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>cyl_bessel_i0f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_cyl_bessel_i0f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>cyl_bessel_i1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_cyl_bessel_i1</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>cyl_bessel_i1f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_cyl_bessel_i1f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>erf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_erf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>erfc</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_erfc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>erfcf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_erfcf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>erfcinv</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_erfcinv</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>erfcinvf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_erfcinvf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>erfcx</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_erfcx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>erfcxf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_erfcxf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>erff</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_erff</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>erfinv</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_erfinv</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>erfinvf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_erfinvf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_exp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>exp10</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_exp10</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>exp10f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_exp10f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>exp2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_exp2</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>exp2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_exp2f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>expf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_expf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>expm1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_expm1</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>expm1f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_expm1f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>fabsf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_fabsf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>fdim</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_fdim</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>fdimf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_fdimf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>fdivide</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>fdividef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FAST_MATH__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>__CUDA_PREC_DIV</name></expr></cpp:if>
<return>return <expr><call><name>__nv_fast_fdividef</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>floor</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__f</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_floor</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>floorf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__f</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_floorf</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>fma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_fma</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>fmaf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_fmaf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>fmax</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_fmax</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>fmaxf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_fmaxf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>fmin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_fmin</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>fminf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_fminf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>fmod</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_fmod</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>fmodf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_fmodf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>frexp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_frexp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>frexpf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_frexpf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>hypot</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_hypot</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>hypotf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_hypotf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>ilogb</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_ilogb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>ilogbf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_ilogbf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>j0</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_j0</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>j0f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_j0f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>j1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_j1</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>j1f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_j1f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>jn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_jn</name><argument_list>(<argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>jnf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_jnf</name><argument_list>(<argument><expr><name>__n</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>labs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_llabs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>labs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_abs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>ldexp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_ldexp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>ldexpf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_ldexpf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>lgamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_lgamma</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>lgammaf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_lgammaf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llabs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_llabs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llmax</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_llmax</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llmin</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_llmin</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llrint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_llrint</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llrintf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_llrintf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llround</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_llround</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name> <name>long</name></type> <name>llroundf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_llroundf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>round</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_round</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>roundf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_roundf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_log</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>log10</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_log10</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>log10f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_log10f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>log1p</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_log1p</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>log1pf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_log1pf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>log2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_log2</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>log2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>__FAST_OR_SLOW</name><argument_list>(<argument><expr><name>__nv_fast_log2f</name></expr></argument>, <argument><expr><name>__nv_log2f</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>logb</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_logb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>logbf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_logbf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>logf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>__FAST_OR_SLOW</name><argument_list>(<argument><expr><name>__nv_fast_logf</name></expr></argument>, <argument><expr><name>__nv_logf</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>lrint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>llrint</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>lrintf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__float2ll_rn</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>lround</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>llround</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>lroundf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>llroundf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>lrint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>long</name><operator>)</operator><call><name>rint</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>lrintf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__float2int_rn</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>lround</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>round</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>long</name></type> <name>lroundf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>roundf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_max</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_min</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>modf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_modf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>modff</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_modff</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>nearbyint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_nearbyint</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>nearbyintf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_nearbyintf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>nextafter</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_nextafter</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>nextafterf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_nextafterf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>norm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__dim</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>__t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_norm</name><argument_list>(<argument><expr><name>__dim</name></expr></argument>, <argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>norm3d</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_norm3d</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>norm3df</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_norm3df</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>norm4d</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_norm4d</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>norm4df</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_norm4df</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>normcdf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_normcdf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>normcdff</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_normcdff</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>normcdfinv</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_normcdfinv</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>normcdfinvf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_normcdfinvf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>normf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__dim</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_normf</name><argument_list>(<argument><expr><name>__dim</name></expr></argument>, <argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_pow</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>powf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_powf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>powi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_powi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>powif</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_powif</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>rcbrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_rcbrt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>rcbrtf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_rcbrtf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>remainder</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_remainder</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>remainderf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_remainderf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>remquo</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_remquo</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>remquof</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_remquof</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>rhypot</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_rhypot</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>rhypotf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_rhypotf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name> <name>double</name></type> <name>rint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_rint</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>rintf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__builtin_rintf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>rnorm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_rnorm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>rnorm3d</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_rnorm3d</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>rnorm3df</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_rnorm3df</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>rnorm4d</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_rnorm4d</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>rnorm4df</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_rnorm4df</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>rnormf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__dim</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_rnormf</name><argument_list>(<argument><expr><name>__dim</name></expr></argument>, <argument><expr><name>__t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>rsqrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_rsqrt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>rsqrtf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_rsqrtf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>scalbn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_scalbn</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>scalbnf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_scalbnf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>scalbln</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__b</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>__a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>HUGE_VAL</name></expr> </then><else>: <expr><operator>-</operator><name>HUGE_VAL</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__b</name> <operator>&lt;</operator> <name>INT_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>__a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">0.0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>scalbn</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>scalblnf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__b</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>__a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>HUGE_VALF</name></expr> </then><else>: <expr><operator>-</operator><name>HUGE_VALF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__b</name> <operator>&lt;</operator> <name>INT_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>__a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0.f</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">0.f</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>scalbnf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>sin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_sin</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE_VOID__</name> <name>void</name></type> <name>sincos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_sincos</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE_VOID__</name> <name>void</name></type> <name>sincosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>__FAST_OR_SLOW</name><argument_list>(<argument><expr><name>__nv_fast_sincosf</name></expr></argument>, <argument><expr><name>__nv_sincosf</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE_VOID__</name> <name>void</name></type> <name>sincospi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_sincospi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE_VOID__</name> <name>void</name></type> <name>sincospif</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_sincospif</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__s</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>sinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><call><name>__FAST_OR_SLOW</name><argument_list>(<argument><expr><name>__nv_fast_sinf</name></expr></argument>, <argument><expr><name>__nv_sinf</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>sinh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_sinh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>sinhf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_sinhf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>sinpi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_sinpi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>sinpif</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_sinpif</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>sqrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_sqrt</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>sqrtf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_sqrtf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>tan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_tan</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>tanf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_tanf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>tanh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_tanh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>tanhf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_tanhf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>tgamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_tgamma</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>tgammaf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_tgammaf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>trunc</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_trunc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>truncf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_truncf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>ullmax</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_ullmax</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>ullmin</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_ullmin</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>unsigned</name> <name>int</name></type> <name>umax</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_umax</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>unsigned</name> <name>int</name></type> <name>umin</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nv_umin</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>y0</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_y0</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>y0f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_y0f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>y1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_y1</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>y1f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_y1f</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>double</name></type> <name>yn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_yn</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>float</name></type> <name>ynf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nv_ynf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__DEVICE__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__DEVICE_VOID__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__FAST_OR_SLOW"</cpp:literal><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
